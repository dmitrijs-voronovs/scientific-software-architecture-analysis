id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:575,Testability,log,logging,575,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:678,Testability,test,testing,678,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:207,Testability,test,testing,207,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:300,Testability,test,testing,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:381,Testability,test,testing,381,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html:489,Testability,test,testing,489,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandlerPrivate Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandlerPrivate, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerPrivatestatic; popFrame(Message::Type type)sofa::testing::MainGtestMessageHandlerPrivatestatic; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::MainGtestMessageHandlerPrivatestatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandlerPrivate Class Reference . Static Public Member Functions; static GtestMessageHandler & getInstance ();  ; static void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; static void popFrame (Message::Type type);  . Function details. ◆ getInstance(). GtestMessageHandler & sofa::testing::MainGtestMessageHandlerPrivate::getInstance ; (; ). static . ◆ popFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::popFrame ; (; Message::Type ; type). static . ◆ pushFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). static . sofatestingMainGtestMessageHandlerPrivate; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html:212,Testability,test,testing,212,"﻿. SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandlerPrivate Class Reference . Static Public Member Functions; static GtestMessageHandler & getInstance ();  ; static void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; static void popFrame (Message::Type type);  . Function details. ◆ getInstance(). GtestMessageHandler & sofa::testing::MainGtestMessageHandlerPrivate::getInstance ; (; ). static . ◆ popFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::popFrame ; (; Message::Type ; type). static . ◆ pushFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). static . sofatestingMainGtestMessageHandlerPrivate; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html:532,Testability,test,testing,532,"﻿. SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandlerPrivate Class Reference . Static Public Member Functions; static GtestMessageHandler & getInstance ();  ; static void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; static void popFrame (Message::Type type);  . Function details. ◆ getInstance(). GtestMessageHandler & sofa::testing::MainGtestMessageHandlerPrivate::getInstance ; (; ). static . ◆ popFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::popFrame ; (; Message::Type ; type). static . ◆ pushFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). static . sofatestingMainGtestMessageHandlerPrivate; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html:627,Testability,test,testing,627,"﻿. SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandlerPrivate Class Reference . Static Public Member Functions; static GtestMessageHandler & getInstance ();  ; static void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; static void popFrame (Message::Type type);  . Function details. ◆ getInstance(). GtestMessageHandler & sofa::testing::MainGtestMessageHandlerPrivate::getInstance ; (; ). static . ◆ popFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::popFrame ; (; Message::Type ; type). static . ◆ pushFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). static . sofatestingMainGtestMessageHandlerPrivate; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html:740,Testability,test,testing,740,"﻿. SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandlerPrivate Class Reference . Static Public Member Functions; static GtestMessageHandler & getInstance ();  ; static void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; static void popFrame (Message::Type type);  . Function details. ◆ getInstance(). GtestMessageHandler & sofa::testing::MainGtestMessageHandlerPrivate::getInstance ; (; ). static . ◆ popFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::popFrame ; (; Message::Type ; type). static . ◆ pushFrame(). void sofa::testing::MainGtestMessageHandlerPrivate::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). static . sofatestingMainGtestMessageHandlerPrivate; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler_private.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:197,Testability,test,testing,197,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:290,Testability,log,logging,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:367,Testability,test,testing,367,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html:427,Testability,test,testing,427,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MessageAsTestFailure Member List . This is the complete list of members for sofa::testing::MessageAsTestFailure, including all inherited members. MessageAsTestFailure(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::MessageAsTestFailure; ~MessageAsTestFailure()sofa::testing::MessageAsTestFailurevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:311,Availability,failure,failure,311,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:495,Availability,failure,failure,495,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:326,Integrability,message,message,326,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:195,Testability,test,testing,195,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:465,Testability,log,logging,465,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:517,Testability,log,logging,517,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:613,Testability,log,logging,613,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:779,Testability,test,testing,779,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:844,Testability,log,logging,844,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html:1035,Testability,test,testing,1035,"﻿. SOFA API: sofa::testing::MessageAsTestFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::MessageAsTestFailure Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure when a message of type Message:type is emitted. Better use the macro: EXPECT_MSG_NOEMIT(Error) as a more 'good looking' version of; sofa::helper::logging::MessageAsTestFailure failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  MessageAsTestFailure (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~MessageAsTestFailure ();  . Constructor details. ◆ MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::MessageAsTestFailure ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). DEFINITION OF PUBLIC CLASSES /////////////////////////////////// . ◆ ~MessageAsTestFailure(). sofa::testing::MessageAsTestFailure::~MessageAsTestFailure ; (; ). virtual . sofatestingMessageAsTestFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_message_as_test_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::fixed_array< T, N > Member List . This is the complete list of members for sofa::type::fixed_array< T, N >, including all inherited members. Array typedefsofa::type::fixed_array< T, N >; array() const noexceptsofa::type::fixed_array< T, N >inline; array() noexceptsofa::type::fixed_array< T, N >inline; assign(const T &value) noexceptsofa::type::fixed_array< T, N >inline; at(size_type i)sofa::type::fixed_array< T, N >inline; at(size_type i) constsofa::type::fixed_array< T, N >inline; back()sofa::type::fixed_array< T, N >inline; back() constsofa::type::fixed_array< T, N >inline; begin() noexceptsofa::type::fixed_array< T, N >inline; begin() const noexceptsofa::type::fixed_array< T, N >inline; cbegin() const noexceptsofa::type::fixed_array< T, N >inline; cend() const noexceptsofa::type::fixed_array< T, N >inline; const_iterator typedefsofa::type::fixed_array< T, N >; const_reference typedefsofa::type::fixed_array< T, N >; data() const noexceptsofa::type::fixed_array< T, N >inline; difference_type typedefsofa::type::fixed_array< T, N >; elemssofa::type::fixed_array< T, N >; empty() noexceptsofa::type::fixed_array< T, N >inlinestatic; end() noexceptsofa::type::fixed_array< T, N >inline; end() const noexceptsofa::type::fixed_array< T, N >inline; fixed_array()sofa::type::fixed_array< T, N >inline; fixed_array(value_type r1) noexceptsofa::type::fixed_array< T, N >inlineexplicit; fixed_array(ArgsT &&... r) noexceptsofa::type::fixed_array< T, N >inline; front()sofa::type::fixed_array< T, N >inline; front() constsofa::type::fixed_array< T, N >inline; get() &noexceptsofa::type::fixed_array< T, N >inline; get() const &noexceptsofa::type::fixed_array< T, N >inline; get() &&noexceptsofa::type::fixed_array< T, N >inline; get() const &&noexceptsofa::type::fixed_array< T, N >inline; iterator typedefsofa::type::fixed_array< T, N >; max_size() noexceptsofa::type::fixed_array< T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1fixed__array-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:1994,Security,access,access,1994," Functions; constexpr fixed_array ();  ; template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; template<std::size_t I> ; constexpr T & get () &noexcept;  ; template<std::size_t I> ; constexpr const T & get () const &noexcept;  ; template<std::size_t I> ; constexpr T && get () &&noexcept;  ; template<std::size_t I> ; constexpr const T && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< T, N > &y);  ; constexpr const T * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; template<typename T2 > ; constexpr fixed_array< T, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const T &value) noexcept;  . Static Public Member Functions; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Friends; std::ostream & operator<< (st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:2067,Security,access,access,2067,"egin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; template<std::size_t I> ; constexpr T & get () &noexcept;  ; template<std::size_t I> ; constexpr const T & get () const &noexcept;  ; template<std::size_t I> ; constexpr T && get () &&noexcept;  ; template<std::size_t I> ; constexpr const T && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< T, N > &y);  ; constexpr const T * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; template<typename T2 > ; constexpr fixed_array< T, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const T &value) noexcept;  . Static Public Member Functions; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Friends; std::ostream & operator<< (std::ostream &out, const fixed_array< T, N > &a);  ; std::istream & operator>> (std::istream &in, fixed_array< T, N > &a);  . Attribute details. ◆ elems. template<class T , sofa::Size N> . T sofa::type::fixed_array< T, N >::elems[N] {}. Constructor details. ◆ fixed_array() [1/3]. template<class T , sofa::Size N> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ). inlineconstexpr . ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:3688,Security,access,access,3688,"[N] {}. Constructor details. ◆ fixed_array() [1/3]. template<class T , sofa::Size N> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ). inlineconstexpr . ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; value_type ; r1). inlineexplicitconstexprnoexcept . Specific constructor for 1-element vectors. . ◆ fixed_array() [3/3]. template<class T , sofa::Size N> . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ArgsT &&... ; r). inlineconstexprnoexcept . Function details. ◆ array() [1/2]. template<class T , sofa::Size N> . constexpr const Array& sofa::type::fixed_array< T, N >::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. template<class T , sofa::Size N> . constexpr Array& sofa::type::fixed_array< T, N >::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ assign(). template<class T , sofa::Size N> . constexpr void sofa::type::fixed_array< T, N >::assign ; (; const T & ; value). inlineconstexprnoexcept . ◆ at() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i). inlineconstexpr . ◆ at() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i); const. inlineconstexpr . ◆ back() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<class T , sofa::Size N> . constexpr const_iterator sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:3855,Security,access,access,3855," ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; value_type ; r1). inlineexplicitconstexprnoexcept . Specific constructor for 1-element vectors. . ◆ fixed_array() [3/3]. template<class T , sofa::Size N> . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ArgsT &&... ; r). inlineconstexprnoexcept . Function details. ◆ array() [1/2]. template<class T , sofa::Size N> . constexpr const Array& sofa::type::fixed_array< T, N >::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. template<class T , sofa::Size N> . constexpr Array& sofa::type::fixed_array< T, N >::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ assign(). template<class T , sofa::Size N> . constexpr void sofa::type::fixed_array< T, N >::assign ; (; const T & ; value). inlineconstexprnoexcept . ◆ at() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i). inlineconstexpr . ◆ at() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i); const. inlineconstexpr . ◆ back() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<class T , sofa::Size N> . constexpr const_iterator sofa::type::fixed_array< T, N >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<class T , sofa::Size N> . constexpr iterator sofa::type::fixed_arra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::vector< T, MemoryManager > Member List . This is the complete list of members for sofa::type::vector< T, MemoryManager >, including all inherited members. Alloc typedefsofa::type::vector< T, MemoryManager >; const_reference typedefsofa::type::vector< T, MemoryManager >; fastResize(Size n)sofa::type::vector< T, MemoryManager >inline; fill(const T &value)sofa::type::vector< T, MemoryManager >inline; memory_manager typedefsofa::type::vector< T, MemoryManager >; operator<<(std::ostream &os, const vector &vec)sofa::type::vector< T, MemoryManager >friend; operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, MemoryManager >inline; operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, MemoryManager >inline; operator>>(std::istream &in, vector &vec)sofa::type::vector< T, MemoryManager >friend; operator[](Size n)sofa::type::vector< T, MemoryManager >inline; operator[](Size n) constsofa::type::vector< T, MemoryManager >inline; read(std::istream &in)sofa::type::vector< T, MemoryManager >inline; read(std::istream &in)sofa::type::vector< T, MemoryManager >; read(std::istream &in)sofa::type::vector< T, MemoryManager >; read(std::istream &in)sofa::type::vector< T, MemoryManager >; read(std::istream &in)sofa::type::vector< T, MemoryManager >; read(std::istream &in)sofa::type::vector< T, MemoryManager >; read(std::istream &in)sofa::type::vector< T, MemoryManager >; rebind_to typedefsofa::type::vector< T, MemoryManager >; reference typedefsofa::type::vector< T, MemoryManager >; Size typedefsofa::type::vector< T, MemoryManager >; vector()sofa::type::vector< T, MemoryManager >inline; vector(Size n, const T &value)sofa::type::vector< T, MemoryManager >inline; vector(Size n)sofa::type::vector< T, MemoryManager >inlineexplicit; vector(const std::vector< T, Alloc > &x)sofa::type::vector< T, MemoryManager >inline; vector(const std::initializer_list< T > &t)sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:4523,Safety,safe,safely,4523,"<class T , class MemoryManager = CPUMemoryManager<T>> . sofa::type::vector< T, MemoryManager >::vector ; (; const std::initializer_list< T > & ; t). inline . Brace initializer constructor. . ◆ vector() [6/7]. template<class T , class MemoryManager = CPUMemoryManager<T>> . sofa::type::vector< T, MemoryManager >::vector ; (; std::vector< T, Alloc > && ; v). inline . Move constructor. . ◆ vector() [7/7]. template<class T , class MemoryManager = CPUMemoryManager<T>> . sofa::type::vector< T, MemoryManager >::vector ; (; typename vector< T >::const_iterator ; first, . typename vector< T >::const_iterator ; last . ). inline . Constructor. . Function details. ◆ fastResize(). template<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fastResize ; (; Size ; n). inline . this function is useful for vector_device because it resize the vector without device operation (if device is not valid). Therefore the function is used in asynchronous code to safely resize a vector which is either cuda of type::vector . ◆ fill(). template<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fill ; (; const T & ; value). inline . Sets every element to 'value'. . ◆ operator=() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; const std::vector< T, Alloc > & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; std::vector< T, Alloc > && ; v). inline . Move assignment operator. . ◆ operator[]() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n). inline . Read/write random access. . ◆ operator[]() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::type::vector",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:1477,Security,access,access,1477,"r<T>>; class sofa::type::vector< T, MemoryManager >; Regular vector Using CPUMemoryManager, it has the same behavior as std::vector with extra conveniences:; string serialization (making it usable in Data); operator[] is checking if the index is within the bounds in debug . Public Member Functions;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:1558,Security,access,access,1558,"PUMemoryManager, it has the same behavior as std::vector with extra conveniences:; string serialization (making it usable in Data); operator[] is checking if the index is within the bounds in debug . Public Member Functions;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:5396,Security,access,access,5396,"cause it resize the vector without device operation (if device is not valid). Therefore the function is used in asynchronous code to safely resize a vector which is either cuda of type::vector . ◆ fill(). template<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fill ; (; const T & ; value). inline . Sets every element to 'value'. . ◆ operator=() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; const std::vector< T, Alloc > & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; std::vector< T, Alloc > && ; v). inline . Move assignment operator. . ◆ operator[]() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n). inline . Read/write random access. . ◆ operator[]() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n); const. inline . Read-only random access. . ◆ read() [1/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B, optionally specifying a step using ""A-B-step"" notation. . ◆ read() [2/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B . ◆ read() [3/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned char >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of unsigned char . ◆ read() [4/7]. SOFA_TYPE_API std::istream & sofa::type::vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:5608,Security,access,access,5608,"e<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fill ; (; const T & ; value). inline . Sets every element to 'value'. . ◆ operator=() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; const std::vector< T, Alloc > & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; std::vector< T, Alloc > && ; v). inline . Move assignment operator. . ◆ operator[]() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n). inline . Read/write random access. . ◆ operator[]() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n); const. inline . Read-only random access. . ◆ read() [1/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B, optionally specifying a step using ""A-B-step"" notation. . ◆ read() [2/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B . ◆ read() [3/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned char >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of unsigned char . ◆ read() [4/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. . ◆ read() [5/7]. SOFA_TYPE_API std::istream & sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:643,Usability,usab,usable,643,"﻿. SOFA API: sofa::type::vector< T, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::vector< T, MemoryManager > Class Template Reference . #include <vector_T.h>. Inheritance diagram for sofa::type::vector< T, MemoryManager >:. [legend]; Detailed Description; template<class T, class MemoryManager = CPUMemoryManager<T>>; class sofa::type::vector< T, MemoryManager >; Regular vector Using CPUMemoryManager, it has the same behavior as std::vector with extra conveniences:; string serialization (making it usable in Data); operator[] is checking if the index is within the bounds in debug . Public Member Functions;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html:427,Energy Efficiency,allocate,allocate,427," ALL_DEVICE_VALID enum valuesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; allocate(int d) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; allocSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; begin() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; begin()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; buffer_id_type typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; bufferIsRegisteredsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; bufferObjectsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; bufferRead(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; bufferWrite(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; capacity() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; checkIndex(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; clear()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; clearSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; const_iterator typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; const_reference typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; copyToDevice(int d=0) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHost() constsofa::type::vector_device< T, MemoryManager, Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager > Member List . This is the complete list of members for sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >, including all inherited members. ALL_DEVICE_VALID enum valuesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; allocate(int d) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; allocSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; begin() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; begin()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; buffer_id_type typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; bufferIsRegisteredsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; bufferObjectsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; bufferRead(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; bufferWrite(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; capacity() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; checkIndex(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; clear()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; clearSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; const_iterator typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; const_reference typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; copyToDevice(int d=0) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHost() constsofa::type::vector_device< T, MemoryManager, Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html:1470,Usability,clear,clear,1470,"< T, MemoryManager, DataTypeInfoManager >inlineprotected; allocSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; begin() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; begin()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; buffer_id_type typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; bufferIsRegisteredsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; bufferObjectsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; bufferRead(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; bufferWrite(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; capacity() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; checkIndex(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; clear()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; clearSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; const_iterator typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; const_reference typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; copyToDevice(int d=0) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHost() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHostSingle(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; cptidsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotectedstatic; createBuffer()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; data() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; data()sofa::type::vector_device< T, MemoryManag",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html:1551,Usability,clear,clearSizesofa,1551,"_device< T, MemoryManager, DataTypeInfoManager >protected; begin() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; begin()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; buffer_id_type typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; bufferIsRegisteredsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; bufferObjectsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; bufferRead(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; bufferWrite(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; capacity() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; checkIndex(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; clear()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; clearSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; const_iterator typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; const_reference typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; copyToDevice(int d=0) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHost() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHostSingle(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; cptidsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotectedstatic; createBuffer()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; data() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; data()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; datatypeinfo_manager typedefsofa::type::vector_devic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:1215,Energy Efficiency,allocate,allocated,1215,"cted Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager > Class Template Reference . #include <vector_device.h>. Protected Attributes; Size vectorSize;  Current size of the vector. More...;  ; Size allocSize;  Allocated size on host. More...;  ; Size deviceVectorSize [MemoryManager::MAX_DEVICES];  Initialized size on each device. More...;  ; Size deviceAllocSize [MemoryManager::MAX_DEVICES];  Allocated size on each device. More...;  ; device_pointer devicePointer [MemoryManager::MAX_DEVICES];  Pointer to the data on the GPU side. More...;  ; Size clearSize;  when initializing missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:3892,Energy Efficiency,allocate,allocate,3892,"inter deviceWrite (int gpu=MemoryManager::getBufferDevice());  ; const T * hostRead () const;  ; T * hostWrite ();  ; const T * hostReadAt (int i) const;  ; T * hostWriteAt (int i);  ; buffer_id_type bufferRead (bool create=false);  Get the Buffer Object ID for reading. More...;  ; buffer_id_type bufferWrite (bool create=false);  Get the Buffer Object ID for writing. More...;  ; void push_back (const T &t);  ; void pop_back ();  ; const T & operator[] (Size i) const;  ; T & operator[] (Size i);  ; const T * data () const;  ; T * data ();  ; const T & getCached (Size i) const;  ; const T & getSingle (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; iterator begin ();  ; iterator end ();  ; iterator erase (iterator position);  ; iterator insert (iterator position, const T &x);  . Protected Member Functions; void allocate (int d) const;  ; void copyToHost () const;  ; void copyToDevice (int d=0) const;  ; void copyToHostSingle (Size i) const;  ; void checkIndex (Size i) const;  ; void registerBuffer () const;  ; void mapBuffer () const;  ; void unmapBuffer () const;  ; void unregisterBuffer () const;  ; void createBuffer ();  . Friends; std::ostream & operator<< (std::ostream &os, const vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Input stream. More...;  . Attribute details. ◆ allocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocSize. protected . Allocated size on host. . ◆ bufferIsRegistered. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferIsRegistered. mutableprotected . True if the buffer is registered with CUDA. . ◆ bufferObject. template<class T , class MemoryManager , class",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:6249,Energy Efficiency,allocate,allocated,6249,"nager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clearSize. mutableprotected . when initializing missing device data, up to where entries should be set to zero ? . ◆ cptid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::cptid = 0. inlinestaticprotected . ◆ deviceAllocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceAllocSize[MemoryManager::MAX_DEVICES]. mutableprotected . Allocated size on each device. . ◆ deviceIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceIsValid. mutableprotected . True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) . ◆ devicePointer. template<class T , class MemoryManager , class DataTypeInfoManager > . device_pointer sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::devicePointer[MemoryManager::MAX_DEVICES]. mutableprotected . Pointer to the data on the GPU side. . ◆ deviceVectorSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceVectorSize[MemoryManager::MAX_DEVICES]. mutableprotected . Initialized size on each device. . ◆ hostIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostIsValid. mutableprotected . True if the data on the CPU is currently valid. . ◆ hostPointer. template<class T , class MemoryManager , class DataTypeInfoManager > . T* sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostPointer. protected . Pointer ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:8629,Energy Efficiency,allocate,allocate,8629,"< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; ). inline . ◆ vector_device() [2/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const Size ; n). inlineexplicit . ◆ vector_device() [3/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const vector_device< T, MemoryManager, DataTypeInfoManager > & ; v). inline . ◆ vector_device() [4/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const std::initializer_list< T > & ; t). inline . ◆ ~vector_device(). template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::~vector_device ; (; ). inline . Function details. ◆ allocate(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocate ; (; int ; d); const. inlineprotected . ◆ begin() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const_iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ); const. inline . ◆ bufferRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, Dat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:8785,Energy Efficiency,allocate,allocate,8785,"Manager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const Size ; n). inlineexplicit . ◆ vector_device() [3/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const vector_device< T, MemoryManager, DataTypeInfoManager > & ; v). inline . ◆ vector_device() [4/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const std::initializer_list< T > & ; t). inline . ◆ ~vector_device(). template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::~vector_device ; (; ). inline . Function details. ◆ allocate(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocate ; (; int ; d); const. inlineprotected . ◆ begin() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const_iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ); const. inline . ◆ bufferRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferWrite ; (; bool ; create = false). inline . Get the Buffer Object ID for writing. . ◆ capacity(). templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:2244,Integrability,synchroniz,synchronizing,2244," missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void recreate (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector discarding any old values, without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void invalidateDevice ();  ; void invalidateHost ();  ; void memsetDevice (int v=0);  ; void memsetHost (int v=0);  ; void resize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void swap (vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ; const device_pointer deviceReadAt (int i, int gpu=MemoryManager::getBufferDevice()) const;  ; const device_pointer deviceRead (int gpu=MemoryManager::ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:2459,Integrability,synchroniz,synchronizing,2459,"ith CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void recreate (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector discarding any old values, without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void invalidateDevice ();  ; void invalidateHost ();  ; void memsetDevice (int v=0);  ; void memsetHost (int v=0);  ; void resize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void swap (vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ; const device_pointer deviceReadAt (int i, int gpu=MemoryManager::getBufferDevice()) const;  ; const device_pointer deviceRead (int gpu=MemoryManager::getBufferDevice()) const;  ; device_pointer deviceWriteAt (int i, int gpu=MemoryManager::getBufferDevice());  ; device_pointer deviceWrite (int gpu=MemoryManager::getBufferDevice());  ; const T * hostRead () const;  ; T * hostWrite ();  ; const T * hostReadAt (int i) const;  ; T * hostWriteAt (int i);  ; buffer_id_type bufferRead (bool create=false);  Get the Buffer Object ID for reading. More...;  ; buffer_id_type bufferWrite (bool create=false);  Get the Buffer Object ID for w",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:13663,Integrability,synchroniz,synchronizing,13663,"InfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::empty ; (; ); const. inline . ◆ end() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::end ; (; ). inline . ◆ end() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const_iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::end ; (; ); const. inline . ◆ erase(). template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::erase ; (; iterator ; position). inline . ◆ fastResize(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::fastResize ; (; Size ; s, . Size ; WARP_SIZE = MemoryManager::BSIZE . ). inline . resize the vector without calling constructors or destructors, and without synchronizing the device and host copy . ◆ getCached(). template<class T , class MemoryManager , class DataTypeInfoManager > . const T& sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::getCached ; (; Size ; i); const. inline . ◆ getSingle(). template<class T , class MemoryManager , class DataTypeInfoManager > . const T& sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::getSingle ; (; Size ; i); const. inline . ◆ hostRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . const T* sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostRead ; (; ); const. inline . ◆ hostReadAt(). template<class T , class MemoryManager , class DataTypeInfoManager > . const T* sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostReadAt ; (; int ; i); const. inline . ◆ hostWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . T* sofa::type::vector_device< T, MemoryManag",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:17917,Integrability,synchroniz,synchronizing,17917,"pe::vector_device< T, MemoryManager, DataTypeInfoManager >::operator[] ; (; Size ; i). inline . ◆ operator[]() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const T& sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::operator[] ; (; Size ; i); const. inline . ◆ pop_back(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::pop_back ; (; ). inline . ◆ push_back(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::push_back ; (; const T & ; t). inline . ◆ recreate(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::recreate ; (; Size ; s, . Size ; WARP_SIZE = MemoryManager::BSIZE . ). inline . resize the vector discarding any old values, without calling constructors or destructors, and without synchronizing the device and host copy . ◆ registerBuffer(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::registerBuffer ; (; ); const. inlineprotected . ◆ reserve(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::reserve ; (; Size ; s, . Size ; WARP_SIZE = MemoryManager::BSIZE . ). inline . ◆ resize(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::resize ; (; Size ; s, . Size ; WARP_SIZE = MemoryManager::BSIZE . ). inline . ◆ size(). template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::size ; (; void ; ); const. inline . ◆ swap(). template<class T , class MemoryManager , class",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:887,Usability,clear,clearSize,887,"﻿. SOFA API: sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Static Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager > Class Template Reference . #include <vector_device.h>. Protected Attributes; Size vectorSize;  Current size of the vector. More...;  ; Size allocSize;  Allocated size on host. More...;  ; Size deviceVectorSize [MemoryManager::MAX_DEVICES];  Initialized size on each device. More...;  ; Size deviceAllocSize [MemoryManager::MAX_DEVICES];  Allocated size on each device. More...;  ; device_pointer devicePointer [MemoryManager::MAX_DEVICES];  Pointer to the data on the GPU side. More...;  ; Size clearSize;  when initializing missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capac",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:1847,Usability,clear,clear,1847," missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void recreate (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector discarding any old values, without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void invalidateDevice ();  ; void invalidateHost ();  ; void memsetDevice (int v=0);  ; void memsetHost (int v=0);  ; void resize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void swap (vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ; const device_pointer deviceReadAt (int i, int gpu=MemoryManager::getBufferDevice()) const;  ; const device_pointer deviceRead (int gpu=MemoryManager::ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:5204,Usability,clear,clearSize,5204,");  . Friends; std::ostream & operator<< (std::ostream &os, const vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Input stream. More...;  . Attribute details. ◆ allocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocSize. protected . Allocated size on host. . ◆ bufferIsRegistered. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferIsRegistered. mutableprotected . True if the buffer is registered with CUDA. . ◆ bufferObject. template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferObject. protected . Optional associated buffer ID. . ◆ clearSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clearSize. mutableprotected . when initializing missing device data, up to where entries should be set to zero ? . ◆ cptid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::cptid = 0. inlinestaticprotected . ◆ deviceAllocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceAllocSize[MemoryManager::MAX_DEVICES]. mutableprotected . Allocated size on each device. . ◆ deviceIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceIsValid. mutableprotected . True if the data on the GPU is currently valid (up to the given deviceVectorSize of each devi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:5359,Usability,clear,clearSize,5359," &vec);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Input stream. More...;  . Attribute details. ◆ allocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocSize. protected . Allocated size on host. . ◆ bufferIsRegistered. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferIsRegistered. mutableprotected . True if the buffer is registered with CUDA. . ◆ bufferObject. template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferObject. protected . Optional associated buffer ID. . ◆ clearSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clearSize. mutableprotected . when initializing missing device data, up to where entries should be set to zero ? . ◆ cptid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::cptid = 0. inlinestaticprotected . ◆ deviceAllocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceAllocSize[MemoryManager::MAX_DEVICES]. mutableprotected . Allocated size on each device. . ◆ deviceIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceIsValid. mutableprotected . True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) . ◆ devicePointer. template<class T , class Memo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:10148,Usability,clear,clear,10148,"< T, MemoryManager, DataTypeInfoManager >::begin ; (; ); const. inline . ◆ bufferRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferWrite ; (; bool ; create = false). inline . Get the Buffer Object ID for writing. . ◆ capacity(). template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::capacity ; (; ); const. inline . ◆ checkIndex(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::checkIndex ; (; Size ; i); const. inlineprotected . ◆ clear(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clear ; (; ). inline . ◆ copyToDevice(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToDevice ; (; int ; d = 0); const. inlineprotected . ◆ copyToHost(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToHost ; (; ); const. inlineprotected . ◆ copyToHostSingle(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToHostSingle ; (; Size ; i); const. inlineprotected . ◆ createBuffer(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::createBuffer ; (; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:10301,Usability,clear,clear,10301,"Manager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferWrite ; (; bool ; create = false). inline . Get the Buffer Object ID for writing. . ◆ capacity(). template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::capacity ; (; ); const. inline . ◆ checkIndex(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::checkIndex ; (; Size ; i); const. inlineprotected . ◆ clear(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clear ; (; ). inline . ◆ copyToDevice(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToDevice ; (; int ; d = 0); const. inlineprotected . ◆ copyToHost(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToHost ; (; ); const. inlineprotected . ◆ copyToHostSingle(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::copyToHostSingle ; (; Size ; i); const. inlineprotected . ◆ createBuffer(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::createBuffer ; (; ). inlineprotected . ◆ data() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . T* sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::BoundingBox Member List . This is the complete list of members for sofa::type::BoundingBox, including all inherited members. bboxsofa::type::BoundingBoxprotected; bbox_t typedefsofa::type::BoundingBox; BoundingBox()sofa::type::BoundingBox; BoundingBox(const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox)sofa::type::BoundingBox; BoundingBox(const bbox_t &bbox)sofa::type::BoundingBox; BoundingBox(SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax)sofa::type::BoundingBox; BoundingBox(const Vec6f &bbox)sofa::type::BoundingBox; BoundingBox(const Vec6d &bbox)sofa::type::BoundingBox; contains(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; contains(const BoundingBox &other) constsofa::type::BoundingBox; getInclude(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; getInclude(const BoundingBox &other) constsofa::type::BoundingBox; getInflate(SReal amount) constsofa::type::BoundingBox; getIntersection(const BoundingBox &other) constsofa::type::BoundingBox; include(const sofa::type::Vec3 &point)sofa::type::BoundingBox; include(const BoundingBox &other)sofa::type::BoundingBox; inflate(SReal amount)sofa::type::BoundingBox; intersect(const BoundingBox &other) constsofa::type::BoundingBox; intersection(const BoundingBox &other)sofa::type::BoundingBox; invalidate()sofa::type::BoundingBox; isFlat() constsofa::type::BoundingBox; isNegligeable() constsofa::type::BoundingBox; isNull() constsofa::type::BoundingBox; isValid() constsofa::type::BoundingBox; maxBBox() constsofa::type::BoundingBox; maxBBox()sofa::type::BoundingBox; maxBBoxPtr()sofa::type::BoundingBox; maxBBoxPtr() constsofa::type::BoundingBox; minBBox() constsofa::type::BoundingBox; minBBox()sofa::type::BoundingBox; minBBoxPtr()sofa::type::BoundingBox; minBBoxPtr() constsofa::type::BoundingBox; neutral_bbox()sofa::type::BoundingBoxstatic; operator bbox_t() cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_bounding_box-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box1_d-members.html:222,Modifiability,inherit,inherited,222,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::BoundingBox1D Member List . This is the complete list of members for sofa::type::BoundingBox1D, including all inherited members. bboxsofa::type::BoundingBox1Dprotected; bbox_t typedefsofa::type::BoundingBox1D; BoundingBox1D()sofa::type::BoundingBox1D; BoundingBox1D(SReal minBBox, SReal maxBBox)sofa::type::BoundingBox1D; BoundingBox1D(const bbox_t &bbox)sofa::type::BoundingBox1D; BoundingBox1D(const Vec2f &bbox)sofa::type::BoundingBox1D; BoundingBox1D(const Vec2d &bbox)sofa::type::BoundingBox1D; contains(SReal point) constsofa::type::BoundingBox1D; contains(const BoundingBox1D &other) constsofa::type::BoundingBox1D; getInclude(SReal point) constsofa::type::BoundingBox1D; getInclude(const BoundingBox1D &other) constsofa::type::BoundingBox1D; getInflate(SReal amount) constsofa::type::BoundingBox1D; getIntersection(const BoundingBox1D &other) constsofa::type::BoundingBox1D; include(SReal point)sofa::type::BoundingBox1D; include(const BoundingBox1D &other)sofa::type::BoundingBox1D; inflate(SReal amount)sofa::type::BoundingBox1D; intersect(const BoundingBox1D &other) constsofa::type::BoundingBox1D; intersection(const BoundingBox1D &other)sofa::type::BoundingBox1D; invalidate()sofa::type::BoundingBox1D; isFlat() constsofa::type::BoundingBox1D; isNegligeable() constsofa::type::BoundingBox1D; isNull() constsofa::type::BoundingBox1D; isValid() constsofa::type::BoundingBox1D; maxBBox() constsofa::type::BoundingBox1D; maxBBox()sofa::type::BoundingBox1D; minBBox() constsofa::type::BoundingBox1D; minBBox()sofa::type::BoundingBox1D; neutral_bbox()sofa::type::BoundingBox1Dstatic; operator bbox_t() constsofa::type::BoundingBox1D; operator<<(std::ostream &out, const BoundingBox1D &bbox)sofa::type::BoundingBox1Dfriend; operator>>(std::istream &in, BoundingBox1D &bbox)sofa::type::BoundingBox1Dfriend. Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_bounding_box1_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box1_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box2_d-members.html:222,Modifiability,inherit,inherited,222,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::BoundingBox2D Member List . This is the complete list of members for sofa::type::BoundingBox2D, including all inherited members. bboxsofa::type::BoundingBox2Dprotected; bbox_t typedefsofa::type::BoundingBox2D; BoundingBox2D()sofa::type::BoundingBox2D; BoundingBox2D(const sofa::type::Vec< 2, SReal > &minBBox, const sofa::type::Vec< 2, SReal > &maxBBox)sofa::type::BoundingBox2D; BoundingBox2D(const bbox_t &bbox)sofa::type::BoundingBox2D; BoundingBox2D(SReal xmin, SReal xmax, SReal ymin, SReal ymax)sofa::type::BoundingBox2D; BoundingBox2D(const Vec4f &bbox)sofa::type::BoundingBox2D; BoundingBox2D(const Vec4d &bbox)sofa::type::BoundingBox2D; contains(const sofa::type::Vec< 2, SReal > &point) constsofa::type::BoundingBox2D; contains(const BoundingBox2D &other) constsofa::type::BoundingBox2D; getInclude(const sofa::type::Vec< 2, SReal > &point) constsofa::type::BoundingBox2D; getInclude(const BoundingBox2D &other) constsofa::type::BoundingBox2D; getInflate(SReal amount) constsofa::type::BoundingBox2D; getIntersection(const BoundingBox2D &other) constsofa::type::BoundingBox2D; include(const sofa::type::Vec< 2, SReal > &point)sofa::type::BoundingBox2D; include(const BoundingBox2D &other)sofa::type::BoundingBox2D; inflate(SReal amount)sofa::type::BoundingBox2D; intersect(const BoundingBox2D &other) constsofa::type::BoundingBox2D; intersection(const BoundingBox2D &other)sofa::type::BoundingBox2D; invalidate()sofa::type::BoundingBox2D; isFlat() constsofa::type::BoundingBox2D; isNegligeable() constsofa::type::BoundingBox2D; isNull() constsofa::type::BoundingBox2D; isValid() constsofa::type::BoundingBox2D; maxBBox() constsofa::type::BoundingBox2D; maxBBox()sofa::type::BoundingBox2D; maxBBoxPtr()sofa::type::BoundingBox2D; maxBBoxPtr() constsofa::type::BoundingBox2D; minBBox() constsofa::type::BoundingBox2D; minBBox()sofa::type::BoundingBox2D; minBBoxPtr()sofa::type::Boun",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_bounding_box2_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_bounding_box2_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::DualQuatCoord3< real > Member List . This is the complete list of members for sofa::type::DualQuatCoord3< real >, including all inherited members. clear()sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const Quat &Dual, const Quat &orient)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const DualQuatCoord3< real2 > &c)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const Pos &p, const sofa::type::Quat< real > &q)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3()sofa::type::DualQuatCoord3< real >inline; getDual()sofa::type::DualQuatCoord3< real >inline; getDual() constsofa::type::DualQuatCoord3< real >inline; getOrientation()sofa::type::DualQuatCoord3< real >inline; getOrientation() constsofa::type::DualQuatCoord3< real >inline; getTranslation()sofa::type::DualQuatCoord3< real >inline; identity()sofa::type::DualQuatCoord3< real >inlinestatic; inverse()sofa::type::DualQuatCoord3< real >; inverseRotate(const Vec3 &v) constsofa::type::DualQuatCoord3< real >; invert()sofa::type::DualQuatCoord3< real >; max_size()sofa::type::DualQuatCoord3< real >inlinestatic; multLeft(const DualQuatCoord3< real > &c)sofa::type::DualQuatCoord3< real >; multLeft_getJ(type::Mat< 4, 4, real > &J0, type::Mat< 4, 4, real > &JE)sofa::type::DualQuatCoord3< real >; multRight(const DualQuatCoord3< real > &c) constsofa::type::DualQuatCoord3< real >; multRight_getJ(type::Mat< 4, 4, real > &J0, type::Mat< 4, 4, real > &JE)sofa::type::DualQuatCoord3< real >; norm() constsofa::type::DualQuatCoord3< real >inline; norm2() constsofa::type::DualQuatCoord3< real >; normalize()sofa::type::DualQuatCoord3< real >; normalize_applyJ(const DualQuatCoord3< real > &dq)sofa::type::DualQuatCoord3< real >; normalize_applyJT(const DualQuatCoord3< real > &dqn)sofa::type::DualQuatCoord3< real >; normalize_getdJ(type::Mat< 4, 4, real > &dJ0, type::Mat< 4, 4, real > &dJE, const D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html:259,Usability,clear,clear,259," clear()sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const Quat &Dual, const Quat &orient)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const DualQuatCoord3< real2 > &c)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3(const Pos &p, const sofa::type::Quat< real > &q)sofa::type::DualQuatCoord3< real >inline; DualQuatCoord3()sofa::type::DualQuatCoord3< real >inline; getDual()sofa::type::DualQuatCoord3< real >inline; getDual() constsofa::type::DualQuatCoord3< real >inline; getOrientation()sofa::type::DualQuatCoord3< real >inline; getOrientation() constsofa::type::DualQuatCoord3< real >inline; getTranslation()sofa::type::DualQuatCoord3< real >inline; identity()sofa::type::DualQuatCoord3< real >inlinestatic; inverse()sofa::type::DualQuatCoord3< real >; inverseRotate(const Vec3 &v) constsofa::type::DualQuatCoord3< real >; invert()sofa::type::DualQuatCoord3< real >; max_size()sofa::type::DualQuatCoord3< real >inlinestatic; multLeft(const DualQuatCoord3< real > &c)sofa::type::DualQuatCoord3< real >; multLeft_getJ(type::Mat< 4, 4, real > &J0, type::Mat< 4, 4, real > &JE)sofa::type::DualQuatCoord3< real >; multRight(const DualQuatCoord3< real > &c) constsofa::type::DualQuatCoord3< real >; multRight_getJ(type::Mat< 4, 4, real > &J0, type::Mat< 4, 4, real > &JE)sofa::type::DualQuatCoord3< real >; norm() constsofa::type::DualQuatCoord3< real >inline; norm2() constsofa::type::DualQuatCoord3< real >; normalize()sofa::type::DualQuatCoord3< real >; normalize_applyJ(const DualQuatCoord3< real > &dq)sofa::type::DualQuatCoord3< real >; normalize_applyJT(const DualQuatCoord3< real > &dqn)sofa::type::DualQuatCoord3< real >; normalize_getdJ(type::Mat< 4, 4, real > &dJ0, type::Mat< 4, 4, real > &dJE, const D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html:592,Usability,clear,clear,592," Public Member Functions;  DualQuatCoord3 (const Quat &Dual, const Quat &orient);  ; template<typename real2 > ;  DualQuatCoord3 (const DualQuatCoord3< real2 > &c);  ;  DualQuatCoord3 (const Pos &p, const sofa::type::Quat< real > &q);  ;  DualQuatCoord3 ();  ; void clear ();  ;  ~DualQuatCoord3 ();  ; real * ptr ();  ; const real * ptr () const;  ; void setTranslation (const Vec3 &p);  ; Vec3 getTranslation ();  ; Quat & getDual ();  ; Quat & getOrientation ();  ; const Quat & getDual () const;  ; const Quat & getOrientation () const;  ; real norm2 () const;  ; real norm () const;  ; void normalize ();  ; void invert ();  ; template<typename real2 > ; void toMatrix (type::Mat< 3, 4, real2 > &m) const;  ; template<typename real2 > ; void toRotationMatrix (type::Mat< 3, 3, real2 > &m) const;  ; Vec3 rotate (const Vec3 &v) const;  ; Vec3 inverseRotate (const Vec3 &v) const;  ; DualQuatCoord3< real > inverse ();  ; DualQuatCoord3< real > multRight (const DualQuatCoord3< real > &c) const;  ; DualQuatCoord3< real > multLeft (const DualQuatCoord3< real > &c);  ; Vec3 pointToParent (const Vec3 &p);  ; Vec3 pointToChild (const Vec3 &v);  ; Vec3 vectorToChild (const Vec3 &v);  ; template<typename real2 > ; void operator= (const DualQuatCoord3< real2 > &c);  ; void operator= (const Vec3 &p);  ; void operator+= (const DualQuatCoord3< real > &a);  ; template<typename real2 > ; void operator*= (real2 a);  ; template<typename real2 > ; void operator/= (real2 a);  ; template<typename real2 > ; DualQuatCoord3< real > operator* (real2 a) const;  ; real operator* (const DualQuatCoord3< real > &a) const;  ; DualQuatCoord3< real > operator+ (const type::Vec< 6, real >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html:4718,Usability,clear,clear,4718,"QuatCoord3< real > identity ();  . Friends; std::ostream & operator<< (std::ostream &out, const DualQuatCoord3< real > &v);  ; std::istream & operator>> (std::istream &in, DualQuatCoord3< real > &v);  . Constructor details. ◆ DualQuatCoord3() [1/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const Quat & ; Dual, . const Quat & ; orient . ). inline . ◆ DualQuatCoord3() [2/4]. template<class real > . template<typename real2 > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const DualQuatCoord3< real2 > & ; c). inline . ◆ DualQuatCoord3() [3/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const Pos & ; p, . const sofa::type::Quat< real > & ; q . ). inline . ◆ DualQuatCoord3() [4/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; ). inline . ◆ ~DualQuatCoord3(). template<class real > . sofa::type::DualQuatCoord3< real >::~DualQuatCoord3 ; (; ). inline . Function details. ◆ clear(). template<class real > . void sofa::type::DualQuatCoord3< real >::clear ; (; ). inline . ◆ getDual() [1/2]. template<class real > . Quat& sofa::type::DualQuatCoord3< real >::getDual ; (; ). inline . ◆ getDual() [2/2]. template<class real > . const Quat& sofa::type::DualQuatCoord3< real >::getDual ; (; ); const. inline . ◆ getOrientation() [1/2]. template<class real > . Quat& sofa::type::DualQuatCoord3< real >::getOrientation ; (; ). inline . ◆ getOrientation() [2/2]. template<class real > . const Quat& sofa::type::DualQuatCoord3< real >::getOrientation ; (; ); const. inline . ◆ getTranslation(). template<class real > . Vec3 sofa::type::DualQuatCoord3< real >::getTranslation ; (; ). inline . ◆ identity(). template<class real > . static DualQuatCoord3<real> sofa::type::DualQuatCoord3< real >::identity ; (; ). inlinestatic . ◆ inverse(). template<typename real > . DualQuatCoord3< real > sofa::type::DualQuatCoord3< real >::inverse. ◆ inverseRotate(). template<typename real > . type::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html:4792,Usability,clear,clear,4792,"& operator<< (std::ostream &out, const DualQuatCoord3< real > &v);  ; std::istream & operator>> (std::istream &in, DualQuatCoord3< real > &v);  . Constructor details. ◆ DualQuatCoord3() [1/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const Quat & ; Dual, . const Quat & ; orient . ). inline . ◆ DualQuatCoord3() [2/4]. template<class real > . template<typename real2 > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const DualQuatCoord3< real2 > & ; c). inline . ◆ DualQuatCoord3() [3/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; const Pos & ; p, . const sofa::type::Quat< real > & ; q . ). inline . ◆ DualQuatCoord3() [4/4]. template<class real > . sofa::type::DualQuatCoord3< real >::DualQuatCoord3 ; (; ). inline . ◆ ~DualQuatCoord3(). template<class real > . sofa::type::DualQuatCoord3< real >::~DualQuatCoord3 ; (; ). inline . Function details. ◆ clear(). template<class real > . void sofa::type::DualQuatCoord3< real >::clear ; (; ). inline . ◆ getDual() [1/2]. template<class real > . Quat& sofa::type::DualQuatCoord3< real >::getDual ; (; ). inline . ◆ getDual() [2/2]. template<class real > . const Quat& sofa::type::DualQuatCoord3< real >::getDual ; (; ); const. inline . ◆ getOrientation() [1/2]. template<class real > . Quat& sofa::type::DualQuatCoord3< real >::getOrientation ; (; ). inline . ◆ getOrientation() [2/2]. template<class real > . const Quat& sofa::type::DualQuatCoord3< real >::getOrientation ; (; ); const. inline . ◆ getTranslation(). template<class real > . Vec3 sofa::type::DualQuatCoord3< real >::getTranslation ; (; ). inline . ◆ identity(). template<class real > . static DualQuatCoord3<real> sofa::type::DualQuatCoord3< real >::identity ; (; ). inlinestatic . ◆ inverse(). template<typename real > . DualQuatCoord3< real > sofa::type::DualQuatCoord3< real >::inverse. ◆ inverseRotate(). template<typename real > . type::Vec< 3, real > sofa::type::DualQuatCoord3< real >::inverse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_dual_quat_coord3.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html:206,Modifiability,inherit,inherited,206,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Frame Member List . This is the complete list of members for sofa::type::Frame, including all inherited members. clear()sofa::type::Frame; Frame(const Vec3 &origin, const Mat33 &matrix)sofa::type::Frame; Frame(const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal))sofa::type::Frame; Frame(const Vec3 &origin)sofa::type::Frame; Frame()sofa::type::Frame; getBasis()sofa::type::Frame; getBasis() constsofa::type::Frame; getOrigin()sofa::type::Frame; getOrigin() constsofa::type::Frame; identity()sofa::type::Framestatic; inversed() constsofa::type::Frame; Mat33 typedefsofa::type::Frame; mult(const Frame &c) constsofa::type::Frame; multRight(const Frame &c)sofa::type::Frame; operator<<(std::ostream &out, const Frame &c)sofa::type::Framefriend; projectPoint(const V &v) constsofa::type::Frameinline; projectVector(const V &v) constsofa::type::Frameinline; Quat typedefsofa::type::Frame; setBasis(const Mat33 &m)sofa::type::Frame; setOrigin(const Vec3 &origin)sofa::type::Frame; setTransform(const Vec3 &origin, const Quat &orientation, const Vec3 &scale)sofa::type::Frame; writeOpenGlMatrix(float *m) constsofa::type::Frame; writeOpenGlMatrix(double *m) constsofa::type::Frame. Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html:225,Usability,clear,clear,225,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Frame Member List . This is the complete list of members for sofa::type::Frame, including all inherited members. clear()sofa::type::Frame; Frame(const Vec3 &origin, const Mat33 &matrix)sofa::type::Frame; Frame(const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal))sofa::type::Frame; Frame(const Vec3 &origin)sofa::type::Frame; Frame()sofa::type::Frame; getBasis()sofa::type::Frame; getBasis() constsofa::type::Frame; getOrigin()sofa::type::Frame; getOrigin() constsofa::type::Frame; identity()sofa::type::Framestatic; inversed() constsofa::type::Frame; Mat33 typedefsofa::type::Frame; mult(const Frame &c) constsofa::type::Frame; multRight(const Frame &c)sofa::type::Frame; operator<<(std::ostream &out, const Frame &c)sofa::type::Framefriend; projectPoint(const V &v) constsofa::type::Frameinline; projectVector(const V &v) constsofa::type::Frameinline; Quat typedefsofa::type::Frame; setBasis(const Mat33 &m)sofa::type::Frame; setOrigin(const Vec3 &origin)sofa::type::Frame; setTransform(const Vec3 &origin, const Quat &orientation, const Vec3 &scale)sofa::type::Frame; writeOpenGlMatrix(float *m) constsofa::type::Frame; writeOpenGlMatrix(double *m) constsofa::type::Frame. Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:1580,Usability,clear,clear,1580,"placements starting from the reference frame: translation, then rotation along the new origin, then scale along the new axes. Conversely, the projection of a point from the local frame to the reference frame undergoes scaling, then rotation, then translation. Vectors do not undergo translation since they model directions or displacement.; The product F1F2 can be seen as a frame displacement F1 starting from the reference frame followed by a frame displacement F2 starting from the new frame. It is used in frame hierarchies to model the transformation from frame 2 wrt the reference frame.; AuthorFrancois Faure, INRIA-UJF, 2006 . Public Member Functions;  Frame (const Vec3 &origin, const Mat33 &matrix);  ;  Frame (const Vec3 &origin, const Quat &orientation, const Vec3 &scale=Vec3(1_sreal, 1_sreal, 1_sreal));  ;  Frame (const Vec3 &origin);  ;  Frame ();  Default constructor set the transformation to identity. More...;  ; void setTransform (const Vec3 &origin, const Quat &orientation, const Vec3 &scale);  ; void clear ();  Reset the transformation to identity. More...;  ; Vec3 & getOrigin ();  Origin of the local frame in the reference frame,. More...;  ; const Vec3 & getOrigin () const;  Origin of the local frame in the reference frame,. More...;  ; void setOrigin (const Vec3 &origin);  Set the origin of the local frame in the reference frame,. More...;  ; Mat33 & getBasis ();  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; const Mat33 & getBasis () const;  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; void setBasis (const Mat33 &m);  The columns represent the base vectors of the local frame wrt the reference frame. More...;  ; void multRight (const Frame &c);  Apply a transformation defined in the child frame (mult. right) More...;  ; Frame mult (const Frame &c) const;  compute the product with another frame on the right More...;  ; void writeOpenGlMatrix (float *m) const;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:3926,Usability,clear,clear,3926,"V &v) const;  compute the projection of a point from the local frame to the reference frame More...;  ; Frame inversed () const;  Transformation from the reference frame to the local frame. More...;  . Static Public Member Functions; static Frame identity ();  The identity transform. More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Frame &c);  . Constructor details. ◆ Frame() [1/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Mat33 & ; matrix . ). Define the local frame using origin and basis vectors . ◆ Frame() [2/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Quat & ; orientation, . const Vec3 & ; scale = Vec3(1_sreal,1_sreal,1_sreal) . ). Define the local frame using three transforms . ◆ Frame() [3/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin). Define the local frame without rotation . ◆ Frame() [4/4]. sofa::type::Frame::Frame ; (; ). Default constructor set the transformation to identity. . Function details. ◆ clear(). void sofa::type::Frame::clear ; (; ). Reset the transformation to identity. . ◆ getBasis() [1/2]. Frame::Mat33 & sofa::type::Frame::getBasis ; (; ). The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getBasis() [2/2]. const Frame::Mat33 & sofa::type::Frame::getBasis ; (; ); const. The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getOrigin() [1/2]. Vec3 & sofa::type::Frame::getOrigin ; (; ). Origin of the local frame in the reference frame,. . ◆ getOrigin() [2/2]. const Vec3 & sofa::type::Frame::getOrigin ; (; ); const. Origin of the local frame in the reference frame,. . ◆ identity(). Frame sofa::type::Frame::identity ; (; ). static . The identity transform. . ◆ inversed(). Frame sofa::type::Frame::inversed ; (; ); const. Transformation from the reference frame to the local frame. ; Compute the transformation from the parent to the child. . ◆ mult(). Frame sofa::type::Frame::mult ; (; const Frame & ; c); co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html:3959,Usability,clear,clear,3959," projection of a point from the local frame to the reference frame More...;  ; Frame inversed () const;  Transformation from the reference frame to the local frame. More...;  . Static Public Member Functions; static Frame identity ();  The identity transform. More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Frame &c);  . Constructor details. ◆ Frame() [1/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Mat33 & ; matrix . ). Define the local frame using origin and basis vectors . ◆ Frame() [2/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin, . const Quat & ; orientation, . const Vec3 & ; scale = Vec3(1_sreal,1_sreal,1_sreal) . ). Define the local frame using three transforms . ◆ Frame() [3/4]. sofa::type::Frame::Frame ; (; const Vec3 & ; origin). Define the local frame without rotation . ◆ Frame() [4/4]. sofa::type::Frame::Frame ; (; ). Default constructor set the transformation to identity. . Function details. ◆ clear(). void sofa::type::Frame::clear ; (; ). Reset the transformation to identity. . ◆ getBasis() [1/2]. Frame::Mat33 & sofa::type::Frame::getBasis ; (; ). The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getBasis() [2/2]. const Frame::Mat33 & sofa::type::Frame::getBasis ; (; ); const. The columns represent the base vectors of the local frame wrt the reference frame. . ◆ getOrigin() [1/2]. Vec3 & sofa::type::Frame::getOrigin ; (; ). Origin of the local frame in the reference frame,. . ◆ getOrigin() [2/2]. const Vec3 & sofa::type::Frame::getOrigin ; (; ); const. Origin of the local frame in the reference frame,. . ◆ identity(). Frame sofa::type::Frame::identity ; (; ). static . The identity transform. . ◆ inversed(). Frame sofa::type::Frame::inversed ; (; ); const. Transformation from the reference frame to the local frame. ; Compute the transformation from the parent to the child. . ◆ mult(). Frame sofa::type::Frame::mult ; (; const Frame & ; c); const. compute the product",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Mat< L, C, real > Member List . This is the complete list of members for sofa::type::Mat< L, C, real >, including all inherited members. addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexceptsofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html:842,Usability,clear,clear,842," addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexceptsofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3154,Security,access,access,3154,"ine). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3318,Security,access,access,3318,"ize L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3424,Security,access,access,3424,"rom a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3514,Security,access,access,3514,"ze L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3620,Security,access,access,3620,"ub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3712,Security,access,access,3712,"0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3827,Security,access,access,3827,"0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4416,Security,access,access,4416,"neNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4566,Security,access,access,4566,"cess to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4717,Security,access,access,4717,"operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4867,Security,access,access,4867,"Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5030,Security,access,access,5030,"expr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5204,Security,access,access,5204,"red per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5379,Security,access,access,5379,"L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5553,Security,access,access,5553,"e_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< L,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:21123,Security,access,access,21123,"quare matrix m. . ◆ inverted(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::inverted ; (; ); const. inlineconstexpr . invert this . ◆ isDiagonal(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isDiagonal ; (; ); const. inlinenoexcept . ◆ isSymmetric(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isSymmetric ; (; ); const. inline . ◆ isTransform(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::isTransform ; (; ); const. inlineconstexpr . ReturnsTrue if and only if the Matrix is a transformation matrix . ◆ line(). template<sofa::Size L, sofa::Size C, class real > . constexpr const Line& sofa::type::Mat< L, C, real >::line ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ lptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const Line* sofa::type::Mat< L, C, real >::lptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of lines (read-only). . ◆ lptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Line* sofa::type::Mat< L, C, real >::lptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of lines. . ◆ minusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::minusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Subtraction with the transposed of the given matrix operator. ; Returnsthis - mt . ◆ multDiagonal(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::multDiagonal ; (; const Line & ; d); const. inlineconstexprnoexcept . Multiplication with a diagonal Matrix CxC represented as a vector of size C.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23716,Security,access,access,23716,"P] . ◆ multTransposed(). template<sofa::Size L, sofa::Size C, class real > . template<Size P> . constexpr Mat<L,P,real> sofa::type::Mat< L, C, real >::multTransposed ; (; const Mat< P, C, real > & ; m); const. inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23922,Security,access,access,23922,". inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24154,Security,access,access,24154,"umn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24376,Security,access,access,24376,". constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator+ ; (; const Mat< L, C, real > & ; m); const. inlineconstexprnoexcept . Matrix addition operator. . ◆ operator+=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27739,Security,access,access,27739,"const Mat< L, C, real2 > & ; m). inlineconstexprnoexcept . Assignment from another matrix. . ◆ operator=() [2/3]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27945,Security,access,access,27945,"d sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::setsub ; (; Size ; L0, . Size ; C0, . const Mat< L2, C2, real > & ; m . ). inlineconstexprnoexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:32958,Security,access,access,32958,"oexcept . ◆ transpose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; ). inlineconstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33226,Security,access,access,33226,"onstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33495,Security,access,access,33495," . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33762,Security,access,access,33762,"s real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34030,Security,access,access,34030,"C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . S",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34298,Security,access,access,34298,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34567,Security,access,access,34567,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34834,Security,access,access,34834,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:13492,Testability,assert,assert,13492,"ass real > . constexpr sofa::Size sofa::type::Mat< L, C, real >::total_size = L. staticconstexpr . Constructor details. ◆ Mat() [1/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ). constexprdefaultnoexcept . ◆ Mat() [2/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ Mat() [3/9]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< Real > && ; scalars). inlineconstexprnoexcept . Constructs a 1xC matrix (single-row, multiple columns) or a Lx1 matrix (multiple row, single column) and initializes it from a scalar initializer-list. Allows to build a matrix with the following syntax: sofa::type::Mat<1, 3, int> M {1, 2, 3} or sofa::type::Mat<3, 1, int> M {1, 2, 3} Initializer-list must match matrix column size, otherwise an assert is triggered. . ◆ Mat() [4/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< std::initializer_list< Real >> && ; rows). inlineconstexprnoexcept . Constructs a matrix and initializes it from scalar initializer-lists grouped by row. Allows to build a matrix with the following syntax: sofa::type::Mat<3, 3, int> M {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} Initializer-lists must match matrix size, otherwise an assert is triggered. . ◆ Mat() [5/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ArgsT &&... ; r). inlineconstexprnoexcept . ◆ Mat() [6/9]. template<sofa::Size L, sofa::Size C, clas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:13979,Testability,assert,assert,13979,"mplate<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< Real > && ; scalars). inlineconstexprnoexcept . Constructs a 1xC matrix (single-row, multiple columns) or a Lx1 matrix (multiple row, single column) and initializes it from a scalar initializer-list. Allows to build a matrix with the following syntax: sofa::type::Mat<1, 3, int> M {1, 2, 3} or sofa::type::Mat<3, 1, int> M {1, 2, 3} Initializer-list must match matrix column size, otherwise an assert is triggered. . ◆ Mat() [4/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; std::initializer_list< std::initializer_list< Real >> && ; rows). inlineconstexprnoexcept . Constructs a matrix and initializes it from scalar initializer-lists grouped by row. Allows to build a matrix with the following syntax: sofa::type::Mat<3, 3, int> M {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} Initializer-lists must match matrix size, otherwise an assert is triggered. . ◆ Mat() [5/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::Mat< L, C, real >::Mat ; (; ArgsT &&... ; r). inlineconstexprnoexcept . ◆ Mat() [6/9]. template<sofa::Size L, sofa::Size C, class real > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; const real & ; v). inlineexplicitconstexprnoexcept . Constructor from an element. . ◆ Mat() [7/9]. template<sofa::Size L, sofa::Size C, class real > . template<typename real2 > . constexpr sofa::type::Mat< L, C, real >::Mat ; (; const Mat< L, C, real2 > & ; m). inlineconstexprnoexcept . Constructor from another matrix. . ◆ Mat() [8/9]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2, typename real2 > . co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:2958,Usability,clear,clear,2958,"d ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:16833,Usability,clear,clear,16833,"e C, class real > . constexpr const_reference sofa::type::Mat< L, C, real >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::begin ; (; ). inlineconstexprnoexcept . ◆ canSelfTranspose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size I, Size J> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< I, J, real > & ; , . const Mat< J, I, real > & ;  . ). inlinestaticnoexcept . ◆ canSelfTranspose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size S> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< S, S, real > & ; lhs, . const Mat< S, S, real > & ; rhs . ). inlinestaticnoexcept . ◆ clear(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::clear ; (; ). inlineconstexprnoexcept . Sets each element to 0. . ◆ col(). template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::col ; (; Size ; j); const. inlineconstexprnoexcept . Copy of column j. . ◆ data(). template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::data ; (; ); const. inlineconstexprnoexcept . ◆ end() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::end ; (; ); const. inlineconstexprnoexcept . ◆ end() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::end ; (; ). inlineconstexprnoexcept . ◆ fill(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::fill ; (; real ; r). inlineco",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:16940,Usability,clear,clear,16940,"; const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::begin ; (; ). inlineconstexprnoexcept . ◆ canSelfTranspose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size I, Size J> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< I, J, real > & ; , . const Mat< J, I, real > & ;  . ). inlinestaticnoexcept . ◆ canSelfTranspose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size S> . static bool sofa::type::Mat< L, C, real >::canSelfTranspose ; (; const Mat< S, S, real > & ; lhs, . const Mat< S, S, real > & ; rhs . ). inlinestaticnoexcept . ◆ clear(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::clear ; (; ). inlineconstexprnoexcept . Sets each element to 0. . ◆ col(). template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::col ; (; Size ; j); const. inlineconstexprnoexcept . Copy of column j. . ◆ data(). template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::data ; (; ); const. inlineconstexprnoexcept . ◆ end() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::const_iterator sofa::type::Mat< L, C, real >::end ; (; ); const. inlineconstexprnoexcept . ◆ end() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr ArrayLineType::iterator sofa::type::Mat< L, C, real >::end ; (; ). inlineconstexprnoexcept . ◆ fill(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::fill ; (; real ; r). inlineconstexprnoexcept . Sets each element to r. . ◆ front() [1/2]. template<sofa::Size L, sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:29889,Usability,simpl,simple,29889," const Mat< L2, C2, real > & ; m . ). inlineconstexprnoexcept . ◆ setsub() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2> . constexpr void sofa::type::Mat< L, C, real >::setsub ; (; Size ; L0, . Size ; C0, . const Vec< L2, real > & ; v . ). inlineconstexprnoexcept . ◆ size(). template<sofa::Size L, sofa::Size C, class real > . static constexpr sofa::Size sofa::type::Mat< L, C, real >::size ; (; void ; ). inlinestaticconstexpr . ◆ subTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::subTransposed ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Subtraction of the transposed of m. . ◆ symmetrize(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr void sofa::type::Mat< L, C, real >::symmetrize ; (; ). inlineconstexprnoexcept . for square matrices Warningin-place simple symmetrization this = ( this + this.transposed() ) / 2.0 . ◆ toReal(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr real sofa::type::Mat< L, C, real >::toReal ; (; ); const. inlineconstexpr . ◆ transform(). template<sofa::Size L, sofa::Size C, class real > . constexpr Vec<C-1,real> sofa::type::Mat< L, C, real >::transform ; (; const Vec< C-1, real > & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Vector considering the matrix as a transformation. . ◆ transformInvert(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr bool sofa::type::Mat< L, C, real >::transformInvert ; (; const Mat< L, C, real > & ; m). inlineconstexpr . Invert transformation matrix m. . ◆ transformRotation(). template<sofa::Size L, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_material-members.html:212,Modifiability,inherit,inherited,212,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Material Member List . This is the complete list of members for sofa::type::Material, including all inherited members. activatedsofa::type::Material; ambientsofa::type::Material; bumpTextureFilenamesofa::type::Material; diffusesofa::type::Material; emissivesofa::type::Material; Material()sofa::type::Material; Material(const Material &mat)sofa::type::Material; namesofa::type::Material; operator<<(std::ostream &out, const Material &m)sofa::type::Materialfriend; operator=(const Material &other)sofa::type::Material; operator>>(std::istream &in, Material &m)sofa::type::Materialfriend; setColor(float r, float g, float b, float a)sofa::type::Material; shininesssofa::type::Material; specularsofa::type::Material; textureFilenamesofa::type::Material; useAmbientsofa::type::Material; useBumpMappingsofa::type::Material; useDiffusesofa::type::Material; useEmissivesofa::type::Material; useShininesssofa::type::Material; useSpecularsofa::type::Material; useTexturesofa::type::Material. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_material-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_material-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::MatNoInit< L, C, real > Member List . This is the complete list of members for sofa::type::MatNoInit< L, C, real >, including all inherited members. addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html:854,Usability,clear,clear,854," addTransposed(const Mat< C, L, real > &m) noexceptsofa::type::Mat< L, C, real >inline; ArrayLineType typedefsofa::type::Mat< L, C, real >; back()sofa::type::Mat< L, C, real >inline; back() constsofa::type::Mat< L, C, real >inline; begin() noexceptsofa::type::Mat< L, C, real >inline; begin() const noexceptsofa::type::Mat< L, C, real >inline; canSelfTranspose(const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexceptsofa::type::Mat< L, C, real >inlinestatic; canSelfTranspose(const Mat< I, J, real > &, const Mat< J, I, real > &) noexceptsofa::type::Mat< L, C, real >inlinestatic; clear() noexceptsofa::type::Mat< L, C, real >inline; col(Size j) const noexceptsofa::type::Mat< L, C, real >inline; Col typedefsofa::type::Mat< L, C, real >; const_iterator typedefsofa::type::Mat< L, C, real >; const_reference typedefsofa::type::Mat< L, C, real >; data() const noexceptsofa::type::Mat< L, C, real >inline; difference_type typedefsofa::type::Mat< L, C, real >; elemssofa::type::Mat< L, C, real >; end() noexceptsofa::type::Mat< L, C, real >inline; end() const noexceptsofa::type::Mat< L, C, real >inline; fill(real r) noexceptsofa::type::Mat< L, C, real >inline; front()sofa::type::Mat< L, C, real >inline; front() constsofa::type::Mat< L, C, real >inline; getNbCols() constsofa::type::Mat< L, C, real >inline; getNbLines() constsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, Mat< L2, C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(const Size L0, const Size C0, Vec< C2, real > &m) const noexceptsofa::type::Mat< L, C, real >inline; getsub(Size L0, Size C0, real &m) const noexceptsofa::type::Mat< L, C, real >inline; identity() noexceptsofa::type::Mat< L, C, real >inline; Identity() noexc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:981,Modifiability,inherit,inherited,981,"List of all members . sofa::type::MatNoInit< L, C, real > Class Template Reference . #include <Mat.h>; Same as Mat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::MatNoInit< L, C, real >:. [legend]; Detailed Description; template<sofa::Size L, sofa::Size C, typename real>; class sofa::type::MatNoInit< L, C, real >; Same as Mat except the values are not initialized by default. . Public Member Functions; constexpr MatNoInit () noexcept;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<sofa::Size L2, sofa::Size C2, typename real2 > ; constexpr void operator= (const Mat< L2, C2, real2 > &m) noexcept;  Assignment from another matrix. More...;  ;  Public Member Functions inherited from sofa::type::Mat< L, C, real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; template<sofa::Size TL = L, sofa::Size TC = C, typename = std::enable_if_t<(TL == 1 && TC != 1) || (TC == 1 && TL != 1)>> ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, Line> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == L && sizeof...(ArgsT) > 1) >> ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const real &v) noexcept;  Constructor from an element. More...;  ; template<typename real2 > ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; template<Size L2, Size C2, typename real2 > ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). Mor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:10643,Modifiability,inherit,inherited,10643,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:10742,Modifiability,inherit,inherited,10742,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:11032,Modifiability,inherit,inherited,11032,"* data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< L, C, real >; ArrayLineType elems {};  ;  Static Public Attributes inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size N = L * C;  ; static constexpr Size nbLines = L;  ; static constexpr Size nbCols = C;  ; static constexpr sofa::Size static_size = L;  ; static constexpr sofa::Size total_size = L;  ;  Static Public Member Functions inherited from sofa::type::Mat< L, C, real >; static constexpr sofa::Size size ();  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static const Mat< L, L, real > & Identity () noexcept;  Returns the identity matrix. More...;  ; template<Size S> ; static bool canSelfTranspose (const Mat< S, S, real > &lhs, const Mat< S, S, real > &rhs) noexcept;  ; template<Size I, Size J> ; static bool canSelfTranspose (const Mat< I, J, real > &, const Mat< J, I, real > &) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformTranslation (const Vec< C-1, real > &t) noexcept;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; static Mat< L, C, real > transformScale (real s) noexcept;  ; template<sofa::Siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3445,Security,access,access,3445,"ine). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3609,Security,access,access,3609,"ize L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3715,Security,access,access,3715,"rom a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3805,Security,access,access,3805,"ze L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3911,Security,access,access,3911,"ub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4003,Security,access,access,4003,"0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4118,Security,access,access,4118,"0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4707,Security,access,access,4707,"neNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:4857,Security,access,access,4857,"cess to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5008,Security,access,access,5008,"operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5158,Security,access,access,5158,"Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5321,Security,access,access,5321,"expr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5495,Security,access,access,5495,"red per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5670,Security,access,access,5670,"L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:5844,Security,access,access,5844,"e_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< L,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html:3249,Usability,clear,clear,3249,"d ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::MatSym< D, real > Member List . This is the complete list of members for sofa::type::MatSym< D, real >, including all inherited members. ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear()sofa::type::MatSym< D, real >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; Coord typedefsofa::type::MatSym< D, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(real r)sofa::type::MatSym< D, real >inline; VecNoInit< D *(D+1)/2, SReal >::fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html:589,Usability,clear,clear,589," ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear()sofa::type::MatSym< D, real >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; Coord typedefsofa::type::MatSym< D, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(real r)sofa::type::MatSym< D, real >inline; VecNoInit< D *(D+1)/2, SReal >::fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:756,Modifiability,inherit,inherited,756,"﻿. SOFA API: sofa::type::MatSym< D, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::MatSym< D, real > Class Template Reference . #include <MatSym.h>. Inheritance diagram for sofa::type::MatSym< D, real >:. [legend]; Detailed Description; template<sofa::Size D, class real = SReal>; class sofa::type::MatSym< D, real >; Dense symmetric matrix of size DxD storing only D*(D+1)/2 values Template Parameters. DSize of the matrix ; realType of scalar . Static Public Attributes; static constexpr auto NumberStoredValues = D * (D + 1) / 2;  ;  Static Public Attributes inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size static_size = N;  ; static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write acce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:4191,Modifiability,inherit,inherited,4191,"st;  Matrix substractor operator with a non-symmetric matrix. More...;  ; Coord operator* (const Coord &v) const;  Multiplication operator Matrix * Vector. More...;  ; MatSym< D, real > operator* (real f) const;  Scalar multiplication operator. More...;  ; MatSym< D, real > operator/ (real f) const;  Scalar division operator. More...;  ; void operator*= (real r);  Scalar multiplication assignment operator. More...;  ; void operator/= (real r);  Scalar division assignment operator. More...;  ; void operator+= (const MatSym< D, real > &m);  Addition assignment operator. More...;  ; void operator-= (const MatSym< D, real > &m);  Subtraction assignment operator. More...;  ; bool invert (const MatSym< D, real > &m);  Invert matrix m. More...;  ; Tests operators; bool operator== (const MatSym< D, real > &b) const;  ; bool operator!= (const MatSym< D, real > &b) const;  ;  Public Member Functions inherited from sofa::type::VecNoInit< D *(D+1)/2, SReal >; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, SReal > &v) noexcept;  ; constexpr VecNoInit (Vec< N, SReal > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, ValueType >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:4426,Modifiability,inherit,inherited,4426,"st;  Matrix substractor operator with a non-symmetric matrix. More...;  ; Coord operator* (const Coord &v) const;  Multiplication operator Matrix * Vector. More...;  ; MatSym< D, real > operator* (real f) const;  Scalar multiplication operator. More...;  ; MatSym< D, real > operator/ (real f) const;  Scalar division operator. More...;  ; void operator*= (real r);  Scalar multiplication assignment operator. More...;  ; void operator/= (real r);  Scalar division assignment operator. More...;  ; void operator+= (const MatSym< D, real > &m);  Addition assignment operator. More...;  ; void operator-= (const MatSym< D, real > &m);  Subtraction assignment operator. More...;  ; bool invert (const MatSym< D, real > &m);  Invert matrix m. More...;  ; Tests operators; bool operator== (const MatSym< D, real > &b) const;  ; bool operator!= (const MatSym< D, real > &b) const;  ;  Public Member Functions inherited from sofa::type::VecNoInit< D *(D+1)/2, SReal >; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, SReal > &v) noexcept;  ; constexpr VecNoInit (Vec< N, SReal > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, ValueType >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr Vec (const ValueType r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, ValueType> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr Vec (ArgsT &&... r) noexcept;  ; template<typename R , typename T , Size NN = N, typename std::enable_if< NN==6, int >::type = 0> ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; template<Si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:14450,Modifiability,inherit,inherited,14450,"<(NN==3), int >::type = 0> ; constexpr Vec cross (const Vec< 3, R > &b) const noexcept;  ; constexpr ValueType sum () const noexcept;  sum of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static void Mat2Sym (const Mat< D, D, real > &M, MatSym< D, real > &W);  convert matrix to sym More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size size ();  . Friends; MatSym< D, real > operator* (real r, const MatSym< D, real > &m);  Scalar matrix multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, ValueType >; ArrayType elems {};  . Attribute details. ◆ NumberStoredValues. template<sofa::Size D, class real = SReal> . constexpr auto sofa::type::MatSym< D, real >::NumberStoredValues = D * (D + 1) / 2. staticconstexpr . Constructor details. ◆ MatSym() [1/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; ). inlineconstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::Ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:14714,Modifiability,inherit,inherited,14714,"r bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const ValueType * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Static Public Member Functions; static void Mat2Sym (const Mat< D, D, real > &M, MatSym< D, real > &W);  convert matrix to sym More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, ValueType >; static constexpr sofa::Size size ();  . Friends; MatSym< D, real > operator* (real r, const MatSym< D, real > &m);  Scalar matrix multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, ValueType >; ArrayType elems {};  . Attribute details. ◆ NumberStoredValues. template<sofa::Size D, class real = SReal> . constexpr auto sofa::type::MatSym< D, real >::NumberStoredValues = D * (D + 1) / 2. staticconstexpr . Constructor details. ◆ MatSym() [1/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; ). inlineconstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:1997,Security,access,access,1997,"static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:2103,Security,access,access,2103,"time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, real > operator+ (const Mat< D, D, real > &m) const;  Matrix addition operator with a non-symmetric ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6758,Security,access,access,6758,"te<Size N2, class real2 > ; constexpr void set (const Vec< N2, real2 > &v, ValueType defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6916,Security,access,access,6916,"en default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7075,Security,access,access,7075,"-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7233,Security,access,access,7233,"nst sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7410,Security,access,access,7410,"a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7586,Security,access,access,7586,"<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7763,Security,access,access,7763,"e = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7939,Security,access,access,7939," ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8846,Security,access,access,8846,"N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real2 f) const noexcept;  ; constexpr void eqmulscalar (const ValueType f) noexcept;  In-place multipl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17759,Security,access,access,17759,"pr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17974,Security,access,access,17974,"tSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::operator*= ; (; real ; r). inline . Scalar multiplication assignment operator. . ◆ operator+() [1/2]. template<sofa::Size D, class real = SReal> . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:1840,Usability,clear,clear,1840,"static constexpr Size total_size = N;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8547,Usability,clear,clear,8547,"pr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:16116,Usability,clear,clear,16116,"econstexprnoexcept . ◆ MatSym() [2/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const sofa::Size ; sizeM, . const real & ; v . ). inlineconstexpr . Constructor from an element. . ◆ MatSym() [5/5]. template<sofa::Size D, class real = SReal> . template<typename real2 > . sofa::type::MatSym< D, real >::MatSym ; (; const MatSym< D, real2 > & ; m). inlineexplicit . Constructor from another matrix. . Function details. ◆ clear(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::clear ; (; ). inline . Sets each element to 0. . ◆ fill(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::fill ; (; real ; r). inline . Sets each element to r. . ◆ getVoigt(). template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> . Vec<NumberStoredValues, real> sofa::type::MatSym< D, real >::getVoigt ; (; ); const. inline . convert to Voigt notation (supported only for D == 2 and D == 3) . ◆ identity(). template<sofa::Size D, class real = SReal> . constexpr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:16206,Usability,clear,clear,16206,"Real> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; NoInit ; ). inlineexplicitconstexprnoexcept . ◆ MatSym() [3/5]. template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const real & ; v1, . const real & ; v2, . const real & ; v3, . const real & ; v4, . const real & ; v5, . const real & ; v6 . ). inlineconstexpr . Constructor from 6 elements. . ◆ MatSym() [4/5]. template<sofa::Size D, class real = SReal> . constexpr sofa::type::MatSym< D, real >::MatSym ; (; const sofa::Size ; sizeM, . const real & ; v . ). inlineconstexpr . Constructor from an element. . ◆ MatSym() [5/5]. template<sofa::Size D, class real = SReal> . template<typename real2 > . sofa::type::MatSym< D, real >::MatSym ; (; const MatSym< D, real2 > & ; m). inlineexplicit . Constructor from another matrix. . Function details. ◆ clear(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::clear ; (; ). inline . Sets each element to 0. . ◆ fill(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::fill ; (; real ; r). inline . Sets each element to r. . ◆ getVoigt(). template<sofa::Size D, class real = SReal> . template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> . Vec<NumberStoredValues, real> sofa::type::MatSym< D, real >::getVoigt ; (; ); const. inline . convert to Voigt notation (supported only for D == 2 and D == 3) . ◆ identity(). template<sofa::Size D, class real = SReal> . constexpr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html:224,Modifiability,inherit,inherited,224,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::PrimitiveGroup Member List . This is the complete list of members for sofa::type::PrimitiveGroup, including all inherited members. groupNamesofa::type::PrimitiveGroup; materialIdsofa::type::PrimitiveGroup; materialNamesofa::type::PrimitiveGroup; nbpsofa::type::PrimitiveGroup; operator<(const PrimitiveGroup &p) constsofa::type::PrimitiveGroup; operator<<(std::ostream &out, const PrimitiveGroup &g)sofa::type::PrimitiveGroupfriend; operator>>(std::istream &in, PrimitiveGroup &g)sofa::type::PrimitiveGroupfriend; p0sofa::type::PrimitiveGroup; PrimitiveGroup()sofa::type::PrimitiveGroup; PrimitiveGroup(int p0, int nbp, std::string materialName, std::string groupName, int materialId)sofa::type::PrimitiveGroup. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_primitive_group-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html:220,Modifiability,inherit,inherited,220,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Quat< Real > Member List . This is the complete list of members for sofa::type::Quat< Real >, including all inherited members. angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inline; operato",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html:461,Usability,clear,clear,461," angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inline; operato",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:11605,Integrability,rout,routine,11605,":Quat< Real >::operator* ; (; const Quat< Real > & ; q1); const -> Quat. inlineconstexpr . ◆ operator*() [2/2]. template<class Real > . constexpr auto sofa::type::Quat< Real >::operator* ; (; const Real & ; r); const -> Quat. inlineconstexpr . ◆ operator*=() [1/2]. template<class Real > . constexpr void sofa::type::Quat< Real >::operator*= ; (; const Quat< Real > & ; q1). inlineconstexpr . ◆ operator*=() [2/2]. template<class Real > . void sofa::type::Quat< Real >::operator*= ; (; const Real & ; r). inline . ◆ operator+(). template<class Real > . auto sofa::type::Quat< Real >::operator+ ; (; const Quat< Real > & ; q1); const -> Quat. Given two quaternions, add them together to get a third quaternion. Adding quaternions to get a compound rotation is analogous to adding translations to get a compound translation.; Given two rotations, e1 and e2, expressed as quaternion rotations, figure out the equivalent single rotation and stuff it into dest. NOTE: This routine is written so that q1 or q2 may be the same as dest (or each other). . ◆ operator+=(). template<class Real > . void sofa::type::Quat< Real >::operator+= ; (; const Quat< Real > & ; q2). ◆ operator/(). template<class Real > . auto sofa::type::Quat< Real >::operator/ ; (; const Real & ; r); const -> Quat. inline . ◆ operator/=(). template<class Real > . void sofa::type::Quat< Real >::operator/= ; (; const Real & ; r). inline . ◆ operator==(). template<class Real > . bool sofa::type::Quat< Real >::operator== ; (; const Quat< Real > & ; q); const. ◆ operator[]() [1/2]. template<class Real > . constexpr Real& sofa::type::Quat< Real >::operator[] ; (; Size ; index). inlineconstexpr . ◆ operator[]() [2/2]. template<class Real > . constexpr const Real& sofa::type::Quat< Real >::operator[] ; (; Size ; index); const. inlineconstexpr . ◆ ptr() [1/2]. template<class Real > . Real* sofa::type::Quat< Real >::ptr ; (; ). inline . Cast into a standard C array of elements. . ◆ ptr() [2/2]. template<class Real > . const Real* ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:1551,Usability,clear,clear,1551,"texpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  . Public Member Functions; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) const -> Vec3;  Apply the inverse rotation to a given vector. More...;  ; auto operator+ (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Real &r) const -> Quat;  ; auto operator/ (const Real &r) const -> Quat;  ; void operator*= (const Real &r);  ; void operator/= (const Real &r);  ; constexpr auto quatVectMult (const Vec3 &vect) const -> Quat;  Given two Quats, multiply them together to get a third quaternion. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:8012,Usability,clear,clear,8012,"Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo. ; vFrom and vTo are assumed to be normalized. . Function details. ◆ angularDisplacement(). template<class Real > . auto sofa::type::Quat< Real >::angularDisplacement ; (; const Quat< Real > & ; a, . const Quat< Real > & ; b . ); -> Vec3. static . Return the eulerian vector resulting of the movement between 2 quaternions. . ◆ axisToQuat(). template<class Real > . auto sofa::type::Quat< Real >::axisToQuat ; (; Vec3 ; a, . Real ; phi . ); -> Quat. Given an axis and angle, compute quaternion. ; This function computes a quaternion based on an axis (defined by the given vector) and an angle about which to rotate. The angle is expressed in radians. . ◆ buildRotationMatrix(). template<class Real > . constexpr void sofa::type::Quat< Real >::buildRotationMatrix ; (; Real ; m[4][4]); const. inlineconstexpr . A useful function, builds a rotation matrix in Matrix based on given quaternion. . ◆ clear(). template<class Real > . void sofa::type::Quat< Real >::clear ; (; ). inline . ◆ createFromRotationVector() [1/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; const Vec3 & ; a); -> Quat. static . Create using rotation vector (axis*angle) given in parent coordinates. . ◆ createFromRotationVector() [2/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; Real ; a0, . Real ; a1, . Real ; a2 . ); -> Quat. static . Create using the entries of a rotation vector (axis*angle) given in parent coordinates. . ◆ createQuaterFromEuler(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromEuler ; (; const Vec3 & ; v, . EulerOrder ; order = EulerOrder::ZYX . ); -> Quat. static . ◆ createQuaterFromFrame(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromFrame ; (; const Vec3 & ; lox, . const Vec3 & ; loy, . const Vec3 & ; loz . ); -> Quat. static . ◆ fromEuler(). template<class R",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html:8076,Usability,clear,clear,8076,"ate direction vector vFrom to direction vector vTo. ; vFrom and vTo are assumed to be normalized. . Function details. ◆ angularDisplacement(). template<class Real > . auto sofa::type::Quat< Real >::angularDisplacement ; (; const Quat< Real > & ; a, . const Quat< Real > & ; b . ); -> Vec3. static . Return the eulerian vector resulting of the movement between 2 quaternions. . ◆ axisToQuat(). template<class Real > . auto sofa::type::Quat< Real >::axisToQuat ; (; Vec3 ; a, . Real ; phi . ); -> Quat. Given an axis and angle, compute quaternion. ; This function computes a quaternion based on an axis (defined by the given vector) and an angle about which to rotate. The angle is expressed in radians. . ◆ buildRotationMatrix(). template<class Real > . constexpr void sofa::type::Quat< Real >::buildRotationMatrix ; (; Real ; m[4][4]); const. inlineconstexpr . A useful function, builds a rotation matrix in Matrix based on given quaternion. . ◆ clear(). template<class Real > . void sofa::type::Quat< Real >::clear ; (; ). inline . ◆ createFromRotationVector() [1/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; const Vec3 & ; a); -> Quat. static . Create using rotation vector (axis*angle) given in parent coordinates. . ◆ createFromRotationVector() [2/2]. template<class Real > . auto sofa::type::Quat< Real >::createFromRotationVector ; (; Real ; a0, . Real ; a1, . Real ; a2 . ); -> Quat. static . Create using the entries of a rotation vector (axis*angle) given in parent coordinates. . ◆ createQuaterFromEuler(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromEuler ; (; const Vec3 & ; v, . EulerOrder ; order = EulerOrder::ZYX . ); -> Quat. static . ◆ createQuaterFromFrame(). template<class Real > . auto sofa::type::Quat< Real >::createQuaterFromFrame ; (; const Vec3 & ; lox, . const Vec3 & ; loy, . const Vec3 & ; loz . ); -> Quat. static . ◆ fromEuler(). template<class Real > . auto sofa::type::Quat< Real >::fromEuler ; (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::QuatNoInit< Real > Member List . This is the complete list of members for sofa::type::QuatNoInit< Real >, including all inherited members. angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html:473,Usability,clear,clear,473," angularDisplacement(const Quat &a, const Quat &b) -> Vec3sofa::type::Quat< Real >static; axisToQuat(Vec3 a, Real phi) -> Quatsofa::type::Quat< Real >; buildRotationMatrix(Real m[4][4]) constsofa::type::Quat< Real >inline; clear()sofa::type::Quat< Real >inline; createFromRotationVector(const Vec3 &a) -> Quatsofa::type::Quat< Real >static; createFromRotationVector(Real a0, Real a1, Real a2) -> Quatsofa::type::Quat< Real >static; createQuaterFromEuler(const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; createQuaterFromFrame(const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quatsofa::type::Quat< Real >static; EulerOrder enum namesofa::type::Quat< Real >; fromEuler(Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quatsofa::type::Quat< Real >static; fromFrame(const Vec3 &x, const Vec3 &y, const Vec3 &z)sofa::type::Quat< Real >; fromMatrix(const Mat3x3 &m)sofa::type::Quat< Real >; identity()sofa::type::Quat< Real >inlinestatic; inverse() const -> Quatsofa::type::Quat< Real >; inverseRotate(const Vec3 &v) const -> Vec3sofa::type::Quat< Real >inline; isNormalized()sofa::type::Quat< Real >; normalize()sofa::type::Quat< Real >; operator!=(const Quat &q) constsofa::type::Quat< Real >; operator*(const Quat &q1) const -> Quatsofa::type::Quat< Real >inline; operator*(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator*=(const Real &r)sofa::type::Quat< Real >inline; operator*=(const Quat &q1)sofa::type::Quat< Real >inline; operator+(const Quat &q1) const -> Quatsofa::type::Quat< Real >; operator+=(const Quat &q2)sofa::type::Quat< Real >; operator/(const Real &r) const -> Quatsofa::type::Quat< Real >inline; operator/=(const Real &r)sofa::type::Quat< Real >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:644,Modifiability,inherit,inherited,644,"﻿. SOFA API: sofa::type::QuatNoInit< Real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::QuatNoInit< Real > Class Template Reference . #include <Quat.h>; Same as Quat except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::QuatNoInit< Real >:. [legend]; Detailed Description; template<class Real>; class sofa::type::QuatNoInit< Real >; Same as Quat except the values are not initialized by default. . Public Member Functions; constexpr QuatNoInit () noexcept;  ;  Public Member Functions inherited from sofa::type::Quat< Real >; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:3949,Modifiability,inherit,inherited,3949,"RotationMatrix (Real m[4][4]) const;  ; constexpr void writeOpenGlMatrix (double *m) const;  ; constexpr void writeOpenGlMatrix (float *m) const;  ; auto axisToQuat (Vec3 a, Real phi) -> Quat;  Given an axis and angle, compute quaternion. More...;  ; void quatToAxis (Vec3 &a, Real &phi) const;  Given a quaternion, compute an axis and angle. More...;  ; void setFromUnitVectors (const Vec3 &vFrom, const Vec3 &vTo);  Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo. vFrom and vTo are assumed to be normalized. More...;  ; auto slerp (const Quat &q1, Real t) const -> Quat;  ; auto slerp2 (const Quat &q1, Real t) const -> Quat;  ; void operator+= (const Quat &q2);  ; constexpr void operator*= (const Quat &q1);  ; bool operator== (const Quat &q) const;  ; bool operator!= (const Quat &q) const;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::type::Quat< Real >; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  ;  Static Public Member Functions inherited from sofa::type::Quat< Real >; static Quat identity ();  ; static auto createQuaterFromFrame (const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quat;  ; static auto createFromRotationVector (const Vec3 &a) -> Quat;  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto createQuaterFromEuler (const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quat;  ; static auto fromEuler (Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quat;  Create a quaternion from Euler angles. More...;  ; static auto createFromRotationVector (Real a0, Real a1, Real a2) -> Quat;  Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:4396,Modifiability,inherit,inherited,4396,"r vFrom to direction vector vTo. vFrom and vTo are assumed to be normalized. More...;  ; auto slerp (const Quat &q1, Real t) const -> Quat;  ; auto slerp2 (const Quat &q1, Real t) const -> Quat;  ; void operator+= (const Quat &q2);  ; constexpr void operator*= (const Quat &q1);  ; bool operator== (const Quat &q) const;  ; bool operator!= (const Quat &q) const;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::type::Quat< Real >; static constexpr Size static_size = 4;  ; static constexpr Size total_size = 4;  Compile-time constant specifying the number of scalars within this vector (equivalent to the size() method) More...;  ; static constexpr Size spatial_dimensions = 3;  Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for quaternions) More...;  ;  Static Public Member Functions inherited from sofa::type::Quat< Real >; static Quat identity ();  ; static auto createQuaterFromFrame (const Vec3 &lox, const Vec3 &loy, const Vec3 &loz) -> Quat;  ; static auto createFromRotationVector (const Vec3 &a) -> Quat;  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto createQuaterFromEuler (const Vec3 &v, EulerOrder order=EulerOrder::ZYX) -> Quat;  ; static auto fromEuler (Real alpha, Real beta, Real gamma, EulerOrder order=EulerOrder::ZYX) -> Quat;  Create a quaternion from Euler angles. More...;  ; static auto createFromRotationVector (Real a0, Real a1, Real a2) -> Quat;  Create using the entries of a rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto set (const Vec3 &a);  Create using rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto set (Real a0, Real a1, Real a2);  Create using using the entries of a rotation vector (axis*angle) given in parent coordinates. More...;  ; static auto quatDiff (Quat a, const Quat &b) -> Quat;  Return the quaternion resulting of the movement between 2 quaternions. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html:1430,Usability,clear,clear,1430,"s Quat except the values are not initialized by default. . Public Member Functions; constexpr QuatNoInit () noexcept;  ;  Public Member Functions inherited from sofa::type::Quat< Real >; constexpr Quat ();  ; constexpr Quat (qNoInit);  Fast constructor: no initialization. More...;  ;  ~Quat ()=default;  ; constexpr Quat (Real x, Real y, Real z, Real w);  ; template<class Real2 > ; constexpr Quat (const Real2 q[]);  ; template<class Real2 > ; constexpr Quat (const Quat< Real2 > &q);  ;  Quat (const Vec3 &axis, Real angle);  ;  Quat (const Vec3 &vFrom, const Vec3 &vTo);  ; void set (Real x, Real y, Real z, Real w);  ; const Real * ptr () const;  Cast into a standard C array of elements. More...;  ; Real * ptr ();  Cast into a standard C array of elements. More...;  ; bool isNormalized ();  Returns true if norm of Quaternion is one, false otherwise. More...;  ; void normalize ();  Normalize a quaternion. More...;  ; void clear ();  ; void fromFrame (const Vec3 &x, const Vec3 &y, const Vec3 &z);  Convert the reference frame orientation into an orientation quaternion. More...;  ; void fromMatrix (const Mat3x3 &m);  Convert a rotation matrix into an orientation quaternion. More...;  ; void toMatrix (Mat3x3 &m) const;  Convert the quaternion into an orientation matrix. More...;  ; constexpr void toHomogeneousMatrix (Mat4x4 &m) const;  ; constexpr auto rotate (const Vec3 &v) const -> Vec3;  Apply the rotation to a given vector. More...;  ; constexpr auto inverseRotate (const Vec3 &v) const -> Vec3;  Apply the inverse rotation to a given vector. More...;  ; auto operator+ (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Quat &q1) const -> Quat;  ; constexpr auto operator* (const Real &r) const -> Quat;  ; auto operator/ (const Real &r) const -> Quat;  ; void operator*= (const Real &r);  ; void operator/= (const Real &r);  ; constexpr auto quatVectMult (const Vec3 &vect) const -> Quat;  Given two Quats, multiply them together to get a third quaternion. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_quat_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html:202,Modifiability,inherit,inherited,202,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Ray Member List . This is the complete list of members for sofa::type::Ray, including all inherited members. direction() constsofa::type::Rayinline; getPoint(double z) constsofa::type::Rayinline; origin() constsofa::type::Rayinline; Ray(const Vec3 &origin=Vec3(0, 0, 0), const Vec3 &direction=Vec3(0, 0, 0))sofa::type::Rayinline; setDirection(const Vec3 &direction)sofa::type::Rayinline; setOrigin(const Vec3 &origin)sofa::type::Rayinline. Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_ray-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html:1895,Energy Efficiency,green,green,1895,"ay()sofa::type::RGBAColorstatic; data() const noexceptsofa::type::RGBAColorinline; end() noexceptsofa::type::RGBAColorinline; end() const noexceptsofa::type::RGBAColorinline; fromFloat(float r, float g, float b, float a)sofa::type::RGBAColorstatic; fromHSVA(float h, float s, float v, float a)sofa::type::RGBAColorstatic; fromStdArray(const std::array< float, 4 > &color)sofa::type::RGBAColorstatic; fromStdArray(const std::array< double, 4 > &color)sofa::type::RGBAColorstatic; fromString(const std::string &str)sofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< float, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< double, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4f &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4d &color)=deletesofa::type::RGBAColorstatic; g()sofa::type::RGBAColorinline; g() constsofa::type::RGBAColorinline; g(const float g)sofa::type::RGBAColorinline; gray()sofa::type::RGBAColorstatic; green()sofa::type::RGBAColorstatic; lighten(const RGBAColor &in, const SReal factor)sofa::type::RGBAColorstatic; lightgray()sofa::type::RGBAColorstatic; magenta()sofa::type::RGBAColorstatic; NumberOfComponentssofa::type::RGBAColorstatic; operator!=(const RGBAColor &b) constsofa::type::RGBAColorinline; operator*(float f) constsofa::type::RGBAColor; operator<(const RGBAColor &b) constsofa::type::RGBAColorinline; operator<<(std::ostream &i, const RGBAColor &t)sofa::type::RGBAColorfriend; operator==(const RGBAColor &b) constsofa::type::RGBAColorinline; operator>>(std::istream &i, RGBAColor &t)sofa::type::RGBAColorfriend; operator[](std::size_t i)sofa::type::RGBAColorinline; operator[](std::size_t i) constsofa::type::RGBAColorinline; r()sofa::type::RGBAColorinline; r() constsofa::type::RGBAColorinline; r(const float r)sofa::type::RGBAColorinline; read(const std::string &str, RGBAColor &color)sofa::type::RGBAColorstatic; red()sofa::type::RGBAColorstatic; RGBAColor()sofa::type::RGBAColorinline; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html:214,Modifiability,inherit,inherited,214,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::RGBAColor Member List . This is the complete list of members for sofa::type::RGBAColor, including all inherited members. a()sofa::type::RGBAColorinline; a() constsofa::type::RGBAColorinline; a(const float a)sofa::type::RGBAColorinline; array() const noexceptsofa::type::RGBAColorinline; array() noexceptsofa::type::RGBAColorinline; b()sofa::type::RGBAColorinline; b() constsofa::type::RGBAColorinline; b(const float b)sofa::type::RGBAColorinline; begin() noexceptsofa::type::RGBAColorinline; begin() const noexceptsofa::type::RGBAColorinline; black()sofa::type::RGBAColorstatic; blue()sofa::type::RGBAColorstatic; clamp(const RGBAColor &color, float min, float max)sofa::type::RGBAColorinlinestatic; ComponentArray typedefsofa::type::RGBAColor; cyan()sofa::type::RGBAColorstatic; darkgray()sofa::type::RGBAColorstatic; data() const noexceptsofa::type::RGBAColorinline; end() noexceptsofa::type::RGBAColorinline; end() const noexceptsofa::type::RGBAColorinline; fromFloat(float r, float g, float b, float a)sofa::type::RGBAColorstatic; fromHSVA(float h, float s, float v, float a)sofa::type::RGBAColorstatic; fromStdArray(const std::array< float, 4 > &color)sofa::type::RGBAColorstatic; fromStdArray(const std::array< double, 4 > &color)sofa::type::RGBAColorstatic; fromString(const std::string &str)sofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< float, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< double, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4f &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4d &color)=deletesofa::type::RGBAColorstatic; g()sofa::type::RGBAColorinline; g() constsofa::type::RGBAColorinline; g(const float g)sofa::type::RGBAColorinline; gray()sofa::type::RGBAColorstatic; green()sofa::type::RGBAColorstatic; lighten(const RGBAColor &in, const SReal factor)sofa::type::RGBAColors",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:2988,Energy Efficiency,green,green,2988,"texpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &color);  ; constexpr static const RGBAColor & white ();  ; constexpr static const RGBAColor & black ();  ; constexpr static const RGBAColor & red ();  ; constexpr static const RGBAColor & green ();  ; constexpr static const RGBAColor & blue ();  ; constexpr static const RGBAColor & cyan ();  ; constexpr static const RGBAColor & magenta ();  ; constexpr static const RGBAColor & yellow ();  ; constexpr static const RGBAColor & gray ();  ; constexpr static const RGBAColor & darkgray ();  ; constexpr static const RGBAColor & lightgray ();  ; static RGBAColor lighten (const RGBAColor &in, const SReal factor);  enlight a color by a given factor. More...;  ; static constexpr RGBAColor clamp (const RGBAColor &color, float min, float max);  ; static constexpr sofa::Size size ();  . Friends; SOFA_TYPE_API std::ostream & operator<< (std::ostream &i, const RGBAColor &t);  Write to an output stream. More...;  ; SOFA_TYPE_API std::istream & operator>> (std::istream &i, RG",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8063,Energy Efficiency,green,green,8063,"float, 4 > & ; color). static . ◆ fromString(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGB",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8123,Energy Efficiency,green,green,8123,"String(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1739,Security,access,access,1739,"ic Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::RGBAColor Class Reference . #include <RGBAColor.h>; encode a 4 RGBA component color ; More...; Detailed Description; encode a 4 RGBA component color . Static Public Attributes; static constexpr sofa::Size NumberOfComponents = 4;  ; static constexpr sofa::Size static_size = NumberOfComponents;  . Public Member Functions; constexpr RGBAColor ();  ; constexpr RGBAColor (const std::array< float, NumberOfComponents > &c);  ; constexpr RGBAColor (float r, float g, float b, float a);  ;  RGBAColor (const type::fixed_array< float, NumberOfComponents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1821,Security,access,access,1821,"nents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5063,Security,access,access,5063," constexpr sofa::type::RGBAColor::RGBAColor ; (; ). inlineconstexpr . ◆ RGBAColor() [2/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5194,Security,access,access,5194,"or ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆ cyan(). constexpr const RGBAColor & sofa::type::RGBAColor::cyan ; (; ). staticconstexpr . ◆ darkgray(). constexpr const RGBAColor ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::SpatialVector< TReal > Member List . This is the complete list of members for sofa::type::SpatialVector< TReal >, including all inherited members. clear()sofa::type::SpatialVector< TReal >; cross(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; freeVecsofa::type::SpatialVector< TReal >; getAngularVelocity()sofa::type::SpatialVector< TReal >inline; getAngularVelocity() constsofa::type::SpatialVector< TReal >inline; getForce()sofa::type::SpatialVector< TReal >inline; getForce() constsofa::type::SpatialVector< TReal >inline; getLinearVelocity()sofa::type::SpatialVector< TReal >inline; getLinearVelocity() constsofa::type::SpatialVector< TReal >inline; getTorque()sofa::type::SpatialVector< TReal >inline; getTorque() constsofa::type::SpatialVector< TReal >inline; lineVecsofa::type::SpatialVector< TReal >; Mat66 typedefsofa::type::SpatialVector< TReal >; operator*(Real a) constsofa::type::SpatialVector< TReal >inline; operator*(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator*(const Mat66 &) constsofa::type::SpatialVector< TReal >; operator*=(Real a)sofa::type::SpatialVector< TReal >inline; operator+(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator+=(const SpatialVector &v)sofa::type::SpatialVector< TReal >; operator-(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator-() constsofa::type::SpatialVector< TReal >; operator<<(std::ostream &out, const SpatialVector &t)sofa::type::SpatialVector< TReal >friend; operator>>(std::istream &in, SpatialVector &t)sofa::type::SpatialVector< TReal >friend; Real typedefsofa::type::SpatialVector< TReal >; setAngularVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setForce(const Vec &v)sofa::type::SpatialVector< TReal >inline; setLinearVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setTorque(const Vec &v)sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html:259,Usability,clear,clear,259,"ll inherited members. clear()sofa::type::SpatialVector< TReal >; cross(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; freeVecsofa::type::SpatialVector< TReal >; getAngularVelocity()sofa::type::SpatialVector< TReal >inline; getAngularVelocity() constsofa::type::SpatialVector< TReal >inline; getForce()sofa::type::SpatialVector< TReal >inline; getForce() constsofa::type::SpatialVector< TReal >inline; getLinearVelocity()sofa::type::SpatialVector< TReal >inline; getLinearVelocity() constsofa::type::SpatialVector< TReal >inline; getTorque()sofa::type::SpatialVector< TReal >inline; getTorque() constsofa::type::SpatialVector< TReal >inline; lineVecsofa::type::SpatialVector< TReal >; Mat66 typedefsofa::type::SpatialVector< TReal >; operator*(Real a) constsofa::type::SpatialVector< TReal >inline; operator*(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator*(const Mat66 &) constsofa::type::SpatialVector< TReal >; operator*=(Real a)sofa::type::SpatialVector< TReal >inline; operator+(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator+=(const SpatialVector &v)sofa::type::SpatialVector< TReal >; operator-(const SpatialVector &v) constsofa::type::SpatialVector< TReal >; operator-() constsofa::type::SpatialVector< TReal >; operator<<(std::ostream &out, const SpatialVector &t)sofa::type::SpatialVector< TReal >friend; operator>>(std::istream &in, SpatialVector &t)sofa::type::SpatialVector< TReal >friend; Real typedefsofa::type::SpatialVector< TReal >; setAngularVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setForce(const Vec &v)sofa::type::SpatialVector< TReal >inline; setLinearVelocity(const Vec &v)sofa::type::SpatialVector< TReal >inline; setTorque(const Vec &v)sofa::type::SpatialVector< TReal >inline; SpatialVector()=defaultsofa::type::SpatialVector< TReal >; SpatialVector(const Vec &l, const Vec &f)sofa::type::SpatialVector< TReal >; Vec typedefsofa::type::SpatialVector< TReal >. Generated on Mon Nov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:793,Usability,clear,clear,793,"sofa::type::SpatialVector< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Friends |; List of all members . sofa::type::SpatialVector< TReal > Class Template Reference . #include <SpatialVector.h>. Inheritance diagram for sofa::type::SpatialVector< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::type::SpatialVector< TReal >; A spatial vector. When representing a velocity, lineVec is the angular velocity and freeVec is the linear velocity. When representing a spatial force, lineVec is the force and freeVec is the torque. . Public Attributes; Vec lineVec { type::NOINIT };  ; Vec freeVec { type::NOINIT };  . Public Member Functions; void clear ();  ;  SpatialVector ()=default;  ;  SpatialVector (const Vec &l, const Vec &f);  ; SpatialVector & operator+= (const SpatialVector &v);  ; SpatialVector operator* (Real a) const;  ; SpatialVector & operator*= (Real a);  ; SpatialVector operator+ (const SpatialVector &v) const;  ; SpatialVector operator- (const SpatialVector &v) const;  ; SpatialVector operator- () const;  ; Real operator* (const SpatialVector &v) const;  Spatial dot product (cross terms) More...;  ; SpatialVector cross (const SpatialVector &v) const;  Spatial cross product. More...;  ; SpatialVector operator* (const Mat66 &) const;  product with a dense matrix More...;  ; Vec & getLinearVelocity ();  ; const Vec & getLinearVelocity () const;  ; void setLinearVelocity (const Vec &v);  ; Vec & getAngularVelocity ();  ; const Vec & getAngularVelocity () const;  ; void setAngularVelocity (const Vec &v);  ; Vec & getTorque ();  ; const Vec & getTorque () const;  ; void setTorque (const Vec &v);  ; Vec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:2719,Usability,clear,clear,2719,"Torque () const;  ; void setTorque (const Vec &v);  ; Vec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, SpatialVector &t);  read from an input stream More...;  . Attribute details. ◆ freeVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::freeVec { type::NOINIT }. ◆ lineVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::lineVec { type::NOINIT }. Constructor details. ◆ SpatialVector() [1/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; ). default . ◆ SpatialVector() [2/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; const Vec & ; l, . const Vec & ; f . ). Parameters. lThe line vector: angular velocity, or force ; fThe free vector: linear velocity, or torque . Function details. ◆ clear(). template<class TReal > . void sofa::type::SpatialVector< TReal >::clear. ◆ cross(). template<class TReal > . SpatialVector< TReal > sofa::type::SpatialVector< TReal >::cross ; (; const SpatialVector< TReal > & ; v); const. Spatial cross product. . ◆ getAngularVelocity() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ). inline . If the SpatialVector models a spatial velocity, then the angular velocity is the lineVec. Otherwise, the SpatialVector models a spatial force, and this method returns a force. . ◆ getAngularVelocity() [2/2]. template<class TReal > . const Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ); const. inline . ◆ getForce() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getForce ; (; ). inline . If the SpatialVector models a spatial force, then the torque is the lineVec. Otherwise, the SpatialVector models a spatial velocity, and this method returns an angular velocity. .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html:2794,Usability,clear,clear,2794,"ec & getForce ();  ; const Vec & getForce () const;  ; void setForce (const Vec &v);  . Friends; std::ostream & operator<< (std::ostream &out, const SpatialVector &t);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, SpatialVector &t);  read from an input stream More...;  . Attribute details. ◆ freeVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::freeVec { type::NOINIT }. ◆ lineVec. template<class TReal > . Vec sofa::type::SpatialVector< TReal >::lineVec { type::NOINIT }. Constructor details. ◆ SpatialVector() [1/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; ). default . ◆ SpatialVector() [2/2]. template<class TReal > . sofa::type::SpatialVector< TReal >::SpatialVector ; (; const Vec & ; l, . const Vec & ; f . ). Parameters. lThe line vector: angular velocity, or force ; fThe free vector: linear velocity, or torque . Function details. ◆ clear(). template<class TReal > . void sofa::type::SpatialVector< TReal >::clear. ◆ cross(). template<class TReal > . SpatialVector< TReal > sofa::type::SpatialVector< TReal >::cross ; (; const SpatialVector< TReal > & ; v); const. Spatial cross product. . ◆ getAngularVelocity() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ). inline . If the SpatialVector models a spatial velocity, then the angular velocity is the lineVec. Otherwise, the SpatialVector models a spatial force, and this method returns a force. . ◆ getAngularVelocity() [2/2]. template<class TReal > . const Vec& sofa::type::SpatialVector< TReal >::getAngularVelocity ; (; ); const. inline . ◆ getForce() [1/2]. template<class TReal > . Vec& sofa::type::SpatialVector< TReal >::getForce ; (; ). inline . If the SpatialVector models a spatial force, then the torque is the lineVec. Otherwise, the SpatialVector models a spatial velocity, and this method returns an angular velocity. . ◆ getForce() [2/2]. template<class TReal > . const Ve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_spatial_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html:220,Modifiability,inherit,inherited,220,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::SVector< T > Member List . This is the complete list of members for sofa::type::SVector< T >, including all inherited members. Alloc typedefsofa::type::SVector< T >; const_reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; fastResize(Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; fill(const T &value)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; Inherit typedefsofa::type::SVector< T >; memory_manager typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; operator<<(std::ostream &os, const SVector< T > &vec)sofa::type::SVector< T >friend; operator=(const Inherit &x)sofa::type::SVector< T >inline; operator=(Inherit &&v)sofa::type::SVector< T >inline; vector< T, type::CPUMemoryManager< T > >::operator=(const std::vector< T, Alloc > &x)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; vector< T, type::CPUMemoryManager< T > >::operator=(std::vector< T, Alloc > &&v)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator>>(std::istream &in, SVector< T > &vec)sofa::type::SVector< T >friend; operator[](Size n)sofa::type::vector< T, type::CPUMemoryManager< T > >inline; operator[](Size n) constsofa::type::vector< T, type::CPUMemoryManager< T > >inline; read(std::istream &in)sofa::type::SVector< T >inline; read(std::istream &in)sofa::type::SVector< T >; read(std::istream &in)sofa::type::SVector< T >; rebind_to typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; reference typedefsofa::type::vector< T, type::CPUMemoryManager< T > >; Size typedefsofa::type::SVector< T >; SVector()sofa::type::SVector< T >inline; SVector(Size n, const T &value)sofa::type::SVector< T >inline; SVector(int n, const T &value)sofa::type::SVector< T >inline; SVector(long n, const T &value)sofa::type::SVector< T >inline; SVector(Size n)sofa::type::SVector< T >inlineexplicit; SVector(const Inherit &x)sofa::ty",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:1556,Modifiability,inherit,inherited,1556,"class sofa::type::SVector< T >; Same as type::vector, + delimiters on serialization. . Public Member Functions;  SVector ();  reference to a value (read-write) More...;  ;  SVector (Size n, const T &value);  Constructor. More...;  ;  SVector (int n, const T &value);  Constructor. More...;  ;  SVector (long n, const T &value);  Constructor. More...;  ;  SVector (Size n);  Constructor. More...;  ;  SVector (const Inherit &x);  Constructor. More...;  ;  SVector (Inherit &&v);  Move constructor. More...;  ; SVector< T > & operator= (const Inherit &x);  Copy operator. More...;  ; SVector< T > & operator= (Inherit &&v);  Move assignment operator. More...;  ;  SVector (typename SVector< T >::const_iterator first, typename SVector< T >::const_iterator last);  Constructor. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2349,Security,access,access,2349,"E_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2430,Security,access,access,2430," & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Transform< TReal > Member List . This is the complete list of members for sofa::type::Transform< TReal >, including all inherited members. backProjectPoint(const Vec &pointInParent) constsofa::type::Transform< TReal >; backProjectVector(const Vec &vectorInParent) constsofa::type::Transform< TReal >; clear()sofa::type::Transform< TReal >; CreateSpatialVector()sofa::type::Transform< TReal >; DTrans()sofa::type::Transform< TReal >; getAdjointMatrix() constsofa::type::Transform< TReal >; getOrientation() constsofa::type::Transform< TReal >; getOrigin() constsofa::type::Transform< TReal >; getOriginOfParentInChild() constsofa::type::Transform< TReal >; getRotationMatrix() constsofa::type::Transform< TReal >; identity()sofa::type::Transform< TReal >static; inversed() constsofa::type::Transform< TReal >; Mat3x3 typedefsofa::type::Transform< TReal >; Mat6x6 typedefsofa::type::Transform< TReal >; operator*(const Transform &f2) constsofa::type::Transform< TReal >; operator*(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator*(Real2 a) constsofa::type::Transform< TReal >inline; operator*=(const Transform &f2)sofa::type::Transform< TReal >; operator*=(Real2 a)sofa::type::Transform< TReal >inline; operator+=(const SpatialVector< TReal > &a)sofa::type::Transform< TReal >; operator+=(const Transform &a)sofa::type::Transform< TReal >; operator/(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator<<(std::ostream &out, const Transform &t)sofa::type::Transform< TReal >friend; operator>>(std::istream &in, Transform &t)sofa::type::Transform< TReal >friend; orientation_sofa::type::Transform< TReal >protected; origin_sofa::type::Transform< TReal >protected; printInternal(std::ostream &) constsofa::type::Transform< TReal >; projectPoint(const Vec &pointInChild) constsofa::type::Transform< TReal >; projectVector(const Vec &vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html:413,Usability,clear,clear,413," backProjectPoint(const Vec &pointInParent) constsofa::type::Transform< TReal >; backProjectVector(const Vec &vectorInParent) constsofa::type::Transform< TReal >; clear()sofa::type::Transform< TReal >; CreateSpatialVector()sofa::type::Transform< TReal >; DTrans()sofa::type::Transform< TReal >; getAdjointMatrix() constsofa::type::Transform< TReal >; getOrientation() constsofa::type::Transform< TReal >; getOrigin() constsofa::type::Transform< TReal >; getOriginOfParentInChild() constsofa::type::Transform< TReal >; getRotationMatrix() constsofa::type::Transform< TReal >; identity()sofa::type::Transform< TReal >static; inversed() constsofa::type::Transform< TReal >; Mat3x3 typedefsofa::type::Transform< TReal >; Mat6x6 typedefsofa::type::Transform< TReal >; operator*(const Transform &f2) constsofa::type::Transform< TReal >; operator*(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator*(Real2 a) constsofa::type::Transform< TReal >inline; operator*=(const Transform &f2)sofa::type::Transform< TReal >; operator*=(Real2 a)sofa::type::Transform< TReal >inline; operator+=(const SpatialVector< TReal > &a)sofa::type::Transform< TReal >; operator+=(const Transform &a)sofa::type::Transform< TReal >; operator/(const SpatialVector< TReal > &sv) constsofa::type::Transform< TReal >; operator<<(std::ostream &out, const Transform &t)sofa::type::Transform< TReal >friend; operator>>(std::istream &in, Transform &t)sofa::type::Transform< TReal >friend; orientation_sofa::type::Transform< TReal >protected; origin_sofa::type::Transform< TReal >protected; printInternal(std::ostream &) constsofa::type::Transform< TReal >; projectPoint(const Vec &pointInChild) constsofa::type::Transform< TReal >; projectVector(const Vec &vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4834,Deployability,integrat,integration,4834,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4868,Deployability,integrat,integration,4868,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6635,Deployability,integrat,integrated,6635,"rigin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6762,Deployability,integrat,integrated,6762,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6832,Deployability,integrat,integration,6832,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:11004,Deployability,integrat,integration,11004,"ne two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*() [3/3]. template<class TReal > . template<class Real2 > . Transform sofa::type::Transform< TReal >::operator* ; (; Real2 ; a); const. inline . ◆ operator*=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator*= ; (; const Transform< TReal > & ; f2). Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*=() [2/2]. template<class TReal > . template<class Real2 > . Transform& sofa::type::Transform< TReal >::operator*= ; (; Real2 ; a). inline . ◆ operator+=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const SpatialVector< TReal > & ; a). (this) *= Transform(v) Used for time integration. SHOULD WE RATHER APPLY (*this)=Transform(v)(*this) ??? . ◆ operator+=() [2/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const Transform< TReal > & ; a). ◆ operator/(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::operator/ ; (; const SpatialVector< TReal > & ; sv); const. Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). . ◆ printInternal(). template<class TReal > . void sofa::type::Transform< TReal >::printInternal ; (; std::ostream & ; out); const. Print the internal values (i.e. using Featherstone's conventions, see class documentation) . ◆ projectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::projectPoint ; (; const Vec & ; pointInChild); const. Project a point from child coordinates to parent coordinates. . ◆ projectVector(). template<class TReal > . T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4834,Integrability,integrat,integration,4834,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:4868,Integrability,integrat,integration,4868,";  ; Transform & operator*= (const Transform &f2);  Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. More...;  ; SpatialVector< TReal > CreateSpatialVector ();  ; SpatialVector< TReal > DTrans ();  ; SpatialVector< TReal > operator* (const SpatialVector< TReal > &sv) const;  ; SpatialVector< TReal > operator/ (const SpatialVector< TReal > &sv) const;  Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). More...;  ; void writeOpenGlMatrix (double *m) const;  Write an OpenGL matrix encoding the transformation of the coordinate system of the child wrt the coordinate system of the parent. More...;  ; void printInternal (std::ostream &) const;  Print the internal values (i.e. using Featherstone's conventions, see class documentation) More...;  ; Time integration; Methods used in time integration . Transform & operator+= (const SpatialVector< TReal > &a);  ; Transform & operator+= (const Transform &a);  ; template<class Real2 > ; Transform & operator*= (Real2 a);  ; template<class Real2 > ; Transform operator* (Real2 a) const;  . Static Public Member Functions; static Transform identity ();  The identity transform (child = parent) More...;  . Friends; std::ostream & operator<< (std::ostream &out, const Transform &t);  ; std::istream & operator>> (std::istream &in, Transform &t);  read from an input stream More...;  . Attribute details. ◆ orientation_. template<class TReal > . Rot sofa::type::Transform< TReal >::orientation_. protected . child wrt parent . ◆ origin_. template<class TReal > . Vec sofa::type::Transform< TReal >::origin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6635,Integrability,integrat,integrated,6635,"rigin_. protected . parent wrt child . Constructor details. ◆ Transform() [1/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform. The default constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6762,Integrability,integrat,integrated,6762,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6832,Integrability,integrat,integration,6832,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:11004,Integrability,integrat,integration,11004,"ne two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*() [3/3]. template<class TReal > . template<class Real2 > . Transform sofa::type::Transform< TReal >::operator* ; (; Real2 ; a); const. inline . ◆ operator*=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator*= ; (; const Transform< TReal > & ; f2). Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*=() [2/2]. template<class TReal > . template<class Real2 > . Transform& sofa::type::Transform< TReal >::operator*= ; (; Real2 ; a). inline . ◆ operator+=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const SpatialVector< TReal > & ; a). (this) *= Transform(v) Used for time integration. SHOULD WE RATHER APPLY (*this)=Transform(v)(*this) ??? . ◆ operator+=() [2/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const Transform< TReal > & ; a). ◆ operator/(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::operator/ ; (; const SpatialVector< TReal > & ; sv); const. Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). . ◆ printInternal(). template<class TReal > . void sofa::type::Transform< TReal >::printInternal ; (; std::ostream & ; out); const. Print the internal values (i.e. using Featherstone's conventions, see class documentation) . ◆ projectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::projectPoint ; (; const Vec & ; pointInChild); const. Project a point from child coordinates to parent coordinates. . ◆ projectVector(). template<class TReal > . T",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:1721,Usability,clear,clear,1721,"M in parent given the coordinates M_c of the same point in child are given by: M_p = orientation * ( M_c - origin ). This is due to Featherstone's conventions. Use method setTranslationRotation( const Vec& t, const Rot& q ) to model the Transform the standard way (i.e. translation given in the parent frame). . Protected Attributes; Rot orientation_;  child wrt parent More...;  ; Vec origin_;  parent wrt child More...;  . Public Member Functions;  Transform ();  The default constructor does not initialize the transform. More...;  ;  Transform (const Vec &origin, const Rot &orientation);  Origin of the child in parent coordinates, orientation of the child wrt to parent. More...;  ;  Transform (const Rot &q, const Vec &o);  WARNING: using Featherstone's conventions (see class documentation) More...;  ; void set (const Vec &t, const Rot &q);  Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) More...;  ; void clear ();  Reset this to identity. More...;  ;  Transform (const SpatialVector< TReal > &v);  Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) More...;  ; Transform inversed () const;  The inverse transform i.e. parent wrt child. More...;  ; const Vec & getOriginOfParentInChild () const;  Parent origin in child coordinates (the way it is actually stored internally) More...;  ; Vec getOrigin () const;  Origin of child in parent coordinates. More...;  ; void setOrigin (const Vec &);  Origin of child in parent coordinates. More...;  ; const Rot & getOrientation () const;  Orientation of the child coordinate axes wrt the parent coordinate axes. More...;  ; void setOrientation (const Rot &);  Orientation of the child coordinate axes wrt the parent coordinate axes. More...;  ; Mat3x3 getRotationMatrix () const;  Matrix which projects vectors from child coordinates to parent coordinates. The columns of the matrix are the axes of the c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:7373,Usability,clear,clear,7373,"plate<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its transpose to wrench : V_parent = Ad . V_child or W_child = Ad^T . W_parent To project a wrench in the child frame to the parent frame you need to do parent_wrench = this->inversed * child_wrench (this doc needs to be douv-ble checked !) . ◆ DTrans(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::DTrans. ◆ getAdjointMatrix(). template<class TReal > . auto sofa::type::Transform< TReal >::getAdjointMatrix. Adjoint matrix to the transform This matrix transports velocities in twist coordinates from the child frame to the parent frame. Its inverse transpose does the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:7444,Usability,clear,clear,7444,":Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its transpose to wrench : V_parent = Ad . V_child or W_child = Ad^T . W_parent To project a wrench in the child frame to the parent frame you need to do parent_wrench = this->inversed * child_wrench (this doc needs to be douv-ble checked !) . ◆ DTrans(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::DTrans. ◆ getAdjointMatrix(). template<class TReal > . auto sofa::type::Transform< TReal >::getAdjointMatrix. Adjoint matrix to the transform This matrix transports velocities in twist coordinates from the child frame to the parent frame. Its inverse transpose does the same for the wrenches. . ◆ getOrientation(). templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::TBoundingBox< TReal > Member List . This is the complete list of members for sofa::type::TBoundingBox< TReal >, including all inherited members. bboxsofa::type::BoundingBoxprotected; bbox_t typedefsofa::type::BoundingBox; BoundingBox()sofa::type::BoundingBox; BoundingBox(const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox)sofa::type::BoundingBox; BoundingBox(const bbox_t &bbox)sofa::type::BoundingBox; BoundingBox(SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax)sofa::type::BoundingBox; BoundingBox(const Vec6f &bbox)sofa::type::BoundingBox; BoundingBox(const Vec6d &bbox)sofa::type::BoundingBox; contains(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; contains(const BoundingBox &other) constsofa::type::BoundingBox; getInclude(const sofa::type::Vec3 &point) constsofa::type::BoundingBox; getInclude(const BoundingBox &other) constsofa::type::BoundingBox; getInflate(SReal amount) constsofa::type::BoundingBox; getIntersection(const BoundingBox &other) constsofa::type::BoundingBox; include(const sofa::type::Vec3 &point)sofa::type::BoundingBox; include(const BoundingBox &other)sofa::type::BoundingBox; inflate(SReal amount)sofa::type::BoundingBox; intersect(const BoundingBox &other) constsofa::type::BoundingBox; intersection(const BoundingBox &other)sofa::type::BoundingBox; invalidate()sofa::type::BoundingBox; isFlat() constsofa::type::BoundingBox; isNegligeable() constsofa::type::BoundingBox; isNull() constsofa::type::BoundingBox; isValid() constsofa::type::BoundingBox; maxBBox() constsofa::type::BoundingBox; maxBBox()sofa::type::BoundingBox; maxBBoxPtr()sofa::type::BoundingBox; maxBBoxPtr() constsofa::type::BoundingBox; minBBox() constsofa::type::BoundingBox; minBBox()sofa::type::BoundingBox; minBBoxPtr()sofa::type::BoundingBox; minBBoxPtr() constsofa::type::BoundingBox; neutral_bbox()sofa::type::BoundingBoxstatic; op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:493,Modifiability,inherit,inherited,493,"﻿. SOFA API: sofa::type::TBoundingBox< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::type::TBoundingBox< TReal > Class Template Reference . #include <BoundingBox.h>. Inheritance diagram for sofa::type::TBoundingBox< TReal >:. [legend]. Public Member Functions;  TBoundingBox (const TReal *minBBoxPtr, const TReal *maxBBoxPtr);  ;  TBoundingBox ();  ;  Public Member Functions inherited from sofa::type::BoundingBox;  BoundingBox ();  ;  BoundingBox (const sofa::type::Vec3 &minBBox, const sofa::type::Vec3 &maxBBox);  Define using the endpoints of the main diagonal. More...;  ;  BoundingBox (const bbox_t &bbox);  ;  BoundingBox (SReal xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:2189,Modifiability,inherit,inherited,2189,"xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::type::Vec3 &point) const;  ; BoundingBox getInclude (const BoundingBox &other) const;  ; BoundingBox getInflate (SReal amount) const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::type::BoundingBox; bbox_t bbox;  ;  Static Public Member Functions inherited from sofa::type::BoundingBox; static BoundingBox neutral_bbox ();  . Constructor details. ◆ TBoundingBox() [1/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; const TReal * ; minBBoxPtr, . const TReal * ; maxBBoxPtr . ). inline . ◆ TBoundingBox() [2/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; ). inline . sofatypeTBoundingBox; Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html:2277,Modifiability,inherit,inherited,2277,"xmin, SReal xmax, SReal ymin, SReal ymax, SReal zmin, SReal zmax);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6f &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  BoundingBox (const Vec6d &bbox);  Define using xmin, xmax, ymin, ymax, zmin, zmax in this order. More...;  ;  operator bbox_t () const;  ; void invalidate ();  ; bool isValid () const;  ; bool isFlat () const;  ; bool isNegligeable () const;  ; bool isNull () const;  ; SReal * minBBoxPtr ();  ; SReal * maxBBoxPtr ();  ; const SReal * minBBoxPtr () const;  ; const SReal * maxBBoxPtr () const;  ; const sofa::type::Vec3 & minBBox () const;  ; const sofa::type::Vec3 & maxBBox () const;  ; sofa::type::Vec3 & minBBox ();  ; sofa::type::Vec3 & maxBBox ();  ; bool contains (const sofa::type::Vec3 &point) const;  ; bool contains (const BoundingBox &other) const;  ; bool intersect (const BoundingBox &other) const;  ; void intersection (const BoundingBox &other);  ; void include (const sofa::type::Vec3 &point);  ; void include (const BoundingBox &other);  ; void inflate (SReal amount);  ; BoundingBox getIntersection (const BoundingBox &other) const;  ; BoundingBox getInclude (const sofa::type::Vec3 &point) const;  ; BoundingBox getInclude (const BoundingBox &other) const;  ; BoundingBox getInflate (SReal amount) const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::type::BoundingBox; bbox_t bbox;  ;  Static Public Member Functions inherited from sofa::type::BoundingBox; static BoundingBox neutral_bbox ();  . Constructor details. ◆ TBoundingBox() [1/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; const TReal * ; minBBoxPtr, . const TReal * ; maxBBoxPtr . ). inline . ◆ TBoundingBox() [2/2]. template<typename TReal > . sofa::type::TBoundingBox< TReal >::TBoundingBox ; (; ). inline . sofatypeTBoundingBox; Generated on Mon Nov 11 2024 03:36:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_t_bounding_box.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::Vec< N, ValueType > Member List . This is the complete list of members for sofa::type::Vec< N, ValueType >, including all inherited members. ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear() noexceptsofa::type::Vec< N, ValueType >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type::Vec< N, ValueType >inline; isNormalized(ValueType threshold=std::numeric_limits< ValueType >::epsilon() *(Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html:593,Usability,clear,clear,593," ArrayType typedefsofa::type::Vec< N, ValueType >; assign(const ValueType &value) noexceptsofa::type::Vec< N, ValueType >inline; back()sofa::type::Vec< N, ValueType >inline; back() constsofa::type::Vec< N, ValueType >inline; begin() noexceptsofa::type::Vec< N, ValueType >inline; begin() const noexceptsofa::type::Vec< N, ValueType >inline; clear() noexceptsofa::type::Vec< N, ValueType >inline; const_iterator typedefsofa::type::Vec< N, ValueType >; const_reference typedefsofa::type::Vec< N, ValueType >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, ValueType >inline; data() const noexceptsofa::type::Vec< N, ValueType >inline; difference_type typedefsofa::type::Vec< N, ValueType >; divscalar(const ValueType f) const noexceptsofa::type::Vec< N, ValueType >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, ValueType >inline; elemssofa::type::Vec< N, ValueType >; end() noexceptsofa::type::Vec< N, ValueType >inline; end() const noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const ValueType f) noexceptsofa::type::Vec< N, ValueType >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, ValueType >inline; fill(ValueType r) noexceptsofa::type::Vec< N, ValueType >inline; front()sofa::type::Vec< N, ValueType >inline; front() constsofa::type::Vec< N, ValueType >inline; getsub(const Size i, Vec< N2, ValueType > &m) const noexceptsofa::type::Vec< N, ValueType >inline; getsub(const Size i, ValueType &m) const noexceptsofa::type::Vec< N, ValueType >inline; isNormalized(ValueType threshold=std::numeric_limits< ValueType >::epsilon() *(Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3176,Security,access,access,3176,"te<Size N2, class real2 > ; constexpr void set (const Vec< N2, real2 > &v, ValueType defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3334,Security,access,access,3334,"en default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3493,Security,access,access,3493,"-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3651,Security,access,access,3651,"nst sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:3828,Security,access,access,3828,"a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4004,Security,access,access,4004,"<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4181,Security,access,access,4181,"e = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueTy",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4357,Security,access,access,4357," ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:5264,Security,access,access,5264,"N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real2 f) const noexcept;  ; constexpr void eqmulscalar (const ValueType f) noexcept;  In-place multipl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:22043,Security,access,access,22043,"ormalized(). template<sofa::Size N, typename ValueType > . Vec<N,ValueType> sofa::type::Vec< N, ValueType >::normalized ; (; ); const. inlinenoexcept . Return the normalized vector. Warning'this' is not normalized. . ◆ normalizeWithNorm(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::normalizeWithNorm ; (; ValueType ; norm, . ValueType ; threshold = std::numeric_limits<ValueType>::epsilon() . ). inlineconstexprnoexcept . Normalize the vector taking advantage of its already computed norm, equivalent to /=norm returns false iff the norm is too small . ◆ operator!=(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::operator!= ; (; const Vec< N, ValueType > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Const access to i-th element. . ◆ operator()() [2/2]. template<sofa::Size N, typename ValueType > . constexpr ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i). inlineconstexprnoexcept . Access to i-th element. . ◆ operator*() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::operator* ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ operator*() [2/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ValueType sofa::type::Vec< N, ValueType >::operator* ; (; const Vec< N, real2 > & ; v); const. inlineconstexprnoexcept . Dot product. . ◆ operator*=(). template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28620,Security,access,access,28620,"except . Specific set function for 1-element vectors. . ◆ set() [3/3]. template<sofa::Size N, typename ValueType > . template<Size N2, class real2 > . constexpr void sofa::type::Vec< N, ValueType >::set ; (; const Vec< N2, real2 > & ; v, . ValueType ; defaultvalue = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28880,Security,access,access,28880,"e = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29159,Security,access,access,29159,"taticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29418,Security,access,access,29418," . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29696,Security,access,access,29696,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29956,Security,access,access,29956,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:30235,Security,access,access,30235,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:30494,Security,access,access,30494,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:4965,Usability,clear,clear,4965,"pr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:15078,Usability,clear,clear,15078," > . template<typename real2 > . constexpr sofa::type::Vec< N, ValueType >::Vec ; (; const real2 * ; p). inlineexplicitconstexprnoexcept . Constructor from an array of values. . Function details. ◆ assign(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::assign ; (; const ValueType & ; value). inlineconstexprnoexcept . ◆ back() [1/2]. template<sofa::Size N, typename ValueType > . constexpr reference sofa::type::Vec< N, ValueType >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<sofa::Size N, typename ValueType > . constexpr const_reference sofa::type::Vec< N, ValueType >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const_iterator sofa::type::Vec< N, ValueType >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size N, typename ValueType > . constexpr iterator sofa::type::Vec< N, ValueType >::begin ; (; ). inlineconstexprnoexcept . ◆ clear(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::clear ; (; ). inlineconstexprnoexcept . Sets every element to 0. . ◆ cross(). template<sofa::Size N, typename ValueType > . template<typename R , Size NN = N, typename std::enable_if<(NN==3), int >::type = 0> . constexpr Vec sofa::type::Vec< N, ValueType >::cross ; (; const Vec< 3, R > & ; b); const. inlineconstexprnoexcept . ◆ data(). template<sofa::Size N, typename ValueType > . constexpr const ValueType* sofa::type::Vec< N, ValueType >::data ; (; ); const. inlineconstexprnoexcept . ◆ divscalar() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ divscalar() [2/2]. template<sofa::Size N, typename ValueType > . constexpr Vec<N,ValueType> sofa::type::Vec< N, Va",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:15181,Usability,clear,clear,15181,"; const real2 * ; p). inlineexplicitconstexprnoexcept . Constructor from an array of values. . Function details. ◆ assign(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::assign ; (; const ValueType & ; value). inlineconstexprnoexcept . ◆ back() [1/2]. template<sofa::Size N, typename ValueType > . constexpr reference sofa::type::Vec< N, ValueType >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<sofa::Size N, typename ValueType > . constexpr const_reference sofa::type::Vec< N, ValueType >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const_iterator sofa::type::Vec< N, ValueType >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<sofa::Size N, typename ValueType > . constexpr iterator sofa::type::Vec< N, ValueType >::begin ; (; ). inlineconstexprnoexcept . ◆ clear(). template<sofa::Size N, typename ValueType > . constexpr void sofa::type::Vec< N, ValueType >::clear ; (; ). inlineconstexprnoexcept . Sets every element to 0. . ◆ cross(). template<sofa::Size N, typename ValueType > . template<typename R , Size NN = N, typename std::enable_if<(NN==3), int >::type = 0> . constexpr Vec sofa::type::Vec< N, ValueType >::cross ; (; const Vec< 3, R > & ; b); const. inlineconstexprnoexcept . ◆ data(). template<sofa::Size N, typename ValueType > . constexpr const ValueType* sofa::type::Vec< N, ValueType >::data ; (; ); const. inlineconstexprnoexcept . ◆ divscalar() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ divscalar() [2/2]. template<sofa::Size N, typename ValueType > . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::divscalar ; (; const ValueType ; f); const. inlineconstexprnoexcept . D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::VecNoInit< N, real > Member List . This is the complete list of members for sofa::type::VecNoInit< N, real >, including all inherited members. ArrayType typedefsofa::type::Vec< N, real >; assign(const real &value) noexceptsofa::type::Vec< N, real >inline; back()sofa::type::Vec< N, real >inline; back() constsofa::type::Vec< N, real >inline; begin() noexceptsofa::type::Vec< N, real >inline; begin() const noexceptsofa::type::Vec< N, real >inline; clear() noexceptsofa::type::Vec< N, real >inline; const_iterator typedefsofa::type::Vec< N, real >; const_reference typedefsofa::type::Vec< N, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, real >inline; data() const noexceptsofa::type::Vec< N, real >inline; difference_type typedefsofa::type::Vec< N, real >; divscalar(const real f) const noexceptsofa::type::Vec< N, real >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, real >inline; elemssofa::type::Vec< N, real >; end() noexceptsofa::type::Vec< N, real >inline; end() const noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; fill(real r) noexceptsofa::type::Vec< N, real >inline; front()sofa::type::Vec< N, real >inline; front() constsofa::type::Vec< N, real >inline; getsub(const Size i, Vec< N2, real > &m) const noexceptsofa::type::Vec< N, real >inline; getsub(const Size i, real &m) const noexceptsofa::type::Vec< N, real >inline; isNormalized(real threshold=std::numeric_limits< real >::epsilon() *(real) 10) constsofa::type::Vec< N, real >inline; iterator typedefsofa::type::Vec< N, real >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, real >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html:560,Usability,clear,clear,560," ArrayType typedefsofa::type::Vec< N, real >; assign(const real &value) noexceptsofa::type::Vec< N, real >inline; back()sofa::type::Vec< N, real >inline; back() constsofa::type::Vec< N, real >inline; begin() noexceptsofa::type::Vec< N, real >inline; begin() const noexceptsofa::type::Vec< N, real >inline; clear() noexceptsofa::type::Vec< N, real >inline; const_iterator typedefsofa::type::Vec< N, real >; const_reference typedefsofa::type::Vec< N, real >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, real >inline; data() const noexceptsofa::type::Vec< N, real >inline; difference_type typedefsofa::type::Vec< N, real >; divscalar(const real f) const noexceptsofa::type::Vec< N, real >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, real >inline; elemssofa::type::Vec< N, real >; end() noexceptsofa::type::Vec< N, real >inline; end() const noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real f) noexceptsofa::type::Vec< N, real >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, real >inline; fill(real r) noexceptsofa::type::Vec< N, real >inline; front()sofa::type::Vec< N, real >inline; front() constsofa::type::Vec< N, real >inline; getsub(const Size i, Vec< N2, real > &m) const noexceptsofa::type::Vec< N, real >inline; getsub(const Size i, real &m) const noexceptsofa::type::Vec< N, real >inline; isNormalized(real threshold=std::numeric_limits< real >::epsilon() *(real) 10) constsofa::type::Vec< N, real >inline; iterator typedefsofa::type::Vec< N, real >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, real >i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:789,Modifiability,inherit,inherited,789,"﻿. SOFA API: sofa::type::VecNoInit< N, real > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::type::VecNoInit< N, real > Class Template Reference . #include <Vec.h>; Same as Vec except the values are not initialized by default. ; More... Inheritance diagram for sofa::type::VecNoInit< N, real >:. [legend]; Detailed Description; template<sofa::Size N, typename real>; class sofa::type::VecNoInit< N, real >; Same as Vec except the values are not initialized by default. . Public Member Functions; constexpr VecNoInit () noexcept;  ; constexpr VecNoInit (const Vec< N, real > &v) noexcept;  ; constexpr VecNoInit (Vec< N, real > &&v) noexcept;  ;  Public Member Functions inherited from sofa::type::Vec< N, real >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; constexpr Vec (const real r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr Vec (ArgsT &&... r) noexcept;  ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7235,Modifiability,inherit,inherited,7235," of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related detai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7324,Modifiability,inherit,inherited,7324," of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related detai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:7764,Modifiability,inherit,inherited,7764,"texpr const real * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Friends; constexpr friend Vec< N, real > operator* (real r, const Vec< N, real > &v) noexcept;  Scalar vector multiplication operator. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, real >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, real >; static constexpr sofa::Size size ();  . Constructor details. ◆ VecNoInit() [1/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; ). inlineconstexprnoexcept . ◆ VecNoInit() [2/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; const Vec< N, real > & ; v). inlineconstexprnoexcept . ◆ VecNoInit() [3/3]. template<sofa::Size N, typename real > . constexpr sofa::type::VecNoInit< N, real >::VecNoInit ; (; Vec< N, real > && ; v). inlineconstexprnoexcept . Related details. ◆ operator*. template<sofa::Size N, typename real > . constexpr friend Vec<N,real> operator* ; (; real ; r, . const Vec< N, real > & ; v . ). friend . Scalar vector multiplication operator. . sofatypeVecNoInit; Generated on Mon Nov 11 2024 03:36:07 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2178,Security,access,access,2178,"3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2274,Security,access,access,2274,". More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2352,Security,access,access,2352," from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2449,Security,access,access,2449,"stexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2528,Security,access,access,2528,"st Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2624,Security,access,access,2624,"lt value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2702,Security,access,access,2702," &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2799,Security,access,access,2799," values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3544,Security,access,access,3544,"Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const real f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const real2 f) noexcept;  ; constexpr Vec< N, real > divscalar (const real f) const noexcept;  Div",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3260,Usability,clear,clear,3260,"onst noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:263,Testability,test,testing,263,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:308,Testability,test,testing,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:370,Testability,test,testing,370,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:412,Testability,test,testing,412,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:444,Testability,test,testing,444,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:478,Testability,test,testing,478,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:528,Testability,test,testing,528,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:701,Testability,test,testing,701,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html:752,Testability,test,testing,752,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TemplateAliasTest Member List . This is the complete list of members for sofa::TemplateAliasTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; registerAlias(const std::string &alias, const std::string &target, bool succeed, bool warn)sofa::TemplateAliasTestinlineprotected; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:461,Modifiability,inherit,inherited,461,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:623,Modifiability,inherit,inherited,623,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:760,Modifiability,inherit,inherited,760,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:910,Modifiability,inherit,inherited,910,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:482,Testability,test,testing,482,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:507,Testability,test,testing,507,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:555,Testability,test,testing,555,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:644,Testability,test,testing,644,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:781,Testability,test,testing,781,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html:931,Testability,test,testing,931,"﻿. SOFA API: sofa::TemplateAliasTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::TemplateAliasTest Class Reference . Inheritance diagram for sofa::TemplateAliasTest:. [legend]. Protected Member Functions; bool registerAlias (const std::string &alias, const std::string &target, bool succeed, bool warn);  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Function details. ◆ registerAlias(). bool sofa::TemplateAliasTest::registerAlias ; (; const std::string & ; alias, . const std::string & ; target, . bool ; succeed, . bool ; warn . ). inlineprotected . sofaTemplateAliasTest; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_template_alias_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_template_alias_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::TestDataEngine< DataEngineType > Member List . This is the complete list of members for sofa::TestDataEngine< DataEngineType >, including all inherited members. doUpdate() overridesofa::TestDataEngine< DataEngineType >inline; getCounter() constsofa::TestDataEngine< DataEngineType >inline; resetCounter()sofa::TestDataEngine< DataEngineType >inline; SOFA_CLASS(SOFA_TEMPLATE(TestDataEngine, DataEngineType), DataEngineType)sofa::TestDataEngine< DataEngineType >; TestDataEngine()sofa::TestDataEngine< DataEngineType >inline. Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1_test_data_engine-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1_test_data_engine-members.html
https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs > Member List . This is the complete list of members for Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >, including all inherited members. scaleAndAddTo(Dest &dest, const Scalar &alpha) constEigen::SparseTimeDenseProduct_MT< Lhs, Rhs >inline; SparseTimeDenseProduct_MT(const Lhs &lhs, const Rhs &rhs, unsigned nbThreads)Eigen::SparseTimeDenseProduct_MT< Lhs, Rhs >inline. Generated on Mon Nov 11 2024 02:15:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_eigen_1_1_sparse_time_dense_product___m_t-members.html
https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit-members.html:202,Modifiability,inherit,inherited,202,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. WDoubleLineEdit Member List . This is the complete list of members for WDoubleLineEdit, including all inherited members. checkValue()WDoubleLineEditprotected; getDisplayedValue()WDoubleLineEditinline; getIntDisplayedValue()WDoubleLineEditinline; getIntValue()WDoubleLineEditinline; getMaxValue()WDoubleLineEditinline; getMinValue()WDoubleLineEditinline; getValue()WDoubleLineEditinline; intValueWDoubleLineEdit; intValue() constWDoubleLineEditinline; keyPressEvent(QKeyEvent *) overrideWDoubleLineEditprotected; m_bFirstWDoubleLineEditprotected; m_bInternalWDoubleLineEditprotected; m_DblValidWDoubleLineEditprotected; m_fMaxValueWDoubleLineEditprotected; m_fMinValueWDoubleLineEditprotected; m_fValueWDoubleLineEditmutableprotected; m_iPercentWDoubleLineEditprotected; m_isDraggingWDoubleLineEditprotected; m_prevMousePositionWDoubleLineEditprotected; maxValueWDoubleLineEdit; maxValue() constWDoubleLineEditinline; minValueWDoubleLineEdit; minValue() constWDoubleLineEditinline; mouseMoveEvent(QMouseEvent *) overrideWDoubleLineEditprotected; mousePressEvent(QMouseEvent *) overrideWDoubleLineEditprotected; mouseReleaseEvent(QMouseEvent *) overrideWDoubleLineEditprotected; setIntValue(int f)WDoubleLineEdit; setMaxValue(double f)WDoubleLineEditinline; setMinValue(double f)WDoubleLineEditinline; setValue(double f)WDoubleLineEdit; setValuePercent(int p)WDoubleLineEditslot; slotCalcValue(const QString &)WDoubleLineEditprotectedslot; slotCalcValue(double, bool isEditted=false)WDoubleLineEditprotectedslot; slotReturnPressed()WDoubleLineEditprotectedslot; ValueWDoubleLineEdit; Value() constWDoubleLineEditinline; valueChanged(double)WDoubleLineEditsignal; valueEdited(double)WDoubleLineEditsignal; valuePercent()WDoubleLineEdit; valuePercentChanged(int)WDoubleLineEditsignal; WDoubleLineEdit(QWidget *parent, const char *name)WDoubleLineEdit. Generated on Mon Nov 11 2024 02:15:07 for SOFA API by",MatchSource.WIKI,api/master/sofa/html/class_w_double_line_edit-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/class_w_double_line_edit-members.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1760,Energy Efficiency,green,green,1760,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:318,Modifiability,inherit,inheritance,318,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:491,Modifiability,inherit,inherited,491,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:514,Modifiability,inherit,inheritance,514,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:655,Modifiability,inherit,inherited,655,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:681,Modifiability,inherit,inheritance,681,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:743,Modifiability,inherit,inherited,743,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:767,Modifiability,inherit,inheritance,767,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:899,Modifiability,inherit,inherits,899,"﻿. SOFA API: Graph Legend. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Graph Legend . This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1500,Modifiability,inherit,inheritance,1500,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1709,Modifiability,inherit,inheritance,1709,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1794,Modifiability,inherit,inheritance,1794,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1846,Modifiability,inherit,inheritance,1846,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1972,Modifiability,variab,variable,1972,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:2029,Security,access,accessible,2029,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1390,Usability,undo,undocumented,1390,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/graph_legend.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html
https://www.sofa-framework.org/api/master/sofa/html/index.html:343,Availability,avail,available,343,﻿. SOFA API: SOFA API Documentation. . SOFA API;  679a9147. Open source framework for multi-physics simuation. SOFA API Documentation . You are on the main page of the SOFA API Documentation. This is the starting point of the documentation of the classes of the framework itself.; A general introduction to SOFA and the user documentation are available on https://www.sofa-framework.org/community/doc/; Plugins; Plugins doc are listed on the Plugins page. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/index.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1130,Availability,avail,available,1130,"mespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; usin",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1572,Deployability,patch,patch,1572,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3708,Deployability,patch,patch,3708,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7218,Deployability,patch,patch,7218,"a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:666,Energy Efficiency,adapt,adapted,666,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:666,Modifiability,adapt,adapted,666,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:427,Testability,test,testing,427,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:571,Testability,test,tests,571,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:650,Testability,test,tests,650,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:856,Testability,test,test,856,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:964,Testability,test,tests,964,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1165,Testability,test,test,1165,"ion_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename D",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1578,Testability,test,test,1578,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3208,Testability,test,testTractionTensorMass,3208,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3272,Testability,test,testTractionCorotational,3272,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:3714,Testability,test,test,3714,"rixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; template<typename DataTypes > ; using DataVecDeriv_t = core::objectmodel::Data< VecDeriv_t< DataTypes > >;  ; template<typename DataTypes > ; using DataMatrixDeriv_t = core::objectmodel::Data< MatrixDeriv_t< DataTypes > >;  . Functions;  TYPED_TEST_SUITE (AffinePatch_sofa_test, DataTypes);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest2D);  ;  TYPED_TEST (AffinePatch_sofa_test, patchTest3D);  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArr",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:4097,Testability,test,testOneStep,4097,");  ; template<typename DataTypes > ; CylinderTractionStruct< DataTypes > createCylinderTractionScene (int resolutionCircumferential, int resolutionRadial, int resolutionHeight, int maxIter);  ;  TYPED_TEST_SUITE (LinearElasticity_test, DataTypes);  ;  TYPED_TEST (LinearElasticity_test, testTractionTensorMass);  ;  TYPED_TEST (LinearElasticity_test, testTractionCorotational);  ; template<class DataTypes > ; PatchTestStruct< DataTypes > createRegularGridScene (simulation::Node::SPtr root, typename DataTypes::Coord startPoint, typename DataTypes::Coord endPoint, int numX, int numY, int numZ, sofa::type::Vec< 6, SReal > entireBoxRoi, sofa::type::Vec< 6, SReal > inclusiveBox, sofa::type::Vec< 6, SReal > includedBox);  Create a scene with a regular grid and an affine constraint for patch test. More...;  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initSofaConfig ();  ;  TEST_F (TemplateAliasTest, Register);  ;  TEST_F (AdvancedTimerTest, IsEnabled);  ;  TEST_F (AdvancedTimerTest, SetOutputType);  ;  TEST_F (AdvancedTimerTest, End);  ; template<class mat > ; helper::OwnershipSPtr< mat > convertSPtr (const linearalgebra::BaseMatrix *m);  ;  TEST_F (DefaultAnimationLoop_test, testOneStep);  . Variables; const double pressureArray [] = {0.6, 0.2, -0.2, -0.6};  ; const size_t sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]);  ; const double youngModulusArray [] = {1.0,2.0};  ; const size_t sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]);  ; const double poissonRatioArray [] = {0.0,0.3,0.49};  ; const size_t sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]);  . Typedef Documentation. ◆ Coord_t. template<typename DataTypes > . using sofa::Coord_t = typedef typename DataTypes::Coord. ◆ DataMatrixDeriv_t. template<typename DataTypes > . using sofa::DataMatrixDeriv_t = typedef core::objectmodel::Data<MatrixDeriv_t<DataTypes> >. ◆ DataTypes. typedef Types< Vec3Types > sofa::DataTypes. ◆ DataVecCoord_t. template<typ",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7224,Testability,test,test,7224,"a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7614,Testability,test,testOneStep,7614,"onScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePress",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:7967,Testability,test,testTractionCorotational,7967,"mX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:8072,Testability,test,testTractionTensorMass,8072," . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:396,Usability,simpl,simpleapi,396,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision.html:223,Safety,detect,detection,223,﻿. SOFA API: sofa::component::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision Namespace Reference . Namespaces;  detection;  ;  geometry;  ;  model;  ;  response;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_API void sofa::component::collision::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollision; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:200,Safety,detect,detection,200,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:665,Safety,detect,detection,665,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:761,Safety,detect,detection,761,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:879,Safety,detect,detection,879,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:960,Safety,detect,detection,960,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html:1052,Safety,detect,detection,1052,﻿. SOFA API: sofa::component::collision::detection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::collision::detection Namespace Reference . Namespaces;  algorithm;  ;  intersection;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_API void sofa::component::collision::detection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::collision::detection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetection; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:208,Safety,detect,detection,208,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:476,Safety,detect,detection,476,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:906,Safety,detect,detection,906,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:1002,Safety,detect,detection,1002,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2060,Safety,detect,detection,2060,ruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFact,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2167,Safety,detect,detection,2167,jectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDire,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2306,Safety,detect,detection,2306,isionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collis,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2398,Safety,detect,detection,2398,registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). v,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2514,Safety,detect,detection,2514,gisterRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2676,Safety,detect,detection,2676,RARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::compone,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2832,Safety,detect,detection,2832,on ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::co,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:2986,Safety,detect,detection,2986,(). const char * sofa::component::collision::detection::algorithm::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3135,Safety,detect,detection,3135,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3287,Safety,detect,detection,3287,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3437,Safety,detect,detection,3437,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3574,Safety,detect,detection,3574,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3721,Safety,detect,detection,3721,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:3880,Safety,detect,detection,3880,m::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::algorithm::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_API void sofa::component::collision::detection::algorithm::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::algorithm::initExternalModule ; (; ). ◆ registerBruteForceBroadPhase(). void sofa::component::collision::detection::algorithm::registerBruteForceBroadPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBruteForceDetection(). void sofa::component::collision::detection::algorithm::registerBruteForceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerBVHNarrowPhase(). void sofa::component::collision::detection::algorithm::registerBVHNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerCollisionPipeline(). void sofa::component::collision::detection::algorithm::registerCollisionPipeline ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAP(). void sofa::component::collision::detection::algorithm::registerDirectSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerDirectSAPNarrowPhase(). void sofa::component::collision::detection::algorithm::registerDirectSAPNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). ◆ registerIncrSAP(). void sofa::component::collision::detection::algorithm::registerIncrSAP ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::algorithm::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceDetection(). void sofa::component::collision::detection::algorithm::registerRayTraceDetection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerRayTraceNarrowPhase(). void sofa::component::collision::detection::algorithm::registerRayTraceNarrowPhase ; (; sofa::core::ObjectFactory * ; factory). sofacomponentcollisiondetectionalgorithm; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html:331,Testability,test,test,331,﻿. SOFA API: sofa::component::collision::detection::algorithm Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::collision::detection::algorithm Namespace Reference . Classes; class  BruteForceBroadPhase;  Perform an extensive pair-wise collision test based on the bounding volume of collision models. More...;  ; class  BruteForceDetection;  ; class  BVHNarrowPhase;  Narrow phase collision detection based on bounding volume hierarchy. More...;  ; class  CollisionPipeline;  ; class  CollidingPair;  ; class  CollisionPairID;  ; class  CollidingPM;  ; class  DirectSAP;  ; class  DirectSAPNarrowPhase;  ; class  DSAPBox;  ; class  EndPoint;  ; class  EndPointID;  ; struct  CompPEndPoint;  ; class  ISAPBox;  ; class  IncrSAP;  ; class  MirrorIntersector;  ; class  RayTraceDetection;  It is a Ray Trace based collision detection algorithm. More...;  ; class  RayTraceNarrowPhase;  It is a Ray Trace based collision detection algorithm. More...;  . Functions; void registerBruteForceBroadPhase (sofa::core::ObjectFactory *factory);  ; void registerBruteForceDetection (sofa::core::ObjectFactory *factory);  ; void registerBVHNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerCollisionPipeline (sofa::core::ObjectFactory *factory);  ; void registerDirectSAP (sofa::core::ObjectFactory *factory);  ; void registerDirectSAPNarrowPhase (sofa::core::ObjectFactory *factory);  ; void registerIncrSAP (sofa::core::ObjectFactory *factory);  ; void registerRayTraceDetection (sofa::core::ObjectFactory *factory);  ; void registerRayTraceNarrowPhase (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1algorithm.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:41,Safety,detect,detection,41,"﻿. SOFA API: sofa::component::collision::detection::intersection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::detection::intersection Namespace Reference . Classes; class  BaseProximityIntersection;  ; class  DiscreteIntersection;  ; class  LocalMinDistance;  ; class  MeshDiscreteIntersection;  ; class  MeshMinProximityIntersection;  ; class  MeshNewProximityIntersection;  ; class  MinProximityIntersection;  ; class  NewProximityIntersection;  ; class  RayDiscreteIntersection;  ; class  RayNewProximityIntersection;  ; class  TetrahedronDiscreteIntersection;  . Functions; void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< Disc",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:224,Safety,detect,detection,224,"﻿. SOFA API: sofa::component::collision::detection::intersection Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::collision::detection::intersection Namespace Reference . Classes; class  BaseProximityIntersection;  ; class  DiscreteIntersection;  ; class  LocalMinDistance;  ; class  MeshDiscreteIntersection;  ; class  MeshMinProximityIntersection;  ; class  MeshNewProximityIntersection;  ; class  MinProximityIntersection;  ; class  NewProximityIntersection;  ; class  RayDiscreteIntersection;  ; class  RayNewProximityIntersection;  ; class  TetrahedronDiscreteIntersection;  . Functions; void registerDiscreteIntersection (sofa::core::ObjectFactory *factory);  ; void registerLocalMinDistance (sofa::core::ObjectFactory *factory);  ; void registerMinProximityIntersection (sofa::core::ObjectFactory *factory);  ; void registerNewProximityIntersection (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< Disc",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2181,Safety,detect,detection,2181,"OFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::regist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2291,Safety,detect,detection,2291,"bles; IntersectorCreator< DiscreteIntersection, MeshDiscreteIntersection > MeshDiscreteIntersectors (""Mesh"");  ; IntersectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::componen",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2436,Safety,detect,detection,2436,"rsectorCreator< MinProximityIntersection, MeshMinProximityIntersection > MeshMinProximityIntersectors (""Mesh"");  ; IntersectorCreator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Document",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2531,Safety,detect,detection,2531,"eator< NewProximityIntersection, MeshNewProximityIntersection > MeshNewProximityIntersectors (""Mesh"");  ; IntersectorCreator< DiscreteIntersection, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2650,Safety,detect,detection,2650,"ion, RayDiscreteIntersection > RayDiscreteIntersectors (""Ray"");  ; IntersectorCreator< MinProximityIntersection, RayDiscreteIntersection > RayMinProximityIntersectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIn",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2812,Safety,detect,detection,2812,"ectors (""Ray"");  ; IntersectorCreator< NewProximityIntersection, RayNewProximityIntersection > RayNewProximityIntersectors (""Ray"");  ; IntersectorCreator< DiscreteIntersection, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewPr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:2978,Safety,detect,detection,2978,"ction, TetrahedronDiscreteIntersection > TetrahedronDiscreteIntersectors (""Ray"");  . Function Documentation. ◆ getModuleName(). const char * sofa::component::collision::detection::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityInter",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3152,Safety,detect,detection,3152,"tion::intersection::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::collision::detection::intersection::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersect",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3309,Safety,detect,detection,3309," (; ). ◆ init(). SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_API void sofa::component::collision::detection::intersection::init ; (; ). ◆ initExternalModule(). void sofa::component::collision::detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersecti",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3542,Safety,detect,detection,3542,"detection::intersection::initExternalModule ; (; ). ◆ registerDiscreteIntersection(). void sofa::component::collision::detection::intersection::registerDiscreteIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProxim",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3752,Safety,detect,detection,3752,"factory). ◆ registerLocalMinDistance(). void sofa::component::collision::detection::intersection::registerLocalMinDistance ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMinProximityIntersection(). void sofa::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, Tetrahedron",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:3966,Safety,detect,detection,3966,"a::component::collision::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4166,Safety,detect,detection,4166,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4367,Safety,detect,detection,4367,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4576,Safety,detect,detection,4576,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html:4789,Safety,detect,detection,4789,"::detection::intersection::registerMinProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNewProximityIntersection(). void sofa::component::collision::detection::intersection::registerNewProximityIntersection ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::collision::detection::intersection::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MeshDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, MeshDiscreteIntersection> sofa::component::collision::detection::intersection::MeshDiscreteIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, MeshMinProximityIntersection> sofa::component::collision::detection::intersection::MeshMinProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ MeshNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, MeshNewProximityIntersection> sofa::component::collision::detection::intersection::MeshNewProximityIntersectors(""Mesh"") ; (; ""Mesh"" ; ). ◆ RayDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayMinProximityIntersectors. IntersectorCreator<MinProximityIntersection, RayDiscreteIntersection> sofa::component::collision::detection::intersection::RayMinProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ RayNewProximityIntersectors. IntersectorCreator<NewProximityIntersection, RayNewProximityIntersection> sofa::component::collision::detection::intersection::RayNewProximityIntersectors(""Ray"") ; (; ""Ray"" ; ). ◆ TetrahedronDiscreteIntersectors. IntersectorCreator<DiscreteIntersection, TetrahedronDiscreteIntersection> sofa::component::collision::detection::intersection::TetrahedronDiscreteIntersectors(""Ray"") ; (; ""Ray"" ; ). sofacomponentcollisiondetectionintersection; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1collision_1_1detection_1_1intersection.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:16833,Integrability,interface,interface,16833,ofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Rigid3fTypes::Coord & ; i). ◆ getVec() [4/10]. const sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Rigid3fTypes::Deriv & ; i). ◆ getVec() [5/10]. const sofa::type::Vec6f & sofa::component::constraint::projective::getVec ; (; const sofa::defaulttype::Vec3dTypes::Deriv & ; i). ◆ getVec() [6/10]. sofa::type::Vec3d& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3dTypes::Coord & ; i). ◆ getVec() [7/10]. sofa::type::Vec3d& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3dTypes::Deriv & ; i). This function are there to provide kind of type translation to the vector one so we can implement the algorithm as is the different objects where of similar type. this solution is not really satisfactory but for the moment it does the job. A better solution would that all the used types are following the same interface which requires to touch core sofa classes. . ◆ getVec() [8/10]. sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3fTypes::Coord & ; i). ◆ getVec() [9/10]. sofa::type::Vec3f& sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Rigid3fTypes::Deriv & ; i). ◆ getVec() [10/10]. sofa::type::Vec6f & sofa::component::constraint::projective::getVec ; (; sofa::defaulttype::Vec3dTypes::Deriv & ; i). ◆ init(). SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API void sofa::component::constraint::projective::init ; (; ). ◆ initExternalModule(). void sofa::component::constraint::projective::initExternalModule ; (; ). ◆ registerAffineMovementProjectiveConstraint(). void sofa::component::constraint::projective::registerAffineMovementProjectiveConstraint ; (; sofa::core::ObjectFactory * ; factory). ◆ registerAttachProjectiveConstraint(). void sofa::component::constraint::projective::registerAttachProjectiveConstraint ; (; sofa::,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html:336,Integrability,interface,interface,336,﻿. SOFA API: sofa::component::controller Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::controller Namespace Reference . Classes; class  Controller;  Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. More...;  ; class  MechanicalStateController;  MechanicalStateController Class. More...;  . Functions; void registerMechanicalStateController (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Vec1Types >;  ; template class SOFA_COMPONENT_CONTROLLER_API MechanicalStateController< Rigid3Types >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::controller::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::controller::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_CONTROLLER_API void sofa::component::controller::init ; (; ). ◆ initExternalModule(). void sofa::component::controller::initExternalModule ; (; ). ◆ registerMechanicalStateController(). void sofa::component::controller::registerMechanicalStateController ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::controller::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MechanicalStateController< Rigid3Types >. template class SOFA_COMPONENT_CONTROLLER_API sofa::component::controller::MechanicalStateController< Rigid3Types >. ◆ MechanicalStateController< Vec1Types >. template class SOFA_COMPONENT_C,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1controller.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1controller.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:409,Usability,feedback,feedback,409,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:429,Usability,feedback,feedback,429,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:497,Usability,feedback,feedback,497,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html:517,Usability,feedback,feedback,517,﻿. SOFA API: sofa::component::haptics Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::haptics Namespace Reference . Classes; class  ForceFeedback;  Base class implementing forcefeedback as a force field. More...;  ; class  LCPForceFeedback;  ; class  MechanicalStateForceFeedback;  ; class  NullForceFeedback;  Null force feedback for haptic feedback device. More...;  ; class  NullForceFeedbackT;  Null force feedback for haptic feedback device. More...;  . Functions; void registerLCPForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedback (sofa::core::ObjectFactory *factory);  ; void registerNullForceFeedbackT (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::haptics::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::haptics::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_HAPTICS_API void sofa::component::haptics::init ; (; ). ◆ initExternalModule(). void sofa::component::haptics::initExternalModule ; (; ). ◆ registerLCPForceFeedback(). void sofa::component::haptics::registerLCPForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedback(). void sofa::component::haptics::registerNullForceFeedback ; (; sofa::core::ObjectFactory * ; factory). ◆ registerNullForceFeedbackT(). void sofa::component::haptics::registerNullForceFeedbackT ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::haptics::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponenthaptics; Generated on Mon Nov 11 2024 02:46:05 for SOFA A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1haptics.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:552,Performance,multi-thread,multi-threading,552,"﻿. SOFA API: sofa::component::linearsolver Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::linearsolver Namespace Reference . Namespaces;  direct;  ;  iterative;  ;  ordering;  ;  preconditioner;  . Classes; class  MultExpr;  ; class  GraphScatteredMatrix;  ; class  GraphScatteredVector;  ; class  MatrixInvertData;  ; class  BaseMatrixLinearSolver;  ; class  NoThreadManager;  Empty class used for default solver implementation without multi-threading support. More...;  ; class  MatrixLinearSolverInternalData;  ; class  MatrixLinearSolver;  ; class  MatrixLinearSolver< Matrix, Vector, NoThreadManager >;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, Ful",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:1411,Performance,multi-thread,multi-threaded,1411,"147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::component::linearsolver Namespace Reference . Namespaces;  direct;  ;  iterative;  ;  ordering;  ;  preconditioner;  . Classes; class  MultExpr;  ; class  GraphScatteredMatrix;  ; class  GraphScatteredVector;  ; class  MatrixInvertData;  ; class  BaseMatrixLinearSolver;  ; class  NoThreadManager;  Empty class used for default solver implementation without multi-threading support. More...;  ; class  MatrixLinearSolverInternalData;  ; class  MatrixLinearSolver;  ; class  MatrixLinearSolver< Matrix, Vector, NoThreadManager >;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<typename Derived , typename OtherDerived > ; const Eigen::SparseDenseProductReturnType_MT< Derived, OtherDerived >::Type mul_EigenSparseDenseMatrix_MT (const Eigen::SparseMatrixBase< Derived > &lhs, const Eigen::MatrixBase< OtherDerived > &rhs, unsigned nbThreads=OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT);  Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) More...;  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< GraphScatteredMatrix, GraphScatteredVector, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< FullMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< SparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html:3335,Performance,multi-thread,multi-threaded,3335,"hreadManager >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixLinearSolver< RotationMatrix< SReal >, FullVector< SReal >, NoThreadManager >;  . Function Documentation. ◆ getModuleName(). const char * sofa::component::linearsolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_LINEARSOLVER_API void sofa::component::linearsolver::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsolver::initExternalModule ; (; ). ◆ mul_EigenSparseDenseMatrix_MT(). template<typename Derived , typename OtherDerived > . const Eigen::SparseDenseProductReturnType_MT<Derived,OtherDerived>::Type sofa::component::linearsolver::mul_EigenSparseDenseMatrix_MT ; (; const Eigen::SparseMatrixBase< Derived > & ; lhs, . const Eigen::MatrixBase< OtherDerived > & ; rhs, . unsigned ; nbThreads = OMP_DEFAULT_NUM_THREADS_EIGEN_SPARSE_DENSE_PRODUCT . ). inline . Eigen::Sparse * Dense Matrices multiplication (openmp multi-threaded version) . ◆ registerObjects(). void sofa::component::linearsolver::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< CompressedRowSparseMatrix< SReal >, FullVector< SReal >, NoThreadManager >. ◆ MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >. template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API sofa::component::linearsolver::MatrixLinearSolver< DiagonalMatrix< SReal >, FullVector< SReal >, NoThreadManager >.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:748,Integrability,wrap,wrapped,748,"﻿. SOFA API: sofa::component::linearsolver::preconditioner Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::preconditioner Namespace Reference . Classes; class  BlockJacobiPreconditionerInternalData;  ; class  BlockJacobiPreconditioner;  Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner) More...;  ; class  JacobiPreconditioner;  Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner) More...;  ; class  PrecomputedMatrixSystem;  ; class  PrecomputedWarpPreconditionerInternalData;  ; class  PrecomputedWarpPreconditioner;  Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix. More...;  ; class  RotationMatrixSystem;  ; class  SSORPreconditioner;  ; class  WarpPreconditioner;  Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix. More...;  . Functions; void registerBlockJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; te",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html:910,Integrability,wrap,wrapping,910,"﻿. SOFA API: sofa::component::linearsolver::preconditioner Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::linearsolver::preconditioner Namespace Reference . Classes; class  BlockJacobiPreconditionerInternalData;  ; class  BlockJacobiPreconditioner;  Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner) More...;  ; class  JacobiPreconditioner;  Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner) More...;  ; class  PrecomputedMatrixSystem;  ; class  PrecomputedWarpPreconditionerInternalData;  ; class  PrecomputedWarpPreconditioner;  Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix. More...;  ; class  RotationMatrixSystem;  ; class  SSORPreconditioner;  ; class  WarpPreconditioner;  Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix. More...;  . Functions; void registerBlockJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerJacobiPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerPrecomputedWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerRotationMatrixSystem (sofa::core::ObjectFactory *factory);  ; void registerSSORPreconditioner (sofa::core::ObjectFactory *factory);  ; void registerWarpPreconditioner (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Variables; template class SOFA_COMPONENT_LINEARSOLVER_PRECONDITIONER_API BlockJacobiPreconditioner< BlockDiagonalMatrix< 3, SReal >, FullVector< SReal > >;  ; te",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsolver_1_1preconditioner.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:3485,Modifiability,config,configureCreatedMatrixComponent,3485,"oupOfComponentsAssociatedToAPairOfMechanicalStates &group);  ; sofa::type::vector< core::behavior::BaseMechanicalState * > retrieveAssociatedMechanicalState (const sofa::core::behavior::StateAccessor *component);  ; sofa::type::vector< core::behavior::BaseMechanicalState * > retrieveAssociatedMechanicalState (BaseMapping *component);  ; auto generatePairs (const sofa::type::vector< core::behavior::BaseMechanicalState * > &mstates) -> sofa::type::vector< sofa::type::fixed_array< core::behavior::BaseMechanicalState *, 2 > >;  Generate all possible pairs of Mechanical States from a list of Mechanical States. More...;  ; template<core::matrixaccumulator::Contribution c> ; void configureCreatedMatrixComponent (typename BaseAssemblingMatrixAccumulator< c >::SPtr mat, typename BaseAssemblingMatrixAccumulator< c >::ComponentType *object, const SReal factor, bool printLog);  ; template<class BlockType > ; void computeProjection (const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > KMap, const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > J, Eigen::SparseMatrix< BlockType, Eigen::RowMajor > &JT_K_J);  ; template<class BlockType > ; void addToGlobalMatrix (linearalgebra::BaseMatrix *globalMatrix, Eigen::SparseMatrix< BlockType, Eigen::RowMajor > JT_K_J, const type::Vec2u positionInGlobalMatrix);  . Variables; template struct SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API MatrixFreeSystem< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API TypedMatrixLinearSystem< GraphScatteredMatrix, GraphScatteredVector >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API CompositeLinearSystem< FullMatrix< SReal >, FullVector< SReal > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API CompositeLinearSystem< SparseMatrix< SReal >, FullVector< SReal ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:8947,Modifiability,config,configureCreatedMatrixComponent,8947,"eIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >. The strategy used to check the incoming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getMo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:9070,Modifiability,config,configureCreatedMatrixComponent,9070,"coming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsystem::getModuleVersion ; (; ). ◆ init(). void SOFA_COMPONENT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:9308,Modifiability,config,configure,9308,"). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typename BaseAssemblingMatrixAccumulator< c >::ComponentType * ; object, . const SReal ; factor, . bool ; printLog . ). Generic function to configure a local matrix and associate it to a component . ◆ generatePairs(). auto sofa::component::linearsystem::generatePairs ; (; const sofa::type::vector< core::behavior::BaseMechanicalState * > & ; mstates); -> sofa::type::vector<sofa::type::fixed_array<core::behavior::BaseMechanicalState*, 2> >. inline . Generate all possible pairs of Mechanical States from a list of Mechanical States. . ◆ getModuleDescription(). const char * sofa::component::linearsystem::getModuleDescription ; (; ). ◆ getModuleLicense(). const char * sofa::component::linearsystem::getModuleLicense ; (; ). ◆ getModuleName(). const char * sofa::component::linearsystem::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::linearsystem::getModuleVersion ; (; ). ◆ init(). void SOFA_COMPONENT_LINEARSYSTEM_API sofa::component::linearsystem::init ; (; ). ◆ initExternalModule(). void sofa::component::linearsystem::initExternalModule ; (; ). ◆ operator<<(). std::ostream& sofa::component::linearsystem::operator<< ; (; s",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:8183,Security,authoriz,authorized,8183,"pedMatrixLinearSystem< BlockDiagonalMatrix< 3, double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< BlockDiagonalMatrix< 3, float >, FullVector< float > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< float >, FullVector< float > >;  . Typedef Documentation. ◆ LocalMappedMatrixType. template<class TReal > . using sofa::component::linearsystem::LocalMappedMatrixType = typedef sofa::linearalgebra::CompressedRowSparseMatrix<TReal>. ◆ StrategyCheckerType. using sofa::component::linearsystem::StrategyCheckerType = typedef sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >. The strategy used to check the incoming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typena",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html:6054,Safety,avoid,avoid,6054,"mplate class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Rigid3Types >. ◆ DiagonalMass< Vec1Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types >. ◆ DiagonalMass< Vec1Types, Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec2Types >. ◆ DiagonalMass< Vec1Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec1Types, Vec3Types >. ◆ DiagonalMass< Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec2Types >. ◆ DiagonalMass< Vec2Types, Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec2Types, Vec3Types >. ◆ DiagonalMass< Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::DiagonalMass< Vec3Types >. ◆ UniformMass< Rigid2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Rigid2Types >. ◆ UniformMass< Rigid3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Rigid3Types >. ◆ UniformMass< Vec1Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec1Types >. ◆ UniformMass< Vec2Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec2Types >. ◆ UniformMass< Vec3Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec3Types >. TEMPLATE INITIALIZATION ///////////////////////////////////////////////// Force template specialization for the most common sofa type. This goes with the extern template declaration in the .h. Declaring extern template avoid the code generation of the template for each compilation unit. see: http://www.stroustrup.com/C++11FAQ.html#extern-templates . ◆ UniformMass< Vec6Types >. template class SOFA_COMPONENT_MASS_API sofa::component::mass::UniformMass< Vec6Types >. sofacomponentmass; Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1mass.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1mass.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html:250,Testability,test,testing,250,﻿. SOFA API: sofa::component::odesolver Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Functions . sofa::component::odesolver Namespace Reference . Namespaces;  backward;  ;  forward;  ;  testing;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::odesolver::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::odesolver::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_ODESOLVER_API void sofa::component::odesolver::init ; (; ). ◆ initExternalModule(). void sofa::component::odesolver::initExternalModule ; (; ). ◆ registerObjects(). void sofa::component::odesolver::registerObjects ; (; sofa::core::ObjectFactory * ; factory). sofacomponentodesolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:41,Testability,test,testing,41,"﻿. SOFA API: sofa::component::odesolver::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::odesolver::testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sof",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:195,Testability,test,testing,195,"﻿. SOFA API: sofa::component::odesolver::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::odesolver::testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sof",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:1186,Testability,test,testing,1186,":testing Namespace Reference . Classes; class  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 1",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:1652,Testability,test,testing,1652,"lass  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html:2026,Testability,test,testing,2026,"lass  GetVectorVisitor;  ; class  GetAssembledSizeVisitor;  ; struct  ODESolverSpringTest;  . Functions; Eigen::VectorXd getVector (simulation::Node::SPtr root, core::ConstVecId id, bool indep=true);  ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, const std::string &stiffness, const std::string &mass, const std::string &restLength, const std::string &xFixedPoint, const std::string &vFixedPoint, const std::string &xMass, const std::string &vMass);  Create a mass spring system. More...;  ; template<typename DataTypes > ; simulation::Node::SPtr createMassSpringSystem (simulation::Node::SPtr root, double stiffness, double mass, double restLength, typename DataTypes::VecCoord xFixedPoint, typename DataTypes::VecDeriv vFixedPoint, typename DataTypes::VecCoord xMass, typename DataTypes::VecDeriv vMass);  . Function Documentation. ◆ createMassSpringSystem() [1/2]. simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . const std::string & ; stiffness, . const std::string & ; mass, . const std::string & ; restLength, . const std::string & ; xFixedPoint, . const std::string & ; vFixedPoint, . const std::string & ; xMass, . const std::string & ; vMass . ). inline . Create a mass spring system. . ◆ createMassSpringSystem() [2/2]. template<typename DataTypes > . simulation::Node::SPtr sofa::component::odesolver::testing::createMassSpringSystem ; (; simulation::Node::SPtr ; root, . double ; stiffness, . double ; mass, . double ; restLength, . typename DataTypes::VecCoord ; xFixedPoint, . typename DataTypes::VecDeriv ; vFixedPoint, . typename DataTypes::VecCoord ; xMass, . typename DataTypes::VecDeriv ; vMass . ). inline . ◆ getVector(). Eigen::VectorXd sofa::component::odesolver::testing::getVector ; (; simulation::Node::SPtr ; root, . core::ConstVecId ; id, . bool ; indep = true . ). inline . sofacomponentodesolvertesting; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1odesolver_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:592,Testability,log,logger,592,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html:715,Testability,log,logger,715,﻿. SOFA API: sofa::component::sceneutility Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions . sofa::component::sceneutility Namespace Reference . Namespaces;  infocomponent;  ;  makealiascomponent;  ;  makedataaliascomponent;  . Classes; class  BaseAddResourceRepository;  ; class  AddDataRepository;  Add a new path to DataRepository. More...;  ; class  AddPluginRepository;  Add a new path to PluginRepository. More...;  ; class  MessageHandlerComponent;  A sofa component to add a MessageHandler to the main logger. More...;  ; class  FileMessageHandlerComponent;  A sofa component to add a FileMessageHandlerComponent to the main logger. More...;  ; class  PauseAnimation;  ; class  PauseAnimationOnEvent;  . Functions; void registerAddDataRepository (sofa::core::ObjectFactory *factory);  ; void registerAddPluginRepository (sofa::core::ObjectFactory *factory);  ; void registerAPIVersion (sofa::core::ObjectFactory *factory);  ; void registerInfoComponent (sofa::core::ObjectFactory *factory);  ; void registerFileMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMakeDataAliasComponent (sofa::core::ObjectFactory *factory);  ; void registerMessageHandlerComponent (sofa::core::ObjectFactory *factory);  ; void registerPauseAnimationOnEvent (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::sceneutility::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::sceneutility::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SCENEUTILITY_,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1sceneutility.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:253,Deployability,configurat,configuration,253,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:379,Deployability,configurat,configuration,379,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:479,Deployability,configurat,configuration,479,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:561,Deployability,configurat,configuration,561,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:253,Modifiability,config,configuration,253,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:379,Modifiability,config,configuration,379,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:479,Modifiability,config,configuration,479,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:561,Modifiability,config,configuration,561,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:323,Usability,simpl,simple,323,﻿. SOFA API: sofa::component::solidmechanics::spring Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::solidmechanics::spring Namespace Reference . Classes; class  AngularSpringForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  FastTriangularBendingSprings;  ; class  FrameSpringForceFieldInternalData;  ; class  FrameSpringForceField;  ; class  GearSpring;  ; class  GearSpringForceFieldInternalData;  ; class  GearSpringForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Qua,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:1348,Usability,simpl,simple,1348,ingForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  FastTriangularBendingSprings;  ; class  FrameSpringForceFieldInternalData;  ; class  FrameSpringForceField;  ; class  GearSpring;  ; class  GearSpringForceFieldInternalData;  ; class  GearSpringForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Quad;  ; typedef core::topology::BaseMeshTopology::EdgesInQuad EdgesInQuad;  ; using SpringForceField = SpringForceField< T >;  ; typedef core::topology::BaseMeshTopology::Triangle Triangle;  . Functions; void registerAngularSpringForceField (sofa::core::ObjectFactory *factory);  ; voi,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html:1615,Usability,simpl,simple,1615,gForceField;  ; class  JointSpring;  JOINTSPRING. More...;  ; class  JointSpringForceFieldInternalData;  ; class  JointSpringForceField;  ; class  LinearSpring;  This class contains the description of one linear spring. More...;  ; class  MeshSpringForceField;  ; class  PolynomialRestShapeSpringsForceField;  This class describes a polynomial elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  PolynomialSpringsForceField;  This class describes a polynomial elastic springs ForceField. More...;  ; class  QuadBendingSprings;  ; class  QuadularBendingSprings;  ; class  RegularGridSpringForceField;  ; class  RepulsiveSpringForceField;  ; class  RestShapeSpringsForceField;  This class describes a simple elastic springs ForceField between DOFs positions and rest positions. More...;  ; class  SpringForceFieldInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  SpringForceField;  Set of simple springs between particles. More...;  ; class  TriangleBendingSprings;  ; class  TriangularBendingSprings;  ; class  TriangularBiquadraticSpringsForceField;  ; class  TriangularQuadraticSpringsForceField;  ; class  VectorSpringForceField;  . Typedefs; typedef core::topology::BaseMeshTopology::EdgesInTriangle EdgesInTriangle;  ; typedef core::topology::BaseMeshTopology::Quad Quad;  ; typedef core::topology::BaseMeshTopology::EdgesInQuad EdgesInQuad;  ; using SpringForceField = SpringForceField< T >;  ; typedef core::topology::BaseMeshTopology::Triangle Triangle;  . Functions; void registerAngularSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerFastTriangularBendingSprings (sofa::core::ObjectFactory *factory);  ; void registerFrameSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerGearSpringForceField (sofa::core::ObjectFactory *factory);  ; void registerNonUniformHexahedronFEMForceFieldAndMass (sofa::core::ObjectFactory *factory);  ; voi,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1solidmechanics_1_1spring.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1095,Usability,clear,clear,1095,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1130,Usability,clear,clear,1130,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:1169,Usability,clear,clear,1169,﻿. SOFA API: sofa::component::statecontainer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Functions |; Variables . sofa::component::statecontainer Namespace Reference . Classes; class  MappedObjectInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MappedObject;  ; class  MechanicalObject;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  MechanicalObjectInternalData;  . Typedefs; typedef std::size_t nat;  . Functions; void registerMechanicalObject (sofa::core::ObjectFactory *factory);  ; void registerMappedObject (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  ; template<class T > ; void clear (T &t);  ; template<> ; void clear (float &t);  ; template<> ; void clear (double &t);  . Variables; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6T,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2296,Usability,clear,clear,2296,COMPONENT_STATECONTAINER_API MappedObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::regist,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2362,Usability,clear,clear,2362,;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory),MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2399,Usability,clear,clear,2399,_API MappedObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Ty,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2465,Usability,clear,clear,2465,A_COMPONENT_STATECONTAINER_API MappedObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_A,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2501,Usability,clear,clear,2501,Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject<,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html:2575,Usability,clear,clear,2575,I MappedObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MappedObject< Rigid2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec2Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec1Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Vec6Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid3Types >;  ; template class SOFA_COMPONENT_STATECONTAINER_API MechanicalObject< Rigid2Types >;  . Typedef Documentation. ◆ nat. typedef std::size_t sofa::component::statecontainer::nat. Function Documentation. ◆ clear() [1/3]. template<> . void sofa::component::statecontainer::clear ; (; double & ; t). inline . ◆ clear() [2/3]. template<> . void sofa::component::statecontainer::clear ; (; float & ; t). inline . ◆ clear() [3/3]. template<class T > . void sofa::component::statecontainer::clear ; (; T & ; t). inline . ◆ getModuleName(). const char * sofa::component::statecontainer::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::statecontainer::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::init ; (; ). ◆ initExternalModule(). void sofa::component::statecontainer::initExternalModule ; (; ). ◆ registerMappedObject(). void sofa::component::statecontainer::registerMappedObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerMechanicalObject(). void sofa::component::statecontainer::registerMechanicalObject ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::statecontainer::registerObjects ; (; sofa::core::ObjectFactory * ; factory). Variable Documentation. ◆ MappedObject< Rigid2Types >. template class SOFA_COMPONENT_STATECONTAINER_API sofa::component::statecontainer::MappedObject< Rigid2Types >. ◆ MappedObject< Rigid3Types >. template cla,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1statecontainer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:538,Energy Efficiency,efficient,efficient,538,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:453,Integrability,interface,interface,453,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:1455,Security,access,access,1455,"space Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  area invalid for 1-elements sofa::type::vectors. More...;  ; template<class Real > ; type::Vec< 2, Real > ortho (const type::Vec< 2, Real > &in);  orthogonal of a 2D vector More...;  ; template<class Real > ; type::Vec< 2, Real > cross (const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19451,Energy Efficiency,reduce,reduce,19451,"string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:878,Integrability,interface,interface,878,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:2336,Integrability,interface,interface,2336," offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:2981,Integrability,interface,interface,2981,"ement defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< Da",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3486,Integrability,interface,interface,3486,"r;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3666,Integrability,interface,interface,3666,"t Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:12757,Integrability,depend,dependencies,12757,"QUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::BaseObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ContextObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::objectmodel::ConfigurationSetting);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseAnimationLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMass);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::OdeSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::ConstraintSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseLinearSolver);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseMechanicalState);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseInteractionForceField);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseProjectiveConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::behavior::BaseConstraintSet);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; SOFA_CORE_API void init ();  Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:13032,Integrability,depend,dependencies,13032,"RE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::Topology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseMeshTopology);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::topology::BaseTopologyObject);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::collision::Pipeline);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualLoop);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::Shader);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualModel);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::core::visual::VisualManager);  ; SOFA_CORE_API void init ();  Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_CORE_API bool isInitialized ();  Return true if and only if the SofaCore library has been initialized. More...;  ; SOFA_CORE_API void cleanup ();  Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_CORE_API bool isCleanedUp ();  Return true if and only if the SofaCore library has been cleaned up. More...;  ; void findTemplatedCreator (objectmodel::BaseContext *context, const ObjectFactory::Creator::SPtr &creator, const std::string &templateName, std::map< std::string, std::vector< std::string >> &creatorsErrors, std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > &creators, objectmodel::BaseObjectDescription *arg);  ; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::Creator::SPtr &creator);  ; void to_json (nlohmann::json &json, const sofa::core::ObjectFactory::ClassEntry::SPtr &entry);  ;  SOFA_DEFINE_OPAQUE_FUNCTIONS_BETWEEN_BASE_AND (sofa::simulation::Node);  ;  SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND (sofa::simulation::Node);  . Variables; template class SOFA_CORE_API Multi2Mapping< Vec1Types, Rigid3Types, Rigid3Types >;  ; template class SOFA",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19462,Integrability,depend,dependency,19462,"string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:20061,Integrability,depend,dependencies,20061,"::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_CORE_API bool sofa::core::isCleanedUp ; (; ). Return true if and only if the SofaCore library has been cleaned up. . ◆ isInitialized(). SOFA_CORE_API bool sofa::core::isInitialized ; (; ). Return true if and only if the SofaCore library has been initialized. . ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [1/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_B",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:20612,Integrability,depend,dependencies,20612,"y. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_CORE_API bool sofa::core::isCleanedUp ; (; ). Return true if and only if the SofaCore library has been cleaned up. . ◆ isInitialized(). SOFA_CORE_API bool sofa::core::isInitialized ; (; ). Return true if and only if the SofaCore library has been initialized. . ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [1/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BaseMapping ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [2/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::BaseState ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [3/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseAnimationLoop ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND() [4/26]. sofa::core::SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_BASE_AND ; (; sofa::core::behavior::BaseConstraintSet ; ). ◆ SOFA_DECLARE_OPAQUE_FUNCTION_BETWEEN_",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:329,Performance,load,loader,329,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19587,Performance,optimiz,optimize,19587," cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:557,Security,access,accessing,557,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:892,Security,access,accessing,892,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:1042,Security,access,accessing,1042,"tion. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3901,Security,access,access,3901,"nsmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:4842,Security,expose,exposes,4842,"e...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* or a BaseData*. More...;  ; class  SofaLibrary;  An Generic Library. More...;  ; class  TVecId;  ; class  TStandardVec;  ; class  TStandardVec< V_COORD, vaccess >;  ; class  TStandardVec< V_DERIV, vaccess >;  ; class  TStandardVec< V_MATDERIV, vaccess >;  ; class  TStandardVec< V_ALL, vaccess >;  ; class  BaseVecId;  ; class  VecIdAlignFix;  ; struct  VecIdProperties;  ; class  TVecId< V_ALL, vaccess >;  Identify any vector stored in State. More...;  ; struct  StateType;  ; struct  StateType< DataTypes, core::V_COORD >;  ; struct  StateType< DataTypes, core::V_DERIV >;  ; struct  StateTypeSize;  ; struct  StateTypeSize< DataTypes, core::V_COORD >;  ; struct  StateTypeSize< DataTypes, core::V_DERIV >;  ; struct  StateVecType;  ; struct  StateVecType< DataTypes, core::V_COORD >;  ; struct  StateVecType< DataTypes, core::V_DERIV >;  . Typedefs; template<matrixaccumulator::Contribution c> ; using get_base_object_strong_type = t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:16114,Security,access,access,16114,"e vtype> ; constexpr sofa::Size StateTypeSize_v = StateTypeSize<DataTypes, vtype>::total_size;  . Typedef Documentation. ◆ ClassEntry. typedef sofa::core::ObjectFactory::ClassEntry sofa::core::ClassEntry. ◆ ConstMatrixDerivId. typedef TVecId<V_MATDERIV, V_READ > sofa::core::ConstMatrixDerivId. ◆ ConstMultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_READ> sofa::core::ConstMultiMatrixDerivId. ◆ ConstMultiVecCoordId. typedef TMultiVecId<V_COORD, V_READ> sofa::core::ConstMultiVecCoordId. ◆ ConstMultiVecDerivId. typedef TMultiVecId<V_DERIV, V_READ> sofa::core::ConstMultiVecDerivId. ◆ ConstMultiVecId. typedef TMultiVecId<V_ALL, V_READ> sofa::core::ConstMultiVecId. ◆ ConstVecCoordId. typedef TVecId<V_COORD , V_READ > sofa::core::ConstVecCoordId. Typedefs for each type of state vectors. . ◆ ConstVecDerivId. typedef TVecId<V_DERIV , V_READ > sofa::core::ConstVecDerivId. ◆ ConstVecId. typedef TVecId<V_ALL, V_READ> sofa::core::ConstVecId. Identify one vector stored in State A ConstVecId only provides a read-only access to the underlying vector. . ◆ Creator. typedef sofa::core::ObjectFactory::Creator sofa::core::Creator. ◆ get_base_object_strong_type. template<matrixaccumulator::Contribution c> . using sofa::core::get_base_object_strong_type = typedef typename get_base_object_strong<c>::type. Helper alias. . ◆ MatrixDerivId. typedef TVecId<V_MATDERIV, V_WRITE> sofa::core::MatrixDerivId. ◆ MultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_WRITE> sofa::core::MultiMatrixDerivId. ◆ MultiVecCoordId. typedef TMultiVecId<V_COORD, V_WRITE> sofa::core::MultiVecCoordId. ◆ MultiVecDerivId. typedef TMultiVecId<V_DERIV, V_WRITE> sofa::core::MultiVecDerivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:17773,Security,access,access,17773,"rivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::OnCreateCallback. ◆ sptr. template<class T > . using sofa::core::sptr = typedef boost::intrusive_ptr<T>. ◆ StateType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateType_t = typedef typename StateType<DataTypes, vtype>::type. ◆ StateVecType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateVecType_t = typedef typename StateVecType<DataTypes, vtype>::type. ◆ VecCoordId. typedef TVecId<V_COORD , V_WRITE> sofa::core::VecCoordId. ◆ VecDerivId. typedef TVecId<V_DERIV , V_WRITE> sofa::core::VecDerivId. ◆ VecId. typedef TVecId<V_ALL, V_WRITE> sofa::core::VecId. Identify one vector stored in State A VecId provides a read-write access to the underlying vector. . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorSOFA_DATA_MAX_ASPECTS . ◆ ConstraintOrder. enum sofa::core::ConstraintOrder. strong . Description of the order of the constraint. . EnumeratorPOS ; VEL ; ACC ; POS_AND_VEL . ◆ VecAccess. enum sofa::core::VecAccess. Types of vectors that can be stored in State. . EnumeratorV_READ ; V_WRITE . ◆ VecType. enum sofa::core::VecType. Types of vectors that can be stored in State. . EnumeratorV_ALL ; V_COORD ; V_DERIV ; V_MATDERIV . Function Documentation. ◆ caseInsensitive(). std::string sofa::core::caseInsensitive ; (; const std::string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Ba",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:867,Usability,simpl,simplified,867,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19634,Usability,feedback,feedback,19634,"model::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ObjectFactory::Creator::SPtr > > & ; creators, . objectmodel::BaseObjectDescription * ; arg . ). ◆ init(). SOFA_CORE_API void sofa::core::init ; (; ). Initialize the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:4092,Deployability,integrat,integration,4092,"tParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSet;  Component computing constraints between a pair of simulated body. More...;  ; class  PairStateAccessor;  ; class  ProjectiveConstraintSet;  Component computing constraints within a simulated body. More...;  ; class  RotationFinder;  ; class  SingleMatrixAccessor;  ; class  SingleStateAccessor;  ; class  StateAccessor;  . Typedefs; typedef TMultiVec< V_COORD > MultiVecCoord;  ; typedef TMultiVec< V_DERIV > MultiVecDeriv;  ; typedef TMultiVec< V_MATDERIV > MultiVecMatrixDeriv;  . Enumerations; enum class  BlocData { SCALAR; , MAT33; };  ; enum class  BlocPrecision { FLOAT; , DOUBLE; };  . Functio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:986,Integrability,interface,interface,986,"﻿. SOFA API: sofa::core::behavior Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::behavior Namespace Reference . For BaseMatrix. ; More... Classes; class  MechanicalState;  Component storing all state vectors of a simulated body (position, velocity, etc), using the datatype specified in the templace. More...;  ; class  BaseAnimationLoop;  Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. More...;  ; class  BaseConstraint;  Component computing constraints within a simulated body. More...;  ; class  BaseConstraintCorrection;  Component computing constraint forces within a simulated body using the compliance method. More...;  ; class  BaseConstraintSet;  ; class  BaseController;  BaseController Class. Interface of user interaction on SOFA Components. Empty class to provide an interface for the Factory. More...;  ; class  BaseForceField;  Component computing forces within simulated bodies. More...;  ; class  BaseInteractionConstraint;  BaseInteractionConstraint is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionForceField;  BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. More...;  ; class  BaseInteractionProjectiveConstraintSet;  BaseInteractionProjectiveConstraintSet is a constraint linking several bodies (MechanicalState) together. More...;  ; class  BaseLinearSolver;  Abstract base class (as type identifier) for linear system solvers without any API. More...;  ; class  StiffnessMatrixAccumulator;  ; class  ListStiffnessMatrixAccumulator;  ; class  DampingMatrixAccumulator;  ; class  ListDampingMatrixAccumulator;  ; class  StiffnessMatrix;  ; class  DampingMatrix;  ; class  MassMatrixAccumulator;  ; class  ListMassMatrixAccumulator;  ; class  MassMatrix;  ; class  BaseMass;  C",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:3428,Integrability,interface,interface,3428,"mponent computing projective constraints within a simulated body. More...;  ; class  BaseRotationFinder;  ; class  BaseVectorOperations;  ; struct  BlockType;  ; class  BlocMatrixWriter;  ; class  Constraint;  Component computing constraints within a simulated body. More...;  ; class  ConstraintCorrection;  ; class  ConstraintResolution;  Object computing a constraint resolution within a Gauss-Seidel algorithm. More...;  ; class  ConstraintSolver;  Component responsible for the expression and solution of system of equations related to constraints. The main method is solveConstraint(const ConstraintParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:4092,Integrability,integrat,integration,4092,"tParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSet;  Component computing constraints between a pair of simulated body. More...;  ; class  PairStateAccessor;  ; class  ProjectiveConstraintSet;  Component computing constraints within a simulated body. More...;  ; class  RotationFinder;  ; class  SingleMatrixAccessor;  ; class  SingleStateAccessor;  ; class  StateAccessor;  . Typedefs; typedef TMultiVec< V_COORD > MultiVecCoord;  ; typedef TMultiVec< V_DERIV > MultiVecDeriv;  ; typedef TMultiVec< V_MATDERIV > MultiVecMatrixDeriv;  . Enumerations; enum class  BlocData { SCALAR; , MAT33; };  ; enum class  BlocPrecision { FLOAT; , DOUBLE; };  . Functio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:403,Deployability,integrat,integration,403,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:403,Integrability,integrat,integration,403,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:577,Safety,detect,detected,577,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:1183,Testability,test,test,1183,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:25,Performance,load,loader,25,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:162,Performance,load,loader,162,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html:446,Performance,load,loader,446,﻿. SOFA API: sofa::core::loader Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::core::loader Namespace Reference . Classes; class  BaseLoader;  ; class  ImageLoader;  ; class  MeshLoader;  ; class  SceneLoader;  ; class  VoxelLoader;  . Functions; bool SOFA_CORE_API canLoad (const char *filename);  . Function Documentation. ◆ canLoad(). bool SOFA_CORE_API sofa::core::loader::canLoad ; (; const char * ; filename). sofacoreloader; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1loader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:8329,Availability,error,error,8329,":ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum sofa::core::objectmodel::PathType. strong . EnumeratorFILE ; DIRECTORY ; BOTH . ◆ TypeOfInsertion. enum sofa::core::objectmodel::TypeOfInsertion. strong . Enum proposing two alternatives on where to add a new object in a node. . EnumeratorAtEnd ; AtBegin . Function Documentation. ◆ classidT(). template<class T > . const ClassInfo& sofa::core::objectmodel::classidT ; (; ). ◆ GetSofaTypeTemplateName() [1/2]. template<typename T > . std::string sofa::core::objectmodel::GetSofaTypeTemplateName ; (; const std::string ; prefix = """"). ◆ GetSofaTypeTemplateName() [2/2]. template<typename T1 , typename T2 , typename ... Ts> . std::string sofa::core::objectmodel::GetSofaTypeTemplateName ; (; const std::string ; prefix = """"). ◆ intrusive_ptr_add_ref(). SOFA_CORE_API void sofa::core::objectmode",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2237,Deployability,configurat,configuration,2237,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3219,Deployability,update,update,3219,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3318,Deployability,update,update,3318,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:4020,Deployability,release,released,4020,"ect of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEven",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3088,Integrability,interface,interface,3088,", used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3162,Integrability,depend,dependencies,3162,"class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:3191,Integrability,depend,dependency,3191,"More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:4428,Integrability,interface,interface,4428,"class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  HapticDeviceEvent;  This event notifies about haptic device interaction. More...;  ; class  IdleEvent;  This event is propagated along the objects hierarchy at regular interval. More...;  ; class  JoystickEvent;  JoystickEvent Class. More...;  ; class  KeypressedEvent;  This event is propagated along the objects when a key on the keyboard is pressed. More...;  ; class  KeyreleasedEvent;  This event is propagated along the objects when a key on the keyboard is released. More...;  ; class  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internal",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:5068,Integrability,message,message,5068,"  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internally converted to an integer), attached to objects in order to define subsets to process by specific visitors. More...;  ; class  TagSet;  ; class  vectorData;  ; class  VectorLinks;  . Typedefs; using AspectRef = sptr< Aspect >;  . Enumerations; enum class  ComponentState { ;   Undefined; , Loading; , Valid; , Dirty; , ;   Busy; , Invalid. };  ; enum class  PathType { FILE; , DIRECTORY; , BOTH; };  ; enum class  TypeOfInsertion { AtEnd; , AtBegin; };  Enum proposing two alternatives on where to add a new object in a node. More...;  ; enum class  DataEngineDataType {",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:1597,Modifiability,variab,variables,1597,") to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2237,Modifiability,config,configuration,2237,".. > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is us",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:2567,Modifiability,variab,variable,2567,"ss for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescription;  Base Interface for classes containing the description of an object, used to construct it. More...;  ; class  ClassInfo;  Meta information class. More...;  ; class  TClassInfo;  ; class  ConfigurationSetting;  Base class for all the configuration settings of SOFA. More...;  ; class  Context;  Implementation of BaseContext, storing all shared parameters in Datas. More...;  ; class  ContextObject;  Base class for simulation objects that modify the shared context (such as gravity, local coordinate system, ...). More...;  ; class  Data;  Container that holds a variable for a component. More...;  ; class  EmptyData;  ; class  DataContentValue;  ; class  DataContentValue< T, false >;  ; class  DataContentValue< T, true >;  ; class  DataFileName;  Data specialized to store filenames, potentially relative to the current directory at the time it was specified. More...;  ; class  DataFileNameVector;  ; class  DataLink;  DataLink stores a connection between two object of type Data<XXX> The class is templated by the Data type to connect. The class implements the AbstractDataLink interface. More...;  ; class  DDGNode;  A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. More...;  ; class  DetachNodeEvent;  ; class  Event;  Base class for all events received by the objects. More...;  ; class  GUIEvent;  This event notifies about GUI interaction. More...;  ; class  Hap",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:8007,Performance,load,loading,8007,"e::objectmodel::BaseData &df);  ; template<class T > ; const ClassInfo & classidT ();  ; std::ostream & operator<< (std::ostream &o, const ComponentState &s);  Defining the in/ou operator for use of component status with Data<> More...;  ; std::istream & operator>> (std::istream &i, ComponentState &s);  ; std::ostream & operator<< (std::ostream &o, const sofa::core::objectmodel::TagSet &tagSet);  ; std::istream & operator>> (std::istream &in, sofa::core::objectmodel::TagSet &tagSet);  . Variables; template class SOFA_CORE_API Data< bool >;  . Typedef Documentation. ◆ AspectRef. using sofa::core::objectmodel::AspectRef = typedef sptr<Aspect>. Enumeration Type Documentation. ◆ ComponentState. enum sofa::core::objectmodel::ComponentState. strong . enum class is a C++ x11 feature (http://en.cppreference.com/w/cpp/language/enum), Indicate the state of a sofa object. . EnumeratorUndefined component that does not make use of this field have this one . Loading the component is loading but never passed successfully its init() function . Valid the component has passed successfully its init function . Dirty the component is ready to be used but requires a call to reinit . Busy the component is doing ""something"", don't trust its values for doing your computation . Invalid the component reached an error and is thus unable to behave normally. . ◆ DataEngineDataType. enum sofa::core::objectmodel::DataEngineDataType. strong . EnumeratorDataEngineNothing ; DataEngineInput ; DataEngineOutput . ◆ PathType. enum sofa::core::objectmodel::PathType. strong . EnumeratorFILE ; DIRECTORY ; BOTH . ◆ TypeOfInsertion. enum sofa::core::objectmodel::TypeOfInsertion. strong . Enum proposing two alternatives on where to add a new object in a node. . EnumeratorAtEnd ; AtBegin . Function Documentation. ◆ classidT(). template<class T > . const ClassInfo& sofa::core::objectmodel::classidT ; (; ). ◆ GetSofaTypeTemplateName() [1/2]. template<typename T > . std::string sofa::core::objectmodel::GetSofaTypeT",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:738,Security,access,access,738,"﻿. SOFA API: sofa::core::objectmodel Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::objectmodel Namespace Reference . Namespaces;  base;  ;  basecontext;  ;  lifecycle;  . Classes; class  SingleLink;  Container of single links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescriptio",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:810,Integrability,interface,interface,810,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:927,Integrability,interface,interface,927,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:1088,Integrability,interface,interface,1088," API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; trist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:1120,Modifiability,inherit,inherit,1120," API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; trist",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:434,Security,access,accessible,434,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:1770,Integrability,wrap,wrap,1770,"e< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix;  ; struct  EigenSparseToMapMapSparseMatrixVec;  ; class  EigenSparseToMapMapSparseMatrix< sofa::type::Vec< N, Real > >;  ; class  EigenSparseToMapMapSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >;  ; class  RigidCoord< 3, real >;  ; class  RigidCoord< 2, real >;  ; class  RigidDeriv< 3, real >;  ; class  RigidDeriv< 2, real >;  ; class  RigidMass< 3, real >;  ; class  RigidMass< 2, real >;  ; class  StdRigidTypes< 3, real >;  ; class  StdRigidTypes< 2, real >;  ; class  SolidTypes;  ; class  TemplateAliases;  Class used to store and resolve template aliases. More...;  ; class  RegisterTemplateAlias;  Helper class used to register a template alias in the TemplateAliases class. More...;  ; struct  DefaultDataTypeInfo;  ; class  DataTypeName;  ; class  HasGetTypeName;  add a compatibility layer to supper the new existing GetTypeName. More...;  ; class  DataTypeInfoDynamicWrapper;  wrap a DataTypeInfo type_traits in an AbstractTypeInfo More...;  ; struct  BoolTypeInfo;  ; struct  FixedArrayTypeInfo;  ; struct  IncompleteTypeInfo;  ; struct  IntegerTypeInfo;  ; struct  ScalarTypeInfo;  ; struct  SetTypeInfo;  ; struct  TextTypeInfo;  ; struct  VectorTypeInfo;  ; class  NameOnlyTypeInfo;  ; class  NoTypeInfo;  ; struct  DataTypeInfo< bool >;  ; struct  BoundingBoxTypeInfo;  ; struct  DataTypeInfo< type::BoundingBox >;  ; struct  DataTypeInfo< sofa::type::fixed_array< T, N > >;  ; struct  DataTypeInfo< char >;  ; struct  DataTypeInfo< unsigned char >;  ; struct  DataTypeInfo< short >;  ; struct  DataTypeInfo< unsigned short >;  ; struct  DataTypeInfo< int >;  ; struct  DataTypeInfo< unsigned int >;  ; struct  DataTypeInfo< long >;  ; struct  DataTypeInfo< unsigned long >;  ; struct  DataTypeInfo< long long >;  ; struct  DataTypeInfo< unsigned long long >;  ; struct  DataTypeInfo< sofa::type::Mat< L, C, real > >;  ; struct  DataTypeInfo< sofa::type::Quat< T > >;  ; class  Data",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:4345,Integrability,wrap,wrap,4345,"dge >;  ; struct  DataTypeInfo< sofa::topology::Triangle >;  ; struct  DataTypeInfo< sofa::topology::Quad >;  ; struct  DataTypeInfo< sofa::topology::Tetrahedron >;  ; struct  DataTypeInfo< sofa::topology::Pyramid >;  ; struct  DataTypeInfo< sofa::topology::Pentahedron >;  ; struct  DataTypeInfo< sofa::topology::Hexahedron >;  ; struct  DataTypeInfo< sofa::type::Vec< N, real > >;  ; struct  DataTypeInfo< sofa::type::VecNoInit< N, real > >;  ; struct  DataTypeInfo< sofa::type::vector< T, Alloc > >;  ; struct  DataTypeInfo< sofa::type::vector< bool, Alloc > >;  ; struct  DataTypeInfo< sofa::type::vector< std::string, Alloc > >;  ; class  TypeInfoId;  Generates unique id for types. More...;  ; class  TypeInfoRegistry;  An unique singleton to register all the type info defined in Sofa. More...;  ; class  TypeInfoRegistryTools;  A dedicated class to hold helper functions for TypeInfoRegistryTools. More...;  . Typedefs; template<class T > ; using VirtualTypeInfo = DataTypeInfoDynamicWrapper< DataTypeInfo< T > >;  We make an alias to wrap around the old name to the new one. More...;  ; typedef StdRigidTypes< 2, double > Rigid2dTypes;  ; typedef RigidMass< 2, double > Rigid2dMass;  ; typedef StdRigidTypes< 2, float > Rigid2fTypes;  ; typedef RigidMass< 2, float > Rigid2fMass;  ; typedef StdRigidTypes< 2, SReal > Rigid2Types;  ; typedef RigidMass< 2, SReal > Rigid2Mass;  un-defined precision type More...;  ; typedef RigidMass< 3, double > Rigid3dMass;  ; typedef RigidMass< 3, float > Rigid3fMass;  ; typedef StdRigidTypes< 3, SReal > Rigid3Types;  un-defined precision type More...;  ; typedef RigidMass< 3, SReal > Rigid3Mass;  un-defined precision type More...;  ; typedef StdVectorTypes< sofa::type::Vec3d, sofa::type::Vec3d, double > Vec3dTypes;  3D DOFs, double precision More...;  ; typedef StdVectorTypes< sofa::type::Vec2d, sofa::type::Vec2d, double > Vec2dTypes;  2D DOFs, double precision More...;  ; typedef StdVectorTypes< sofa::type::Vec1d, sofa::type::Vec1d, double > Ve",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:8457,Integrability,depend,dependency,8457,"ss  TypeInfoType { MISSING; , NAMEONLY; , COMPLETE; };  Encodes the different kind of type infos stored in the TypeInfoRegistry. More...;  . Functions; template<class Vec > ; void resetDataTypeVec (Vec &vec);  Function resetting all the element of a container with its default constructor value type. More...;  ; template<sofa::Size N, typename ValueType > ; void resetVecTypeVec (vector< Vec< N, ValueType > > &vec);  In case of a vector<Vec>, zero can be set directly with memset on all the memory space for a faster reset. More...;  ; template<> ; void resetDataTypeVec< vector< Vec< 6, float > > > (vector< Vec< 6, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 6, double > > > (vector< Vec< 6, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, float > > > (vector< Vec< 3, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, double > > > (vector< Vec< 3, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, float > > > (vector< Vec< 2, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, double > > > (vector< Vec< 2, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, float > > > (vector< Vec< 1, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, double > > > (vector< Vec< 1, double > > &vec);  ; SOFA_DEFAULTTYPE_API void init ();  Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isInitialized ();  Return true if and only if the SofaDefaultType library has been initialized. More...;  ; SOFA_DEFAULTTYPE_API void cleanup ();  Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isCleanedUp ();  Return true if and only if the SofaDefaultType library has been cleaned up. More...;  ; template<class MatrixRow , class VecDeriv > ; VecDeriv::Real SparseMatrixVecDerivMult (const MatrixRow &r",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:8741,Integrability,depend,dependency,8741,"r< Vec< 6, double > > > (vector< Vec< 6, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, float > > > (vector< Vec< 3, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 3, double > > > (vector< Vec< 3, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, float > > > (vector< Vec< 2, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 2, double > > > (vector< Vec< 2, double > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, float > > > (vector< Vec< 1, float > > &vec);  ; template<> ; void resetDataTypeVec< vector< Vec< 1, double > > > (vector< Vec< 1, double > > &vec);  ; SOFA_DEFAULTTYPE_API void init ();  Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isInitialized ();  Return true if and only if the SofaDefaultType library has been initialized. More...;  ; SOFA_DEFAULTTYPE_API void cleanup ();  Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. More...;  ; SOFA_DEFAULTTYPE_API bool isCleanedUp ();  Return true if and only if the SofaDefaultType library has been cleaned up. More...;  ; template<class MatrixRow , class VecDeriv > ; VecDeriv::Real SparseMatrixVecDerivMult (const MatrixRow &row, const VecDeriv &vec);  ; template<typename LhsDeriv , typename RhsDeriv , typename Real > ; void addMultTransposeEigen (MapMapSparseMatrix< LhsDeriv > &lhs, const Eigen::SparseMatrix< Real, Eigen::RowMajor > &jacobian, const MapMapSparseMatrix< RhsDeriv > &rhs);  Computes lhs += jacobian^T * rhs. More...;  ; bool writeMatrixTxt (const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision);  ; bool writeMatrixCsv (const std::string &filename, sofa::linearalgebra::BaseMatrix *matrix, int precision);  ; template<typename real , typename real2 > ; constexpr RigidDeriv< 3, real > operator* (RigidDeriv< 3, real > r, real2 a);  ; template<typename rea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:16800,Integrability,wrap,wrap,16800,") . ◆ Vec3dTypes. typedef StdVectorTypes< type::Vec3d, type::Vec3d, double > sofa::defaulttype::Vec3dTypes. 3D DOFs, double precision . ◆ Vec3fTypes. typedef StdVectorTypes< type::Vec3f, type::Vec3f, float > sofa::defaulttype::Vec3fTypes. 3f DOFs, single precision . ◆ Vec3Types. typedef StdVectorTypes<type::Vec3, type::Vec3, type::Vec3::value_type> sofa::defaulttype::Vec3Types. 3D DOFs, double precision (default) . ◆ Vec6dTypes. typedef StdVectorTypes< type::Vec6d, type::Vec6d, double > sofa::defaulttype::Vec6dTypes. 6D DOFs, double precision . ◆ Vec6fTypes. typedef StdVectorTypes< type::Vec6f, type::Vec6f, float > sofa::defaulttype::Vec6fTypes. 6f DOFs, single precision . ◆ Vec6Types. typedef StdVectorTypes<type::Vec6, type::Vec6, type::Vec6::value_type> sofa::defaulttype::Vec6Types. 6D DOFs, double precision (default) . ◆ VirtualTypeInfo. template<class T > . using sofa::defaulttype::VirtualTypeInfo = typedef DataTypeInfoDynamicWrapper<DataTypeInfo<T> >. We make an alias to wrap around the old name to the new one. . Enumeration Type Documentation. ◆ TypeInfoType. enum sofa::defaulttype::TypeInfoType. strong . Encodes the different kind of type infos stored in the TypeInfoRegistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSpar",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:17079,Integrability,depend,depending,17079,"def StdVectorTypes<type::Vec3, type::Vec3, type::Vec3::value_type> sofa::defaulttype::Vec3Types. 3D DOFs, double precision (default) . ◆ Vec6dTypes. typedef StdVectorTypes< type::Vec6d, type::Vec6d, double > sofa::defaulttype::Vec6dTypes. 6D DOFs, double precision . ◆ Vec6fTypes. typedef StdVectorTypes< type::Vec6f, type::Vec6f, float > sofa::defaulttype::Vec6fTypes. 6f DOFs, single precision . ◆ Vec6Types. typedef StdVectorTypes<type::Vec6, type::Vec6, type::Vec6::value_type> sofa::defaulttype::Vec6Types. 6D DOFs, double precision (default) . ◆ VirtualTypeInfo. template<class T > . using sofa::defaulttype::VirtualTypeInfo = typedef DataTypeInfoDynamicWrapper<DataTypeInfo<T> >. We make an alias to wrap around the old name to the new one. . Enumeration Type Documentation. ◆ TypeInfoType. enum sofa::defaulttype::TypeInfoType. strong . Encodes the different kind of type infos stored in the TypeInfoRegistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSparseMatrix< RhsDeriv > & ; rhs . ). Computes lhs += jacobian^T * rhs. . ◆ cleanup(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::cleanup ; (; ). Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. . ◆ getAngular() [1/2]. template<sofa::Si",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:18029,Integrability,depend,dependency,18029,"egistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSparseMatrix< RhsDeriv > & ; rhs . ). Computes lhs += jacobian^T * rhs. . ◆ cleanup(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::cleanup ; (; ). Clean up the resources used by the SofaDefaultType library, as well as its dependency: SofaHelper. . ◆ getAngular() [1/2]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Rot& sofa::defaulttype::getAngular ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getAngular() [2/2]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Rot& sofa::defaulttype::getAngular ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getLinear() [1/2]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Pos& sofa::defaulttype::getLinear ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getLinear() [2/2]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Pos& sofa::defaulttype::getLinear ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getTemplateAliasesMap(). TemplateAliasesMap& sofa::defaulttype::getTemplateAliasesMap ; (; ). ◆ getVCenter() [1/3]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; const RigidDeriv< N, T > & ; v). co",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:19921,Integrability,depend,dependency,19921,"const RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getVCenter() [2/3]. template<typename T > . const Vec<3, T> sofa::defaulttype::getVCenter ; (; const Vec< 6, T > & ; v). ◆ getVCenter() [3/3]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Pos& sofa::defaulttype::getVCenter ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ getVOrientation() [1/3]. template<sofa::Size N, typename T > . constexpr const RigidDeriv<N,T>::Rot& sofa::defaulttype::getVOrientation ; (; const RigidDeriv< N, T > & ; v). constexpr . ◆ getVOrientation() [2/3]. template<typename T > . const Vec<3, T> sofa::defaulttype::getVOrientation ; (; const Vec< 6, T > & ; v). ◆ getVOrientation() [3/3]. template<sofa::Size N, typename T > . constexpr RigidDeriv<N,T>::Rot& sofa::defaulttype::getVOrientation ; (; RigidDeriv< N, T > & ; v). constexpr . ◆ init(). SOFA_DEFAULTTYPE_API void sofa::defaulttype::init ; (; ). Initialize the SofaDefaultType library, as well as it dependency: SofaHelper. . ◆ isCleanedUp(). SOFA_DEFAULTTYPE_API bool sofa::defaulttype::isCleanedUp ; (; ). Return true if and only if the SofaDefaultType library has been cleaned up. . ◆ isDouble(). template<class T > . constexpr bool sofa::defaulttype::isDouble ; (; ). constexpr . ◆ isDouble< double >(). template<> . constexpr bool sofa::defaulttype::isDouble< double > ; (; ). constexpr . ◆ isInitialized(). SOFA_DEFAULTTYPE_API bool sofa::defaulttype::isInitialized ; (; ). Return true if and only if the SofaDefaultType library has been initialized. . ◆ isSRealDouble(). constexpr bool sofa::defaulttype::isSRealDouble ; (; ). constexpr . ◆ isSRealFloat(). constexpr bool sofa::defaulttype::isSRealFloat ; (; ). constexpr . ◆ operator*() [1/5]. template<typename real > . constexpr RigidDeriv<2,real> sofa::defaulttype::operator* ; (; const RigidDeriv< 2, real > & ; d, . const RigidMass< 2, real > & ; m . ). constexpr . ◆ operator*() [2/5]. template<typename real > . constex",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:13036,Testability,test,tests,13036," operator/ (RigidDeriv< 2, real > r, real2 a);  ; template<typename R , typename T > ; constexpr type::Vec< 2, R > velocityAtRotatedPoint (const RigidDeriv< 2, T > &v, const type::Vec< 2, R > &p);  Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. More...;  ; template<typename R , typename T > ; constexpr RigidDeriv< 2, T > velocityAtRotatedPoint (const RigidDeriv< 2, T > &v, const RigidCoord< 2, R > &p);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator* (const RigidDeriv< 3, real > &d, const RigidMass< 3, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator* (const RigidMass< 3, real > &m, const RigidDeriv< 3, real > &d);  ; template<typename real > ; constexpr RigidDeriv< 3, real > operator/ (const RigidDeriv< 3, real > &d, const RigidMass< 3, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator* (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename real > ; constexpr RigidDeriv< 2, real > operator/ (const RigidDeriv< 2, real > &d, const RigidMass< 2, real > &m);  ; template<typename T > ; const Vec< 3, T > getVCenter (const Vec< 6, T > &v);  ; template<typename T > ; const Vec< 3, T > getVOrientation (const Vec< 6, T > &v);  ; TemplateAliasesMap & getTemplateAliasesMap ();  ; template<class T > ; constexpr bool isDouble ();  ; template<> ; constexpr bool isDouble< double > ();  ; constexpr bool isSRealDouble ();  ; constexpr bool isSRealFloat ();  ; Helpers; Helper Functions to more easily create tests and check the results. . Variables; std::unordered_map< std::string, MatrixExportFunction > matrixExporterMap;  ; sofa::helper::OptionsGroup matrixExporterOptionsGroup {""txt"", ""csv""};  ; template class SOFA_DEFAULTTYPE_API SolidTypes< double >;  ; template class SOFA_DEFAULTTYPE_API SolidTypes< float >;  . Typedef Documentation. ◆ MatrixExportFunction. using sofa::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1defaulttype.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:2238,Integrability,depend,dependencies,2238,"at &radx, const float &rady, const float &radz, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawWireSphere (const V &center, const float &rad, const int subd1=8, const int subd2=8);  ; template<typename V > ; void drawTorus (const float *coordinateMatrix, const float &bodyRad=0.0, const float &rad=1.0, const int precision=20, const V &color=sofa::type::fixed_array< int, 3 >(255, 215, 180));  ; template<typename V > ; void drawEmptyParallelepiped (const V &vert1, const V &vert2, const V &vert3, const V &vert4, const V &vecFromFaceToOppositeFace, const float &rad=1.0, const int precision=8, const V &color=sofa::type::RGBAColor::red());  ; SOFA_GL_API void glfntInit (void);  ; SOFA_GL_API void glfntWriteBitmap (float x, float y, char *s);  ; SOFA_GL_API void glfntClose (void);  ; std::string CombineHeaders (std::string header, const std::string &shaderStage, std::string source);  ; SOFA_GL_API void init ();  Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isInitialized ();  Return true if and only if the Sofa.GL library has been initialized. More...;  ; SOFA_GL_API void cleanup ();  Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isCleanedUp ();  Return true if and only if the Sofa.GL library has been cleaned up. More...;  ; template<int N> ; void glVertexNv (const float *);  ; template<> ; void glVertexNv< 3 > (const float *p);  ; template<> ; void glVertexNv< 2 > (const float *p);  ; template<> ; void glVertexNv< 1 > (const float *p);  ; template<int N> ; void glVertexNv (const double *p);  ; template<> ; void glVertexNv< 2 > (const double *p);  ; template<> ; void glVertexNv< 1 > (const double *p);  ; template<class Coord > ; void glVertexT (const Coord &c);  ; template<> ; void glVertexT< double > (const double &c);  ; template<> ; void glVertexT< float > (const float &c);  ; temp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:2507,Integrability,depend,dependencies,2507,"dinateMatrix, const float &bodyRad=0.0, const float &rad=1.0, const int precision=20, const V &color=sofa::type::fixed_array< int, 3 >(255, 215, 180));  ; template<typename V > ; void drawEmptyParallelepiped (const V &vert1, const V &vert2, const V &vert3, const V &vert4, const V &vecFromFaceToOppositeFace, const float &rad=1.0, const int precision=8, const V &color=sofa::type::RGBAColor::red());  ; SOFA_GL_API void glfntInit (void);  ; SOFA_GL_API void glfntWriteBitmap (float x, float y, char *s);  ; SOFA_GL_API void glfntClose (void);  ; std::string CombineHeaders (std::string header, const std::string &shaderStage, std::string source);  ; SOFA_GL_API void init ();  Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isInitialized ();  Return true if and only if the Sofa.GL library has been initialized. More...;  ; SOFA_GL_API void cleanup ();  Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_GL_API bool isCleanedUp ();  Return true if and only if the Sofa.GL library has been cleaned up. More...;  ; template<int N> ; void glVertexNv (const float *);  ; template<> ; void glVertexNv< 3 > (const float *p);  ; template<> ; void glVertexNv< 2 > (const float *p);  ; template<> ; void glVertexNv< 1 > (const float *p);  ; template<int N> ; void glVertexNv (const double *p);  ; template<> ; void glVertexNv< 2 > (const double *p);  ; template<> ; void glVertexNv< 1 > (const double *p);  ; template<class Coord > ; void glVertexT (const Coord &c);  ; template<> ; void glVertexT< double > (const double &c);  ; template<> ; void glVertexT< float > (const float &c);  ; template<int N> ; void glTexCoordNv (const float *);  ; template<> ; void glTexCoordNv< 3 > (const float *p);  ; template<> ; void glTexCoordNv< 2 > (const float *p);  ; template<> ; void glTexCoordNv< 1 > (const float *p);  ; template<int N> ; void glTexCoordNv (const dou",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:5672,Integrability,depend,dependencies,5672,"; void glTranslateNv (const double *p);  ; template<> ; void glTranslateNv< 2 > (const double *p);  ; template<> ; void glTranslateNv< 1 > (const double *p);  ; template<class Coord > ; void glTranslateT (const Coord &c);  ; template<> ; void glTranslateT< double > (const double &c);  ; template<> ; void glTranslateT< float > (const float &c);  ; void glScale (const float &c1, const float &c2, const float &c3);  ; void glScale (const double &c1, const double &c2, const double &c3);  ; void glRotate (const GLfloat &value, const float &c1, const float &c2, const float &c3);  ; void glRotate (const GLdouble &value, const double &c1, const double &c2, const double &c3);  ; void glMultMatrix (const float *p);  ; void glMultMatrix (const double *p);  . Variables; bool GLSLIsSupported = false;  . Detailed Description; Forward declaration. ; Function Documentation. ◆ cleanup(). SOFA_GL_API void sofa::gl::cleanup ; (; ). Clean up the resources used by the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ CombineHeaders(). std::string sofa::gl::CombineHeaders ; (; std::string ; header, . const std::string & ; shaderStage, . std::string ; source . ). ◆ drawArrow(). template<typename V > . void sofa::gl::drawArrow ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawCone(). template<typename V > . void sofa::gl::drawCone ; (; const V & ; p1, . const V & ; p2, . const float & ; radius1, . const float & ; radius2, . const int ; subd = 8 . ). ◆ drawCylinder(). template<typename V > . void sofa::gl::drawCylinder ; (; const V & ; p1, . const V & ; p2, . const float & ; rad, . const int ; subd = 8 . ). ◆ drawEllipsoid(). template<typename V > . void sofa::gl::drawEllipsoid ; (; const V & ; center, . const float & ; radx, . const float & ; rady, . const float & ; radz, . const int ; subd1 = 8, . const int ; subd2 = 8 . ). ◆ drawEmptyParallelepiped(). template<typename V > . void sofa::gl::drawEmptyParallelepiped ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:12907,Integrability,depend,dependencies,12907," void sofa::gl::glTranslateNv< 2 > ; (; const float * ; p). inline . ◆ glTranslateT(). template<class Coord > . void sofa::gl::glTranslateT ; (; const Coord & ; c). inline . ◆ glTranslateT< double >(). template<> . void sofa::gl::glTranslateT< double > ; (; const double & ; c). inline . ◆ glTranslateT< float >(). template<> . void sofa::gl::glTranslateT< float > ; (; const float & ; c). inline . ◆ glVertexNv() [1/2]. template<int N> . void sofa::gl::glVertexNv ; (; const double * ; p). inline . ◆ glVertexNv() [2/2]. template<int N> . void sofa::gl::glVertexNv ; (; const float * ; ). inline . ◆ glVertexNv< 1 >() [1/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const double * ; p). inline . ◆ glVertexNv< 1 >() [2/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const float * ; p). inline . ◆ glVertexNv< 2 >() [1/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const double * ; p). inline . ◆ glVertexNv< 2 >() [2/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const float * ; p). inline . ◆ glVertexNv< 3 >(). template<> . void sofa::gl::glVertexNv< 3 > ; (; const float * ; p). inline . ◆ glVertexT(). template<class Coord > . void sofa::gl::glVertexT ; (; const Coord & ; c). inline . ◆ glVertexT< double >(). template<> . void sofa::gl::glVertexT< double > ; (; const double & ; c). inline . ◆ glVertexT< float >(). template<> . void sofa::gl::glVertexT< float > ; (; const float & ; c). inline . ◆ init(). SOFA_GL_API void sofa::gl::init ; (; ). Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_GL_API bool sofa::gl::isCleanedUp ; (; ). Return true if and only if the Sofa.GL library has been cleaned up. . ◆ isInitialized(). SOFA_GL_API bool sofa::gl::isInitialized ; (; ). Return true if and only if the Sofa.GL library has been initialized. . Variable Documentation. ◆ GLSLIsSupported. bool sofa::gl::GLSLIsSupported = false. sofagl; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:2953,Usability,simpl,simple,2953,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:3515,Usability,simpl,simple,3515,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html:3750,Usability,simpl,simple,3750,". void sofa::gl::component::rendering3d::glVertex3v ; (; const double * ; d). ◆ glVertex3v() [2/2]. void sofa::gl::component::rendering3d::glVertex3v ; (; const float * ; d). ◆ init(). SOFA_GL_COMPONENT_RENDERING3D_API void sofa::gl::component::rendering3d::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::rendering3d::initExternalModule ; (; ). Variable Documentation. ◆ ClipPlaneClass. int sofa::gl::component::rendering3d::ClipPlaneClass. Initial value:= core::RegisterObject(""OpenGL Clipping Plane""); .add< ClipPlane >(). ◆ DataDisplayClass. int sofa::gl::component::rendering3d::DataDisplayClass. Initial value:= core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >(). ◆ MergeVisualModelsClass. int sofa::gl::component::rendering3d::MergeVisualModelsClass. Initial value:= core::RegisterObject(""Merge several visual models""); .add< MergeVisualModels >(true). ◆ OglCylinderModelClass. int sofa::gl::component::rendering3d::OglCylinderModelClass. Initial value:= core::RegisterObject(""A simple visualization for set of cylinder.""); .add< OglCylinderModel >(). ◆ OglModelClass. int sofa::gl::component::rendering3d::OglModelClass. Initial value:= core::RegisterObject(""Generic visual model for OpenGL display""); .add< OglModel >(). ◆ OglSceneFrameClass. int sofa::gl::component::rendering3d::OglSceneFrameClass. Initial value:= core::RegisterObject(""Display a frame at the corner of the scene view""); .add< OglSceneFrame >(). ◆ PointSplatModelClass. int sofa::gl::component::rendering3d::PointSplatModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< PointSplatModel >(); .addAlias(""PointSplat""). ◆ SlicedVolumetricModelClass. int sofa::gl::component::rendering3d::SlicedVolumetricModelClass. Initial value:= core::RegisterObject(""A simple visualization for a cloud of points.""); .add< SlicedVolumetricModel >(). sofaglcomponentrendering3d; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1rendering3d.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:7034,Availability,down,download,7034,"nst char * sofa::gl::component::shader::getModuleVersion ; (; ). ◆ init(). SOFA_GL_COMPONENT_SHADER_API void sofa::gl::component::shader::init ; (; ). ◆ initExternalModule(). void sofa::gl::component::shader::initExternalModule ; (; ). Variable Documentation. ◆ CompositingVisualLoopClass. int sofa::gl::component::shader::CompositingVisualLoopClass. Initial value:= core::RegisterObject(""Visual loop enabling multipass rendering. Needs multiple fbo data and a compositing shader""); .add< CompositingVisualLoop >(). ◆ DirectionalLightClass. int sofa::gl::component::shader::DirectionalLightClass. Initial value:= core::RegisterObject(""A directional light illuminating the scene with parallel rays of light (can cast shadows).""); .add< DirectionalLight >(). ◆ LightManagerClass. int sofa::gl::component::shader::LightManagerClass. Initial value:= RegisterObject; (""Manage a set of lights that can cast hard and soft shadows.Soft Shadows is done using Variance Shadow Mapping ""; ""(http://developer.download.nvidia.com/SDK/10.5/direct3d/Source/VarianceShadowMapping/Doc/VarianceShadowMapping.pdf)""); .add< LightManager >(); sofa::core::RegisterObjectDefinition: ObjectFactory.h:386; sofa::core::RegisterObject::addRegisterObject & add(bool defaultTemplate=false)Definition: ObjectFactory.h:402. ◆ OglFloat2AttributeClass. int sofa::gl::component::shader::OglFloat2AttributeClass = core::RegisterObject ( ""OglFloat2Attribute"" ).add< OglFloat2Attribute >(). ◆ OglFloat2VariableClass. int sofa::gl::component::shader::OglFloat2VariableClass. Initial value:= core::RegisterObject(""OglFloat2Variable""); .add< OglFloat2Variable >(). ◆ OglFloat3AttributeClass. int sofa::gl::component::shader::OglFloat3AttributeClass = core::RegisterObject ( ""OglFloat3Attribute"" ).add< OglFloat3Attribute >(). ◆ OglFloat3VariableClass. int sofa::gl::component::shader::OglFloat3VariableClass. Initial value:= core::RegisterObject(""OglFloat3Variable""); .add< OglFloat3Variable >(). ◆ OglFloat4AttributeClass. int sofa::gl::comp",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html:1574,Modifiability,variab,variable,1574,ibute;  ; class  OglFloat3Attribute;  ; class  OglFloat4Attribute;  ; class  OglIntAttribute;  ; class  OglInt2Attribute;  ; class  OglInt3Attribute;  ; class  OglInt4Attribute;  ; class  OglUIntAttribute;  ; class  OglUInt2Attribute;  ; class  OglUInt3Attribute;  ; class  OglUInt4Attribute;  ; class  OglOITShader;  ; class  OglRenderingSRGB;  The utility to enable/disable sRGB rendering. More...;  ; class  OglShader;  Utility to use shader for a visual model in OpenGL. More...;  ; class  OglShaderElement;  Abstract class which defines a element to be used with a OglShader. More...;  ; class  OglShaderMacro;  Small class to define macro into an OglShader. More...;  ; class  OglShaderDefineMacro;  ; class  OglShaderVisualModel;  ; class  OglShadowShader;  ; class  OglTexture;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglTexture2D;  ; class  OglTexturePointer;  Defines an uniform sampler (texture) for a OglShader. More...;  ; class  OglVariable;  Defines an uniform variable for a OglShader. More...;  ; class  OglIntVariable;  ; class  OglInt2Variable;  ; class  OglInt3Variable;  ; class  OglInt4Variable;  ; class  OglFloatVariable;  ; class  OglFloat2Variable;  ; class  OglFloat3Variable;  ; class  OglFloat4Variable;  ; class  OglIntVectorVariable;  ; class  OglIntVector2Variable;  ; class  OglIntVector3Variable;  ; class  OglIntVector4Variable;  ; class  OglFloatVectorVariable;  ; class  OglFloatVector2Variable;  ; class  OglFloatVector3Variable;  ; class  OglFloatVector4Variable;  ; class  OglMatrix2Variable;  ; class  OglMatrix3Variable;  ; class  OglMatrix4Variable;  ; class  OglMatrix2x3Variable;  ; class  OglMatrix3x2Variable;  ; class  OglMatrix2x4Variable;  ; class  OglMatrix4x2Variable;  ; class  OglMatrix3x4Variable;  ; class  OglMatrix4x3Variable;  ; class  OglMatrix4VectorVariable;  ; class  VisualOITDrawVisitor;  ; class  OrderIndependentTransparencyManager;  Utility to manage transparency (translucency) into an Opengl scen,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl_1_1component_1_1shader.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:1680,Performance,perform,performer,1680,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:1763,Performance,perform,performer,1763,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:2012,Performance,perform,performer,2012,"; class  OperationCreator;  ; class  TOperationCreator;  ; class  OperationFactory;  ; class  RegisterOperation;  ; class  CallBackPicker;  ; class  CallBackRender;  ; class  PickHandler;  ; class  BaseViewerArgument;  ; class  ViewerQtArgument;  . Enumerations; enum  { BTLEFT_MODE = 101; , BTRIGHT_MODE = 102; , BTMIDDLE_MODE = 103; };  ; enum  MOUSE_BUTTON { LEFT; , MIDDLE; , RIGHT; , NONE; };  ; enum  MOUSE_STATUS { PRESSED; , RELEASED; , ACTIVATED; , DEACTIVATED; };  . Functions; void decodeCollisionElement (const RGBAColor &colour, BodyPicked &body);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodePosition (BodyPicked &body, const RGBAColor &colour, const SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index);  ; void decodeCollisionElement (const sofa::type::Vec4f &colour, sofa::gui::component::performer::BodyPicked &body)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void decodePosition (sofa::gui::component::performer::BodyPicked &body, const sofa::type::Vec4f &colour, const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPR",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:3084,Performance,perform,performer,3084,"mponent::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > *model, const unsigned int index)=delete;  ; void init ();  . Variables; FileRepository GuiDataRepository (""GUI_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa/gui/qt"") }, { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } });  . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorBTLEFT_MODE ; BTRIGHT_MODE ; BTMIDDLE_MODE . ◆ MOUSE_BUTTON. enum sofa::gui::common::MOUSE_BUTTON. EnumeratorLEFT ; MIDDLE ; RIGHT ; NONE . ◆ MOUSE_STATUS. enum sofa::gui::common::MOUSE_STATUS. EnumeratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:3717,Performance,perform,performer,3717,"eratorPRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html:4032,Performance,perform,performer,4032,"PRESSED ; RELEASED ; ACTIVATED ; DEACTIVATED . Function Documentation. ◆ decodeCollisionElement() [1/2]. void SOFA_GUI_COMMON_API sofa::gui::common::decodeCollisionElement ; (; const RGBAColor & ; colour, . BodyPicked & ; body . ). ◆ decodeCollisionElement() [2/2]. void sofa::gui::common::decodeCollisionElement ; (; const sofa::type::Vec4f & ; colour, . sofa::gui::component::performer::BodyPicked & ; body . ). delete . ◆ decodePosition() [1/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [2/4]. void SOFA_GUI_COMMON_API sofa::gui::common::decodePosition ; (; BodyPicked & ; body, . const RGBAColor & ; colour, . const TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). ◆ decodePosition() [3/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ decodePosition() [4/4]. void sofa::gui::common::decodePosition ; (; sofa::gui::component::performer::BodyPicked & ; body, . const sofa::type::Vec4f & ; colour, . const sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types > * ; model, . const unsigned int ; index . ). delete . ◆ init(). void SOFA_GUI_COMMON_API sofa::gui::common::init ; (; ). Variable Documentation. ◆ GuiDataRepository. SOFA_GUI_COMMON_API sofa::helper::system::FileRepository sofa::gui::common::GuiDataRepository ; (; ""GUI_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa/gui/qt"") } ; , . { { Utils::getSofaPathTo(""etc/Sofa.Gui.Qt.ini"").c_str(), {""RESOURCES_DIR""} } } ;  . ). sofaguicommon; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1708,Deployability,configurat,configuration,1708,"();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Bu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1950,Deployability,configurat,configuration,1950,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:2687,Deployability,configurat,configuration,2687,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1708,Modifiability,config,configuration,1708,"();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Bu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1950,Modifiability,config,configuration,1950,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:2687,Modifiability,config,configuration,2687,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:235,Performance,perform,performer,235,"﻿. SOFA API: sofa::gui::component Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Functions |; Variables . sofa::gui::component Namespace Reference . Namespaces;  performer;  . Classes; class  AddFrameButtonSetting;  ; class  AddRecordedCameraButtonSetting;  ; class  StartNavigationButtonSetting;  ; class  AttachBodyButtonSetting;  ; class  ConstraintAttachButtonSetting;  ; class  FixPickedParticleButtonSetting;  . Functions; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; void init ();  . Variables; int AddFrameButtonSettingClass;  ; int AddRecordedCameraButtonSettingClass;  ; int StartNavigationButtonSettingClass;  ; int AttachBodyButtonSettingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >();",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:35,Performance,perform,performer,35,"﻿. SOFA API: sofa::gui::component::performer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::component::performer Namespace Reference . Classes; class  AddRecordedCameraPerformer;  ; class  AttachBodyPerformer;  ; class  BaseAttachBodyPerformer;  ; class  ComponentMouseInteraction;  ; class  TComponentMouseInteraction;  ; class  ConstraintAttachBodyPerformer;  ; class  FixParticlePerformerConfiguration;  ; class  FixParticlePerformer;  ; class  InciseAlongPathPerformerConfiguration;  ; class  InciseAlongPathPerformer;  ; class  MouseInteractor;  class to execute specific tasks of the Mouse More...;  ; class  InteractionPerformer;  ; class  TInteractionPerformer;  ; struct  BodyPicked;  Represents a point on an object. More...;  ; class  BaseMouseInteractor;  ; class  RemovePrimitivePerformerConfiguration;  ; class  RemovePrimitivePerformer;  ; class  StartNavigationPerformer;  ; class  SuturePointPerformerConfiguration;  ; class  SuturePointPerformer;  ; class  TopologicalChangeManager;  a class to manage the handling of topological changes which have been requested from the Collision Model More...;  . Typedefs; using FixParticlePerformer3d = FixParticlePerformer< defaulttype::Vec3Types >;  . Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:197,Performance,perform,performer,197,"﻿. SOFA API: sofa::gui::component::performer Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs |; Variables . sofa::gui::component::performer Namespace Reference . Classes; class  AddRecordedCameraPerformer;  ; class  AttachBodyPerformer;  ; class  BaseAttachBodyPerformer;  ; class  ComponentMouseInteraction;  ; class  TComponentMouseInteraction;  ; class  ConstraintAttachBodyPerformer;  ; class  FixParticlePerformerConfiguration;  ; class  FixParticlePerformer;  ; class  InciseAlongPathPerformerConfiguration;  ; class  InciseAlongPathPerformer;  ; class  MouseInteractor;  class to execute specific tasks of the Mouse More...;  ; class  InteractionPerformer;  ; class  TInteractionPerformer;  ; struct  BodyPicked;  Represents a point on an object. More...;  ; class  BaseMouseInteractor;  ; class  RemovePrimitivePerformerConfiguration;  ; class  RemovePrimitivePerformer;  ; class  StartNavigationPerformer;  ; class  SuturePointPerformerConfiguration;  ; class  SuturePointPerformer;  ; class  TopologicalChangeManager;  a class to manage the handling of topological changes which have been requested from the Collision Model More...;  . Typedefs; using FixParticlePerformer3d = FixParticlePerformer< defaulttype::Vec3Types >;  . Variables; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer > AddRecordedCameraPerformerClass (""AddRecordedCamera"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec2Types > > AttachBodyPerformerVec2dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Vec3Types > > AttachBodyPerformerVec3dClass (""AttachBody"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer< defaulttype::Rigid3Types > > AttachBodyPerformerRigid3dClass (""AttachBody"", true);  ; helper::Creat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:4512,Performance,perform,performer,4512,"igidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer > InciseAlongPathPerformerClass (""InciseAlongPath"");  ; int MouseInteractorClass;  ; int MouseInteractorRigidClass;  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:4778,Performance,perform,performer,4778,"PerformerFactory, InciseAlongPathPerformer > InciseAlongPathPerformerClass (""InciseAlongPath"");  ; int MouseInteractorClass;  ; int MouseInteractorRigidClass;  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5044,Performance,perform,performer,5044,"r< defaulttype::Vec3Types > > RemovePrimitivePerformerVec3Class (""RemovePrimitive"", true);  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer > StartNavigationPerformerClass (""StartNavigation"");  ; helper::Creator< InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5312,Performance,perform,performer,5312,"ionPerformer::InteractionPerformerFactory, SuturePointPerformer< defaulttype::Vec3Types > > SuturePointPerformerVec3Class (""SuturePoints"", true);  . Typedef Documentation. ◆ FixParticlePerformer3d. using sofa::gui::component::performer::FixParticlePerformer3d = typedef FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5578,Performance,perform,performer,5578,"def FixParticlePerformer<defaulttype::Vec3Types>. Variable Documentation. ◆ AddRecordedCameraPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AddRecordedCameraPerformer> sofa::gui::component::performer::AddRecordedCameraPerformerClass(""AddRecordedCamera"") ; (; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true)",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:5870,Performance,perform,performer,5870,"; ""AddRecordedCamera"" ; ). ◆ AttachBodyPerformerRigid3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Rigid3Types> > sofa::gui::component::performer::AttachBodyPerformerRigid3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""Constrain",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6179,Performance,perform,performer,6179,"BodyPerformerVec2dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec2Types> > sofa::gui::component::performer::AttachBodyPerformerVec2dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ AttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6482,Performance,perform,performer,6482,"tor<InteractionPerformer::InteractionPerformerFactory, AttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::AttachBodyPerformerVec3dClass(""AttachBody"", true) ; (; ""AttachBody"" ; , . true ;  . ). ◆ ComponentMouseInteractionRigid3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticl",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:6784,Performance,perform,performer,6784,"tMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Rigid3Types> > sofa::gui::component::performer::ComponentMouseInteractionRigid3Class(""MouseSpringRigid3"", true) ; (; ""MouseSpringRigid3"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec2Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::perfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7100,Performance,perform,performer,7100,"InteractionFactory, TComponentMouseInteraction<defaulttype::Vec2Types> > sofa::gui::component::performer::ComponentMouseInteractionVec2Class(""MouseSpringVec2"", true) ; (; ""MouseSpringVec2"" ; , . true ;  . ). ◆ ComponentMouseInteractionVec3Class. helper::Creator<ComponentMouseInteraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidCla",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7376,Performance,perform,performer,7376,"teraction::ComponentMouseInteractionFactory, TComponentMouseInteraction<defaulttype::Vec3Types> > sofa::gui::component::performer::ComponentMouseInteractionVec3Class(""MouseSpringVec3"", true) ; (; ""MouseSpringVec3"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, Re",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7625,Performance,perform,performer,7625,"achBodyPerformerRigidClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::RigidTypes> > sofa::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rig",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:7763,Performance,perform,performer,7763,"a::gui::component::performer::ConstraintAttachBodyPerformerRigidClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ ConstraintAttachBodyPerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, ConstraintAttachBodyPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8050,Performance,perform,performer,8050,"aulttype::Vec3Types> > sofa::gui::component::performer::ConstraintAttachBodyPerformerVec3dClass(""ConstraintAttachBody"", true) ; (; ""ConstraintAttachBody"" ; , . true ;  . ). ◆ FixParticlePerformerVec3dClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, FixParticlePerformer3d > sofa::gui::component::performer::FixParticlePerformerVec3dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<Inter",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8433,Performance,perform,performer,8433,"dClass(""FixParticle"", true) ; (; ""FixParticle"" ; , . true ;  . ). ◆ InciseAlongPathPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, InciseAlongPathPerformer> sofa::gui::component::performer::InciseAlongPathPerformerClass(""InciseAlongPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::perfor",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8597,Performance,perform,performer,8597,"longPath"") ; (; ""InciseAlongPath"" ; ). ◆ MouseInteractorClass. int sofa::gui::component::performer::MouseInteractorClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::V",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:8826,Performance,perform,performer,8826,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9149,Performance,perform,performer,9149,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9406,Performance,perform,performer,9406,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html:9557,Performance,perform,performer,9557,"with the mouse""); .add< MouseInteractor<defaulttype::Vec2Types> >(); .add< MouseInteractor<defaulttype::Vec3Types> >(). ◆ MouseInteractorRigidClass. int sofa::gui::component::performer::MouseInteractorRigidClass. Initial value:= core::RegisterObject(""Perform tasks related to the interaction with the mouse and rigid objects""); .add< MouseInteractor<defaulttype::Rigid3Types> >(). ◆ RemovePrimitivePerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, RemovePrimitivePerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::RemovePrimitivePerformerVec3Class(""RemovePrimitive"", true) ; (; ""RemovePrimitive"" ; , . true ;  . ). ◆ rigidSphereFixParticle. int sofa::gui::component::performer::rigidSphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Rigid3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ sphereFixParticle. int sofa::gui::component::performer::sphereFixParticle = FixParticlePerformer3d::RegisterSupportedModel<SphereCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsSphere). ◆ StartNavigationPerformerClass. helper::Creator<InteractionPerformer::InteractionPerformerFactory, StartNavigationPerformer> sofa::gui::component::performer::StartNavigationPerformerClass(""StartNavigation"") ; (; ""StartNavigation"" ; ). ◆ SuturePointPerformerVec3Class. helper::Creator<InteractionPerformer::InteractionPerformerFactory, SuturePointPerformer<defaulttype::Vec3Types> > sofa::gui::component::performer::SuturePointPerformerVec3Class(""SuturePoints"", true) ; (; ""SuturePoints"" ; , . true ;  . ). ◆ triangleFixParticle. int sofa::gui::component::performer::triangleFixParticle = FixParticlePerformer3d::RegisterSupportedModel<TriangleCollisionModel<defaulttype::Vec3Types>>(&FixParticlePerformer3d::getFixationPointsTriangle<TriangleCollisionModel<defaulttype::Vec3Types>>). sofaguicomponentperformer; Generated on Mon Nov 11 2024 03:19:20 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component_1_1performer.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:6601,Deployability,update,update,6601,"; class  data_widget_container< sofa::core::topology::Topology::Tetrahedron >;  ; class  vector_data_trait< sofa::core::topology::Topology::Hexahedron >;  ; class  data_widget_container< sofa::core::topology::Topology::Hexahedron >;  ; class  vector_data_trait< sofa::type::Vec< N, T > >;  sofa::defaulttype::Vec support More...;  ; class  data_widget_container< sofa::type::Vec< N, T > >;  ; class  vector_data_trait< Quat< T > >;  std::helper::Quater support More...;  ; class  data_widget_container< Quat< T > >;  ; class  data_widget_trait< Polynomial_LD< Real, N > >;  ; class  vector_data_trait< sofa::type::Mat< L, C, T > >;  sofa::type::Mat support More...;  ; class  data_widget_container< sofa::type::Mat< L, C, T > >;  ; class  RadioDataWidget;  OptionsGroup support. More...;  ; class  SofaMouseManager;  ; class  SofaPluginManager;  ; union  ObjectModelPtr;  ; struct  ObjectModel;  ; class  SofaSceneGraphWidget;  ; class  CaptureOptionsWidget;  ; class  MovieOptionsWidget;  ; class  SofaVideoRecorderManager;  ; class  SofaWindowDataGraph;  ; class  ProfilerChartView;  The ProfilerChartView class is a override of QtCharts::QChartView to be able to catch mouse selection and update all widgets of. More...;  ; class  SofaWindowProfiler;  The SofaWindowProfiler class This class is a QDialog widget to display information recorded by AdvancedTimer mechanism At each step, info will be gathered from the AdvancedTimer using class sofa::helper::StepData Info will be displayed by: More...;  ; class  struct_data_trait;  Generic data structures support. More...;  ; class  struct_data_trait_var;  ; class  struct_data_widget_container;  ; class  struct_data_widget_container< T, 0 >;  ; class  default_struct_data_trait_var;  ; class  struct_data_trait< sofa::defaulttype::RigidCoord< N, T > >;  Rigids (as data-structures) support. More...;  ; class  data_widget_container< sofa::defaulttype::RigidCoord< N, T > >;  ; class  struct_data_trait< sofa::defaulttype::RigidMass< N, T > >;  ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:2581,Modifiability,variab,variable-sized,2581,"es;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; class  QLinkSimpleEdit;  ; class  QDisplayTreeItemWidget;  ; class  QDisplayPropertyWidget;  ; class  QEnergyStatWidget;  ; class  QGraphStatWidget;  ; class  QMenuFilesRecentlyOpened;  ; class  flat_data_trait;  ; class  default_flat_data_trait;  ; class  flat_data_trait< T, TYPE_SINGLE >;  ; class  flat_struct_data_trait;  ; class  flat_struct_data_trait< T, 0 >;  ; class  flat_data_trait< T, TYPE_STRUCT >;  ; class  flat_vector_data_trait;  ; class  flat_data_trait< T, TYPE_VECTOR >;  ; class  table_data_widget_container;  ; class  vector_data_trait< std::vector< T > >;  variable-sized vectors support More...;  ; class  vector_data_trait< sofa::type::vector< T > >;  ; class  vector_data_trait< std::map< std::string, T > >;  std::map from strings support More...;  ; class  vector_data_trait< std::deque< T > >;  dequeues support More...;  ; class  QTableViewUpdater;  ; class  QTableModelUpdater;  ; class  QMomentumStatWidget;  ; class  QMouseOperation;  ; class  QAttachOperation;  ; class  QAddRecordedCameraOperation;  ; class  QStartNavigationOpe",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:10346,Performance,load,loadQtConfWithCustomPrefix,10346,,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:45420,Performance,load,loadQtConfWithCustomPrefix,45420,"bool ; recursive, . const std::vector< QString > & ; filter . ). ◆ getModuleName(). const char * sofa::gui::qt::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::qt::getModuleVersion ; (; ). ◆ getOpenFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getOpenFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ getPixmap(). QPixmap * sofa::gui::qt::getPixmap ; (; core::objectmodel::Base * ; obj, . bool ; haveInfo, . bool ; haveWarning, . bool ; haveErrors . ). ◆ getSaveFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getSaveFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ init(). void SOFA_GUI_QT_API sofa::gui::qt::init ; (; ). ◆ initExternalModule(). void sofa::gui::qt::initExternalModule ; (; ). ◆ loadQtConfWithCustomPrefix(). bool sofa::gui::qt::loadQtConfWithCustomPrefix ; (; const std::string & ; qtConfPath, . const std::string & ; prefix . ). ◆ openInExternalEditor(). void sofa::gui::qt::openInExternalEditor ; (; const std::string ; filename, . const int ; fileloc . ). Open a file at given path and line number using an external editor. ; The external editor is defined in a QSettings with the following entries: [General] ExternalEditor=qtcreator ExternalEditorParams=-client ${filename}:${fileno} where ${filename} is expanded with the full path to the file where ${fileno} is expanded with the line number to open at. . ◆ redirectQtMessages(). void sofa::gui::qt::redirectQtMessages ; (; QtMsgType ; type, . const QMessageLogContext & ; context, . const QString & ; msg . ). ◆ removeFileExt(). QString sofa::gui::qt::removeFileExt ; (; const QString & ; s). ◆ setMessageIconFrom(). void sofa::gui::qt::setMessageIconFrom ; (; QTreeWidgetItem * ; item, . Base * ; object . ). ◆ STRUCT_DATA_VAR() [1/",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:45470,Performance,load,loadQtConfWithCustomPrefix,45470,". ). ◆ getModuleName(). const char * sofa::gui::qt::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::qt::getModuleVersion ; (; ). ◆ getOpenFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getOpenFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ getPixmap(). QPixmap * sofa::gui::qt::getPixmap ; (; core::objectmodel::Base * ; obj, . bool ; haveInfo, . bool ; haveWarning, . bool ; haveErrors . ). ◆ getSaveFileName(). QString SOFA_GUI_QT_API sofa::gui::qt::getSaveFileName ; (; QWidget * ; parent, . const QString & ; startWith, . const QString & ; filter, . const char * ; name, . const QString & ; caption, . QString * ; selectedFilter . ). ◆ init(). void SOFA_GUI_QT_API sofa::gui::qt::init ; (; ). ◆ initExternalModule(). void sofa::gui::qt::initExternalModule ; (; ). ◆ loadQtConfWithCustomPrefix(). bool sofa::gui::qt::loadQtConfWithCustomPrefix ; (; const std::string & ; qtConfPath, . const std::string & ; prefix . ). ◆ openInExternalEditor(). void sofa::gui::qt::openInExternalEditor ; (; const std::string ; filename, . const int ; fileloc . ). Open a file at given path and line number using an external editor. ; The external editor is defined in a QSettings with the following entries: [General] ExternalEditor=qtcreator ExternalEditorParams=-client ${filename}:${fileno} where ${filename} is expanded with the full path to the file where ${fileno} is expanded with the line number to open at. . ◆ redirectQtMessages(). void sofa::gui::qt::redirectQtMessages ; (; QtMsgType ; type, . const QMessageLogContext & ; context, . const QString & ; msg . ). ◆ removeFileExt(). QString sofa::gui::qt::removeFileExt ; (; const QString & ; s). ◆ setMessageIconFrom(). void sofa::gui::qt::setMessageIconFrom ; (; QTreeWidgetItem * ; item, . Base * ; object . ). ◆ STRUCT_DATA_VAR() [1/58]. template<class T > . sofa::gui::qt::STRUCT_DATA_VAR ; (",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:717,Security,access,accessor,717,"﻿. SOFA API: sofa::gui::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:17005,Availability,down,downcaseString,17005,"lass T > ; bool isClamped (const T &value, const T &low, const T &high);  ; template<class T > ; T sign (const T &v);  ; template<class T > ; T sign0 (const T &v);  ; template<class T > ; bool isEqual (T x, T y, T threshold=(std::numeric_limits< T >::epsilon)());  ; template<class T > ; bool isNull (T x, T threshold=(std::numeric_limits< T >::epsilon)());  ; double rcos (double x);  ; float rcos (float x);  ; double rsin (double x);  ; float rsin (float x);  ; template<class T > ; T rcos (const T &a);  ; template<class T > ; T rsin (const T &a);  ; template<class Container > ; type::vector< unsigned > sortedPermutation (const Container &values);  Return a sorted permutation of the container, i.e. a list of indices corresponding to increasing entries. More...;  ; std::wstring widenString (const std::string &s);  Convert a string to a wstring. More...;  ; std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; std::vector< std::string > split (const std::string &s, char delimiter);  Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. More...;  ; char * getAStringCopy (const char *c);  returns a copy of the string given in argument. More...;  ; void replaceAll (std::string &str, const std::string &search, const std::string &replace);  replace all occurrence of ""search"" by the ""replace"" string. More...;  ; bool ends_with (const std::string &suffix, const std::string &full);  returns true if the suffix if located at the end of the ""full"" string. More...;  ; bool starts_with (const std::string &prefix, const std::string &full);  returns true if the prefix if located at the beginning of the ""full"" string. More...;  ; std::string safeCharToString (const char *c);  converts a char* string into a c++ string. The special case w",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:21742,Availability,down,downcaseString,21742," sofa::helper::system::thread::ctime_t sofa::helper::ctime_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand() [2/3]. double sofa::helper::drand ; (; double ; max). inline . ◆ drand() [3/3]. double sofa::helper::drand ; (; double ; min, . double ; max . ). inline . ◆ drandpos(). double sofa::helper::drandpos ; (; double ; max). inline . ◆ dsyev2(). template<class Real > . void sofa::helper::dsyev2 ; (; Real ; A, . Real ; B, . Real ; C, . Real & ; rt1, . Real & ; rt2, . Real & ; cs, . Real & ; sn . ). inline . ◆ dsyevc3(). template<class Real > . int sofa::helper::dsyevc3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Vec< 3, Real > & ; w . ). ◆ dsyevq3(). template<class Real > . int sofa::helper::dsyevq3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; Q, . type::Vec< 3, Real > & ; w . ). ◆ dsytrd3(). template<class Real > . void sofa::helper::dsytrd3 ; (; const type::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:21802,Availability,down,downcaseString,21802,"time_t. ◆ FemClipsReal. typedef SReal sofa::helper::FemClipsReal. ◆ integer_id_name. typedef const char*(* sofa::helper::integer_id_name) (). ◆ SimpleTimer. typedef TSimpleTimer sofa::helper::SimpleTimer. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorNDefaultColorMapSchemes . Function Documentation. ◆ absError(). SOFA_HELPER_API SReal sofa::helper::absError ; (; SReal ; f1x, . SReal ; f1y, . SReal ; f1z, . SReal ; f2x, . SReal ; f2y, . SReal ; f2z . ). inline . ◆ add3Dof(). SOFA_HELPER_API void sofa::helper::add3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ choose_next(). unsigned int sofa::helper::choose_next ; (; SReal ; x, . SReal ; y, . SReal ; z, . unsigned int ; a, . unsigned int ; b, . unsigned int ; c . ). inline . ◆ cleanup(). SOFA_HELPER_API void sofa::helper::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ downcaseString(). SOFA_HELPER_API std::string sofa::helper::downcaseString ; (; const std::string & ; s). Convert a string to lower case. . ◆ drand() [1/3]. double sofa::helper::drand ; (; ). inline . ◆ drand() [2/3]. double sofa::helper::drand ; (; double ; max). inline . ◆ drand() [3/3]. double sofa::helper::drand ; (; double ; min, . double ; max . ). inline . ◆ drandpos(). double sofa::helper::drandpos ; (; double ; max). inline . ◆ dsyev2(). template<class Real > . void sofa::helper::dsyev2 ; (; Real ; A, . Real ; B, . Real ; C, . Real & ; rt1, . Real & ; rt2, . Real & ; cs, . Real & ; sn . ). inline . ◆ dsyevc3(). template<class Real > . int sofa::helper::dsyevc3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Vec< 3, Real > & ; w . ). ◆ dsyevq3(). template<class Real > . int sofa::helper::dsyevq3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; Q, . type::Vec< 3, Real > & ; w . ). ◆ dsytrd3(). template<class Real > . void sofa::helper::dsytrd3 ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:31428,Availability,failure,failure,31428,"; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ nlcp_gaussseidelTimed(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidelTimed ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ; timeout, . bool ; verbose . ). ◆ nlcp_multiGrid(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ** ; W_coarse, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . bool ; verbose . ). ◆ nlcp_multiGrid_2levels(). SOFA_HELPER_API in",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:44113,Availability,failure,failure,44113," for double and int used only for the tests now. . ◆ starts_with(). SOFA_HELPER_API bool sofa::helper::starts_with ; (; const std::string & ; prefix, . const std::string & ; full . ). returns true if the prefix if located at the beginning of the ""full"" string. . ◆ strToDouble(). double sofa::helper::strToDouble ; (; std::string const & ; stringToConvert, . std::size_t const ; precision . ). ◆ SWAP(). template<class T > . void sofa::helper::SWAP ; (; T & ; a, . T & ; b . ). inline . ◆ upcaseString(). SOFA_HELPER_API std::string sofa::helper::upcaseString ; (; const std::string & ; s). Convert a string to upper case. . ◆ vector_access_failure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success, or an empty string on failure. . Variable Documentation. ◆ activeTimers. std::atomic<int> sofa::helper::activeTimers. ◆ base. SReal SReal SReal SReal int* sofa::helper::base. ◆ Decompose< double >. template class SOFA_HELPER_API sofa::helper::Decompose< double >. ◆ Decompose< float >. template class SOFA_HELPER_API sofa::helper::Decompose< float >. ◆ dim. SReal SReal int sofa::helper::dim = delete. ◆ f. SReal SReal* sofa::helper::f. ◆ forceNarrowCastChecking. constexpr bool sofa::helper::forceNarrowCastChecking = true. constexpr . If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. . ◆ kMutex. std::mutex sofa::helper::kMutex. ◆ kTagList. TagList sofa::helper::kTagList { {""0"", ""Visual""} }. ◆ M. SReal ** sofa::helper::M. ◆ MarchingCubeEdgeTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeEdgeTable. ◆ MarchingCubeFaceTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeFaceTable. Initial value:=; {; 0x0 ,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:775,Deployability,update,update,775,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:878,Deployability,update,updates,878,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:3222,Modifiability,variab,variables,3222,"ation class for vector_id types. More...;  ; class  ReadAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  WriteAccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  kdTree;  ; class  LCP;  ; class  LocalBlock33;  ; class  ptr_stable_id;  ; class  ptr_stable_compare;  A comparison object that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  ptr_stable_compare< T * >;  ; class  ptr_stable_compare< std::pair< T *, T * > >;  ; class  map_ptr_stable_compare;  A map container that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  MarchingCubeUtility;  ; class  MemoryManager;  ; class  NameDecoder;  ; struct  narrowing_error;  ; class  OptionsGroup;  OptionsGroup is a kind of data for a radio button. It has a list of text representing a list of choices, and a integer number indicating the choice selected. More...;  ; class  OwnershipSPtr;  ; class  Monomial_LD;  A generic monomial with N variables of type Real. A monomial is one term of a polynomial. More...;  ; class  Polynomial_LD;  A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. More...;  ; class  RandomGenerator;  ; struct  IsEqual;  ; struct  IsEqual< true >;  ; struct  IsNull;  ; struct  IsNull< true >;  ; struct  ScopedAdvancedTimer;  ; class  TSimpleTimer;  ; struct  CompareIndirect;  ; class  TagList;  ; class  TagFactory;  ; class  TriangleOctreeRoot;  ; class  TriangleOctree;  ; class  TypeInfo;  ; class  Utils;  Contains possibly useful functions, that don't fit anywhere else. More...;  ; class  BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >;  ; class  SofaViewerFactory;  ; class  SofaViewerCreator;  . Typedefs; typedef sofa::helper::system::thread::ctime_t ctime_t;  ; typedef sofa::helper::system::thread::CTime CTime;  ; typedef const char *(* integer_id_name) ();  ; typedef SReal Fem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:3349,Modifiability,variab,variables,3349,"ccessor< vector_id< T, TIndex, CheckIndices, MemoryManager > >;  ; class  kdTree;  ; class  LCP;  ; class  LocalBlock33;  ; class  ptr_stable_id;  ; class  ptr_stable_compare;  A comparison object that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  ptr_stable_compare< T * >;  ; class  ptr_stable_compare< std::pair< T *, T * > >;  ; class  map_ptr_stable_compare;  A map container that order pointers in a stable way, i.e. in the order pointers are presented. More...;  ; class  MarchingCubeUtility;  ; class  MemoryManager;  ; class  NameDecoder;  ; struct  narrowing_error;  ; class  OptionsGroup;  OptionsGroup is a kind of data for a radio button. It has a list of text representing a list of choices, and a integer number indicating the choice selected. More...;  ; class  OwnershipSPtr;  ; class  Monomial_LD;  A generic monomial with N variables of type Real. A monomial is one term of a polynomial. More...;  ; class  Polynomial_LD;  A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. More...;  ; class  RandomGenerator;  ; struct  IsEqual;  ; struct  IsEqual< true >;  ; struct  IsNull;  ; struct  IsNull< true >;  ; struct  ScopedAdvancedTimer;  ; class  TSimpleTimer;  ; struct  CompareIndirect;  ; class  TagList;  ; class  TagFactory;  ; class  TriangleOctreeRoot;  ; class  TriangleOctree;  ; class  TypeInfo;  ; class  Utils;  Contains possibly useful functions, that don't fit anywhere else. More...;  ; class  BaseCreator< sofa::gui::common::BaseViewer, sofa::gui::common::BaseViewerArgument & >;  ; class  SofaViewerFactory;  ; class  SofaViewerCreator;  . Typedefs; typedef sofa::helper::system::thread::ctime_t ctime_t;  ; typedef sofa::helper::system::thread::CTime CTime;  ; typedef const char *(* integer_id_name) ();  ; typedef SReal FemClipsReal;  ; typedef TSimpleTimer SimpleTimer;  . Enumerations; enum  { NDefaultColorMapSchemes = 20; };  . Functions; template<class T >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:19734,Performance,perform,performed,19734,"ntainer &elems, const S &delim);  Join a container into a single string, separated by the provided delimiter. More...;  ; unsigned int choose_next (SReal x, SReal y, SReal z, unsigned int a, unsigned int b, unsigned int c);  . Variables; std::map< AdvancedTimer::IdTimer, TimerData > timers;  ; std::atomic< int > activeTimers;  ; AdvancedTimer::SyncCallBack syncCallBack = nullptr;  ; void * syncCallBackData = nullptr;  ; template class SOFA_HELPER_API Decompose< double >;  ; template class SOFA_HELPER_API Decompose< float >;  ; SReal SReal SReal SReal ** M;  ; SReal SReal SReal SReal int * base;  ; SReal SReal SReal SReal int SReal ** mat;  ; SReal SReal SReal SReal int SReal int dim = delete;  ; SReal SReal * f;  ; const int MarchingCubeEdgeTable [256];  ; const int MarchingCubeFaceTable [256];  ; const int MarchingCubeTriTable [256][16];  ; constexpr bool forceNarrowCastChecking = true;  If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. More...;  ; template class SOFA_HELPER_API Monomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Monomial_LD< double, 5 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 1 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 2 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 3 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 4 >;  ; template class SOFA_HELPER_API Polynomial_LD< double, 5 >;  ; std::mutex kMutex;  ; TagList kTagList { {""0"", ""Visual""} };  . Detailed Description; Helpers to apply Eigen matrix methods to the Mat sofa type; Utility to compute the sorted permutation of a container. See example at the end of the file Francois Faure, April 2012 ; Typedef Documentation. ◆ CTime. typedef sofa::helper::system::thread::CTime sofa::helper::CTi",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:44733,Performance,perform,performed,44733,"ailure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success, or an empty string on failure. . Variable Documentation. ◆ activeTimers. std::atomic<int> sofa::helper::activeTimers. ◆ base. SReal SReal SReal SReal int* sofa::helper::base. ◆ Decompose< double >. template class SOFA_HELPER_API sofa::helper::Decompose< double >. ◆ Decompose< float >. template class SOFA_HELPER_API sofa::helper::Decompose< float >. ◆ dim. SReal SReal int sofa::helper::dim = delete. ◆ f. SReal SReal* sofa::helper::f. ◆ forceNarrowCastChecking. constexpr bool sofa::helper::forceNarrowCastChecking = true. constexpr . If true, narrow_cast will check if the value changed after the narrow conversion. Otherwise, no check is performed. . ◆ kMutex. std::mutex sofa::helper::kMutex. ◆ kTagList. TagList sofa::helper::kTagList { {""0"", ""Visual""} }. ◆ M. SReal ** sofa::helper::M. ◆ MarchingCubeEdgeTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeEdgeTable. ◆ MarchingCubeFaceTable. SOFA_HELPER_API const int sofa::helper::MarchingCubeFaceTable. Initial value:=; {; 0x0 , 0x19, 0x15, 0x1d, 0x25, 0x3d, 0x35, 0x3d, 0x29, 0x39,; 0x3d, 0x3d, 0x2d, 0x3d, 0x3d, 0x3c, 0x1a, 0x1b, 0x1f, 0x1f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3b, 0x3b, 0x3f, 0x3f, 0x3f, 0x3f,; 0x3f, 0x3e, 0x16, 0x1f, 0x17, 0x1f, 0x37, 0x3f, 0x37, 0x3f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x1e, 0x1f,; 0x1f, 0xf , 0x3f, 0x3f, 0x3f, 0x2f, 0x3f, 0x3f, 0x3f, 0x2f,; 0x3f, 0x3f, 0x3f, 0x2e, 0x26, 0x3f, 0x37, 0x3f, 0x27, 0x3f,; 0x37, 0x3f, 0x2f, 0x3f, 0x3f, 0x3f, 0x2f, 0x3f, 0x3f, 0x3e,; 0x3e, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,; 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x36, 0x3f, 0x37, 0x3f,; 0x37, 0x3f, 0x33, 0x3b, 0x3f, 0x3f, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:854,Safety,avoid,avoids,854,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:11956,Safety,timeout,timeout,11956,"W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, std::vector< std::vector< int > > &contact_group_hierarchy, std::vector< unsigned int > Tab_num_group, std::vector< std::vector< int > > &constraint_group_hierarchy, std::vector< std::vector< SReal > > &constraint_group_fact_hierarchy, bool verbose, std::vector< SReal > *residualsN, std::vector< SReal > *residualLevels, std::vector< SReal > *violations);  ; int nlcp_multiGrid (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, SReal **W_coarse, std::vector< int > &contact_group, unsigned int num_group, bool verbose);  ; int nlcp_gaussseidel (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, bool verbose, SReal minW, SReal maxF, std::vector< SReal > *residuals, std::vector< SReal > *violations);  ; int nlcp_gaussseidelTimed (int dim, SReal *dfree, SReal **W, SReal *f, SReal mu, SReal tol, int numItMax, bool useInitialF, SReal timeout, bool verbose);  ; void gaussSeidelLCP1 (int dim, FemClipsReal *q, FemClipsReal **M, FemClipsReal *res, SReal tol, int numItMax, SReal minW, SReal maxF, std::vector< SReal > *residuals);  ; SOFA_HELPER_API void set3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API void add3Dof (SReal *vector, int index, SReal vx, SReal vy, SReal vz);  ; SOFA_HELPER_API SReal normError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ; SOFA_HELPER_API SReal absError (SReal f1x, SReal f1y, SReal f1z, SReal f2x, SReal f2y, SReal f2z);  ;  SOFA_LCPCALC_RESOUDRELCP_DISABLED () int resoudreLCP(int;  ; SReal SReal SReal * SOFA_LCPCALC_AFFICHESYST_DISABLED () void afficheSyst(SReal *q;  ;  SOFA_LCPCALC_AFFICHELCP_DISABLED () void afficheLCP(SReal *q;  ; SOFA_HELPER_API void resultToString (std::ostream &s, SReal *f, int dim);  ; template<Size NumRows, Size NumCols, class Real > ; Eigen::Matrix< Real, NumRows, NumCols > eigenMat (const type::Mat< NumRows, N",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:17936,Safety,safe,safeCharToString,17936,"g to a string. More...;  ; std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; std::vector< std::string > split (const std::string &s, char delimiter);  Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. More...;  ; char * getAStringCopy (const char *c);  returns a copy of the string given in argument. More...;  ; void replaceAll (std::string &str, const std::string &search, const std::string &replace);  replace all occurrence of ""search"" by the ""replace"" string. More...;  ; bool ends_with (const std::string &suffix, const std::string &full);  returns true if the suffix if located at the end of the ""full"" string. More...;  ; bool starts_with (const std::string &prefix, const std::string &full);  returns true if the prefix if located at the beginning of the ""full"" string. More...;  ; std::string safeCharToString (const char *c);  converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. More...;  ; std::string_view removeTrailingCharacter (std::string_view sv, char character);  Removes specified trailing character from a string view. More...;  ; std::string_view removeTrailingCharacters (std::string_view sv, std::initializer_list< char > characters);  Removes specified trailing characters from a string view. More...;  ; template<class InputIt , class S > ; std::string join (InputIt first, InputIt last, const S &delim);  ; template<class InputIt , class UnaryFunction , class S > ; std::string join (InputIt first, InputIt last, UnaryFunction f, const S &delim);  ; template<class S , class Container > ; std::string join (const Container &elems, const S &delim);  Join a container into a single string, separated by the provided delimiter. More...;  ; unsigned int choose_next (SReal x, SReal y, SReal z, unsigned int a, unsigned int b, unsigned int c);  . Variables; s",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:32006,Safety,timeout,timeout,32006,"w conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrowString(). SOFA_HELPER_API std::string sofa::helper::narrowString ; (; const std::wstring & ; ws). Convert a wstring to a string. ; ReturnsThe converted string on success, or an empty string on failure. . ◆ nlcp_gaussseidel(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidel ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . bool ; verbose, . SReal ; minW, . SReal ; maxF, . std::vector< SReal > * ; residuals, . std::vector< SReal > * ; violations . ). ◆ nlcp_gaussseidelTimed(). SOFA_HELPER_API int sofa::helper::nlcp_gaussseidelTimed ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ; timeout, . bool ; verbose . ). ◆ nlcp_multiGrid(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . SReal ** ; W_coarse, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . bool ; verbose . ). ◆ nlcp_multiGrid_2levels(). SOFA_HELPER_API int sofa::helper::nlcp_multiGrid_2levels ; (; int ; dim, . SReal * ; dfree, . SReal ** ; W, . SReal * ; f, . SReal ; mu, . SReal ; tol, . int ; numItMax, . bool ; useInitialF, . std::vector< int > & ; contact_group, . unsigned int ; num_group, . std::vector< int > & ; constraint_group, . std::vector< SReal > & ; constraint_group_fact, . bool ; verbose, . std::vector< SReal > * ; residuals1, . std::vector< SReal > * ; residuals2 . ). new multigrid resolution of a problem with projection & prolongation . ◆ nlcp_multiGrid_Nlevels(). int sofa::helper::nlcp_multiGrid_Nlevels ; (; int ; dim, . SReal * ; dfre",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:40475,Safety,safe,safeCharToString,40475,"r ; (; real ; r). inline . ◆ rlerp(). template<class T > . T sofa::helper::rlerp ; (; const T & ; a, . const T & ; b, . float ; f . ). inline . ◆ rmax(). template<class real > . real sofa::helper::rmax ; (; real ; r, . real ; s . ). inline . ◆ rmin(). template<class real > . real sofa::helper::rmin ; (; real ; r, . real ; s . ). inline . ◆ rnear(). template<class real > . int sofa::helper::rnear ; (; real ; r). inline . ◆ round(). template<class T > . T sofa::helper::round ; (; const T & ; x). inline . ◆ rsin() [1/3]. template<class T > . T sofa::helper::rsin ; (; const T & ; a). inline . ◆ rsin() [2/3]. double sofa::helper::rsin ; (; double ; x). inline . ◆ rsin() [3/3]. float sofa::helper::rsin ; (; float ; x). inline . ◆ rsqrt() [1/3]. double sofa::helper::rsqrt ; (; const double & ; a). inline . ◆ rsqrt() [2/3]. long double sofa::helper::rsqrt ; (; const long double & ; a). inline . ◆ rsqrt() [3/3]. template<class T > . T sofa::helper::rsqrt ; (; const T & ; a). inline . ◆ safeCharToString(). SOFA_HELPER_API std::string sofa::helper::safeCharToString ; (; const char * ; c). converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. . ◆ set3Dof(). SOFA_HELPER_API void sofa::helper::set3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ setCurRecords(). void sofa::helper::setCurRecords ; (; type::vector< Record > * ; ptr). ◆ shft3(). void sofa::helper::shft3 ; (; double & ; a, . double & ; b, . double & ; c, . const double ; d . ). inline . ◆ SIGN(). template<class T > . const T sofa::helper::SIGN ; (; const T & ; a, . const T & ; b . ). inline . ◆ sign(). template<class T > . T sofa::helper::sign ; (; const T & ; v). inline . ◆ sign0(). template<class T > . T sofa::helper::sign0 ; (; const T & ; v). inline . ◆ SOFA_LCPCALC_AFFICHELCP_DISABLED(). sofa::helper::SOFA_LCPCALC_AFFICHELCP_DISABLED ; (; ). ◆ SOFA_LCPCALC_AFFICHESYST_DISABLED(). SReal SReal SReal* sofa::helper::S",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:40537,Safety,safe,safeCharToString,40537," T > . T sofa::helper::rlerp ; (; const T & ; a, . const T & ; b, . float ; f . ). inline . ◆ rmax(). template<class real > . real sofa::helper::rmax ; (; real ; r, . real ; s . ). inline . ◆ rmin(). template<class real > . real sofa::helper::rmin ; (; real ; r, . real ; s . ). inline . ◆ rnear(). template<class real > . int sofa::helper::rnear ; (; real ; r). inline . ◆ round(). template<class T > . T sofa::helper::round ; (; const T & ; x). inline . ◆ rsin() [1/3]. template<class T > . T sofa::helper::rsin ; (; const T & ; a). inline . ◆ rsin() [2/3]. double sofa::helper::rsin ; (; double ; x). inline . ◆ rsin() [3/3]. float sofa::helper::rsin ; (; float ; x). inline . ◆ rsqrt() [1/3]. double sofa::helper::rsqrt ; (; const double & ; a). inline . ◆ rsqrt() [2/3]. long double sofa::helper::rsqrt ; (; const long double & ; a). inline . ◆ rsqrt() [3/3]. template<class T > . T sofa::helper::rsqrt ; (; const T & ; a). inline . ◆ safeCharToString(). SOFA_HELPER_API std::string sofa::helper::safeCharToString ; (; const char * ; c). converts a char* string into a c++ string. The special case with nullptr is coerced to an empty string. . ◆ set3Dof(). SOFA_HELPER_API void sofa::helper::set3Dof ; (; SReal * ; vector, . int ; index, . SReal ; vx, . SReal ; vy, . SReal ; vz . ). inline . ◆ setCurRecords(). void sofa::helper::setCurRecords ; (; type::vector< Record > * ; ptr). ◆ shft3(). void sofa::helper::shft3 ; (; double & ; a, . double & ; b, . double & ; c, . const double ; d . ). inline . ◆ SIGN(). template<class T > . const T sofa::helper::SIGN ; (; const T & ; a, . const T & ; b . ). inline . ◆ sign(). template<class T > . T sofa::helper::sign ; (; const T & ; v). inline . ◆ sign0(). template<class T > . T sofa::helper::sign0 ; (; const T & ; v). inline . ◆ SOFA_LCPCALC_AFFICHELCP_DISABLED(). sofa::helper::SOFA_LCPCALC_AFFICHELCP_DISABLED ; (; ). ◆ SOFA_LCPCALC_AFFICHESYST_DISABLED(). SReal SReal SReal* sofa::helper::SOFA_LCPCALC_AFFICHESYST_DISABLED ; (; ). ◆ SOFA_LCPCA",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:727,Security,access,access,727,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:26679,Security,access,accessor,26679,"elper::getAStringCopy ; (; const char * ; c). returns a copy of the string given in argument. . ◆ getClosestMatch(). std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API sofa::helper::getClosestMatch ; (; const std::string & ; needle, . const std::vector< std::string > & ; haystack, . const Size ; numEntries, . const SReal ; threshold . ). Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. . ◆ getCurRecords(). type::vector<Record>* sofa::helper::getCurRecords ; (; ). ◆ getCurTimer(). std::stack<AdvancedTimer::IdTimer>& sofa::helper::getCurTimer ; (; ). ◆ getFactoryLog(). SOFA_HELPER_API std::string & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are fa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27365,Security,access,accessor,27365,"g & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27657,Security,access,accessor,27657,"s) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::he",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27701,Security,access,accessors,27701,"s) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::he",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:365,Testability,log,logging,365,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6571,Testability,log,log,6571,"(const type::Mat< 3, 3, Real > &A, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsytrd3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &d, type::Vec< 3, Real > &e);  ; template<class Real > ; int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6618,Testability,log,logFactoryRegister,6618,"int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6775,Testability,log,logFactoryRegister,6775,"int dsyevq3 (const type::Mat< 3, 3, Real > &A, type::Mat< 3, 3, Real > &Q, type::Vec< 3, Real > &w);  ; template<class Real > ; void dsyev2 (Real A, Real B, Real C, Real &rt1, Real &rt2, Real &cs, Real &sn);  ; std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API getClosestMatch (const std::string &needle, const std::vector< std::string > &haystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:6960,Testability,log,logFactoryRegister,6960,"ystack, const Size numEntries=5, const SReal threshold=0.5_sreal);  Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. More...;  ; SOFA_HELPER_API std::string gettypename (const std::type_info &t);  Decode the type's name to a more readable form if possible. More...;  ; SOFA_HELPER_API std::string & getFactoryLog ();  ; SOFA_HELPER_API void printFactoryLog (std::ostream &out);  Print factory log. More...;  ; template SOFA_HELPER_API void logFactoryRegister< std::string > (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<class TKey > ; void logFactoryRegister (const std::string &baseclass, const std::string &classname, TKey key, bool multi);  Log classes registered in the factory. More...;  ; template SOFA_HELPER_API void logFactoryRegister (const std::string &baseclass, const std::string &classname, std::string key, bool multi);  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, const helper::io::Mesh *mesh);  base function to compute center of mass, mass and inertia tensor from a mesh More...;  ; template<typename Rigid3MassType > ; void generateRigid (Rigid3MassType &mass, type::Vec3 &center, io::Mesh *mesh, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; bool generateRigid (Rigid3MassType &mass, type::Vec3 &center, const std::string &meshFilename, SReal density, const type::Vec3 &scale=type::Vec3(1, 1, 1), const type::Vec3 &rotation=type::Vec3(0, 0, 0));  user friendly function to compute center of mass, mass and inertia tensor from a mesh file, a density, a scale and a rotation More...;  ; template<typename Rigid3MassType > ; void generateRigid (GenerateRigidInfo ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28872,Testability,test,test,28872,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28898,Testability,test,test,28898,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:28933,Testability,test,test,28933,"◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; mu",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29504,Testability,log,logFactoryRegister,29504,"oint comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29576,Testability,log,logFactoryRegister,29576,"ized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29711,Testability,log,logFactoryRegister,29711,"isNull(). template<class T > . bool sofa::helper::isNull ; (; T ; x, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29782,Testability,log,logFactoryRegister,29782,"eshold = (std::numeric_limits<T>::epsilon)() . ). inline . number null test rough floating point test ( <= threshold) exact integer test . ◆ join() [1/3]. template<class S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:29951,Testability,log,logFactoryRegister,29951,"ass S , class Container > . std::string sofa::helper::join ; (; const Container & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:30032,Testability,log,logFactoryRegister,30032," & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:35533,Testability,log,log,35533,"/3]. template<typename FReal , unsigned int FN> . std::ostream& sofa::helper::operator<< ; (; std::ostream & ; out, . const Monomial_LD< FReal, FN > & ; m_monomial . ). inline . ◆ operator<<() [3/3]. template<typename FReal , unsigned int FN> . std::ostream& sofa::helper::operator<< ; (; std::ostream & ; stream, . const Polynomial_LD< FReal, FN > & ; m_polynomial . ). inline . ◆ operator>>() [1/3]. template<typename FReal , unsigned int FN> . std::istream& sofa::helper::operator>> ; (; std::istream & ; in, . Monomial_LD< FReal, FN > & ; m_monomial . ). inline . ◆ operator>>() [2/3]. std::istream& sofa::helper::operator>> ; (; std::istream & ; in, . OptionsGroup & ; m_trick . ). inline . ◆ operator>>() [3/3]. template<typename FReal , unsigned int FN> . std::istream& sofa::helper::operator>> ; (; std::istream & ; stream, . Polynomial_LD< FReal, FN > & ; m_polynomial . ). inline . ◆ printFactoryLog(). SOFA_HELPER_API void sofa::helper::printFactoryLog ; (; std::ostream & ; out). Print factory log. . ◆ printLCP() [1/2]. SOFA_HELPER_API void sofa::helper::printLCP ; (; SReal * ; q, . SReal ** ; M, . int ; dim . ). ◆ printLCP() [2/2]. SOFA_HELPER_API void sofa::helper::printLCP ; (; SReal * ; q, . SReal ** ; M, . SReal * ; f, . int ; dim . ). ◆ printLibraryNotCleanedUpWarning(). SOFA_HELPER_API void sofa::helper::printLibraryNotCleanedUpWarning ; (; const std::string & ; library, . const std::string & ; cleanupFunction . ). Print a warning about a library not being cleaned up (meant for internal use). . ◆ printNoVal(). void sofa::helper::printNoVal ; (; std::ostream & ; out). ◆ printSyst(). SOFA_HELPER_API void sofa::helper::printSyst ; (; SReal * ; q, . SReal ** ; M, . int * ; base, . SReal ** ; mat, . int ; dim . ). ◆ printTime(). void sofa::helper::printTime ; (; std::ostream & ; out, . ctime_t ; t, . int ; niter = 1 . ). ◆ printUninitializedLibraryWarning(). SOFA_HELPER_API void sofa::helper::printUninitializedLibraryWarning ; (; const std::string & ; library, . const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:43122,Testability,test,tests,43122,"ec(). template<Size NumRows, class Real > . type::Vec<NumRows, Real> sofa::helper::sofaVec ; (; const Eigen::Matrix< Real, NumRows, 1 > & ; evec). ◆ solveLCP(). SOFA_HELPER_API int sofa::helper::solveLCP ; (; int ; dim, . SReal * ; q, . SReal ** ; M, . SReal * ; res . ). ◆ sortedPermutation(). template<class Container > . type::vector<unsigned> sofa::helper::sortedPermutation ; (; const Container & ; values). Return a sorted permutation of the container, i.e. a list of indices corresponding to increasing entries. . ◆ split(). std::vector< std::string > SOFA_HELPER_API sofa::helper::split ; (; const std::string & ; s, . char ; delimiter . ). Taken from https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/. ; Split one string by a given delimiter and returns that into a std::vector. . ◆ SQR(). template<class T > . const T sofa::helper::SQR ; (; const T & ; a). inline . ◆ srand(). void sofa::helper::srand ; (; unsigned ; seed). inline . Define random methods srand and rand for double and int used only for the tests now. . ◆ starts_with(). SOFA_HELPER_API bool sofa::helper::starts_with ; (; const std::string & ; prefix, . const std::string & ; full . ). returns true if the prefix if located at the beginning of the ""full"" string. . ◆ strToDouble(). double sofa::helper::strToDouble ; (; std::string const & ; stringToConvert, . std::size_t const ; precision . ). ◆ SWAP(). template<class T > . void sofa::helper::SWAP ; (; T & ; a, . T & ; b . ). inline . ◆ upcaseString(). SOFA_HELPER_API std::string sofa::helper::upcaseString ; (; const std::string & ; s). Convert a string to upper case. . ◆ vector_access_failure(). void SOFA_HELPER_API sofa::helper::vector_access_failure ; (; const void * ; vec, . unsigned ; size, . unsigned ; i, . const std::type_info & ; type, . const char * ; tindex . ). ◆ widenString(). SOFA_HELPER_API std::wstring sofa::helper::widenString ; (; const std::string & ; s). Convert a string to a wstring. ; ReturnsThe converted string on success,",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:608,Performance,load,load,608,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:802,Performance,load,load,802,"﻿. SOFA API: sofa::helper::io Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 20",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html:1339,Testability,log,logging,1339,"ce Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::helper::io Namespace Reference . This allow MeshTrian to interact with the messaging system. ; More... Classes; class  BaseFileAccessCreator;  ; class  FileAccessCreator;  ; class  BaseFileAccess;  ; class  File;  ; class  FileAccess;  ; class  Image;  ; struct  DDSHeader;  ; class  ImageDDS;  ; class  ImageRAW;  ; class  Mesh;  ; class  MeshGmsh;  ; class  MeshOBJ;  ; class  MeshTopologyLoader;  ; class  SphereLoaderDataHook;  Inherit this class to load data from sphere description. More...;  ; class  SphereLoader;  ; class  STBImageCreators;  ; class  STBImage;  ; class  TriangleLoader;  ; class  XspLoaderDataHook;  Inherit this class to load data from a Xsp file. More...;  ; class  XspLoader;  . Variables; Creator< Image::FactoryImage, ImageDDS > ImageDDSClass (""dds"");  ; Creator< Mesh::FactoryMesh, MeshGmsh > MeshGmshClass (""gmsh"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass (""obj"");  ; Creator< Mesh::FactoryMesh, MeshOBJ > MeshOBJClass2 (""OBJ"");  ; const auto stbImageCreation = STBImageCreators();  . Detailed Description; This allow MeshTrian to interact with the messaging system. ; For SOFA_HELPER_API.; This register the TriangleLoader object to the logging system so that we can use msg_*(this); For size_t For std::string ; Variable Documentation. ◆ ImageDDSClass. Creator<Image::FactoryImage,ImageDDS> sofa::helper::io::ImageDDSClass(""dds"") ; (; ""dds"" ; ). ◆ MeshGmshClass. Creator<Mesh::FactoryMesh, MeshGmsh> sofa::helper::io::MeshGmshClass(""gmsh"") ; (; ""gmsh"" ; ). ◆ MeshOBJClass. Creator<Mesh::FactoryMesh,MeshOBJ> sofa::helper::io::MeshOBJClass(""obj"") ; (; ""obj"" ; ). ◆ MeshOBJClass2. Creator<Mesh::FactoryMesh, MeshOBJ> sofa::helper::io::MeshOBJClass2(""OBJ"") ; (; ""OBJ"" ; ). ◆ stbImageCreation. const auto sofa::helper::io::stbImageCreation = STBImageCreators(). sofahelperio; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1io.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1io.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:402,Integrability,rout,routingmessagehandler,402,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1048,Integrability,message,message,1048,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1345,Integrability,message,message,1345,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1404,Integrability,message,message,1404,"  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the m",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1808,Integrability,wrap,wrapped,1808,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4124,Integrability,message,message,4124,"ract with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4181,Integrability,message,message,4181," ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5400,Integrability,wrap,wrapped,5400,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5625,Integrability,wrap,wrappedthe,5625,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4110,Security,access,access,4110,"ract with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:27,Testability,log,logging,27,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:193,Testability,log,logging,193,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:336,Testability,log,loggingmessagehandler,336,"﻿. SOFA API: sofa::helper::logging Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions . sofa::helper::logging Namespace Reference . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; Compone",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3248,Testability,log,logging,3248,"; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3360,Testability,log,logging,3360,"s function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3580,Testability,log,logging,3580,"ase based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on string. More...;  ; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:3796,Testability,log,logging,3796,"; const SOFA_HELPER_API std::string toString (const Message::Type type);  ; std::ostream & operator<< (std::ostream &s, const Message &m);  ; std::vector< MessageHandler * > getDefaultMessageHandlers ();  ; MessageDispatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::c",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4020,Testability,log,logging,4020,"spatcherImpl * getMainInstance ();  . Detailed Description; This allow Base object to interact with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::h",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4310,Testability,log,logging,4310,"nfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4382,Testability,log,logging,4382,"mponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4486,Testability,log,logging,4486,"tring. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4601,Testability,log,logging,4601,"st sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to rende",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4774,Testability,log,logging,4774,"::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Ty",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4894,Testability,log,logging,4894,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5026,Testability,log,logging,5026,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5175,Testability,log,logging,5175,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5284,Testability,log,logging,5284,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5754,Testability,log,logging,5754,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1318,Usability,simpl,simply,1318,"nce . This allow Base object to interact with the messaging system. ; More... Namespaces;  countingmessagehandler;  ;  loggingmessagehandler;  ;  percomponentloggingmessagehandler;  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1721,Usability,simpl,simpleFormat,1721,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1819,Usability,simpl,simpleFormat,1819,"nsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; const ComponentInfo::SPtr getComponentInfo (const ComponentInfo::SPtr &s);  This function is used in the msg_* macro to handle emitting case based on string. More...;  ; bool notMuted (const ComponentInfo::SPtr &);  ; bool notMuted (const std::string &);  This function is used in the msg_* macro to handle string based on strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5249,Usability,simpl,simpleFormat,5249,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5293,Usability,simpl,simpleFormat,5293,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:5413,Usability,simpl,simpleFormat,5413,"the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa::helper::logging::operator<< ; (; std::ostream & ; s, . const Message & ; m . ). ◆ simpleFormat(). void sofa::helper::logging::simpleFormat ; (; size_t ; jsize, . const std::string & ; text, . size_t ; line_length, . std::ostream & ; wrapped . ). simpleFormat a text containing our markdown 'tags' ; Parameters. jsizesize of the line prefix to fill with space (for left side alignment) ; textthe text to format ; line_lengthnumber of column to render to to ; wrappedthe destination stream where to write the formatted text. . ◆ toString(). SOFA_HELPER_API const std::string sofa::helper::logging::toString ; (; const Message::Type ; type). sofahelperlogging; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html:316,Integrability,message,messages,316,﻿. SOFA API: sofa::helper::logging::countingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::countingmessagehandler Namespace Reference . Classes; class  CountingMessageHandler;  The CountingMessageHandler class count the messages by types. More...;  ; class  MainCountingMessageHandler;  The MainCountingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingcountingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html:27,Testability,log,logging,27,﻿. SOFA API: sofa::helper::logging::countingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::countingmessagehandler Namespace Reference . Classes; class  CountingMessageHandler;  The CountingMessageHandler class count the messages by types. More...;  ; class  MainCountingMessageHandler;  The MainCountingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingcountingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html:178,Testability,log,logging,178,﻿. SOFA API: sofa::helper::logging::countingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::countingmessagehandler Namespace Reference . Classes; class  CountingMessageHandler;  The CountingMessageHandler class count the messages by types. More...;  ; class  MainCountingMessageHandler;  The MainCountingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingcountingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1countingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html:322,Integrability,message,messages,322,﻿. SOFA API: sofa::helper::logging::loggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::loggingmessagehandler Namespace Reference . Classes; class  LoggingMessageHandler;  The LoggingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainLoggingMessageHandler;  The MainLoggingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  ; class  LogMessage;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html:27,Testability,log,logging,27,﻿. SOFA API: sofa::helper::logging::loggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::loggingmessagehandler Namespace Reference . Classes; class  LoggingMessageHandler;  The LoggingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainLoggingMessageHandler;  The MainLoggingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  ; class  LogMessage;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html:36,Testability,log,loggingmessagehandler,36,﻿. SOFA API: sofa::helper::logging::loggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::loggingmessagehandler Namespace Reference . Classes; class  LoggingMessageHandler;  The LoggingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainLoggingMessageHandler;  The MainLoggingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  ; class  LogMessage;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html:177,Testability,log,logging,177,﻿. SOFA API: sofa::helper::logging::loggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::loggingmessagehandler Namespace Reference . Classes; class  LoggingMessageHandler;  The LoggingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainLoggingMessageHandler;  The MainLoggingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  ; class  LogMessage;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html:186,Testability,log,loggingmessagehandler,186,﻿. SOFA API: sofa::helper::logging::loggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::loggingmessagehandler Namespace Reference . Classes; class  LoggingMessageHandler;  The LoggingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainLoggingMessageHandler;  The MainLoggingMessageHandler class contains a singleton to CountingMessageHandler and offer static version of CountingMessageHandler API. More...;  ; class  LogMessage;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1loggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html:358,Integrability,message,messages,358,﻿. SOFA API: sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference . Classes; class  PerComponentLoggingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainPerComponentLoggingMessageHandler;  The MainPerComponentLoggingMessageHandler class contains a singleton to PerComponentLoggingMessageHandler and offer static version of PerComponentLoggingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingpercomponentloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html:27,Testability,log,logging,27,﻿. SOFA API: sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference . Classes; class  PerComponentLoggingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainPerComponentLoggingMessageHandler;  The MainPerComponentLoggingMessageHandler class contains a singleton to PerComponentLoggingMessageHandler and offer static version of PerComponentLoggingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingpercomponentloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html:189,Testability,log,logging,189,﻿. SOFA API: sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::logging::percomponentloggingmessagehandler Namespace Reference . Classes; class  PerComponentLoggingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainPerComponentLoggingMessageHandler;  The MainPerComponentLoggingMessageHandler class contains a singleton to PerComponentLoggingMessageHandler and offer static version of PerComponentLoggingMessageHandler API. More...;  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. . sofahelperloggingpercomponentloggingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1percomponentloggingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:36,Integrability,rout,routingmessagehandler,36,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:198,Integrability,rout,routingmessagehandler,198,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:334,Integrability,message,messages,334,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:980,Integrability,rout,routingmessagehandler,980,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:27,Testability,log,logging,27,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:189,Testability,log,logging,189,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html:971,Testability,log,logging,971,﻿. SOFA API: sofa::helper::logging::routingmessagehandler Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Typedefs . sofa::helper::logging::routingmessagehandler Namespace Reference . Classes; class  RoutingMessageHandler;  The RoutingMessageHandler class saves a copy of the messages in a buffer. More...;  ; class  MainRoutingMessageHandler;  The MainRoutingMessageHandler class contains a singleton to RoutingMessageHandler and offer static version of RoutingMessageHandler API. More...;  . Typedefs; typedef bool(* FilterFunction) (Message &);  . Detailed Description; I use a per-file namespace so that I can employ the 'using' keywords without fearing it will leak names into the global namespace. When closing this namespace selected objects from this per-file namespace are then imported into their parent namespace for ease of use. ; Typedef Documentation. ◆ FilterFunction. typedef bool(* sofa::helper::logging::routingmessagehandler::FilterFunction) (Message &). sofahelperloggingroutingmessagehandler; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging_1_1routingmessagehandler.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:432,Energy Efficiency,monitor,monitor,432,"﻿. SOFA API: sofa::helper::system Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::helper::system Namespace Reference . Namespaces;  thread;  . Classes; class  DynamicLibrary;  Wrapper around the dynamic library facilities of the operating system. More...;  ; class  FileEventListener;  Contains an event-based API to monitor file changes. More...;  ; class  FileMonitor;  ; class  MonitoredFile;  ; class  FileRepository;  ; class  FileSystem;  Contains functions to interact with the file system. More...;  ; class  Locale;  ; class  TemporaryLocale;  RAII class to modify the locale temporarily. More...;  ; class  PipeProcess;  ; class  Plugin;  ; class  PluginManager;  ; class  SetDirectory;  . Typedefs; typedef vector< string > ListOfFiles;  ; typedef vector< FileEventListener * > ListOfListeners;  ; typedef list< MonitoredFile * > ListOfMonitors;  . Functions; const char * eventmaskToString (int evtmask);  ; void addAFileListenerInDict (string pathfilename, FileEventListener *listener);  ; int FileMonitor_init ();  ; void catch_alarm (int sig);  ; std::string cleanPath (const std::string &path);  . Variables; map< string, ListOfFiles > dir2files;  ; map< int, string > fd2fn;  ; map< string, ListOfListeners > file2listener;  ; int filemonitor_inotifyfd =-1;  ; ListOfMonitors monitors;  ; volatile sig_atomic_t keep_going = 1;  ; FileRepository PluginRepository (""SOFA_PLUGIN_PATH"", { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), });  Default repository. More...;  ; FileRepository DataRepository (""SOFA_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListO",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:1408,Energy Efficiency,monitor,monitors,1408,"nitor file changes. More...;  ; class  FileMonitor;  ; class  MonitoredFile;  ; class  FileRepository;  ; class  FileSystem;  Contains functions to interact with the file system. More...;  ; class  Locale;  ; class  TemporaryLocale;  RAII class to modify the locale temporarily. More...;  ; class  PipeProcess;  ; class  Plugin;  ; class  PluginManager;  ; class  SetDirectory;  . Typedefs; typedef vector< string > ListOfFiles;  ; typedef vector< FileEventListener * > ListOfListeners;  ; typedef list< MonitoredFile * > ListOfMonitors;  . Functions; const char * eventmaskToString (int evtmask);  ; void addAFileListenerInDict (string pathfilename, FileEventListener *listener);  ; int FileMonitor_init ();  ; void catch_alarm (int sig);  ; std::string cleanPath (const std::string &path);  . Variables; map< string, ListOfFiles > dir2files;  ; map< int, string > fd2fn;  ; map< string, ListOfListeners > file2listener;  ; int filemonitor_inotifyfd =-1;  ; ListOfMonitors monitors;  ; volatile sig_atomic_t keep_going = 1;  ; FileRepository PluginRepository (""SOFA_PLUGIN_PATH"", { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), });  Default repository. More...;  ; FileRepository DataRepository (""SOFA_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:3374,Energy Efficiency,monitor,monitors,3374,"are/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::string sofa::helper::system::cleanPath ; (; const std::string & ; path). ◆ eventmaskToString(). const char * sofa::helper::system::eventmaskToString ; (; int ; evtmask). ◆ FileMonitor_init(). int sofa::helper::system::FileMonitor_init ; (; ). Variable Documentation. ◆ DataRepository. SOFA_HELPER_API FileRepository sofa::helper::system::DataRepository ; (; ""SOFA_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") } ; , . { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } } ;  . ). Default repository. . ◆ dir2files. map<string, ListOfFiles> sofa::helper::system::dir2files. ◆ fd2fn. map<int, string> sofa::helper::system::fd2fn. ◆ file2listener. map<string, ListOfListeners> sofa::helper::system::file2listener. ◆ filemonitor_inotifyfd. int sofa::helper::system::filemonitor_inotifyfd =-1. ◆ keep_going. volatile sig_atomic_t sofa::helper::system::keep_going = 1. ◆ monitors. ListOfMonitors sofa::helper::system::monitors. ◆ PluginRepository. SOFA_HELPER_API FileRepository sofa::helper::system::PluginRepository ; (; ""SOFA_PLUGIN_PATH"" ; , . { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), } ;  . ). Default repository. . sofahelpersystem; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:3421,Energy Efficiency,monitor,monitors,3421,"are/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::string sofa::helper::system::cleanPath ; (; const std::string & ; path). ◆ eventmaskToString(). const char * sofa::helper::system::eventmaskToString ; (; int ; evtmask). ◆ FileMonitor_init(). int sofa::helper::system::FileMonitor_init ; (; ). Variable Documentation. ◆ DataRepository. SOFA_HELPER_API FileRepository sofa::helper::system::DataRepository ; (; ""SOFA_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") } ; , . { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } } ;  . ). Default repository. . ◆ dir2files. map<string, ListOfFiles> sofa::helper::system::dir2files. ◆ fd2fn. map<int, string> sofa::helper::system::fd2fn. ◆ file2listener. map<string, ListOfListeners> sofa::helper::system::file2listener. ◆ filemonitor_inotifyfd. int sofa::helper::system::filemonitor_inotifyfd =-1. ◆ keep_going. volatile sig_atomic_t sofa::helper::system::keep_going = 1. ◆ monitors. ListOfMonitors sofa::helper::system::monitors. ◆ PluginRepository. SOFA_HELPER_API FileRepository sofa::helper::system::PluginRepository ; (; ""SOFA_PLUGIN_PATH"" ; , . { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), } ;  . ). Default repository. . sofahelpersystem; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:1539,Modifiability,plugin,plugins,1539,"nitor file changes. More...;  ; class  FileMonitor;  ; class  MonitoredFile;  ; class  FileRepository;  ; class  FileSystem;  Contains functions to interact with the file system. More...;  ; class  Locale;  ; class  TemporaryLocale;  RAII class to modify the locale temporarily. More...;  ; class  PipeProcess;  ; class  Plugin;  ; class  PluginManager;  ; class  SetDirectory;  . Typedefs; typedef vector< string > ListOfFiles;  ; typedef vector< FileEventListener * > ListOfListeners;  ; typedef list< MonitoredFile * > ListOfMonitors;  . Functions; const char * eventmaskToString (int evtmask);  ; void addAFileListenerInDict (string pathfilename, FileEventListener *listener);  ; int FileMonitor_init ();  ; void catch_alarm (int sig);  ; std::string cleanPath (const std::string &path);  . Variables; map< string, ListOfFiles > dir2files;  ; map< int, string > fd2fn;  ; map< string, ListOfListeners > file2listener;  ; int filemonitor_inotifyfd =-1;  ; ListOfMonitors monitors;  ; volatile sig_atomic_t keep_going = 1;  ; FileRepository PluginRepository (""SOFA_PLUGIN_PATH"", { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), });  Default repository. More...;  ; FileRepository DataRepository (""SOFA_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:3575,Modifiability,plugin,plugins,3575,"are/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::string sofa::helper::system::cleanPath ; (; const std::string & ; path). ◆ eventmaskToString(). const char * sofa::helper::system::eventmaskToString ; (; int ; evtmask). ◆ FileMonitor_init(). int sofa::helper::system::FileMonitor_init ; (; ). Variable Documentation. ◆ DataRepository. SOFA_HELPER_API FileRepository sofa::helper::system::DataRepository ; (; ""SOFA_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") } ; , . { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } } ;  . ). Default repository. . ◆ dir2files. map<string, ListOfFiles> sofa::helper::system::dir2files. ◆ fd2fn. map<int, string> sofa::helper::system::fd2fn. ◆ file2listener. map<string, ListOfListeners> sofa::helper::system::file2listener. ◆ filemonitor_inotifyfd. int sofa::helper::system::filemonitor_inotifyfd =-1. ◆ keep_going. volatile sig_atomic_t sofa::helper::system::keep_going = 1. ◆ monitors. ListOfMonitors sofa::helper::system::monitors. ◆ PluginRepository. SOFA_HELPER_API FileRepository sofa::helper::system::PluginRepository ; (; ""SOFA_PLUGIN_PATH"" ; , . { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), } ;  . ). Default repository. . sofahelpersystem; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1visual.html:227,Performance,perform,perform,227,﻿. SOFA API: sofa::helper::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::visual Namespace Reference . Classes; struct  DrawTool;  Utility class to perform debug drawing. More...;  ; class  Trackball;  ; class  Transformation;  . sofahelpervisual; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1helper_1_1visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1visual.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html:7450,Integrability,depend,dependencies,7450,"nst D_values);  ; template<typename Real > ; void solveDiagonalSystemUsingInvertedValues (const sofa::Size systemSize, const Real *rightHandSideVector, Real *solution, const Real *const Dinv_values);  ; std::ostream & operator<< (std::ostream &out, const FullMatrix< double > &v);  ; std::ostream & operator<< (std::ostream &out, const FullMatrix< float > &v);  ; std::ostream & operator<< (std::ostream &out, const LPtrFullMatrix< double > &v);  ; std::ostream & operator<< (std::ostream &out, const LPtrFullMatrix< float > &v);  ; template<typename Real > ; std::ostream & readFromStream (std::ostream &out, const FullMatrix< Real > &v);  ; std::ostream & operator<< (std::ostream &out, const FullVector< float > &v);  ; std::ostream & operator<< (std::ostream &out, const FullVector< double > &v);  ; template<typename Real > ; std::ostream & readFromStream (std::ostream &out, const FullVector< Real > &v);  ; SOFA_LINEARALGEBRA_API void init ();  Initialize the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. More...;  ; SOFA_LINEARALGEBRA_API bool isInitialized ();  Return true if and only if the Sofa.LinearAlgebra library has been initialized. More...;  ; SOFA_LINEARALGEBRA_API void cleanup ();  Clean up the resources used by the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. More...;  ; SOFA_LINEARALGEBRA_API bool isCleanedUp ();  Return true if and only if the Sofa.LinearAlgebra library has been cleaned up. More...;  ; template<class Real > ; std::ostream & operator<< (std::ostream &out, const RotationMatrix< Real > &v);  ; template SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const RotationMatrix< float > &v);  ; template SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const RotationMatrix< double > &v);  ; template<typename _Scalar , int _Options, typename _StorageIndex > ; void flagValueIndices (Eigen::SparseMatrix< sparsematrixproduct::IndexedValue< _Scalar >, ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html:7757,Integrability,depend,dependencies,7757,"<< (std::ostream &out, const FullMatrix< float > &v);  ; std::ostream & operator<< (std::ostream &out, const LPtrFullMatrix< double > &v);  ; std::ostream & operator<< (std::ostream &out, const LPtrFullMatrix< float > &v);  ; template<typename Real > ; std::ostream & readFromStream (std::ostream &out, const FullMatrix< Real > &v);  ; std::ostream & operator<< (std::ostream &out, const FullVector< float > &v);  ; std::ostream & operator<< (std::ostream &out, const FullVector< double > &v);  ; template<typename Real > ; std::ostream & readFromStream (std::ostream &out, const FullVector< Real > &v);  ; SOFA_LINEARALGEBRA_API void init ();  Initialize the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. More...;  ; SOFA_LINEARALGEBRA_API bool isInitialized ();  Return true if and only if the Sofa.LinearAlgebra library has been initialized. More...;  ; SOFA_LINEARALGEBRA_API void cleanup ();  Clean up the resources used by the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. More...;  ; SOFA_LINEARALGEBRA_API bool isCleanedUp ();  Return true if and only if the Sofa.LinearAlgebra library has been cleaned up. More...;  ; template<class Real > ; std::ostream & operator<< (std::ostream &out, const RotationMatrix< Real > &v);  ; template SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const RotationMatrix< float > &v);  ; template SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const RotationMatrix< double > &v);  ; template<typename _Scalar , int _Options, typename _StorageIndex > ; void flagValueIndices (Eigen::SparseMatrix< sparsematrixproduct::IndexedValue< _Scalar >, _Options, _StorageIndex > &matrix);  ; template<class TMatrix > ; void transpose (const TMatrix &self, type::vector< typename TMatrix::Index > &outer, type::vector< typename TMatrix::Index > &inner, type::vector< typename TMatrix::Index > &perm);  ; template<typename Real , typename Integer > ; void solveL",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html:13216,Integrability,depend,dependencies,13216,"RECATED__MATRIXSUBTRACTION. using sofa::linearalgebra::SOFA_ATTRIBUTE_DEPRECATED__MATRIXSUBTRACTION = typedef MatrixSubtraction<M1, M2>. Enumeration Type Documentation. ◆ MatrixCategory. enum sofa::linearalgebra::MatrixCategory. EnumeratorMATRIX_IDENTITY ; MATRIX_DIAGONAL ; MATRIX_BAND ; MATRIX_SPARSE ; MATRIX_FULL . Function Documentation. ◆ addBlockMat(). template<class TMatrix , class TBlockMatrix > . void sofa::linearalgebra::addBlockMat ; (; TMatrix & ; self, . Index ; row, . Index ; col, . const TBlockMatrix & ; _M . ). ◆ addMultTransposeEigen(). template<typename LhsMatrixDeriv , typename RhsMatrixDeriv , typename Real > . void sofa::linearalgebra::addMultTransposeEigen ; (; LhsMatrixDeriv & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const RhsMatrixDeriv & ; rhs . ). Computes lhs += jacobian^T * rhs. . ◆ cleanup(). SOFA_LINEARALGEBRA_API void sofa::linearalgebra::cleanup ; (; ). Clean up the resources used by the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. . ◆ CompressedRowSparseMatrixVecDerivMult(). template<class RowType , class VecDeriv , typename Real = typename VecDeriv::value_type::Real> . Real sofa::linearalgebra::CompressedRowSparseMatrixVecDerivMult ; (; const RowType ; row, . const VecDeriv & ; vec . ). ◆ computeRowColumnCoordinateFromIndexInLowerTriangularMatrix(). void sofa::linearalgebra::computeRowColumnCoordinateFromIndexInLowerTriangularMatrix ; (; const sofa::Index ; flatIndex, . sofa::Index & ; row, . sofa::Index & ; col . ). inline . A lower triangular matrix can be stored as a linear array. This function converts the index in this linear array to 2d coordinates (row and column) of an element in the matrix.; Example of a 6x6 lower triangular matrix: [ 0 ] [ 1 2 ] [ 3 4 5 ] [ 6 7 8 9 ] [10 11 12 13 14 ] [15 16 17 18 19 20]; 0 => (0, 0) 7 => (3, 1) 18 => (5, 3) . ◆ convertCompressedRowSparseMatrixRowToVecDeriv(). template<class RowType , class VecDeriv > . void sofa::linearal",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html:14685,Integrability,depend,dependencies,14685,"sofa::Index ; flatIndex, . sofa::Index & ; row, . sofa::Index & ; col . ). inline . A lower triangular matrix can be stored as a linear array. This function converts the index in this linear array to 2d coordinates (row and column) of an element in the matrix.; Example of a 6x6 lower triangular matrix: [ 0 ] [ 1 2 ] [ 3 4 5 ] [ 6 7 8 9 ] [10 11 12 13 14 ] [15 16 17 18 19 20]; 0 => (0, 0) 7 => (3, 1) 18 => (5, 3) . ◆ convertCompressedRowSparseMatrixRowToVecDeriv(). template<class RowType , class VecDeriv > . void sofa::linearalgebra::convertCompressedRowSparseMatrixRowToVecDeriv ; (; const RowType ; row, . VecDeriv & ; out . ). ◆ flagValueIndices(). template<typename _Scalar , int _Options, typename _StorageIndex > . void sofa::linearalgebra::flagValueIndices ; (; Eigen::SparseMatrix< sparsematrixproduct::IndexedValue< _Scalar >, _Options, _StorageIndex > & ; matrix). ◆ init(). SOFA_LINEARALGEBRA_API void sofa::linearalgebra::init ; (; ). Initialize the Sofa.LinearAlgebra library, as well as its dependencies: Sofa.Type, SofaHelper. . ◆ isCleanedUp(). SOFA_LINEARALGEBRA_API bool sofa::linearalgebra::isCleanedUp ; (; ). Return true if and only if the Sofa.LinearAlgebra library has been cleaned up. . ◆ isInitialized(). SOFA_LINEARALGEBRA_API bool sofa::linearalgebra::isInitialized ; (; ). Return true if and only if the Sofa.LinearAlgebra library has been initialized. . ◆ matrixAdd(). template<sofa::Size L, sofa::Size C, class real > . void sofa::linearalgebra::matrixAdd ; (; BaseMatrix * ; self, . const Index ; row, . const Index ; col, . const sofa::type::Mat< L, C, real > & ; M . ). ◆ operator<<() [1/11]. SOFA_LINEARALGEBRA_API std::ostream & sofa::linearalgebra::operator<< ; (; std::ostream & ; out, . const BaseVector & ; v . ). Declare that the operator << exists but is defined in BaseVector.cpp. . ◆ operator<<() [2/11]. SOFA_LINEARALGEBRA_API std::ostream & sofa::linearalgebra::operator<< ; (; std::ostream & ; out, . const FullMatrix< double > & ; v . ). ◆ operator<",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html:286,Testability,test,testing,286,"﻿. SOFA API: sofa::linearalgebra Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::linearalgebra Namespace Reference . Namespaces;  sparsematrixproduct;  ;  testing;  . Classes; class  matrix_bloc_traits< defaulttype::RigidDeriv< N, T >, IndexType >;  ; struct  BaseMatrixLinearOpMV_BlockDiagonal;  ; struct  BaseMatrixLinearOpMV_BlockDiagonal< Real, 1, 1, add, transpose, M, V1, V2 >;  ; struct  BaseMatrixLinearOpMV_BlockSparse;  ; class  BaseMatrixLinearOpMV;  ; class  BaseMatrixLinearOpMulV;  ; class  BaseMatrixLinearOpPMulV;  ; class  BaseMatrixLinearOpMulTV;  ; class  BaseMatrixLinearOpPMulTV;  ; struct  BaseMatrixLinearOpAM_BlockSparse;  ; struct  BaseMatrixLinearOpAMS_BlockSparse;  ; struct  BaseMatrixLinearOpAM1_BlockSparse;  ; class  BaseMatrixLinearOpAM;  ; class  BaseMatrixLinearOpAddM;  ; class  BaseMatrixLinearOpAddMT;  ; class  BaseMatrix;  ; class  BaseVector;  ; class  BlockDiagonalMatrix;  Simple full matrix container. More...;  ; class  BlockFullMatrix;  Simple block full matrix container (used for InvMatrixType) More...;  ; class  BlockVector;  ; class  BTDMatrix;  Simple BTD matrix container. More...;  ; class  CRSConstraintPolicy;  ; class  CompressedRowSparseMatrixConstraint;  ; struct  CompressedRowSparseMatrixToEigenSparse;  ; struct  CompressedRowSparseMatrixToEigenSparseVec;  ; struct  CompressedRowSparseMatrixToEigenSparse< sofa::type::Vec< N, Real > >;  ; struct  EigenSparseToCompressedRowSparseMatrix;  ; struct  EigenSparseToCompressedRowSparseMatrixVec;  ; class  EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > >;  ; class  EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >;  ; struct  CRSBlockTraits;  Traits class which defines the containers to use for a given type of block. More...;  ; struct  CRSDefaultPolicy;  ; class  CompressedRowSparseMatrixGeneric;  ; clas",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:282,Modifiability,parameteriz,parameterized,282,"﻿. SOFA API: sofa::linearalgebra::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::linearalgebra::testing Namespace Reference . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:34,Testability,test,testing,34,"﻿. SOFA API: sofa::linearalgebra::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::linearalgebra::testing Namespace Reference . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:181,Testability,test,testing,181,"﻿. SOFA API: sofa::linearalgebra::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::linearalgebra::testing Namespace Reference . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:296,Testability,test,tests,296,"﻿. SOFA API: sofa::linearalgebra::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::linearalgebra::testing Namespace Reference . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1033,Testability,test,testing,1033,"eference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::linearalgebra::testing Namespace Reference . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1201,Testability,test,testing,1201,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1363,Testability,test,testing,1363,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1472,Testability,test,testing,1472,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1583,Testability,test,testing,1583,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1691,Testability,test,testing,1691,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1819,Testability,test,testing,1819,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:1948,Testability,test,testing,1948,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html:2052,Testability,test,testing,2052,"erence . Classes; struct  TestBaseMatrixTraits;  ; class  TestBaseMatrix;  Type-parameterized tests for classes derived from BaseMatrix. More...;  ; struct  SparseMatrixProductInit;  ; struct  TestSparseMatrixProduct;  . Functions;  TYPED_TEST_SUITE_P (TestBaseMatrix);  ;  TYPED_TEST_P (TestBaseMatrix, resize);  ;  TYPED_TEST_P (TestBaseMatrix, addScalar);  ;  TYPED_TEST_P (TestBaseMatrix, addBloc);  ;  REGISTER_TYPED_TEST_SUITE_P (TestBaseMatrix, resize, addScalar, addBloc);  ;  TYPED_TEST_SUITE_P (TestSparseMatrixProduct);  ;  TYPED_TEST_P (TestSparseMatrixProduct, squareMatrix);  ;  TYPED_TEST_P (TestSparseMatrixProduct, rectangularMatrix);  ;  REGISTER_TYPED_TEST_SUITE_P (TestSparseMatrixProduct, squareMatrix, rectangularMatrix);  . Function Documentation. ◆ REGISTER_TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; , . resize ; , . addScalar ; , . addBloc ;  . ). ◆ REGISTER_TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::REGISTER_TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; , . squareMatrix ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [1/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addBloc ;  . ). ◆ TYPED_TEST_P() [2/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . addScalar ;  . ). ◆ TYPED_TEST_P() [3/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestBaseMatrix ; , . resize ;  . ). ◆ TYPED_TEST_P() [4/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . rectangularMatrix ;  . ). ◆ TYPED_TEST_P() [5/5]. sofa::linearalgebra::testing::TYPED_TEST_P ; (; TestSparseMatrixProduct ; , . squareMatrix ;  . ). ◆ TYPED_TEST_SUITE_P() [1/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestBaseMatrix ; ). ◆ TYPED_TEST_SUITE_P() [2/2]. sofa::linearalgebra::testing::TYPED_TEST_SUITE_P ; (; TestSparseMatrixProduct ; ). sofalinearalgebratesting; Generated on Mon Nov 11 2024 03:32:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1linearalgebra_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1mapping__test.html:237,Testability,test,tests,237,"﻿. SOFA API: sofa::mapping_test Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::mapping_test Namespace Reference . Classes; struct  Mapping_test;  Base class for the Mapping tests, with helpers to automatically test applyJ, applyJT, applyDJT and getJs using finite differences. More...;  . sofamapping_test; Generated on Mon Nov 11 2024 03:32:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1mapping__test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1mapping__test.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1mapping__test.html:274,Testability,test,test,274,"﻿. SOFA API: sofa::mapping_test Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::mapping_test Namespace Reference . Classes; struct  Mapping_test;  Base class for the Mapping tests, with helpers to automatically test applyJ, applyJT, applyDJT and getJs using finite differences. More...;  . sofamapping_test; Generated on Mon Nov 11 2024 03:32:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1mapping__test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1mapping__test.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:318,Integrability,depend,dependencies,318,"﻿. SOFA API: sofa::simpleapi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simpleapi Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMPLEAPI_API void init ();  Initialize the Sofa.SimpleApi library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isInitialized ();  Return true if and only if the Sofa.SimpleApi library has been initialized. More...;  ; SOFA_SIMPLEAPI_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isCleanedUp ();  Return true if and only if the Sofa.SimpleApi library has been cleaned up. More...;  ; bool importPlugin (const std::string &name);  ; void dumpScene (Node::SPtr root);  ; Simulation::SPtr createSimulation (const std::string &type);  ; Node::SPtr createRootNode (Simulation::SPtr s, const std::string &name, const std::map< std::string, std::string > &params);  ; NodeSPtr createRootNode (Simulation *s, const std::string &name, const std::map< std::string, std::string > &params);  ; BaseObject::SPtr createObject (Node::SPtr parent, BaseObjectDescription &desc);  ; BaseObject::SPtr createObject (Node::SPtr parent, const std::string &type, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, const std::string &name, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, BaseObjectDescription &desc);  ; Node::SPtr createNode (const std::string &name);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; sofa::core::sptr< BaseObject > SOFA_SIMPLEAPI_API createObject (NodeSPtr node, BaseObjectDescription &params);  Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object i",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:591,Integrability,depend,dependencies,591,"﻿. SOFA API: sofa::simpleapi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simpleapi Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMPLEAPI_API void init ();  Initialize the Sofa.SimpleApi library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isInitialized ();  Return true if and only if the Sofa.SimpleApi library has been initialized. More...;  ; SOFA_SIMPLEAPI_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isCleanedUp ();  Return true if and only if the Sofa.SimpleApi library has been cleaned up. More...;  ; bool importPlugin (const std::string &name);  ; void dumpScene (Node::SPtr root);  ; Simulation::SPtr createSimulation (const std::string &type);  ; Node::SPtr createRootNode (Simulation::SPtr s, const std::string &name, const std::map< std::string, std::string > &params);  ; NodeSPtr createRootNode (Simulation *s, const std::string &name, const std::map< std::string, std::string > &params);  ; BaseObject::SPtr createObject (Node::SPtr parent, BaseObjectDescription &desc);  ; BaseObject::SPtr createObject (Node::SPtr parent, const std::string &type, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, const std::string &name, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, BaseObjectDescription &desc);  ; Node::SPtr createNode (const std::string &name);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; sofa::core::sptr< BaseObject > SOFA_SIMPLEAPI_API createObject (NodeSPtr node, BaseObjectDescription &params);  Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object i",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3242,Integrability,depend,dependencies,3242,"d::string, std::string >{});  create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, const std::string &name, const std::map< std::string, std::string > &params=std::map< std::string, std::string >{});  create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, BaseObjectDescription &desc);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6449,Integrability,depend,dependencies,6449,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:19,Usability,simpl,simpleapi,19,"﻿. SOFA API: sofa::simpleapi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simpleapi Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMPLEAPI_API void init ();  Initialize the Sofa.SimpleApi library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isInitialized ();  Return true if and only if the Sofa.SimpleApi library has been initialized. More...;  ; SOFA_SIMPLEAPI_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isCleanedUp ();  Return true if and only if the Sofa.SimpleApi library has been cleaned up. More...;  ; bool importPlugin (const std::string &name);  ; void dumpScene (Node::SPtr root);  ; Simulation::SPtr createSimulation (const std::string &type);  ; Node::SPtr createRootNode (Simulation::SPtr s, const std::string &name, const std::map< std::string, std::string > &params);  ; NodeSPtr createRootNode (Simulation *s, const std::string &name, const std::map< std::string, std::string > &params);  ; BaseObject::SPtr createObject (Node::SPtr parent, BaseObjectDescription &desc);  ; BaseObject::SPtr createObject (Node::SPtr parent, const std::string &type, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, const std::string &name, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, BaseObjectDescription &desc);  ; Node::SPtr createNode (const std::string &name);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; sofa::core::sptr< BaseObject > SOFA_SIMPLEAPI_API createObject (NodeSPtr node, BaseObjectDescription &params);  Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object i",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:153,Usability,simpl,simpleapi,153,"﻿. SOFA API: sofa::simpleapi Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simpleapi Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMPLEAPI_API void init ();  Initialize the Sofa.SimpleApi library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isInitialized ();  Return true if and only if the Sofa.SimpleApi library has been initialized. More...;  ; SOFA_SIMPLEAPI_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. More...;  ; SOFA_SIMPLEAPI_API bool isCleanedUp ();  Return true if and only if the Sofa.SimpleApi library has been cleaned up. More...;  ; bool importPlugin (const std::string &name);  ; void dumpScene (Node::SPtr root);  ; Simulation::SPtr createSimulation (const std::string &type);  ; Node::SPtr createRootNode (Simulation::SPtr s, const std::string &name, const std::map< std::string, std::string > &params);  ; NodeSPtr createRootNode (Simulation *s, const std::string &name, const std::map< std::string, std::string > &params);  ; BaseObject::SPtr createObject (Node::SPtr parent, BaseObjectDescription &desc);  ; BaseObject::SPtr createObject (Node::SPtr parent, const std::string &type, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, const std::string &name, const std::map< std::string, std::string > &params);  ; Node::SPtr createChild (Node::SPtr node, BaseObjectDescription &desc);  ; Node::SPtr createNode (const std::string &name);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; sofa::core::sptr< BaseObject > SOFA_SIMPLEAPI_API createObject (NodeSPtr node, BaseObjectDescription &params);  Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object i",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3136,Usability,simpl,simpleapi,3136,"ring &type, const std::map< std::string, std::string > &params=std::map< std::string, std::string >{});  create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, const std::string &name, const std::map< std::string, std::string > &params=std::map< std::string, std::string >{});  create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, BaseObjectDescription &desc);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3298,Usability,simpl,simpleapi,3298,"""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, const std::string &name, const std::map< std::string, std::string > &params=std::map< std::string, std::string >{});  create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, BaseObjectDescription &desc);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::strin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3423,Usability,simpl,simpleapi,3423,"deSPtr node, const std::string &name, const std::map< std::string, std::string > &params=std::map< std::string, std::string >{});  create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, BaseObjectDescription &desc);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3618,Usability,simpl,simpleapi,3618,"parameter ""params"" is for passing specific data argument to the created object. More...;  ; NodeSPtr SOFA_SIMPLEAPI_API createChild (NodeSPtr node, BaseObjectDescription &desc);  create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:3907,Usability,simpl,simpleapi,3907,"ed object (including the node name). More...;  ; void SOFA_SIMPLEAPI_API dumpScene (NodeSPtr root);  ; template<class T > ; std::string str (const T &t);  . Function Documentation. ◆ cleanup(). SOFA_SIMPLEAPI_API void sofa::simpleapi::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies. . ◆ createChild() [1/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:4270,Usability,simpl,simpleapi,4270," Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . BaseObjectDescription & ; desc . ). ◆ createChild() [2/4]. Node::SPtr sofa::simpleapi::createChild ; (; Node::SPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:4522,Usability,simpl,simpleapi,4522,":string > & ; params . ). ◆ createChild() [3/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . BaseObjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:4657,Usability,simpl,simpleapi,4657,"bjectDescription & ; desc . ). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createChild() [4/4]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const st",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:4876,Usability,simpl,simpleapi,4876," NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createChild ; (; NodeSPtr ; node, . const std::string & ; name, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a child to the provided nodeof given name. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:5197,Usability,simpl,simpleapi,5197,"t to the created object. . ◆ createNode(). NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createNode ; (; const std::string & ; name). create a child to the provided node. The parameter ""params"" is for passing specific data argument to the created object (including the node name). . ◆ createObject() [1/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . BaseObjectDescription & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::d",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:5582,Usability,simpl,simpleapi,5582,"iption & ; desc . ). ◆ createObject() [2/4]. BaseObject::SPtr sofa::simpleapi::createObject ; (; Node::SPtr ; parent, . const std::string & ; type, . const std::map< std::string, std::string > & ; params . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi l",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:5782,Usability,simpl,simpleapi,5782,"s . ). ◆ createObject() [3/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . BaseObjectDescription & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:5990,Usability,simpl,simpleapi,5990,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6084,Usability,simpl,simpleapi,6084,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6181,Usability,simpl,simpleapi,6181,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6273,Usability,simpl,simpleapi,6273,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6371,Usability,simpl,simpleapi,6371,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6512,Usability,simpl,simpleapi,6512,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6669,Usability,simpl,simpleapi,6669,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html:6828,Usability,simpl,simpleapi,6828,"tion & ; params . ). Create a sofa object in the provided node. The parameter ""params"" is for passing specific data argument to the created object including the object's type. . ◆ createObject() [4/4]. sofa::core::sptr<BaseObject> SOFA_SIMPLEAPI_API sofa::simpleapi::createObject ; (; NodeSPtr ; node, . const std::string & ; type, . const std::map< std::string, std::string > & ; params = std::map< std::string, std::string >{} . ). create a sofa object in the provided node of the given type. The parameter ""params"" is for passing specific data argument to the created object. . ◆ createRootNode() [1/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation * ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createRootNode() [2/2]. NodeSPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createRootNode ; (; Simulation::SPtr ; s, . const std::string & ; name, . const std::map< std::string, std::string > & ; params . ). ◆ createSimulation(). Simulation::SPtr SOFA_SIMPLEAPI_API sofa::simpleapi::createSimulation ; (; const std::string & ; type). ◆ dumpScene() [1/2]. void sofa::simpleapi::dumpScene ; (; Node::SPtr ; root). ◆ dumpScene() [2/2]. void SOFA_SIMPLEAPI_API sofa::simpleapi::dumpScene ; (; NodeSPtr ; root). ◆ importPlugin(). bool SOFA_SIMPLEAPI_API sofa::simpleapi::importPlugin ; (; const std::string & ; name). ◆ init(). SOFA_SIMPLEAPI_API void sofa::simpleapi::init ; (; ). Initialize the Sofa.SimpleApi library, as well as its dependencies. . ◆ isCleanedUp(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isCleanedUp ; (; ). Return true if and only if the Sofa.SimpleApi library has been cleaned up. . ◆ isInitialized(). SOFA_SIMPLEAPI_API bool sofa::simpleapi::isInitialized ; (; ). Return true if and only if the Sofa.SimpleApi library has been initialized. . ◆ str(). template<class T > . std::string sofa::simpleapi::str ; (; const T & ; t). sofasimpleapi; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simpleapi.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simpleapi.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9517,Availability,avail,available,9517,"s homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFact",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:769,Deployability,integrat,integrations,769,"﻿. SOFA API: sofa::simulation Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  I",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10198,Deployability,integrat,integration,10198," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10251,Deployability,update,update,10251," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10280,Deployability,update,update,10280," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10303,Deployability,update,update,10303," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:3077,Energy Efficiency,schedul,scheduler,3077,lass  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  IntegrateEndEvent;  ; class  SpinLock;  ; class  ScopedLock;  ; class  MainTaskSchedulerFactory;  ; class  MainTaskSchedulerRegistry;  ; class  MechanicalVisitor;  ; class  MechanicalVPrintVisitor;  ; class  MechanicalVPrintWithElapsedTimeVisitor;  ; class  DofPrintVisitor;  ; class  MutationListener;  Generic API to handle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor;  ; class  SolveVisitorTask;  A task to provide to a task scheduler in which a solver solves. More...;  ; class  StateChangeVisitor;  ; class  Task;  ; class  TaskScheduler;  ; class  TaskSchedulerFactory;  ; class  TaskSchedulerRegistry;  ; class  TopologyChangeVisitor;  ; class  UpdateBoundingBoxVisitor;  ; class  UpdateContextVisitor;  ; class  UpdateSimulationContextVisitor;  ; class  UpdateVisualContextVisitor;  ; class  UpdateInternalDataVisitor;  ; class  UpdateLinksVisitor;  ; class  UpdateMappingEndEvent;  ; class  UpdateMappingVisitor;  ; class  VelocityThresholdVisitor;  ; class  Visitor;  Base class for visitors propagated recursively through the scenegraph. More...;  ; class  VisualVisitor;  ; class  VisualDrawVisitor;  ; class  VisualUpdateVisitor;  ; class  VisualInitVisitor;  ; class  VisualComputeBBoxVisitor;  ; class  VisualClearVisitor;  ; class  WorkerThread;  ; class  WriteStateVisitor;  ; class  XMLPrintVisitor;  . Typedefs; typedef sofa::core::sptr< Node > NodeSPtr;  ; t,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9409,Energy Efficiency,schedul,scheduler,9409,"number of elements in the container The number of elements in each range is homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simula",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9539,Energy Efficiency,schedul,scheduler,9539,"s homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFact",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:769,Integrability,integrat,integrations,769,"﻿. SOFA API: sofa::simulation Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  I",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:8356,Integrability,depend,depends,8356," last, . UnaryFunction ; f . ). Applies the given function object f to the Range [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const & . ◆ getSimulation(). Simulation * sofa::simulation::getSimulation ; (; ). Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_API void sofa::simulation::init ; (; ). ◆ initThreadLocalData(). SOFA_SIMULATION_CORE_API void sofa::simulation::initThreadLocalData ; (; ). ◆ makeRangesForLoop(). template<class InputIt > . sofa::type::vector<Range<InputIt> > sofa::simulation::makeRangesForLoop ; (; const InputIt ; first, . const InputIt ; last, . const unsigned int ; nbRangesHint . ). Function returning a list of ranges from an iterable container. The number of ranges depends on: 1) the desired number of ranges provided in a parameter 2) the number of elements in the container The number of elements in each range is homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initia",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9494,Integrability,depend,depends,9494,"s homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFact",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10198,Integrability,integrat,integration,10198," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:11220,Modifiability,plugin,plugins,11220," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:2926,Performance,load,loaders,2926,onInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  InitPerThreadDataTask;  ; class  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  IntegrateEndEvent;  ; class  SpinLock;  ; class  ScopedLock;  ; class  MainTaskSchedulerFactory;  ; class  MainTaskSchedulerRegistry;  ; class  MechanicalVisitor;  ; class  MechanicalVPrintVisitor;  ; class  MechanicalVPrintWithElapsedTimeVisitor;  ; class  DofPrintVisitor;  ; class  MutationListener;  Generic API to handle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor;  ; class  SolveVisitorTask;  A task to provide to a task scheduler in which a solver solves. More...;  ; class  StateChangeVisitor;  ; class  Task;  ; class  TaskScheduler;  ; class  TaskSchedulerFactory;  ; class  TaskSchedulerRegistry;  ; class  TopologyChangeVisitor;  ; class  UpdateBoundingBoxVisitor;  ; class  UpdateContextVisitor;  ; class  UpdateSimulationContextVisitor;  ; class  UpdateVisualContextVisitor;  ; class  UpdateInternalDataVisitor;  ; class  UpdateLinksVisitor;  ; class  UpdateMappingEndEvent;  ; class  UpdateMappingVisitor;  ; class  VelocityThresholdVisitor;  ; class  Visitor;  Base class for visitors propagated recursively through the sce,MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:5673,Performance,load,loaderPHP,5673,"ction forEachRange (InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction parallelForEachRange (TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction parallelForEach (TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction forEachRange (const ForEachExecutionPolicy execution, TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction forEach (const ForEachExecutionPolicy execution, TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; SOFA_SIMULATION_API void init ();  . Variables; const SceneLoader * loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP());  ; const SceneLoader * loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML());  ; int DefaultAnimationLoopClass;  ; const bool DefaultTaskSchedulerRegistered;  ; int DefaultVisualManagerLoopClass;  ; int RequiredPluginClass;  . Typedef Documentation. ◆ NodeSPtr. typedef sofa::core::sptr< Node > sofa::simulation::NodeSPtr. ◆ SimulationSPtr. typedef sofa::core::sptr<Simulation> sofa::simulation::SimulationSPtr. Enumeration Type Documentation. ◆ ForEachExecutionPolicy. enum sofa::simulation::ForEachExecutionPolicy : bool. strong . EnumeratorSEQUENTIAL ; PARALLEL . Function Documentation. ◆ advance(). template<class InputIt , class Distance > . void sofa::simulation::advance ; (; InputIt & ; it, . Distance ; n . ). ◆ forEach() [1/2]. template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::forEach ; (; const ForEachExecutionPolicy ; execution, . TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). ◆ forEach() [2/2]. template<class InputIt , class UnaryFunction > . UnaryF",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:5775,Performance,load,loaderXML,5775,"ction forEachRange (InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction parallelForEachRange (TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction parallelForEach (TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction forEachRange (const ForEachExecutionPolicy execution, TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; template<class InputIt , class UnaryFunction > ; UnaryFunction forEach (const ForEachExecutionPolicy execution, TaskScheduler &taskScheduler, InputIt first, InputIt last, UnaryFunction f);  ; SOFA_SIMULATION_API void init ();  . Variables; const SceneLoader * loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP());  ; const SceneLoader * loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML());  ; int DefaultAnimationLoopClass;  ; const bool DefaultTaskSchedulerRegistered;  ; int DefaultVisualManagerLoopClass;  ; int RequiredPluginClass;  . Typedef Documentation. ◆ NodeSPtr. typedef sofa::core::sptr< Node > sofa::simulation::NodeSPtr. ◆ SimulationSPtr. typedef sofa::core::sptr<Simulation> sofa::simulation::SimulationSPtr. Enumeration Type Documentation. ◆ ForEachExecutionPolicy. enum sofa::simulation::ForEachExecutionPolicy : bool. strong . EnumeratorSEQUENTIAL ; PARALLEL . Function Documentation. ◆ advance(). template<class InputIt , class Distance > . void sofa::simulation::advance ; (; InputIt & ; it, . Distance ; n . ). ◆ forEach() [1/2]. template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::forEach ; (; const ForEachExecutionPolicy ; execution, . TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). ◆ forEach() [2/2]. template<class InputIt , class UnaryFunction > . UnaryF",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10842,Performance,load,loaderPHP,10842," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10890,Performance,load,loaderPHP,10890," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10971,Performance,load,loaderXML,10971," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:11019,Performance,load,loaderXML,11019," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:926,Safety,detect,detection,926,"﻿. SOFA API: sofa::simulation Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  I",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:1112,Safety,detect,detection,1112,"amework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  InitPerThreadDataTask;  ; class  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  I",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10722,Usability,simpl,simplest,10722," Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required plugins""); .add< RequiredPlugin >(). sofasimulation; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html:551,Integrability,depend,dependencies,551,"﻿. SOFA API: sofa::simulation::common Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::common Namespace Reference . Classes; struct  CleanupCheck;  ; class  MechanicalOperations;  ; class  VectorOperations;  ; struct  VisitorExecuteFunc;  . Functions; SOFA_SIMULATION_COMMON_API sofa::helper::Creator< xml::NodeElement::Factory, Node > NodeClass (""default"");  ; SOFA_SIMULATION_COMMON_API void init ();  Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isInitialized ();  Return true if and only if the SofaSimulationCommon library has been initialized. More...;  ; SOFA_SIMULATION_COMMON_API void cleanup ();  Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCommon library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::cleanup ; (; ). Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::init ; (; ). Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCommon library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isInitialized ; (; ). Return true if and only if the SofaSimulationCommon library has been initialized. . ◆ NodeClass(). SOFA_SIMULATION_COMMON_API sofa::helper::Creator<xml::NodeElement::Factory, Node> sofa::si",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html:886,Integrability,depend,dependencies,886,"﻿. SOFA API: sofa::simulation::common Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::common Namespace Reference . Classes; struct  CleanupCheck;  ; class  MechanicalOperations;  ; class  VectorOperations;  ; struct  VisitorExecuteFunc;  . Functions; SOFA_SIMULATION_COMMON_API sofa::helper::Creator< xml::NodeElement::Factory, Node > NodeClass (""default"");  ; SOFA_SIMULATION_COMMON_API void init ();  Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isInitialized ();  Return true if and only if the SofaSimulationCommon library has been initialized. More...;  ; SOFA_SIMULATION_COMMON_API void cleanup ();  Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCommon library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::cleanup ; (; ). Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::init ; (; ). Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCommon library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isInitialized ; (; ). Return true if and only if the SofaSimulationCommon library has been initialized. . ◆ NodeClass(). SOFA_SIMULATION_COMMON_API sofa::helper::Creator<xml::NodeElement::Factory, Node> sofa::si",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html:1284,Integrability,depend,dependencies,1284,"Classes |; Functions . sofa::simulation::common Namespace Reference . Classes; struct  CleanupCheck;  ; class  MechanicalOperations;  ; class  VectorOperations;  ; struct  VisitorExecuteFunc;  . Functions; SOFA_SIMULATION_COMMON_API sofa::helper::Creator< xml::NodeElement::Factory, Node > NodeClass (""default"");  ; SOFA_SIMULATION_COMMON_API void init ();  Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isInitialized ();  Return true if and only if the SofaSimulationCommon library has been initialized. More...;  ; SOFA_SIMULATION_COMMON_API void cleanup ();  Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCommon library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::cleanup ; (; ). Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::init ; (; ). Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCommon library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isInitialized ; (; ). Return true if and only if the SofaSimulationCommon library has been initialized. . ◆ NodeClass(). SOFA_SIMULATION_COMMON_API sofa::helper::Creator<xml::NodeElement::Factory, Node> sofa::simulation::common::NodeClass ; (; ""default"" ; ). sofasimulationcommon; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html:1480,Integrability,depend,dependencies,1480,"Classes |; Functions . sofa::simulation::common Namespace Reference . Classes; struct  CleanupCheck;  ; class  MechanicalOperations;  ; class  VectorOperations;  ; struct  VisitorExecuteFunc;  . Functions; SOFA_SIMULATION_COMMON_API sofa::helper::Creator< xml::NodeElement::Factory, Node > NodeClass (""default"");  ; SOFA_SIMULATION_COMMON_API void init ();  Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isInitialized ();  Return true if and only if the SofaSimulationCommon library has been initialized. More...;  ; SOFA_SIMULATION_COMMON_API void cleanup ();  Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_COMMON_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCommon library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::cleanup ; (; ). Clean up the resources used by the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_COMMON_API void sofa::simulation::common::init ; (; ). Initialize the SofaSimulationCommon library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCommon library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::common::isInitialized ; (; ). Return true if and only if the SofaSimulationCommon library has been initialized. . ◆ NodeClass(). SOFA_SIMULATION_COMMON_API sofa::helper::Creator<xml::NodeElement::Factory, Node> sofa::simulation::common::NodeClass ; (; ""default"" ; ). sofasimulationcommon; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1common.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html:342,Integrability,depend,dependencies,342,"﻿. SOFA API: sofa::simulation::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::core Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMULATION_CORE_API void init ();  Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isInitialized ();  Return true if and only if the SofaSimulationCore library has been initialized. More...;  ; SOFA_SIMULATION_CORE_API void cleanup ();  Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCore library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::cleanup ; (; ). Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::init ; (; ). Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCore library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isInitialized ; (; ). Return true if and only if the SofaSimulationCore library has been initialized. . sofasimulationcore; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html:669,Integrability,depend,dependencies,669,"﻿. SOFA API: sofa::simulation::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::core Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMULATION_CORE_API void init ();  Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isInitialized ();  Return true if and only if the SofaSimulationCore library has been initialized. More...;  ; SOFA_SIMULATION_CORE_API void cleanup ();  Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCore library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::cleanup ; (; ). Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::init ; (; ). Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCore library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isInitialized ; (; ). Return true if and only if the SofaSimulationCore library has been initialized. . sofasimulationcore; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html:1057,Integrability,depend,dependencies,1057,"﻿. SOFA API: sofa::simulation::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::core Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMULATION_CORE_API void init ();  Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isInitialized ();  Return true if and only if the SofaSimulationCore library has been initialized. More...;  ; SOFA_SIMULATION_CORE_API void cleanup ();  Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCore library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::cleanup ; (; ). Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::init ; (; ). Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCore library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isInitialized ; (; ). Return true if and only if the SofaSimulationCore library has been initialized. . sofasimulationcore; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html:1247,Integrability,depend,dependencies,1247,"﻿. SOFA API: sofa::simulation::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::core Namespace Reference . Classes; struct  CleanupCheck;  . Functions; SOFA_SIMULATION_CORE_API void init ();  Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isInitialized ();  Return true if and only if the SofaSimulationCore library has been initialized. More...;  ; SOFA_SIMULATION_CORE_API void cleanup ();  Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_CORE_API bool isCleanedUp ();  Return true if and only if the SofaSimulationCore library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::cleanup ; (; ). Clean up the resources used by the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ init(). SOFA_SIMULATION_CORE_API void sofa::simulation::core::init ; (; ). Initialize the SofaSimulationCore library, as well as its dependencies: SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isCleanedUp ; (; ). Return true if and only if the SofaSimulationCore library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_CORE_API bool sofa::simulation::core::isInitialized ; (; ). Return true if and only if the SofaSimulationCore library has been initialized. . sofasimulationcore; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1core.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html:277,Availability,down,down,277,"﻿. SOFA API: sofa::simulation::graph Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::graph Namespace Reference . Classes; class  ExportDotVisitor;  ; class  GetDownObjectsVisitor;  get all down objects respecting specified class_info and tags More...;  ; class  GetUpObjectsVisitor;  get all up objects respecting specified class_info and tags More...;  ; class  DAGNode;  ; class  DAGSimulation;  ; struct  CleanupCheck;  . Functions; Simulation * getSimulation ()=delete;  ; SOFA_SIMULATION_GRAPH_API void init ();  Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isInitialized ();  Return true if and only if the SofaSimulationGraph library has been initialized. More...;  ; SOFA_SIMULATION_GRAPH_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isCleanedUp ();  Return true if and only if the SofaSimulationGraph library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ getSimulation(). Simulation* sofa::simulation::graph::getSimulation ; (; ). delete . Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::init ; (; ). Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isC",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html:665,Integrability,depend,dependencies,665,"﻿. SOFA API: sofa::simulation::graph Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::graph Namespace Reference . Classes; class  ExportDotVisitor;  ; class  GetDownObjectsVisitor;  get all down objects respecting specified class_info and tags More...;  ; class  GetUpObjectsVisitor;  get all up objects respecting specified class_info and tags More...;  ; class  DAGNode;  ; class  DAGSimulation;  ; struct  CleanupCheck;  . Functions; Simulation * getSimulation ()=delete;  ; SOFA_SIMULATION_GRAPH_API void init ();  Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isInitialized ();  Return true if and only if the SofaSimulationGraph library has been initialized. More...;  ; SOFA_SIMULATION_GRAPH_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isCleanedUp ();  Return true if and only if the SofaSimulationGraph library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ getSimulation(). Simulation* sofa::simulation::graph::getSimulation ; (; ). delete . Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::init ; (; ). Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isC",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html:1018,Integrability,depend,dependencies,1018,"﻿. SOFA API: sofa::simulation::graph Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::simulation::graph Namespace Reference . Classes; class  ExportDotVisitor;  ; class  GetDownObjectsVisitor;  get all down objects respecting specified class_info and tags More...;  ; class  GetUpObjectsVisitor;  get all up objects respecting specified class_info and tags More...;  ; class  DAGNode;  ; class  DAGSimulation;  ; struct  CleanupCheck;  . Functions; Simulation * getSimulation ()=delete;  ; SOFA_SIMULATION_GRAPH_API void init ();  Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isInitialized ();  Return true if and only if the SofaSimulationGraph library has been initialized. More...;  ; SOFA_SIMULATION_GRAPH_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isCleanedUp ();  Return true if and only if the SofaSimulationGraph library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ getSimulation(). Simulation* sofa::simulation::graph::getSimulation ; (; ). delete . Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::init ; (; ). Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isC",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html:1433,Integrability,depend,dependencies,1433,"isitor;  get all up objects respecting specified class_info and tags More...;  ; class  DAGNode;  ; class  DAGSimulation;  ; struct  CleanupCheck;  . Functions; Simulation * getSimulation ()=delete;  ; SOFA_SIMULATION_GRAPH_API void init ();  Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isInitialized ();  Return true if and only if the SofaSimulationGraph library has been initialized. More...;  ; SOFA_SIMULATION_GRAPH_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isCleanedUp ();  Return true if and only if the SofaSimulationGraph library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ getSimulation(). Simulation* sofa::simulation::graph::getSimulation ; (; ). delete . Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::init ; (; ). Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isCleanedUp ; (; ). Return true if and only if the SofaSimulationGraph library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isInitialized ; (; ). Return true if and only if the SofaSimulationGraph library has been initialized. . sofasimulationgraph; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html:1848,Integrability,depend,dependencies,1848,"isitor;  get all up objects respecting specified class_info and tags More...;  ; class  DAGNode;  ; class  DAGSimulation;  ; struct  CleanupCheck;  . Functions; Simulation * getSimulation ()=delete;  ; SOFA_SIMULATION_GRAPH_API void init ();  Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isInitialized ();  Return true if and only if the SofaSimulationGraph library has been initialized. More...;  ; SOFA_SIMULATION_GRAPH_API void cleanup ();  Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. More...;  ; SOFA_SIMULATION_GRAPH_API bool isCleanedUp ();  Return true if and only if the SofaSimulationGraph library has been cleaned up. More...;  . Function Documentation. ◆ cleanup(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::cleanup ; (; ). Clean up the resources used by the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ getSimulation(). Simulation* sofa::simulation::graph::getSimulation ; (; ). delete . Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_GRAPH_API void sofa::simulation::graph::init ; (; ). Initialize the SofaSimulationGraph library, as well as its dependencies: SofaSimulationCommon, SofaCore, SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isCleanedUp ; (; ). Return true if and only if the SofaSimulationGraph library has been cleaned up. . ◆ isInitialized(). SOFA_SIMULATION_GRAPH_API bool sofa::simulation::graph::isInitialized ; (; ). Return true if and only if the SofaSimulationGraph library has been initialized. . sofasimulationgraph; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1graph.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:723,Deployability,update,updateVisualContext,723,"﻿. SOFA API: sofa::simulation::node Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Functions . sofa::simulation::node Namespace Reference . Functions; sofa::simulation::Node * getNodeFrom (sofa::core::objectmodel::BaseContext *context);  ; sofa::core::objectmodel::BaseContext * toBaseContext (sofa::simulation::Node *node);  ; void initRoot (Node *root);  Initialize the objects. More...;  ; void init (Node *node);  Init a node without changing the context of the simulation. More...;  ; void exportInXML (Node *root, const char *fileName);  Print all object in the graph in XML format. More...;  ; void print (Node *root);  Print all object in the graph. More...;  ; void updateVisualContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void animate (Node *root, SReal dt=0.0);  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; void updateVisual (Node *root);  Update the Visual Models: triggers the Mappings. More...;  ; void reset (Node *root);  Reset to initial state. More...;  ; void initTextures (Node *root);  Initialize the textures. More...;  ; void updateContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init);  ; void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox);  ; void draw (sofa::core::visual::VisualParams *vparams, Node *root);  Render the scene. More...;  ; void exportOBJ (Node *root, const char *filename, bool exportMTL=true);  Export a scene to an OBJ 3D Scene. More...;  ; void exportGraph (Node *root, const char *filename=nullptr);  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; void dumpState (Node *root, std::ofstream &out);  Dump the current state in the given stream. More...;  ; NodeSPtr load (const std::stri",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:986,Deployability,update,updateVisual,986,"simulation::node Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Functions . sofa::simulation::node Namespace Reference . Functions; sofa::simulation::Node * getNodeFrom (sofa::core::objectmodel::BaseContext *context);  ; sofa::core::objectmodel::BaseContext * toBaseContext (sofa::simulation::Node *node);  ; void initRoot (Node *root);  Initialize the objects. More...;  ; void init (Node *node);  Init a node without changing the context of the simulation. More...;  ; void exportInXML (Node *root, const char *fileName);  Print all object in the graph in XML format. More...;  ; void print (Node *root);  Print all object in the graph. More...;  ; void updateVisualContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void animate (Node *root, SReal dt=0.0);  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; void updateVisual (Node *root);  Update the Visual Models: triggers the Mappings. More...;  ; void reset (Node *root);  Reset to initial state. More...;  ; void initTextures (Node *root);  Initialize the textures. More...;  ; void updateContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init);  ; void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox);  ; void draw (sofa::core::visual::VisualParams *vparams, Node *root);  Render the scene. More...;  ; void exportOBJ (Node *root, const char *filename, bool exportMTL=true);  Export a scene to an OBJ 3D Scene. More...;  ; void exportGraph (Node *root, const char *filename=nullptr);  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; void dumpState (Node *root, std::ofstream &out);  Dump the current state in the given stream. More...;  ; NodeSPtr load (const std::string &, bool reload=",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:1212,Deployability,update,updateContext,1212,"deFrom (sofa::core::objectmodel::BaseContext *context);  ; sofa::core::objectmodel::BaseContext * toBaseContext (sofa::simulation::Node *node);  ; void initRoot (Node *root);  Initialize the objects. More...;  ; void init (Node *node);  Init a node without changing the context of the simulation. More...;  ; void exportInXML (Node *root, const char *fileName);  Print all object in the graph in XML format. More...;  ; void print (Node *root);  Print all object in the graph. More...;  ; void updateVisualContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void animate (Node *root, SReal dt=0.0);  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; void updateVisual (Node *root);  Update the Visual Models: triggers the Mappings. More...;  ; void reset (Node *root);  Reset to initial state. More...;  ; void initTextures (Node *root);  Initialize the textures. More...;  ; void updateContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init);  ; void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox);  ; void draw (sofa::core::visual::VisualParams *vparams, Node *root);  Render the scene. More...;  ; void exportOBJ (Node *root, const char *filename, bool exportMTL=true);  Export a scene to an OBJ 3D Scene. More...;  ; void exportGraph (Node *root, const char *filename=nullptr);  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; void dumpState (Node *root, std::ofstream &out);  Dump the current state in the given stream. More...;  ; NodeSPtr load (const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  Load a scene from a file. More...;  ; void unload (NodeSPtr root);  Unload a scene from a Node. More...;  . Function Documentat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5428,Deployability,update,updateContext,5428,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5499,Deployability,update,updateContext,5499,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5617,Deployability,update,updateVisual,5617,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5687,Deployability,update,updateVisual,5687,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5774,Deployability,update,updateVisualContext,5774,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:5851,Deployability,update,updateVisualContext,5851,"st char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisualContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationnode; Generated on Mon Nov 11 2024 03:34:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:1980,Performance,load,load,1980,"s the Mappings. More...;  ; void reset (Node *root);  Reset to initial state. More...;  ; void initTextures (Node *root);  Initialize the textures. More...;  ; void updateContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init);  ; void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox);  ; void draw (sofa::core::visual::VisualParams *vparams, Node *root);  Render the scene. More...;  ; void exportOBJ (Node *root, const char *filename, bool exportMTL=true);  Export a scene to an OBJ 3D Scene. More...;  ; void exportGraph (Node *root, const char *filename=nullptr);  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; void dumpState (Node *root, std::ofstream &out);  Dump the current state in the given stream. More...;  ; NodeSPtr load (const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  Load a scene from a file. More...;  ; void unload (NodeSPtr root);  Unload a scene from a Node. More...;  . Function Documentation. ◆ animate(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::animate ; (; Node * ; root, . SReal ; dt . ). Execute one timestep. If dt is 0, the dt parameter in the graph will be used. . ◆ computeBBox(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::computeBBox ; (; Node * ; root, . SReal * ; minBBox, . SReal * ; maxBBox, . bool ; init = true . ). Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value WarningMechanicalObjects with showObject member set to false are ignored ; See alsocomputeTotalBBox(Node* root, SReal* minBBox, SReal* maxBBox) . ◆ computeTotalBBox(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::computeTotalBBox ; (; Node * ; root, . SReal * ; minBBox, . SReal * ; maxBBox . ). Compute the bo",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:4690,Performance,load,load,4690," in the graph in the given file (format is given by the filename extension) . ◆ exportInXML(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::exportInXML ; (; Node * ; root, . const char * ; fileName . ). Print all object in the graph in XML format. . ◆ exportOBJ(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::exportOBJ ; (; Node * ; root, . const char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updat",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:4756,Performance,load,load,4756,"filename extension) . ◆ exportInXML(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::exportInXML ; (; Node * ; root, . const char * ; fileName . ). Print all object in the graph in XML format. . ◆ exportOBJ(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::exportOBJ ; (; Node * ; root, . const char * ; filename, . bool ; exportMTL . ). Export a scene to an OBJ 3D Scene. . ◆ getNodeFrom(). SOFA_SIMULATION_CORE_API Node * sofa::simulation::node::getNodeFrom ; (; sofa::core::objectmodel::BaseContext * ; context). ◆ init(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::init ; (; Node * ; node). Init a node without changing the context of the simulation. . ◆ initRoot(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initRoot ; (; Node * ; root). Initialize the objects. . ◆ initTextures(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::initTextures ; (; Node * ; root). Initialize the textures. . ◆ load(). NodeSPtr SOFA_SIMULATION_CORE_API sofa::simulation::node::load ; (; const std::string & ; filename, . bool ; reload, . const std::vector< std::string > & ; sceneArgs . ). Load a scene from a file. . ◆ print(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::print ; (; Node * ; root). Print all object in the graph. . ◆ reset(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::reset ; (; Node * ; root). Reset to initial state. . ◆ toBaseContext(). SOFA_SIMULATION_CORE_API sofa::core::objectmodel::BaseContext * sofa::simulation::node::toBaseContext ; (; sofa::simulation::Node * ; node). ◆ unload(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::unload ; (; NodeSPtr ; root). Unload a scene from a Node. . ◆ updateContext(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateContext ; (; Node * ; root). Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). void SOFA_SIMULATION_CORE_API sofa::simulation::node::updateVisual ; (; Node * ; root). Update the Visual Models: t",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:1212,Performance,load,loadFromMemory,1212,"fa::simulation::xml Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Enumerations |; Functions |; Variables . sofa::simulation::xml Namespace Reference . Classes; class  AttributeElement;  ; class  BaseElement;  ; class  BaseMultiMappingElement;  ; class  DataElement;  ; class  Element;  ; class  NodeElement;  ; class  ObjectElement;  . Enumerations; enum  IncludeNodeType { INCLUDE_NODE_CHILD; , INCLUDE_NODE_GROUP; , INCLUDE_NODE_MERGE; };  Flags indicating when an element is from an included file that should be treated specifically. More...;  . Functions; void recReplaceAttribute (BaseElement *node, const char *attr, const char *value, const char *nodename=nullptr);  ; BaseElement * includeNode (tinyxml2::XMLNode *root, const char *basefilename);  ; BaseElement * attributeNode (tinyxml2::XMLNode *root, const char *basefilename);  ; void recursiveMergeNode (BaseElement *destNode, BaseElement *srcNode);  ; BaseElement * createNode (tinyxml2::XMLNode *root, const char *basefilename, bool isRoot=false);  ; BaseElement * processXMLLoading (const char *filename, const tinyxml2::XMLDocument &doc, bool fromMem);  ; BaseElement * loadFromMemory (const char *filename, const char *data);  ; BaseElement * loadFromFile (const char *filename);  ; SOFA_SIMULATION_COMMON_API bool save (const char *filename, BaseElement *root);  . Variables; Creator< BaseElement::NodeFactory, AttributeElement > AttributeNodeClass (""Attribute"");  ; Creator< BaseElement::NodeFactory, DataElement > DataNodeClass (""Data"");  ; helper::Creator< BaseElement::NodeFactory, NodeElement > NodeNodeClass (""Node"");  ; Creator< BaseElement::NodeFactory, ObjectElement > ObjectNodeClass (""Object"");  ; int numDefault =0;  . Enumeration Type Documentation. ◆ IncludeNodeType. enum sofa::simulation::xml::IncludeNodeType. Flags indicating when an element is from an included file that should be treated specifically. . EnumeratorINCLUDE_NODE_CHILD indicating a standa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:1286,Performance,load,loadFromFile,1286,"fa::simulation::xml Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Enumerations |; Functions |; Variables . sofa::simulation::xml Namespace Reference . Classes; class  AttributeElement;  ; class  BaseElement;  ; class  BaseMultiMappingElement;  ; class  DataElement;  ; class  Element;  ; class  NodeElement;  ; class  ObjectElement;  . Enumerations; enum  IncludeNodeType { INCLUDE_NODE_CHILD; , INCLUDE_NODE_GROUP; , INCLUDE_NODE_MERGE; };  Flags indicating when an element is from an included file that should be treated specifically. More...;  . Functions; void recReplaceAttribute (BaseElement *node, const char *attr, const char *value, const char *nodename=nullptr);  ; BaseElement * includeNode (tinyxml2::XMLNode *root, const char *basefilename);  ; BaseElement * attributeNode (tinyxml2::XMLNode *root, const char *basefilename);  ; void recursiveMergeNode (BaseElement *destNode, BaseElement *srcNode);  ; BaseElement * createNode (tinyxml2::XMLNode *root, const char *basefilename, bool isRoot=false);  ; BaseElement * processXMLLoading (const char *filename, const tinyxml2::XMLDocument &doc, bool fromMem);  ; BaseElement * loadFromMemory (const char *filename, const char *data);  ; BaseElement * loadFromFile (const char *filename);  ; SOFA_SIMULATION_COMMON_API bool save (const char *filename, BaseElement *root);  . Variables; Creator< BaseElement::NodeFactory, AttributeElement > AttributeNodeClass (""Attribute"");  ; Creator< BaseElement::NodeFactory, DataElement > DataNodeClass (""Data"");  ; helper::Creator< BaseElement::NodeFactory, NodeElement > NodeNodeClass (""Node"");  ; Creator< BaseElement::NodeFactory, ObjectElement > ObjectNodeClass (""Object"");  ; int numDefault =0;  . Enumeration Type Documentation. ◆ IncludeNodeType. enum sofa::simulation::xml::IncludeNodeType. Flags indicating when an element is from an included file that should be treated specifically. . EnumeratorINCLUDE_NODE_CHILD indicating a standa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:2782,Performance,load,loadFromFile,2782,"ype Documentation. ◆ IncludeNodeType. enum sofa::simulation::xml::IncludeNodeType. Flags indicating when an element is from an included file that should be treated specifically. . EnumeratorINCLUDE_NODE_CHILD indicating a standard node that should be used as child . INCLUDE_NODE_GROUP indicating a node that should be removed, and its content added within the parent node . INCLUDE_NODE_MERGE indicating a node that should be merged with its parent, and any child node with the same name as an existing child should be recursively merged . Function Documentation. ◆ attributeNode(). BaseElement* sofa::simulation::xml::attributeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ createNode(). BaseElement* sofa::simulation::xml::createNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename, . bool ; isRoot = false . ). ◆ includeNode(). BaseElement * sofa::simulation::xml::includeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ loadFromFile(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromFile ; (; const char * ; filename). ◆ loadFromMemory(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). ◆ processXMLLoading(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::processXMLLoading ; (; const char * ; filename, . const tinyxml2::XMLDocument & ; doc, . bool ; fromMem . ). ◆ recReplaceAttribute(). void sofa::simulation::xml::recReplaceAttribute ; (; BaseElement * ; node, . const char * ; attr, . const char * ; value, . const char * ; nodename = nullptr . ). ◆ recursiveMergeNode(). void sofa::simulation::xml::recursiveMergeNode ; (; BaseElement * ; destNode, . BaseElement * ; srcNode . ). ◆ save(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::xml::save ; (; const char * ; filename, . BaseElement * ; root . ). Variable Documentation. ◆ AttributeNodeClass. Creator<BaseElement::NodeFactory, A",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:2862,Performance,load,loadFromFile,2862,"l::IncludeNodeType. Flags indicating when an element is from an included file that should be treated specifically. . EnumeratorINCLUDE_NODE_CHILD indicating a standard node that should be used as child . INCLUDE_NODE_GROUP indicating a node that should be removed, and its content added within the parent node . INCLUDE_NODE_MERGE indicating a node that should be merged with its parent, and any child node with the same name as an existing child should be recursively merged . Function Documentation. ◆ attributeNode(). BaseElement* sofa::simulation::xml::attributeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ createNode(). BaseElement* sofa::simulation::xml::createNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename, . bool ; isRoot = false . ). ◆ includeNode(). BaseElement * sofa::simulation::xml::includeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ loadFromFile(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromFile ; (; const char * ; filename). ◆ loadFromMemory(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). ◆ processXMLLoading(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::processXMLLoading ; (; const char * ; filename, . const tinyxml2::XMLDocument & ; doc, . bool ; fromMem . ). ◆ recReplaceAttribute(). void sofa::simulation::xml::recReplaceAttribute ; (; BaseElement * ; node, . const char * ; attr, . const char * ; value, . const char * ; nodename = nullptr . ). ◆ recursiveMergeNode(). void sofa::simulation::xml::recursiveMergeNode ; (; BaseElement * ; destNode, . BaseElement * ; srcNode . ). ◆ save(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::xml::save ; (; const char * ; filename, . BaseElement * ; root . ). Variable Documentation. ◆ AttributeNodeClass. Creator<BaseElement::NodeFactory, AttributeElement> sofa::simulation::xml::AttributeNodeClass(""Att",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:2908,Performance,load,loadFromMemory,2908,"included file that should be treated specifically. . EnumeratorINCLUDE_NODE_CHILD indicating a standard node that should be used as child . INCLUDE_NODE_GROUP indicating a node that should be removed, and its content added within the parent node . INCLUDE_NODE_MERGE indicating a node that should be merged with its parent, and any child node with the same name as an existing child should be recursively merged . Function Documentation. ◆ attributeNode(). BaseElement* sofa::simulation::xml::attributeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ createNode(). BaseElement* sofa::simulation::xml::createNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename, . bool ; isRoot = false . ). ◆ includeNode(). BaseElement * sofa::simulation::xml::includeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ loadFromFile(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromFile ; (; const char * ; filename). ◆ loadFromMemory(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). ◆ processXMLLoading(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::processXMLLoading ; (; const char * ; filename, . const tinyxml2::XMLDocument & ; doc, . bool ; fromMem . ). ◆ recReplaceAttribute(). void sofa::simulation::xml::recReplaceAttribute ; (; BaseElement * ; node, . const char * ; attr, . const char * ; value, . const char * ; nodename = nullptr . ). ◆ recursiveMergeNode(). void sofa::simulation::xml::recursiveMergeNode ; (; BaseElement * ; destNode, . BaseElement * ; srcNode . ). ◆ save(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::xml::save ; (; const char * ; filename, . BaseElement * ; root . ). Variable Documentation. ◆ AttributeNodeClass. Creator<BaseElement::NodeFactory, AttributeElement> sofa::simulation::xml::AttributeNodeClass(""Attribute"") ; (; ""Attribute"" ; ). ◆ DataNodeClass. Creator<BaseElem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html:2990,Performance,load,loadFromMemory,2990,"CLUDE_NODE_CHILD indicating a standard node that should be used as child . INCLUDE_NODE_GROUP indicating a node that should be removed, and its content added within the parent node . INCLUDE_NODE_MERGE indicating a node that should be merged with its parent, and any child node with the same name as an existing child should be recursively merged . Function Documentation. ◆ attributeNode(). BaseElement* sofa::simulation::xml::attributeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ createNode(). BaseElement* sofa::simulation::xml::createNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename, . bool ; isRoot = false . ). ◆ includeNode(). BaseElement * sofa::simulation::xml::includeNode ; (; tinyxml2::XMLNode * ; root, . const char * ; basefilename . ). ◆ loadFromFile(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromFile ; (; const char * ; filename). ◆ loadFromMemory(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). ◆ processXMLLoading(). SOFA_SIMULATION_COMMON_API BaseElement * sofa::simulation::xml::processXMLLoading ; (; const char * ; filename, . const tinyxml2::XMLDocument & ; doc, . bool ; fromMem . ). ◆ recReplaceAttribute(). void sofa::simulation::xml::recReplaceAttribute ; (; BaseElement * ; node, . const char * ; attr, . const char * ; value, . const char * ; nodename = nullptr . ). ◆ recursiveMergeNode(). void sofa::simulation::xml::recursiveMergeNode ; (; BaseElement * ; destNode, . BaseElement * ; srcNode . ). ◆ save(). SOFA_SIMULATION_COMMON_API bool sofa::simulation::xml::save ; (; const char * ; filename, . BaseElement * ; root . ). Variable Documentation. ◆ AttributeNodeClass. Creator<BaseElement::NodeFactory, AttributeElement> sofa::simulation::xml::AttributeNodeClass(""Attribute"") ; (; ""Attribute"" ; ). ◆ DataNodeClass. Creator<BaseElement::NodeFactory, DataElement> sofa::simulation::xml::DataNodeClas",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1xml.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:2913,Availability,error,error,2913,"&v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; void setRot (typename DataTypes::Coord &coord, const sofa::type::Quat< SReal > &rot);  ; template<class DataTypes > ; DataTypes::Coord createCoord (const sofa::type::Vec3 &pos, const sofa::type::Quat< SReal > &rot);  Create a coord of the specified type from a Vec3 and a Quater. More...;  ; template<sofa::Size N, class real > ; void EXPECT_VEC_DOUBLE_EQ (sofa::type::Vec< N, real > const &expected, sofa::type::Vec< N, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to in",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3413,Availability,failure,failure,3413,"eal > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3593,Availability,failure,failure,3593,"l > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToDa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:6509,Availability,error,error,6509,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3833,Deployability,install,install,3833,"::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3893,Deployability,install,install,3893,"erence delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4038,Deployability,install,installation,4038,"ses); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . v",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:1218,Integrability,depend,dependencies,1218,"t  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; void setRot (typename DataTypes::Coord &coord, const sofa::type::Quat< SReal > &rot);  ; template<class DataTypes > ; DataTypes::Coord createCoord (const sofa::type::Vec3 &pos, const sofa::type::Quat< SReal >",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:1477,Integrability,depend,dependencies,1477,"cTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; void setRot (typename DataTypes::Coord &coord, const sofa::type::Quat< SReal > &rot);  ; template<class DataTypes > ; DataTypes::Coord createCoord (const sofa::type::Vec3 &pos, const sofa::type::Quat< SReal > &rot);  Create a coord of the specified type from a Vec3 and a Quater. More...;  ; template<sofa::Size N, class real > ; void EXPECT_VEC_DOUBLE_EQ (sofa::type::Vec< N, real > const &expected, sofa::type::Vec< N, real > const &actual);  ; template<sofa::Size L, sofa::Size ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3288,Integrability,message,message,3288,"and a Quater. More...;  ; template<sofa::Size N, class real > ; void EXPECT_VEC_DOUBLE_EQ (sofa::type::Vec< N, real > const &expected, sofa::type::Vec< N, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3428,Integrability,message,message,3428,"eal > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). tem",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3550,Integrability,message,message,3550,"MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3608,Integrability,message,message,3608,"l > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToDa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3905,Integrability,message,message,3905,"erence delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4358,Integrability,depend,dependencies,4358,"MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_N",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5816,Integrability,depend,dependencies,5816,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:422,Modifiability,portab,portable,422,"﻿. SOFA API: sofa::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::testing Namespace Reference . Classes; struct  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3759,Performance,load,load,3759,"::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the D",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::testing Namespace Reference . Classes; struct  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:164,Testability,test,testing,164,"﻿. SOFA API: sofa::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::testing Namespace Reference . Classes; struct  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:300,Testability,test,test,300,"﻿. SOFA API: sofa::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::testing Namespace Reference . Classes; struct  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3276,Testability,test,test,3276,"and a Quater. More...;  ; template<sofa::Size N, class real > ; void EXPECT_VEC_DOUBLE_EQ (sofa::type::Vec< N, real > const &expected, sofa::type::Vec< N, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_DOUBLE_EQ (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual);  ; template<sofa::Size L, sofa::Size C, class real > ; void EXPECT_MAT_NEAR (sofa::type::Mat< L, C, real > const &expected, sofa::type::Mat< L, C, real > const &actual, real abs_error);  . Variables; const SReal g_minDeltaErrorRatio = .1;  acceptable ratio between finite difference delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testin",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4261,Testability,test,testing,4261," is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4475,Testability,test,testing,4475,"express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4662,Testability,test,testing,4662," b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, rea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:4860,Testability,test,testing,4860,"that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initia",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5119,Testability,test,testing,5119,"y if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5342,Testability,test,testing,5342,"DefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation.",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5571,Testability,test,testing,5571,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5742,Testability,test,testing,5742,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5863,Testability,test,testing,5863,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:5940,Testability,test,testing,5940,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:6091,Testability,test,testing,6091,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:6249,Testability,test,testing,6249,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:6420,Testability,test,testing,6420,"a(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa::type::Vec3 & ; pos, . const sofa::type::Quat< SReal > & ; rot . ). Create a coord of the specified type from a Vec3 and a Quater. . ◆ EXPECT_MAT_DOUBLE_EQ(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_DOUBLE_EQ ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual . ). ◆ EXPECT_MAT_NEAR(). template<sofa::Size L, sofa::Size C, class real > . void sofa::testing::EXPECT_MAT_NEAR ; (; sofa::type::Mat< L, C, real > const & ; expected, . sofa::type::Mat< L, C, real > const & ; actual, . real ; abs_error . ). ◆ EXPECT_VEC_DOUBLE_EQ(). template<sofa::Size N, class real > . void sofa::testing::EXPECT_VEC_DOUBLE_EQ ; (; sofa::type::Vec< N, real > const & ; expected, . sofa::type::Vec< N, real > const & ; actual . ). ◆ init(). SOFA_TESTING_API void sofa::testing::init ; (; ). Initialize the Sofa.Testing library, as well as its dependencies. . ◆ initializeOnce(). void sofa::testing::initializeOnce ; (; ). ◆ isCleanedUp(). SOFA_TESTING_API bool sofa::testing::isCleanedUp ; (; ). Return true if and only if the Sofa.Testing library has been cleaned up. . ◆ isInitialized(). SOFA_TESTING_API bool sofa::testing::isInitialized ; (; ). Return true if and only if theSofa.Testing library has been initialized. . ◆ setRot(). template<class DataTypes > . void sofa::testing::setRot ; (; typename DataTypes::Coord & ; coord, . const sofa::type::Quat< SReal > & ; rot . ). Variable Documentation. ◆ g_minDeltaErrorRatio. const SReal sofa::testing::g_minDeltaErrorRatio = .1. acceptable ratio between finite difference delta and error threshold . sofatesting; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:397,Usability,simpl,simple,397,"﻿. SOFA API: sofa::testing Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::testing Namespace Reference . Classes; struct  SparseMatrixTest;  ; class  BaseSimulationTest;  ; class  BaseTest;  Base class for Sofa test fixtures. More...;  ; struct  CleanupCheck;  ; class  LinearCongruentialRandomGenerator;  A simple deterministic and portable random number generator. More...;  ; struct  NumericTest;  Helper functions to compare scalars, vectors, matrices, etc. More...;  ; struct  data_traits;  ; struct  setRotWrapper;  ; struct  setRotWrapper< DataTypes, N, true >;  ; struct  setRotWrapper< DataTypes, 2, false >;  ; struct  setRotWrapper< DataTypes, N, false >;  ; class  GtestMessageFrame;  ; class  GtestMessageFrameFailure;  ; class  GtestMessageFrameFailureWhenMissing;  ; class  GtestMessageFrameIgnore;  ; class  GtestMessageHandler;  ; class  MainGtestMessageHandlerPrivate;  ; class  MessageAsTestFailure;  ; class  ExpectMessage;  ; class  IgnoreMessage;  ; class  MainGtestMessageHandler;  . Functions; void initializeOnce ();  ; SOFA_TESTING_API void init ();  Initialize the Sofa.Testing library, as well as its dependencies. More...;  ; SOFA_TESTING_API bool isInitialized ();  Return true if and only if theSofa.Testing library has been initialized. More...;  ; SOFA_TESTING_API void cleanup ();  Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. More...;  ; SOFA_TESTING_API bool isCleanedUp ();  Return true if and only if the Sofa.Testing library has been cleaned up. More...;  ; template<class Vector , class ReadData > ; void copyFromData (Vector &v, const ReadData &d);  Resize the Vector and copy it from the Data. More...;  ; template<class WriteData , class Vector > ; void copyToData (WriteData &d, const Vector &v);  Copy the Vector to the Data. They must have the same size. More...;  ; template<class DataTypes > ; ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1testing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:1983,Availability,error,error,1983,"Init;  Same as Quat except the values are not initialized by default. More...;  ; class  Ray;  ; class  RGBAColor;  encode a 4 RGBA component color More...;  ; class  SpatialVector;  ; class  SVector;  Same as type::vector, + delimiters on serialization. More...;  ; struct  HasRebindTypedef;  ; struct  HasRebindTypedef< T, OtherType, std::void_t< typename T::template rebind_to< OtherType > > >;  ; struct  Rebind;  ; struct  Rebind< _T, _OtherType, std::enable_if_t< HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do have a nested rebind_to member. In this implementation, Rebind has a public member typedef to. It corresponds to the typedef rebind_to. More...;  ; struct  Rebind< _T, _OtherType, std::enable_if_t<!HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do NOT have a nested rebind_to member. In this implementation, Rebind has no public member typedef to. If this implementation is chosen by the compiler (the number of template parameters is probably different from 1), a compilation error occurs. More...;  ; struct  Rebind< _T< A >, _OtherType, std::enable_if_t<!HasRebindTypedef< _T< A >, _OtherType >::value > >;  Specialization for types that do NOT have a nested rebind_to member. In this implementation, Rebind has a public member typedef to. More...;  ; class  Transform;  ; struct  NoInit;  ; class  vector_device;  ; class  CPUMemoryManager;  ; class  vector;  . Typedefs; typedef Vec< 1, float > Vec1f;  ; typedef Vec< 1, double > Vec1d;  ; typedef Vec< 1, int > Vec1i;  ; typedef Vec< 1, unsigned > Vec1u;  ; typedef Vec< 1, SReal > Vec1;  ; typedef Vec< 2, float > Vec2f;  ; typedef Vec< 2, double > Vec2d;  ; typedef Vec< 2, int > Vec2i;  ; typedef Vec< 2, unsigned > Vec2u;  ; typedef Vec< 2, SReal > Vec2;  ; typedef Vec< 3, float > Vec3f;  ; typedef Vec< 3, double > Vec3d;  ; typedef Vec< 3, int > Vec3i;  ; typedef Vec< 3, unsigned > Vec3u;  ; typedef Vec< 3, SReal > Vec3;  ; typedef Vec< 4, float > Vec4f;",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:27194,Availability,error,error,27194,"typedef Mat<6, 6, float> sofa::type::Mat6x6f. ◆ Matrix2. typedef Mat<2,2,SReal> sofa::type::Matrix2. ◆ Matrix3. typedef Mat<3,3,SReal> sofa::type::Matrix3. ◆ Matrix4. typedef Mat<4,4,SReal> sofa::type::Matrix4. ◆ Quatd. using sofa::type::Quatd = typedef type::Quat<double>. ◆ Quatf. using sofa::type::Quatf = typedef type::Quat<float>. ◆ rebind_to. template<class T , class B > . using sofa::type::rebind_to = typedef typename Rebind<T, B>::to. Convenient alias to ease usage of Rebind.; Example: 1) sofa::type::rebind_to< sofa::type::vector<int>, float> is of type sofa::type::vector<float>. In this example, sofa::type::vector has a typedef rebind_to that will be used to deduce the type. 2) sofa::type::rebind_to< sofa::type::Quat<float>, double> is of type sofa::type::Quat<double>. In this example, sofa::type::Quat does not have a typdef rebind_to. 3) It makes no sense to use sofa::type::rebind on types having more than one template parameter, such as sofa::type::fixed_array. A compilation error would occur. . ◆ stable_vector. template<class T , class A = std::allocator<T>> . using sofa::type::stable_vector = typedef boost::container::stable_vector<T,A>. ◆ Vec1. typedef Vec<1,SReal> sofa::type::Vec1. ◆ Vec1d. typedef Vec<1,double> sofa::type::Vec1d. ◆ Vec1f. typedef Vec<1,float> sofa::type::Vec1f. ◆ Vec1i. typedef Vec<1,int> sofa::type::Vec1i. ◆ Vec1u. typedef Vec<1,unsigned> sofa::type::Vec1u. ◆ Vec2. typedef Vec<2,SReal> sofa::type::Vec2. ◆ Vec2d. typedef Vec<2,double> sofa::type::Vec2d. ◆ Vec2f. typedef Vec<2,float> sofa::type::Vec2f. ◆ Vec2i. typedef Vec<2,int> sofa::type::Vec2i. ◆ Vec2u. typedef Vec<2,unsigned> sofa::type::Vec2u. ◆ Vec3. typedef Vec<3,SReal> sofa::type::Vec3. ◆ Vec3d. typedef Vec<3,double> sofa::type::Vec3d. ◆ Vec3f. typedef Vec<3,float> sofa::type::Vec3f. ◆ Vec3i. typedef Vec<3,int> sofa::type::Vec3i. ◆ Vec3u. typedef Vec<3,unsigned> sofa::type::Vec3u. ◆ Vec4. typedef Vec<4,SReal> sofa::type::Vec4. ◆ Vec4d. typedef Vec<4,double> sofa::type::Vec4d. ◆ ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:33505,Availability,error,error,33505,"terminant of a 3x3 matrix. . ◆ diagonal(). template<sofa::Size N, class real > . constexpr Vec<N,real> sofa::type::diagonal ; (; const Mat< N, N, real > & ; m). constexpr . diagonal of a square matrix . ◆ dot() [1/2]. template<class V1 , class V2 > . SReal sofa::type::dot ; (; const V1 & ; vector1, . const V2 & ; vector2 . ). Dot product of two vectors. . ◆ dot() [2/2]. template<sofa::Size N, typename real > . constexpr real sofa::type::dot ; (; const Vec< N, real > & ; a, . const Vec< N, real > & ; b . ). constexprnoexcept . Dot product (alias for operator*) . ◆ dyad(). template<class Tu , class Tv > . constexpr Mat<Tu::size(), Tv::size(), typename Tu::value_type> sofa::type::dyad ; (; const Tu & ; u, . const Tv & ; v . ). constexprnoexcept . Create a matrix as . . ◆ getInteger(). SOFA_TYPE_API int sofa::type::getInteger ; (; const std::string & ; s, . std::stringstream & ; msg, . unsigned int & ; numErrors . ). Convert the string 's' into an unsigned int. The error are reported in msg & numErrors is incremented. . ◆ getUnsignedInteger(). SOFA_TYPE_API unsigned int sofa::type::getUnsignedInteger ; (; const std::string & ; s, . std::stringstream & ; msg, . unsigned int & ; numErrors . ). Convert the string 's' into an unsigned int. The error are reported in msg & numErrors is incremented. . ◆ infNorm(). template<class real > . real sofa::type::infNorm ; (; const Mat< 3, 3, real > & ; A). ◆ init(). SOFA_TYPE_API void sofa::type::init ; (; ). Initialize the SofaHelper library. . ◆ invertMatrix() [1/7]. template<class real > . constexpr bool sofa::type::invertMatrix ; (; Mat< 1, 1, real > & ; dest, . const Mat< 1, 1, real > & ; from . ). constexpr . Matrix inversion (special case 1x1). . ◆ invertMatrix() [2/7]. template<class real > . constexpr bool sofa::type::invertMatrix ; (; Mat< 2, 2, real > & ; dest, . const Mat< 2, 2, real > & ; from . ). constexpr . Matrix inversion (special case 2x2). . ◆ invertMatrix() [3/7]. template<class real > . constexpr bool sofa::type:",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:33785,Availability,error,error,33785,"nst V1 & ; vector1, . const V2 & ; vector2 . ). Dot product of two vectors. . ◆ dot() [2/2]. template<sofa::Size N, typename real > . constexpr real sofa::type::dot ; (; const Vec< N, real > & ; a, . const Vec< N, real > & ; b . ). constexprnoexcept . Dot product (alias for operator*) . ◆ dyad(). template<class Tu , class Tv > . constexpr Mat<Tu::size(), Tv::size(), typename Tu::value_type> sofa::type::dyad ; (; const Tu & ; u, . const Tv & ; v . ). constexprnoexcept . Create a matrix as . . ◆ getInteger(). SOFA_TYPE_API int sofa::type::getInteger ; (; const std::string & ; s, . std::stringstream & ; msg, . unsigned int & ; numErrors . ). Convert the string 's' into an unsigned int. The error are reported in msg & numErrors is incremented. . ◆ getUnsignedInteger(). SOFA_TYPE_API unsigned int sofa::type::getUnsignedInteger ; (; const std::string & ; s, . std::stringstream & ; msg, . unsigned int & ; numErrors . ). Convert the string 's' into an unsigned int. The error are reported in msg & numErrors is incremented. . ◆ infNorm(). template<class real > . real sofa::type::infNorm ; (; const Mat< 3, 3, real > & ; A). ◆ init(). SOFA_TYPE_API void sofa::type::init ; (; ). Initialize the SofaHelper library. . ◆ invertMatrix() [1/7]. template<class real > . constexpr bool sofa::type::invertMatrix ; (; Mat< 1, 1, real > & ; dest, . const Mat< 1, 1, real > & ; from . ). constexpr . Matrix inversion (special case 1x1). . ◆ invertMatrix() [2/7]. template<class real > . constexpr bool sofa::type::invertMatrix ; (; Mat< 2, 2, real > & ; dest, . const Mat< 2, 2, real > & ; from . ). constexpr . Matrix inversion (special case 2x2). . ◆ invertMatrix() [3/7]. template<class real > . constexpr bool sofa::type::invertMatrix ; (; Mat< 3, 3, real > & ; dest, . const Mat< 3, 3, real > & ; from . ). constexpr . Matrix inversion (special case 3x3). . ◆ invertMatrix() [4/7]. template<sofa::Size S, class real > . bool sofa::type::invertMatrix ; (; Mat< S, S, real > & ; dest, . const Mat< S, S",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:30218,Energy Efficiency,efficient,efficient,30218,"on of L . ◆ cholDcmp(). template<Size n, class real > . bool sofa::type::cholDcmp ; (; Mat< n, n, real > & ; L, . const Mat< n, n, real > & ; M . ). Cholesky decomposition: compute triangular matrix L such that M=L.Lt PreconditionM must be symmetric positive definite returns false is the decomposition fails . ◆ cholInv(). template<Size n, class real > . bool sofa::type::cholInv ; (; Mat< n, n, real > & ; Inv, . const Mat< n, n, real > & ; M . ). Inversion of a positive symmetric definite (PSD) matrix using a Cholesky decomposition. Returns false if the matrix is not PSD. . ◆ cholSlv(). template<Size n, class real > . bool sofa::type::cholSlv ; (; Vec< n, real > & ; x, . const Mat< n, n, real > & ; M, . const Vec< n, real > & ; b . ). Cholesky solution: solve the system Mx=b using a Cholesky decomposition. PreconditionM must be symmetric positive definite Returns false is the decomposition fails. If you have several solutions to perform with the same matrix M and different vectors b, it is more efficient to factor the matrix once and then use back-substitution for each vector. . ◆ cleanup(). SOFA_TYPE_API void sofa::type::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ cond(). template<int m, int n, typename Real > . Real sofa::type::cond ; (; Mat< m, n, Real > & ; a). return the condition number of the matrix a following the euclidean norm (using the svd decomposition to find singular values) . ◆ cross() [1/2]. template<typename real1 , typename real2 > . constexpr real1 sofa::type::cross ; (; const type::Vec< 2, real1 > & ; a, . const type::Vec< 2, real2 > & ; b . ). constexprnoexcept . Cross product for 2-elements vectors. . ◆ cross() [2/2]. template<typename real1 , typename real2 > . constexpr Vec<3,real1> sofa::type::cross ; (; const Vec< 3, real1 > & ; a, . const Vec< 3, real2 > & ; b . ). constexprnoexcept . Cross product for 3-elements vectors. . ◆ crossProductMatrix(). template<class Real > . constexpr Mat<3, 3, Real> sofa::type::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:30151,Performance,perform,perform,30151,"on of L . ◆ cholDcmp(). template<Size n, class real > . bool sofa::type::cholDcmp ; (; Mat< n, n, real > & ; L, . const Mat< n, n, real > & ; M . ). Cholesky decomposition: compute triangular matrix L such that M=L.Lt PreconditionM must be symmetric positive definite returns false is the decomposition fails . ◆ cholInv(). template<Size n, class real > . bool sofa::type::cholInv ; (; Mat< n, n, real > & ; Inv, . const Mat< n, n, real > & ; M . ). Inversion of a positive symmetric definite (PSD) matrix using a Cholesky decomposition. Returns false if the matrix is not PSD. . ◆ cholSlv(). template<Size n, class real > . bool sofa::type::cholSlv ; (; Vec< n, real > & ; x, . const Mat< n, n, real > & ; M, . const Vec< n, real > & ; b . ). Cholesky solution: solve the system Mx=b using a Cholesky decomposition. PreconditionM must be symmetric positive definite Returns false is the decomposition fails. If you have several solutions to perform with the same matrix M and different vectors b, it is more efficient to factor the matrix once and then use back-substitution for each vector. . ◆ cleanup(). SOFA_TYPE_API void sofa::type::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ cond(). template<int m, int n, typename Real > . Real sofa::type::cond ; (; Mat< m, n, Real > & ; a). return the condition number of the matrix a following the euclidean norm (using the svd decomposition to find singular values) . ◆ cross() [1/2]. template<typename real1 , typename real2 > . constexpr real1 sofa::type::cross ; (; const type::Vec< 2, real1 > & ; a, . const type::Vec< 2, real2 > & ; b . ). constexprnoexcept . Cross product for 2-elements vectors. . ◆ cross() [2/2]. template<typename real1 , typename real2 > . constexpr Vec<3,real1> sofa::type::cross ; (; const Vec< 3, real1 > & ; a, . const Vec< 3, real2 > & ; b . ). constexprnoexcept . Cross product for 3-elements vectors. . ◆ crossProductMatrix(). template<class Real > . constexpr Mat<3, 3, Real> sofa::type::",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:769,Safety,detect,detect,769,"﻿. SOFA API: sofa::type Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::type Namespace Reference . for std::pair ; More... Namespaces;  pairwise;  ;  trait;  . Classes; class  BoundingBox;  ; class  TBoundingBox;  ; class  BoundingBox2D;  bounding rectangle More...;  ; class  BoundingBox1D;  bounding interval More...;  ; class  DualQuatCoord3;  ; class  fixed_array;  ; class  Frame;  ; class  Vec;  ; class  VecNoInit;  Same as Vec except the values are not initialized by default. More...;  ; class  Mat;  ; class  MatNoInit;  Same as Mat except the values are not initialized by default. More...;  ; class  Quat;  ; struct  CleanupCheck;  ; struct  detect;  ; struct  detect< T, Op, void_t< Op< T > > >;  ; class  Material;  ; class  MatSym;  ; class  PrimitiveGroup;  ; struct  qNoInit;  ; class  QuatNoInit;  Same as Quat except the values are not initialized by default. More...;  ; class  Ray;  ; class  RGBAColor;  encode a 4 RGBA component color More...;  ; class  SpatialVector;  ; class  SVector;  Same as type::vector, + delimiters on serialization. More...;  ; struct  HasRebindTypedef;  ; struct  HasRebindTypedef< T, OtherType, std::void_t< typename T::template rebind_to< OtherType > > >;  ; struct  Rebind;  ; struct  Rebind< _T, _OtherType, std::enable_if_t< HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do have a nested rebind_to member. In this implementation, Rebind has a public member typedef to. It corresponds to the typedef rebind_to. More...;  ; struct  Rebind< _T, _OtherType, std::enable_if_t<!HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do NOT have a nested rebind_to member. In this implementation, Rebind has no public member typedef to. If this implementation is chosen by the compiler (the number of template parameters is probably different from 1), a compilation error occurs. More",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:788,Safety,detect,detect,788,"﻿. SOFA API: sofa::type Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::type Namespace Reference . for std::pair ; More... Namespaces;  pairwise;  ;  trait;  . Classes; class  BoundingBox;  ; class  TBoundingBox;  ; class  BoundingBox2D;  bounding rectangle More...;  ; class  BoundingBox1D;  bounding interval More...;  ; class  DualQuatCoord3;  ; class  fixed_array;  ; class  Frame;  ; class  Vec;  ; class  VecNoInit;  Same as Vec except the values are not initialized by default. More...;  ; class  Mat;  ; class  MatNoInit;  Same as Mat except the values are not initialized by default. More...;  ; class  Quat;  ; struct  CleanupCheck;  ; struct  detect;  ; struct  detect< T, Op, void_t< Op< T > > >;  ; class  Material;  ; class  MatSym;  ; class  PrimitiveGroup;  ; struct  qNoInit;  ; class  QuatNoInit;  Same as Quat except the values are not initialized by default. More...;  ; class  Ray;  ; class  RGBAColor;  encode a 4 RGBA component color More...;  ; class  SpatialVector;  ; class  SVector;  Same as type::vector, + delimiters on serialization. More...;  ; struct  HasRebindTypedef;  ; struct  HasRebindTypedef< T, OtherType, std::void_t< typename T::template rebind_to< OtherType > > >;  ; struct  Rebind;  ; struct  Rebind< _T, _OtherType, std::enable_if_t< HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do have a nested rebind_to member. In this implementation, Rebind has a public member typedef to. It corresponds to the typedef rebind_to. More...;  ; struct  Rebind< _T, _OtherType, std::enable_if_t<!HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do NOT have a nested rebind_to member. In this implementation, Rebind has no public member typedef to. If this implementation is chosen by the compiler (the number of template parameters is probably different from 1), a compilation error occurs. More",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:5913,Safety,detect,detect,5913,"xed_array< double, 1 >;  ; using FixedArray2f = fixed_array< float, 2 >;  ; using FixedArray2d = fixed_array< double, 2 >;  ; using FixedArray3f = fixed_array< float, 3 >;  ; using FixedArray3d = fixed_array< double, 3 >;  ; using FixedArray4f = fixed_array< float, 4 >;  ; using FixedArray4d = fixed_array< double, 4 >;  ; using FixedArray5f = fixed_array< float, 5 >;  ; using FixedArray5d = fixed_array< double, 5 >;  ; using FixedArray6f = fixed_array< float, 6 >;  ; using FixedArray6d = fixed_array< double, 6 >;  ; using FixedArray7f = fixed_array< float, 7 >;  ; using FixedArray7d = fixed_array< double, 7 >;  ; using FixedArray8f = fixed_array< float, 8 >;  ; using FixedArray8d = fixed_array< double, 8 >;  ; template<typename... > ; using void_t = void;  ; template<typename T > ; using isRigid_t = decltype(std::declval< typename T::Coord >().getOrientation());  ; template<typename T > ; using isRigidType = detect< T, isRigid_t >;  ; template<class T , class A = std::allocator<T>> ; using stable_vector = boost::container::stable_vector< T, A >;  ; template<class T , class B > ; using rebind_to = typename Rebind< T, B >::to;  . Functions; BoundingBox::bbox_t make_neutralBBox ();  ; template<typename... Ts> ; constexpr auto make_array (Ts &&... ts) -> fixed_array< std::common_type_t< Ts... >, sizeof...(Ts)>;  ; template<typename T , sofa::Size N> ; constexpr sofa::type::fixed_array< T, N > makeHomogeneousArray (const T &value);  Builds a fixed_array in which all elements have the same value. More...;  ; template<typename FixedArray > ; constexpr FixedArray makeHomogeneousArray (const typename FixedArray::value_type &value);  Builds a fixed_array in which all elements have the same value. More...;  ; template<typename T , sofa::Size N> ; constexpr bool operator< (const fixed_array< T, N > &v1, const fixed_array< T, N > &v2) noexcept;  Checks if v1 is lexicographically less than v2. Similar to std::lexicographical_compare. More...;  ; template<typename T , sofa::Size N>",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:25337,Safety,detect,detect,25337,"ofa::type::FixedArray6i = typedef fixed_array<int, 6>. ◆ FixedArray6I. using sofa::type::FixedArray6I = typedef fixed_array<unsigned int, 6>. ◆ FixedArray7d. using sofa::type::FixedArray7d = typedef fixed_array<double, 7>. ◆ FixedArray7f. using sofa::type::FixedArray7f = typedef fixed_array<float, 7>. ◆ FixedArray7i. using sofa::type::FixedArray7i = typedef fixed_array<int, 7>. ◆ FixedArray7I. using sofa::type::FixedArray7I = typedef fixed_array<unsigned int, 7>. ◆ FixedArray8d. using sofa::type::FixedArray8d = typedef fixed_array<double, 8>. ◆ FixedArray8f. using sofa::type::FixedArray8f = typedef fixed_array<float, 8>. ◆ FixedArray8i. using sofa::type::FixedArray8i = typedef fixed_array<int, 8>. ◆ FixedArray8I. using sofa::type::FixedArray8I = typedef fixed_array<unsigned int, 8>. ◆ isRigid_t. template<typename T > . using sofa::type::isRigid_t = typedef decltype(std::declval<typename T::Coord>().getOrientation()). ◆ isRigidType. template<typename T > . using sofa::type::isRigidType = typedef detect<T, isRigid_t>. ◆ Mat1x1d. typedef Mat<1,1,double> sofa::type::Mat1x1d. ◆ Mat1x1f. typedef Mat<1,1,float> sofa::type::Mat1x1f. ◆ Mat2x2. typedef Mat<2,2,SReal> sofa::type::Mat2x2. ◆ Mat2x2d. typedef Mat<2,2,double> sofa::type::Mat2x2d. ◆ Mat2x2f. typedef Mat<2,2,float> sofa::type::Mat2x2f. ◆ Mat3x3. typedef Mat<3,3,SReal> sofa::type::Mat3x3. ◆ Mat3x3d. typedef Mat<3,3,double> sofa::type::Mat3x3d. ◆ Mat3x3f. typedef Mat<3,3,float> sofa::type::Mat3x3f. ◆ Mat3x4d. typedef Mat<3,4,double> sofa::type::Mat3x4d. ◆ Mat3x4f. typedef Mat<3,4,float> sofa::type::Mat3x4f. ◆ Mat4x4. typedef Mat<4,4,SReal> sofa::type::Mat4x4. ◆ Mat4x4d. typedef Mat<4,4,double> sofa::type::Mat4x4d. ◆ Mat4x4f. typedef Mat<4,4,float> sofa::type::Mat4x4f. ◆ Mat6x6. typedef Mat<6,6,SReal> sofa::type::Mat6x6. ◆ Mat6x6d. typedef Mat<6, 6, double> sofa::type::Mat6x6d. ◆ Mat6x6f. typedef Mat<6, 6, float> sofa::type::Mat6x6f. ◆ Matrix2. typedef Mat<2,2,SReal> sofa::type::Matrix2. ◆ Matrix3. typedef Mat<3,3,SRea",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html:354,Availability,avail,available,354,"﻿. SOFA API: sofa::type::pairwise Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Functions . sofa::type::pairwise Namespace Reference . Functions; template<class T > ; const T & stdclamp (const T &v, const T &lo, const T &hi);  clamp a single value. This function should be removed when std::clamp will be available More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; T clamp (const T &in, const TT &minValue, const TT &maxValue);  clamp all the values of a fixed_array to be within a given interval. More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; constexpr T operator+ (const T &l, const T &r);  pairwise add of two fixed_array More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; constexpr T operator- (const T &l, const T &r);  pairwise subtract of two fixed_array More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; T operator* (const T &r, const typename T::value_type &f);  multiply from l the r components. More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; T operator/ (const T &r, const typename T::value_type &f);  multiply from l the r components. More...;  . Function Documentation. ◆ clamp(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . T sofa::type::pairwise::clamp ; (; const T & ; in, . const TT & ; minValue, . const TT & ; maxValue . ). clamp all the values of a fixed_array to be within a given interval. . ◆ operator*(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . T sofa::type::pairwise::operator* ; (; const T & ; r, . const typename T::value_type & ; f . ). multiply from l the r components. . ◆ operator+(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . constexpr T sofa::type::pairwise",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html:2779,Availability,avail,available,2779,"expr T operator- (const T &l, const T &r);  pairwise subtract of two fixed_array More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; T operator* (const T &r, const typename T::value_type &f);  multiply from l the r components. More...;  ; template<class T , class TT = typename T::value_type, size_t TN = T::static_size> ; T operator/ (const T &r, const typename T::value_type &f);  multiply from l the r components. More...;  . Function Documentation. ◆ clamp(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . T sofa::type::pairwise::clamp ; (; const T & ; in, . const TT & ; minValue, . const TT & ; maxValue . ). clamp all the values of a fixed_array to be within a given interval. . ◆ operator*(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . T sofa::type::pairwise::operator* ; (; const T & ; r, . const typename T::value_type & ; f . ). multiply from l the r components. . ◆ operator+(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . constexpr T sofa::type::pairwise::operator+ ; (; const T & ; l, . const T & ; r . ). constexpr . pairwise add of two fixed_array . ◆ operator-(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . constexpr T sofa::type::pairwise::operator- ; (; const T & ; l, . const T & ; r . ). constexpr . pairwise subtract of two fixed_array . ◆ operator/(). template<class T , class TT = typename T::value_type, size_t TN = T::static_size> . T sofa::type::pairwise::operator/ ; (; const T & ; r, . const typename T::value_type & ; f . ). multiply from l the r components. . ◆ stdclamp(). template<class T > . const T& sofa::type::pairwise::stdclamp ; (; const T & ; v, . const T & ; lo, . const T & ; hi . ). clamp a single value. This function should be removed when std::clamp will be available . sofatypepairwise; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1pairwise.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html:849,Modifiability,variab,variable,849,"﻿. SOFA API: sofa::type::trait Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::type::trait Namespace Reference . Classes; struct  is_container;  Detect if a type T has iterator/const iterator function. More...;  ; struct  is_specialization_of;  Trait to check if a type T is a specialization of a given template class Template. More...;  ; struct  is_specialization_of< Template< Args... >, Template >;  Partial specialization for the case where T is an instance of Template<Args...>. More...;  ; struct  is_vector;  Detect if a type T has iterator/const iterator function and operator[](size_t) More...;  . Variables; template<typename T , template< typename... > class Template> ; constexpr bool is_specialization_of_v = is_specialization_of<T, Template>::value;  Helper variable template to simplify the syntax for checking if T is a specialization of Template. More...;  . Variable Documentation. ◆ is_specialization_of_v. template<typename T , template< typename... > class Template> . constexpr bool sofa::type::trait::is_specialization_of_v = is_specialization_of<T, Template>::value. inlineconstexpr . Helper variable template to simplify the syntax for checking if T is a specialization of Template. ; This variable template provides a cleaner and more concise way to use the is_specialization_of trait. Instead of writing is_specialization_of<T, Template>::value, you can use is_specialization_of_v<T, Template>.; Template Parameters. TThe type to be checked. ; TemplateThe template class to check against. . See alsois_specialization_of . sofatypetrait; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1trait.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html:1193,Modifiability,variab,variable,1193,"﻿. SOFA API: sofa::type::trait Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::type::trait Namespace Reference . Classes; struct  is_container;  Detect if a type T has iterator/const iterator function. More...;  ; struct  is_specialization_of;  Trait to check if a type T is a specialization of a given template class Template. More...;  ; struct  is_specialization_of< Template< Args... >, Template >;  Partial specialization for the case where T is an instance of Template<Args...>. More...;  ; struct  is_vector;  Detect if a type T has iterator/const iterator function and operator[](size_t) More...;  . Variables; template<typename T , template< typename... > class Template> ; constexpr bool is_specialization_of_v = is_specialization_of<T, Template>::value;  Helper variable template to simplify the syntax for checking if T is a specialization of Template. More...;  . Variable Documentation. ◆ is_specialization_of_v. template<typename T , template< typename... > class Template> . constexpr bool sofa::type::trait::is_specialization_of_v = is_specialization_of<T, Template>::value. inlineconstexpr . Helper variable template to simplify the syntax for checking if T is a specialization of Template. ; This variable template provides a cleaner and more concise way to use the is_specialization_of trait. Instead of writing is_specialization_of<T, Template>::value, you can use is_specialization_of_v<T, Template>.; Template Parameters. TThe type to be checked. ; TemplateThe template class to check against. . See alsois_specialization_of . sofatypetrait; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1trait.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html:1292,Modifiability,variab,variable,1292,"﻿. SOFA API: sofa::type::trait Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::type::trait Namespace Reference . Classes; struct  is_container;  Detect if a type T has iterator/const iterator function. More...;  ; struct  is_specialization_of;  Trait to check if a type T is a specialization of a given template class Template. More...;  ; struct  is_specialization_of< Template< Args... >, Template >;  Partial specialization for the case where T is an instance of Template<Args...>. More...;  ; struct  is_vector;  Detect if a type T has iterator/const iterator function and operator[](size_t) More...;  . Variables; template<typename T , template< typename... > class Template> ; constexpr bool is_specialization_of_v = is_specialization_of<T, Template>::value;  Helper variable template to simplify the syntax for checking if T is a specialization of Template. More...;  . Variable Documentation. ◆ is_specialization_of_v. template<typename T , template< typename... > class Template> . constexpr bool sofa::type::trait::is_specialization_of_v = is_specialization_of<T, Template>::value. inlineconstexpr . Helper variable template to simplify the syntax for checking if T is a specialization of Template. ; This variable template provides a cleaner and more concise way to use the is_specialization_of trait. Instead of writing is_specialization_of<T, Template>::value, you can use is_specialization_of_v<T, Template>.; Template Parameters. TThe type to be checked. ; TemplateThe template class to check against. . See alsois_specialization_of . sofatypetrait; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1trait.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html:870,Usability,simpl,simplify,870,"﻿. SOFA API: sofa::type::trait Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::type::trait Namespace Reference . Classes; struct  is_container;  Detect if a type T has iterator/const iterator function. More...;  ; struct  is_specialization_of;  Trait to check if a type T is a specialization of a given template class Template. More...;  ; struct  is_specialization_of< Template< Args... >, Template >;  Partial specialization for the case where T is an instance of Template<Args...>. More...;  ; struct  is_vector;  Detect if a type T has iterator/const iterator function and operator[](size_t) More...;  . Variables; template<typename T , template< typename... > class Template> ; constexpr bool is_specialization_of_v = is_specialization_of<T, Template>::value;  Helper variable template to simplify the syntax for checking if T is a specialization of Template. More...;  . Variable Documentation. ◆ is_specialization_of_v. template<typename T , template< typename... > class Template> . constexpr bool sofa::type::trait::is_specialization_of_v = is_specialization_of<T, Template>::value. inlineconstexpr . Helper variable template to simplify the syntax for checking if T is a specialization of Template. ; This variable template provides a cleaner and more concise way to use the is_specialization_of trait. Instead of writing is_specialization_of<T, Template>::value, you can use is_specialization_of_v<T, Template>.; Template Parameters. TThe type to be checked. ; TemplateThe template class to check against. . See alsois_specialization_of . sofatypetrait; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1trait.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html
https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html:1214,Usability,simpl,simplify,1214,"﻿. SOFA API: sofa::type::trait Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Variables . sofa::type::trait Namespace Reference . Classes; struct  is_container;  Detect if a type T has iterator/const iterator function. More...;  ; struct  is_specialization_of;  Trait to check if a type T is a specialization of a given template class Template. More...;  ; struct  is_specialization_of< Template< Args... >, Template >;  Partial specialization for the case where T is an instance of Template<Args...>. More...;  ; struct  is_vector;  Detect if a type T has iterator/const iterator function and operator[](size_t) More...;  . Variables; template<typename T , template< typename... > class Template> ; constexpr bool is_specialization_of_v = is_specialization_of<T, Template>::value;  Helper variable template to simplify the syntax for checking if T is a specialization of Template. More...;  . Variable Documentation. ◆ is_specialization_of_v. template<typename T , template< typename... > class Template> . constexpr bool sofa::type::trait::is_specialization_of_v = is_specialization_of<T, Template>::value. inlineconstexpr . Helper variable template to simplify the syntax for checking if T is a specialization of Template. ; This variable template provides a cleaner and more concise way to use the is_specialization_of trait. Instead of writing is_specialization_of<T, Template>::value, you can use is_specialization_of_v<T, Template>.; Template Parameters. TThe type to be checked. ; TemplateThe template class to check against. . See alsois_specialization_of . sofatypetrait; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/namespacesofa_1_1type_1_1trait.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type_1_1trait.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:362,Modifiability,inherit,inherited,362,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:128,Safety,detect,detection,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:279,Safety,detect,detection,279,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:428,Safety,detect,detection,428,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:598,Safety,detect,detection,598,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html:719,Safety,detect,detection,719,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel, including all inherited members. firstCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel; FirstLastCollisionModel(core::CollisionModel *a, core::CollisionModel *b)sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModelinline; lastCollisionModelsofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel. Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_f29c14afeafc0440e54487e4684716f59.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html:41,Safety,detect,detection,41,"﻿. SOFA API: sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference . #include <BruteForceBroadPhase.h>; Detailed Description; A data structure to store a pair of collision models They both describe the same object . Public Attributes; core::CollisionModel * firstCollisionModel { nullptr };  First collision model in the hierarchy of collision models of an object. Usually a bounding box. More...;  ; core::CollisionModel * lastCollisionModel { nullptr };  . Public Member Functions;  FirstLastCollisionModel (core::CollisionModel *a, core::CollisionModel *b);  . Attribute details. ◆ firstCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::firstCollisionModel { nullptr }. First collision model in the hierarchy of collision models of an object. Usually a bounding box. . ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::lastCollisionModel { nullptr }. Constructor details. ◆ FirstLastCollisionModel(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::FirstLastCollisionModel ; (; core::CollisionModel * ; a, . core::CollisionModel * ; b . ). inline . sofacomponentcollisiondetectionalgorithmBruteForceBroadPhaseFirstLastCollisionModel; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html:299,Safety,detect,detection,299,"﻿. SOFA API: sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference . #include <BruteForceBroadPhase.h>; Detailed Description; A data structure to store a pair of collision models They both describe the same object . Public Attributes; core::CollisionModel * firstCollisionModel { nullptr };  First collision model in the hierarchy of collision models of an object. Usually a bounding box. More...;  ; core::CollisionModel * lastCollisionModel { nullptr };  . Public Member Functions;  FirstLastCollisionModel (core::CollisionModel *a, core::CollisionModel *b);  . Attribute details. ◆ firstCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::firstCollisionModel { nullptr }. First collision model in the hierarchy of collision models of an object. Usually a bounding box. . ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::lastCollisionModel { nullptr }. Constructor details. ◆ FirstLastCollisionModel(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::FirstLastCollisionModel ; (; core::CollisionModel * ; a, . core::CollisionModel * ; b . ). inline . sofacomponentcollisiondetectionalgorithmBruteForceBroadPhaseFirstLastCollisionModel; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html:973,Safety,detect,detection,973,"﻿. SOFA API: sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference . #include <BruteForceBroadPhase.h>; Detailed Description; A data structure to store a pair of collision models They both describe the same object . Public Attributes; core::CollisionModel * firstCollisionModel { nullptr };  First collision model in the hierarchy of collision models of an object. Usually a bounding box. More...;  ; core::CollisionModel * lastCollisionModel { nullptr };  . Public Member Functions;  FirstLastCollisionModel (core::CollisionModel *a, core::CollisionModel *b);  . Attribute details. ◆ firstCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::firstCollisionModel { nullptr }. First collision model in the hierarchy of collision models of an object. Usually a bounding box. . ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::lastCollisionModel { nullptr }. Constructor details. ◆ FirstLastCollisionModel(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::FirstLastCollisionModel ; (; core::CollisionModel * ; a, . core::CollisionModel * ; b . ). inline . sofacomponentcollisiondetectionalgorithmBruteForceBroadPhaseFirstLastCollisionModel; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html:1246,Safety,detect,detection,1246,"﻿. SOFA API: sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference . #include <BruteForceBroadPhase.h>; Detailed Description; A data structure to store a pair of collision models They both describe the same object . Public Attributes; core::CollisionModel * firstCollisionModel { nullptr };  First collision model in the hierarchy of collision models of an object. Usually a bounding box. More...;  ; core::CollisionModel * lastCollisionModel { nullptr };  . Public Member Functions;  FirstLastCollisionModel (core::CollisionModel *a, core::CollisionModel *b);  . Attribute details. ◆ firstCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::firstCollisionModel { nullptr }. First collision model in the hierarchy of collision models of an object. Usually a bounding box. . ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::lastCollisionModel { nullptr }. Constructor details. ◆ FirstLastCollisionModel(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::FirstLastCollisionModel ; (; core::CollisionModel * ; a, . core::CollisionModel * ; b . ). inline . sofacomponentcollisiondetectionalgorithmBruteForceBroadPhaseFirstLastCollisionModel; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html:1425,Safety,detect,detection,1425,"﻿. SOFA API: sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel Struct Reference . #include <BruteForceBroadPhase.h>; Detailed Description; A data structure to store a pair of collision models They both describe the same object . Public Attributes; core::CollisionModel * firstCollisionModel { nullptr };  First collision model in the hierarchy of collision models of an object. Usually a bounding box. More...;  ; core::CollisionModel * lastCollisionModel { nullptr };  . Public Member Functions;  FirstLastCollisionModel (core::CollisionModel *a, core::CollisionModel *b);  . Attribute details. ◆ firstCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::firstCollisionModel { nullptr }. First collision model in the hierarchy of collision models of an object. Usually a bounding box. . ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::lastCollisionModel { nullptr }. Constructor details. ◆ FirstLastCollisionModel(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::FirstLastCollisionModel::FirstLastCollisionModel ; (; core::CollisionModel * ; a, . core::CollisionModel * ; b . ). inline . sofacomponentcollisiondetectionalgorithmBruteForceBroadPhaseFirstLastCollisionModel; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase_1_1_first_last_collision_model.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:334,Modifiability,inherit,inherited,334,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:128,Safety,detect,detection,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:265,Safety,detect,detection,265,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:384,Safety,detect,detection,384,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:470,Safety,detect,detection,470,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:564,Safety,detect,detection,564,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html:660,Safety,detect,detection,660,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision, including all inherited members. cm1sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; cm2sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; intersectorsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision; selfCollisionsofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:258,Safety,detect,detection,258,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:836,Safety,detect,detection,836,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:965,Safety,detect,detection,965,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:1117,Safety,detect,detection,1117,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html:1298,Safety,detect,detection,1298,﻿. SOFA API: sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision Struct Reference . #include <BVHNarrowPhase.h>; Store data related to two finest CollisionModel's. ; More...; Detailed Description; Store data related to two finest CollisionModel's. . Public Attributes; core::CollisionModel * cm1 { nullptr };  ; core::CollisionModel * cm2 { nullptr };  ; core::collision::ElementIntersector * intersector { nullptr };  ElementIntersector corresponding to cm1 and cm2. More...;  ; bool selfCollision { false };  . Attribute details. ◆ cm1. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm1 { nullptr }. ◆ cm2. core::CollisionModel* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::cm2 { nullptr }. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::intersector { nullptr }. ElementIntersector corresponding to cm1 and cm2. . ◆ selfCollision. bool sofa::component::collision::detection::algorithm::BVHNarrowPhase::FinestCollision::selfCollision { false }. sofacomponentcollisiondetectionalgorithmBVHNarrowPhaseFinestCollision; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase_1_1_finest_collision.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:128,Safety,detect,detection,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:256,Safety,detect,detection,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:374,Safety,detect,detection,374,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:499,Safety,detect,detection,499,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:588,Safety,detect,detection,588,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:701,Safety,detect,detection,701,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html:787,Safety,detect,detection,787,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CollidingPM::CollModID Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CollidingPM::CollModID, including all inherited members. CollModID()sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; CollModID(Index id, core::CollisionModel *cm)sofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; enum_typesofa::component::collision::detection::algorithm::CollidingPM::CollModID; operator<(const CollModID &other) constsofa::component::collision::detection::algorithm::CollidingPM::CollModIDinline; samplesofa::component::collision::detection::algorithm::CollidingPM::CollModID. Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:41,Safety,detect,detection,41,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:276,Safety,detect,detection,276,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:646,Safety,detect,detection,646,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:763,Safety,detect,detection,763,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:887,Safety,detect,detection,887,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:1009,Safety,detect,detection,1009,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html:1192,Safety,detect,detection,1192,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CollidingPM::CollModID Struct Reference . #include <CollisionPM.h>. Public Attributes; int enum_type;  ; core::CollisionModel * sample;  . Public Member Functions;  CollModID ();  ;  CollModID (Index id, core::CollisionModel *cm);  ; bool operator< (const CollModID &other) const;  . Attribute details. ◆ enum_type. int sofa::component::collision::detection::algorithm::CollidingPM::CollModID::enum_type. ◆ sample. core::CollisionModel* sofa::component::collision::detection::algorithm::CollidingPM::CollModID::sample. Constructor details. ◆ CollModID() [1/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; ). inline . ◆ CollModID() [2/2]. sofa::component::collision::detection::algorithm::CollidingPM::CollModID::CollModID ; (; Index ; id, . core::CollisionModel * ; cm . ). inline . Function details. ◆ operator<(). bool sofa::component::collision::detection::algorithm::CollidingPM::CollModID::operator< ; (; const CollModID & ; other); const. inline . sofacomponentcollisiondetectionalgorithmCollidingPMCollModID; Generated on Mon Nov 11 2024 02:19:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_colliding_p_m_1_1_coll_mod_i_d.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html:298,Modifiability,inherit,inherited,298,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CompPEndPoint Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CompPEndPoint, including all inherited members. operator()(const EndPoint *ep1, const EndPoint *ep2) constsofa::component::collision::detection::algorithm::CompPEndPointinline. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html:128,Safety,detect,detection,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CompPEndPoint Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CompPEndPoint, including all inherited members. operator()(const EndPoint *ep1, const EndPoint *ep2) constsofa::component::collision::detection::algorithm::CompPEndPointinline. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html:247,Safety,detect,detection,247,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CompPEndPoint Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CompPEndPoint, including all inherited members. operator()(const EndPoint *ep1, const EndPoint *ep2) constsofa::component::collision::detection::algorithm::CompPEndPointinline. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html:403,Safety,detect,detection,403,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::CompPEndPoint Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::CompPEndPoint, including all inherited members. operator()(const EndPoint *ep1, const EndPoint *ep2) constsofa::component::collision::detection::algorithm::CompPEndPointinline. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html:41,Safety,detect,detection,41,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference . #include <EndPoint.h>. Public Member Functions; bool operator() (const EndPoint *ep1, const EndPoint *ep2) const;  . Function details. ◆ operator()(). bool sofa::component::collision::detection::algorithm::CompPEndPoint::operator() ; (; const EndPoint * ; ep1, . const EndPoint * ; ep2 . ); const. inline . sofacomponentcollisiondetectionalgorithmCompPEndPoint; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html:246,Safety,detect,detection,246,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference . #include <EndPoint.h>. Public Member Functions; bool operator() (const EndPoint *ep1, const EndPoint *ep2) const;  . Function details. ◆ operator()(). bool sofa::component::collision::detection::algorithm::CompPEndPoint::operator() ; (; const EndPoint * ; ep1, . const EndPoint * ; ep2 . ); const. inline . sofacomponentcollisiondetectionalgorithmCompPEndPoint; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html:485,Safety,detect,detection,485,"﻿. SOFA API: sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::CompPEndPoint Struct Reference . #include <EndPoint.h>. Public Member Functions; bool operator() (const EndPoint *ep1, const EndPoint *ep2) const;  . Function details. ◆ operator()(). bool sofa::component::collision::detection::algorithm::CompPEndPoint::operator() ; (; const EndPoint * ; ep1, . const EndPoint * ; ep2 . ); const. inline . sofacomponentcollisiondetectionalgorithmCompPEndPoint; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_comp_p_end_point.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:330,Modifiability,inherit,inherited,330,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:128,Safety,detect,detection,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:263,Safety,detect,detection,263,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:401,Safety,detect,detection,401,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:489,Safety,detect,detection,489,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:588,Safety,detect,detection,588,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:683,Safety,detect,detection,683,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:778,Safety,detect,detection,778,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html:877,Safety,detect,detection,877,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData, including all inherited members. collisionElementIteratorsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; contextsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; doesBoxSelfCollidesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isBoxSimulatedsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; isInBroadPhasesofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData; lastCollisionModelsofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:41,Safety,detect,detection,41,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:256,Safety,detect,detection,256,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:776,Safety,detect,detection,776,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:932,Safety,detect,detection,932,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:1059,Safety,detect,detection,1059,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:1191,Safety,detect,detection,1191,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:1319,Safety,detect,detection,1319,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html:1468,Safety,detect,detection,1468,﻿. SOFA API: sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData Struct Reference . #include <DirectSAPNarrowPhase.h>. Public Attributes; core::CollisionModel * lastCollisionModel {nullptr};  ; sofa::core::objectmodel::BaseContext * context {nullptr};  ; bool isBoxSimulated {false};  ; bool doesBoxSelfCollide {false};  ; sofa::core::CollisionElementIterator collisionElementIterator;  ; bool isInBroadPhase {false};  . Attribute details. ◆ collisionElementIterator. sofa::core::CollisionElementIterator sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::collisionElementIterator. ◆ context. sofa::core::objectmodel::BaseContext* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::context {nullptr}. ◆ doesBoxSelfCollide. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::doesBoxSelfCollide {false}. ◆ isBoxSimulated. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isBoxSimulated {false}. ◆ isInBroadPhase. bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::isInBroadPhase {false}. ◆ lastCollisionModel. core::CollisionModel* sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::BoxData::lastCollisionModel {nullptr}. sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhaseBoxData; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase_1_1_box_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model_1_1_cube_data-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::geometry::CubeCollisionModel::CubeData Member List . This is the complete list of members for sofa::component::collision::geometry::CubeCollisionModel::CubeData, including all inherited members. childrensofa::component::collision::geometry::CubeCollisionModel::CubeData; coneAnglesofa::component::collision::geometry::CubeCollisionModel::CubeData; coneAxissofa::component::collision::geometry::CubeCollisionModel::CubeData; maxBBoxsofa::component::collision::geometry::CubeCollisionModel::CubeData; minBBoxsofa::component::collision::geometry::CubeCollisionModel::CubeData; subcellssofa::component::collision::geometry::CubeCollisionModel::CubeData. Generated on Mon Nov 11 2024 02:19:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model_1_1_cube_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model_1_1_cube_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model_1_1_line_data-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::LineData Member List . This is the complete list of members for sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::LineData, including all inherited members. psofa::component::collision::geometry::LineCollisionModel< TDataTypes >::LineData. Generated on Mon Nov 11 2024 02:23:57 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model_1_1_line_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model_1_1_line_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model_1_1_tetrahedron_info-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronInfo Member List . This is the complete list of members for sofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronInfo, including all inherited members. bary2coordsofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronInfo; coord0sofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronInfo; coord2barysofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronInfo. Generated on Mon Nov 11 2024 02:24:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model_1_1_tetrahedron_info-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model_1_1_tetrahedron_info-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_constraint_activation-members.html:318,Modifiability,inherit,inherited,318,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::constraint::lagrangian::correction::ConstraintActivation Member List . This is the complete list of members for sofa::component::constraint::lagrangian::correction::ConstraintActivation, including all inherited members. accsofa::component::constraint::lagrangian::correction::ConstraintActivation; possofa::component::constraint::lagrangian::correction::ConstraintActivation; velsofa::component::constraint::lagrangian::correction::ConstraintActivation. Generated on Mon Nov 11 2024 02:34:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_constraint_activation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_constraint_activation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_cor29f9ce25ba5bafcd2d240d35d757ef1e.html:400,Modifiability,inherit,inherited,400,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::InverseStorage Member List . This is the complete list of members for sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::InverseStorage, including all inherited members. datasofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::InverseStorage; InverseStorage()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::InverseStorageinline; nbrefsofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::InverseStorage. Generated on Mon Nov 11 2024 02:34:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_cor29f9ce25ba5bafcd2d240d35d757ef1e.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_cor29f9ce25ba5bafcd2d240d35d757ef1e.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint_1_1_contact-members.html:372,Modifiability,inherit,inherited,372,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact Member List . This is the complete list of members for sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact, including all inherited members. contactDistancesofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; contactIdsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; dfreesofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contactmutable; idsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; localIdsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; m1sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; m2sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; musofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; normsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; Psofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; Qsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; ssofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact; tsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >::Contact. Generated on Mon Nov 11 2024 02:36:36 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint_1_1_contact-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint_1_1_contact-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint_1_1_oscillator-members.html:366,Modifiability,inherit,inherited,366,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator Member List . This is the complete list of members for sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator, including all inherited members. amplitudesofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; indexsofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; meansofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; operator<<(std::ostream &out, const Oscillator &o)sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillatorfriend; operator>>(std::istream &in, Oscillator &o)sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillatorfriend; Oscillator()sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; Oscillator(unsigned int i, const Coord &m, const Deriv &a, const Real &w, const Real &p)sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; phasesofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator; pulsationsofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >::Oscillator. Generated on Mon Nov 11 2024 02:37:57 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint_1_1_oscillator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint_1_1_oscillator-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_skeleton_joint-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::constraint::projective::SkeletonJoint< DataTypes > Member List . This is the complete list of members for sofa::component::constraint::projective::SkeletonJoint< DataTypes >, including all inherited members. addChannel(Coord channel, double time)sofa::component::constraint::projective::SkeletonJoint< DataTypes >inline; Coord typedefsofa::component::constraint::projective::SkeletonJoint< DataTypes >; mChannelssofa::component::constraint::projective::SkeletonJoint< DataTypes >; mParentIndexsofa::component::constraint::projective::SkeletonJoint< DataTypes >; mTimessofa::component::constraint::projective::SkeletonJoint< DataTypes >; operator<<(std::ostream &out, const SkeletonJoint &skeletonJoint)sofa::component::constraint::projective::SkeletonJoint< DataTypes >friend; operator>>(std::istream &in, SkeletonJoint &skeletonJoint)sofa::component::constraint::projective::SkeletonJoint< DataTypes >friend; setRestPosition(const Coord &restPosition)sofa::component::constraint::projective::SkeletonJoint< DataTypes >inline; SkeletalMotionProjectiveConstraint< DataTypes > classsofa::component::constraint::projective::SkeletonJoint< DataTypes >friend; SkeletonJoint()sofa::component::constraint::projective::SkeletonJoint< DataTypes >inline; ~SkeletonJoint()sofa::component::constraint::projective::SkeletonJoint< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:38:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_skeleton_joint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1constraint_1_1projective_1_1_skeleton_joint-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i_1_1_oriented_box-members.html:318,Modifiability,inherit,inherited,318,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox Member List . This is the complete list of members for sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox, including all inherited members. depthsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; lengthsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; normalsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; p0sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; p2sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; plane0sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; plane1sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; plane2sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; plane3sofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; Real typedefsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; Vec3 typedefsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox; widthsofa::component::engine::select::boxroi::BoxROI< DataTypes >::OrientedBox. Generated on Mon Nov 11 2024 02:42:39 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i_1_1_oriented_box-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i_1_1_oriented_box-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions_1_1_temp_data-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData Member List . This is the complete list of members for sofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData, including all inherited members. bmaxsofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData; bminsofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData; dirsofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData; inputValuessofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData; x0sofa::component::engine::select::ValuesFromPositions< DataTypes >::TempData. Generated on Mon Nov 11 2024 02:42:39 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions_1_1_temp_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions_1_1_temp_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_add-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpAdd< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpAdd< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpAdd< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpAdd< T >inline. Generated on Mon Nov 11 2024 02:44:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_add-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_add-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_and-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpAnd< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpAnd< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpAnd< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpAnd< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_and-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_and-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpApply< TOps > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpApply< TOps >, including all inherited members. apply(const std::string &op, Data< VecValue > *d_out, const type::vector< Data< VecValue > * > &d_in)sofa::component::engine::transform::MathOpApply< TOps >inlinestatic; isSupported(const std::string &op)sofa::component::engine::transform::MathOpApply< TOps >inlinestatic. Generated on Mon Nov 11 2024 02:44:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html:324,Modifiability,inherit,inherited,324,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpApply< std::pair< TOps1, TOps2 > > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpApply< std::pair< TOps1, TOps2 > >, including all inherited members. apply(const std::string &op, Data< VecValue > *d_out, const type::vector< Data< VecValue > * > &d_in)sofa::component::engine::transform::MathOpApply< std::pair< TOps1, TOps2 > >inlinestatic; isSupported(const std::string &op)sofa::component::engine::transform::MathOpApply< std::pair< TOps1, TOps2 > >inlinestatic. Generated on Mon Nov 11 2024 02:44:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_apply_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_div-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpDiv< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpDiv< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpDiv< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpDiv< T >inline. Generated on Mon Nov 11 2024 02:44:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_div-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_div-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_max-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpMax< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpMax< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpMax< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpMax< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_max-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_max-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_min-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpMin< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpMin< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpMin< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpMin< T >inline. Generated on Mon Nov 11 2024 02:44:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_min-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_min-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_mul-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpMul< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpMul< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpMul< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpMul< T >inline. Generated on Mon Nov 11 2024 02:44:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_mul-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_mul-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpNames< TOps > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpNames< TOps >, including all inherited members. get(type::vector< std::string > &out)sofa::component::engine::transform::MathOpNames< TOps >inlinestatic. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html:324,Modifiability,inherit,inherited,324,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpNames< std::pair< TOps1, TOps2 > > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpNames< std::pair< TOps1, TOps2 > >, including all inherited members. get(type::vector< std::string > &out)sofa::component::engine::transform::MathOpNames< std::pair< TOps1, TOps2 > >inlinestatic. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_names_3_01std_1_1pair_3_01_t_ops1_00_01_t_ops2_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_not-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpNot< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpNot< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpNot< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpNot< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_not-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_not-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_and-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpNAnd< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpNAnd< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpNAnd< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpNAnd< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_and-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_and-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_or-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpNOr< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpNOr< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpNOr< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpNOr< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_or-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_n_or-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_or-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpOr< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpOr< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpOr< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpOr< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_or-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_or-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_sub-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpSub< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpSub< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpSub< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpSub< T >inline. Generated on Mon Nov 11 2024 02:44:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_sub-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_sub-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits-members.html:278,Modifiability,inherit,inherited,278,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpTraits< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpTraits< T >, including all inherited members. Ops typedefsofa::component::engine::transform::MathOpTraits< T >. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_bool-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpTraitsBool< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpTraitsBool< T >, including all inherited members. Ops typedefsofa::component::engine::transform::MathOpTraitsBool< T >. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_bool-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_bool-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_real-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpTraitsReal< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpTraitsReal< T >, including all inherited members. Ops typedefsofa::component::engine::transform::MathOpTraitsReal< T >. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_real-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_real-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_vec_real-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpTraitsVecReal< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpTraitsVecReal< T >, including all inherited members. Ops typedefsofa::component::engine::transform::MathOpTraitsVecReal< T >. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_vec_real-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_traits_vec_real-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_xor-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpXor< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpXor< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpXor< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpXor< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_xor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_xor-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_x_nor-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::MathOpXNor< T > Member List . This is the complete list of members for sofa::component::engine::transform::MathOpXNor< T >, including all inherited members. Name()sofa::component::engine::transform::MathOpXNor< T >inlinestatic; operator()(T *out, const type::vector< T > &in)sofa::component::engine::transform::MathOpXNor< T >inline. Generated on Mon Nov 11 2024 02:44:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_x_nor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_math_op_x_nor-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Rotation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Rotation< DataTypes >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html:305,Modifiability,config,configure,305,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Rotation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Rotation< DataTypes >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html:516,Modifiability,config,configure,516,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Rotation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Rotation< DataTypes >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html:429,Modifiability,inherit,inherited,429,"﻿. SOFA API: sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Rotation< DataTypes >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . sofacomponentenginetransformRotation; Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html:664,Modifiability,config,configure,664,"﻿. SOFA API: sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Rotation< DataTypes >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . sofacomponentenginetransformRotation; Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html:719,Modifiability,config,configure,719,"﻿. SOFA API: sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Rotation< DataTypes >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . sofacomponentenginetransformRotation; Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html:837,Modifiability,inherit,inherited,837,"﻿. SOFA API: sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::component::engine::transform::Rotation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Rotation< DataTypes >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::component::engine::transform::RotationSpecialized< DataTypes, DataTypes::spatial_dimensions, DataTypes::coord_total_size==DataTypes::spatial_dimensions >; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . sofacomponentenginetransformRotation; Generated on Mon Nov 11 2024 02:45:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html:334,Modifiability,inherit,inherited,334,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html:353,Modifiability,config,configure,353,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html:486,Modifiability,config,configure,486,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:557,Modifiability,config,configure,557,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:612,Modifiability,config,configure,612,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:730,Modifiability,inherit,inherited,730,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:869,Modifiability,config,configure,869,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:1027,Modifiability,config,configure,1027,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:1147,Modifiability,config,configure,1147,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html:1305,Modifiability,config,configure,1305,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes , int N, bool isVector> . void sofa::component::engine::transform::RotationSpecialized< DataTypes, N, isVector >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized; Generated on Mon Nov 11 2024 02:45:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; configure(const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html:347,Modifiability,config,configure,347,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; configure(const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html:477,Modifiability,config,configure,477,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; configure(const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase)sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:548,Modifiability,config,configure,548,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:603,Modifiability,config,configure,603,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:716,Modifiability,inherit,inherited,716,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:855,Modifiability,config,configure,855,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:988,Modifiability,config,configure,988,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:1104,Modifiability,config,configure,1104,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html:1237,Modifiability,config,configure,1237,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &, bool, sofa::core::objectmodel::Base *pBase);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Quat< SReal > & ; , . bool ; , . sofa::core::objectmodel::Base * ; pBase . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 2, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 2, false >; Generated on Mon Nov 11 2024 02:45:06 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_012_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html:347,Modifiability,config,configure,347,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html:477,Modifiability,config,configure,477,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Member List . This is the complete list of members for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >, including all inherited members. configure(const type::Vec3 &r, bool inverse)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; configure(const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *)sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >inlinevirtual; Real typedefsofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:548,Modifiability,config,configure,548,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:603,Modifiability,config,configure,603,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:721,Modifiability,inherit,inherited,721,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:860,Modifiability,config,configure,860,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:993,Modifiability,config,configure,993,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:1113,Modifiability,config,configure,1113,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html:1246,Modifiability,config,configure,1246,"﻿. SOFA API: sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >:. [legend]. Public Member Functions; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &r, bool inverse);  ; void configure (const type::Quat< SReal > &qi, bool inverse, sofa::core::objectmodel::Base *);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Function details. ◆ configure() [1/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Quat< SReal > & ; qi, . bool ; inverse, . sofa::core::objectmodel::Base * ;  . ). inline . ◆ configure() [2/2]. template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::configure ; (; const type::Vec3 & ; r, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::RotationSpecialized< DataTypes, 3, false >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformRotationSpecialized< DataTypes, 3, false >; Generated on Mon Nov 11 2024 02:45:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_rotation_specialized_3_01_data_types_00_013_00_01false_01_4.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html:280,Modifiability,inherit,inherited,280,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Scale< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Scale< DataTypes >, including all inherited members. configure(const type::Vec3 &s, bool inverse)sofa::component::engine::transform::Scale< DataTypes >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::Scale< DataTypes >inlinevirtual; Real typedefsofa::component::engine::transform::Scale< DataTypes >; Scale()sofa::component::engine::transform::Scale< DataTypes >inline; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html:299,Modifiability,config,configure,299,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Scale< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Scale< DataTypes >, including all inherited members. configure(const type::Vec3 &s, bool inverse)sofa::component::engine::transform::Scale< DataTypes >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::Scale< DataTypes >inlinevirtual; Real typedefsofa::component::engine::transform::Scale< DataTypes >; Scale()sofa::component::engine::transform::Scale< DataTypes >inline; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html:490,Modifiability,config,configure,490,"﻿. SOFA API: sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Scale< DataTypes >:. [legend]. Public Member Functions;  Scale ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &s, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Scale(). template<class DataTypes > . sofa::component::engine::transform::Scale< DataTypes >::Scale ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::configure ; (; const type::Vec3 & ; s, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformScale; Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html:565,Modifiability,inherit,inherited,565,"﻿. SOFA API: sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Scale< DataTypes >:. [legend]. Public Member Functions;  Scale ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &s, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Scale(). template<class DataTypes > . sofa::component::engine::transform::Scale< DataTypes >::Scale ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::configure ; (; const type::Vec3 & ; s, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformScale; Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html:844,Modifiability,config,configure,844,"﻿. SOFA API: sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Scale< DataTypes >:. [legend]. Public Member Functions;  Scale ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &s, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Scale(). template<class DataTypes > . sofa::component::engine::transform::Scale< DataTypes >::Scale ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::configure ; (; const type::Vec3 & ; s, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformScale; Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html:947,Modifiability,config,configure,947,"﻿. SOFA API: sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Scale< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Scale< DataTypes >:. [legend]. Public Member Functions;  Scale ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &s, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Scale(). template<class DataTypes > . sofa::component::engine::transform::Scale< DataTypes >::Scale ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::configure ; (; const type::Vec3 & ; s, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Scale< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformScale; Generated on Mon Nov 11 2024 02:45:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_scale.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Transform< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Transform< DataTypes >, including all inherited members. add(Operation *op, bool inverse)sofa::component::engine::transform::Transform< DataTypes >inline; getOperations()sofa::component::engine::transform::Transform< DataTypes >inline; Op typedefsofa::component::engine::transform::Transform< DataTypes >; operator()(typename DataTypes::Coord &v) constsofa::component::engine::transform::Transform< DataTypes >inline. Generated on Mon Nov 11 2024 02:45:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform_operation-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::TransformOperation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::TransformOperation< DataTypes >, including all inherited members. execute(typename DataTypes::Coord &v) const =0sofa::component::engine::transform::TransformOperation< DataTypes >pure virtual; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:44:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform_operation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_transform_operation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Translation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Translation< DataTypes >, including all inherited members. configure(const type::Vec3 &t, bool inverse)sofa::component::engine::transform::Translation< DataTypes >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::Translation< DataTypes >inlinevirtual; Real typedefsofa::component::engine::transform::Translation< DataTypes >; Translation()sofa::component::engine::transform::Translation< DataTypes >inline; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html:311,Modifiability,config,configure,311,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::engine::transform::Translation< DataTypes > Member List . This is the complete list of members for sofa::component::engine::transform::Translation< DataTypes >, including all inherited members. configure(const type::Vec3 &t, bool inverse)sofa::component::engine::transform::Translation< DataTypes >inline; execute(typename DataTypes::Coord &p) constsofa::component::engine::transform::Translation< DataTypes >inlinevirtual; Real typedefsofa::component::engine::transform::Translation< DataTypes >; Translation()sofa::component::engine::transform::Translation< DataTypes >inline; ~TransformOperation()sofa::component::engine::transform::TransformOperation< DataTypes >inlinevirtual. Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html:514,Modifiability,config,configure,514,"﻿. SOFA API: sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Translation< DataTypes >:. [legend]. Public Member Functions;  Translation ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &t, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Translation(). template<class DataTypes > . sofa::component::engine::transform::Translation< DataTypes >::Translation ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::configure ; (; const type::Vec3 & ; t, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformTranslation; Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html:589,Modifiability,inherit,inherited,589,"﻿. SOFA API: sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Translation< DataTypes >:. [legend]. Public Member Functions;  Translation ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &t, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Translation(). template<class DataTypes > . sofa::component::engine::transform::Translation< DataTypes >::Translation ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::configure ; (; const type::Vec3 & ; t, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformTranslation; Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html:886,Modifiability,config,configure,886,"﻿. SOFA API: sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Translation< DataTypes >:. [legend]. Public Member Functions;  Translation ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &t, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Translation(). template<class DataTypes > . sofa::component::engine::transform::Translation< DataTypes >::Translation ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::configure ; (; const type::Vec3 & ; t, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformTranslation; Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html:995,Modifiability,config,configure,995,"﻿. SOFA API: sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::engine::transform::Translation< DataTypes > Struct Template Reference . Inheritance diagram for sofa::component::engine::transform::Translation< DataTypes >:. [legend]. Public Member Functions;  Translation ();  ; void execute (typename DataTypes::Coord &p) const;  ; void configure (const type::Vec3 &t, bool inverse);  ;  Public Member Functions inherited from sofa::component::engine::transform::TransformOperation< DataTypes >; virtual ~TransformOperation ();  . Constructor details. ◆ Translation(). template<class DataTypes > . sofa::component::engine::transform::Translation< DataTypes >::Translation ; (; ). inline . Function details. ◆ configure(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::configure ; (; const type::Vec3 & ; t, . bool ; inverse . ). inline . ◆ execute(). template<class DataTypes > . void sofa::component::engine::transform::Translation< DataTypes >::execute ; (; typename DataTypes::Coord & ; p); const. inlinevirtual . Implements sofa::component::engine::transform::TransformOperation< DataTypes >. sofacomponentenginetransformTranslation; Generated on Mon Nov 11 2024 02:45:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1engine_1_1transform_1_1_translation.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsolver::direct::BaseEigenSolverProxy Member List . This is the complete list of members for sofa::component::linearsolver::direct::BaseEigenSolverProxy, including all inherited members. analyzePattern(const EigenSparseMatrixMap< float > &a)=0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; analyzePattern(const EigenSparseMatrixMap< double > &a)=0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; EigenSparseMatrix typedefsofa::component::linearsolver::direct::BaseEigenSolverProxy; EigenSparseMatrixMap typedefsofa::component::linearsolver::direct::BaseEigenSolverProxy; EigenVectorXdMap typedefsofa::component::linearsolver::direct::BaseEigenSolverProxy; factorize(const EigenSparseMatrixMap< float > &a)=0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; factorize(const EigenSparseMatrixMap< double > &a)=0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; info() const =0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; solve(const EigenVectorXdMap< float > &b, EigenVectorXdMap< float > &x) const =0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; solve(const EigenVectorXdMap< double > &b, EigenVectorXdMap< double > &x) const =0sofa::component::linearsolver::direct::BaseEigenSolverProxypure virtual; ~BaseEigenSolverProxy()sofa::component::linearsolver::direct::BaseEigenSolverProxyinlinevirtual. Generated on Mon Nov 11 2024 02:47:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy.html:459,Integrability,wrap,wrapper,459,"﻿. SOFA API: sofa::component::linearsolver::direct::BaseEigenSolverProxy Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::linearsolver::direct::BaseEigenSolverProxy Struct Referenceabstract . #include <EigenSolverFactory.h>. Inheritance diagram for sofa::component::linearsolver::direct::BaseEigenSolverProxy:. [legend]; Detailed Description; A base wrapper class for all solvers based on the Eigen library . Public Member Functions; virtual ~BaseEigenSolverProxy ();  ; virtual Eigen::ComputationInfo info () const =0;  ; virtual void solve (const EigenVectorXdMap< float > &b, EigenVectorXdMap< float > &x) const =0;  ; virtual void solve (const EigenVectorXdMap< double > &b, EigenVectorXdMap< double > &x) const =0;  ; virtual void analyzePattern (const EigenSparseMatrixMap< float > &a)=0;  ; virtual void analyzePattern (const EigenSparseMatrixMap< double > &a)=0;  ; virtual void factorize (const EigenSparseMatrixMap< float > &a)=0;  ; virtual void factorize (const EigenSparseMatrixMap< double > &a)=0;  . Constructor details. ◆ ~BaseEigenSolverProxy(). virtual sofa::component::linearsolver::direct::BaseEigenSolverProxy::~BaseEigenSolverProxy ; (; ). inlinevirtual . Function details. ◆ analyzePattern() [1/2]. virtual void sofa::component::linearsolver::direct::BaseEigenSolverProxy::analyzePattern ; (; const EigenSparseMatrixMap< double > & ; a). pure virtual . Implemented in sofa::component::linearsolver::direct::EigenSolverWrapper< RealObject >. ◆ analyzePattern() [2/2]. virtual void sofa::component::linearsolver::direct::BaseEigenSolverProxy::analyzePattern ; (; const EigenSparseMatrixMap< float > & ; a). pure virtual . Implemented in sofa::component::linearsolver::direct::EigenSolverWrapper< RealObject >. ◆ factorize() [1/2]. virtual void sofa::component::linearsolver::direct::BaseEigenSolverProxy::factorize ; (; const EigenSparseMatrixMap< double > & ; a). pure v",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_base_eigen_solver_proxy.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_solver_factory_1_1_ordering_method_name-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsolver::direct::EigenSolverFactory::OrderingMethodName Member List . This is the complete list of members for sofa::component::linearsolver::direct::EigenSolverFactory::OrderingMethodName, including all inherited members. namesofa::component::linearsolver::direct::EigenSolverFactory::OrderingMethodName; operator<(const OrderingMethodName &other) constsofa::component::linearsolver::direct::EigenSolverFactory::OrderingMethodNameinline; scalarsofa::component::linearsolver::direct::EigenSolverFactory::OrderingMethodName. Generated on Mon Nov 11 2024 02:47:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_solver_factory_1_1_ordering_method_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_solver_factory_1_1_ordering_method_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_7859c7675710ba6285f55f982a734768.html:376,Modifiability,inherit,inherited,376,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData Member List . This is the complete list of members for sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData, including all inherited members. LinearSystemData()sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemDatainline; matrixAccessorsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; needInvertsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; solutionVecIdsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; systemLHVectorsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; systemMatrixsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; systemRHVectorsofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemData; ~LinearSystemData()sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::LinearSystemDatainline. Generated on Mon Nov 11 2024 02:46:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_7859c7675710ba6285f55f982a734768.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_7859c7675710ba6285f55f982a734768.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::CheckNoChangeInInsertionOrder Member List . This is the complete list of members for sofa::component::linearsystem::CheckNoChangeInInsertionOrder, including all inherited members. checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::component::linearsystem::CheckNoChangeInInsertionOrderinlinevirtual; Col typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; currentIdsofa::component::linearsystem::CheckNoChangeInInsertionOrder; logger() constsofa::component::linearsystem::CheckNoChangeInInsertionOrderinline; m_messageComponentsofa::component::linearsystem::CheckNoChangeInInsertionOrder; pairInsertionOrderListsofa::component::linearsystem::CheckNoChangeInInsertionOrder; Row typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; skip_insertion_if_error typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; verify_index typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html:615,Testability,log,logger,615,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::CheckNoChangeInInsertionOrder Member List . This is the complete list of members for sofa::component::linearsystem::CheckNoChangeInInsertionOrder, including all inherited members. checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::component::linearsystem::CheckNoChangeInInsertionOrderinlinevirtual; Col typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; currentIdsofa::component::linearsystem::CheckNoChangeInInsertionOrder; logger() constsofa::component::linearsystem::CheckNoChangeInInsertionOrderinline; m_messageComponentsofa::component::linearsystem::CheckNoChangeInInsertionOrder; pairInsertionOrderListsofa::component::linearsystem::CheckNoChangeInInsertionOrder; Row typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; skip_insertion_if_error typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; verify_index typedefsofa::component::linearsystem::CheckNoChangeInInsertionOrder; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:1085,Modifiability,inherit,inherited,1085,"stem::CheckNoChangeInInsertionOrder Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sof",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:903,Testability,log,logging,903,"stem::CheckNoChangeInInsertionOrder Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sof",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:944,Testability,log,logger,944,"stem::CheckNoChangeInInsertionOrder Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sof",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:1976,Testability,log,logger,1976,"onent::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::component::linearsystem::CheckNoChangeInInsertionOrder::logger ; (; ); const. inline . sofacomponentlinearsystemCheckNoChangeInInsertionOrder; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:1994,Testability,log,logging,1994,"onent::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::component::linearsystem::CheckNoChangeInInsertionOrder::logger ; (; ); const. inline . sofacomponentlinearsystemCheckNoChangeInInsertionOrder; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html:2097,Testability,log,logger,2097,"onent::linearsystem::CheckNoChangeInInsertionOrder Struct Reference . Check that the incoming rows and columns are expected by the constant sparsity pattern. ; More... Inheritance diagram for sofa::component::linearsystem::CheckNoChangeInInsertionOrder:. [legend]; Detailed Description; Check that the incoming rows and columns are expected by the constant sparsity pattern. . Public Attributes; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  ; sofa::type::vector< std::pair< Row, Col > > pairInsertionOrderList;  list of expected rows and columns More...;  ; std::size_t * currentId { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Attribute details. ◆ currentId. std::size_t* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::currentId { nullptr }. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::component::linearsystem::CheckNoChangeInInsertionOrder::m_messageComponent { nullptr }. ◆ pairInsertionOrderList. sofa::type::vector<std::pair<Row, Col> > sofa::component::linearsystem::CheckNoChangeInInsertionOrder::pairInsertionOrderList. list of expected rows and columns . Function details. ◆ checkRowColIndices(). bool sofa::component::linearsystem::CheckNoChangeInInsertionOrder::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::component::linearsystem::CheckNoChangeInInsertionOrder::logger ; (; ); const. inline . sofacomponentlinearsystemCheckNoChangeInInsertionOrder; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_check_no_change_in_insertion_order.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_create_matrix_dispatcher-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::CreateMatrixDispatcher< c > Member List . This is the complete list of members for sofa::component::linearsystem::CreateMatrixDispatcher< c >, including all inherited members. createLocalMappedMatrix()=0sofa::component::linearsystem::CreateMatrixDispatcher< c >pure virtual; createLocalMatrix(const bool withIndexChecking) constsofa::component::linearsystem::CreateMatrixDispatcher< c >inline; createLocalMatrix() const =0sofa::component::linearsystem::CreateMatrixDispatcher< c >protectedpure virtual; createLocalMatrixWithIndexChecking() const =0sofa::component::linearsystem::CreateMatrixDispatcher< c >protectedpure virtual; ~CreateMatrixDispatcher()=defaultsofa::component::linearsystem::CreateMatrixDispatcher< c >virtual. Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_create_matrix_dispatcher-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_create_matrix_dispatcher-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_group_of_components_associated_to_a_pair_of_mechanical_states-members.html:338,Modifiability,inherit,inherited,338,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStates Member List . This is the complete list of members for sofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStates, including all inherited members. forcefiedssofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStates; mappingssofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStates; massessofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStates; operator<<(std::ostream &os, const GroupOfComponentsAssociatedToAPairOfMechanicalStates &group)sofa::component::linearsystem::GroupOfComponentsAssociatedToAPairOfMechanicalStatesfriend. Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_group_of_components_associated_to_a_pair_of_mechanical_states-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_group_of_components_associated_to_a_pair_of_mechanical_states-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:325,Energy Efficiency,allocate,allocateSystem,325," allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::LinearSystemData< TMatrix, TVector > Member List . This is the complete list of members for sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >, including all inherited members. allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:410,Usability,clear,clearSystem,410," allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:492,Usability,clear,clearSystem,492," allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:574,Usability,clear,clearSystem,574," allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:951,Energy Efficiency,allocate,allocateSystem,951,"﻿. SOFA API: sofa::component::linearsystem::LinearSystemData< TMatrix, TVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::LinearSystemData< TMatrix, TVector > Struct Template Reference . #include <LinearSystemData.h>. Public Attributes; StoredMatrixType matrix { nullptr };  The global matrix of the linear system. If the linear system is written as Ax=b, it is A. More...;  ; StoredVectorType rhs { nullptr };  The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. More...;  ; StoredVectorType solution { nullptr };  The solution of the linear system. If the linear system is written as Ax=b, it is x. More...;  . Public Member Functions; MatrixType * getMatrix () const;  ; VectorType * getRHS () const;  ; VectorType * getSolution () const;  ; void allocateSystem ();  ; void createSystemMatrix ();  Allocate the object for the global matrix. More...;  ; void createSystemRHSVector ();  Allocate the object for the RHS. More...;  ; void createSystemSolutionVector ();  Allocate the object for the solution. More...;  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemRHSVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemSolutionVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void resizeSystem (sofa::Size n);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2523,Energy Efficiency,allocate,allocateSystem,2523,"NT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2664,Energy Efficiency,allocate,allocateSystem,2664,"mSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::compon",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:1263,Usability,clear,clearSystem,1263,"r system. If the linear system is written as Ax=b, it is A. More...;  ; StoredVectorType rhs { nullptr };  The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. More...;  ; StoredVectorType solution { nullptr };  The solution of the linear system. If the linear system is written as Ax=b, it is x. More...;  . Public Member Functions; MatrixType * getMatrix () const;  ; VectorType * getRHS () const;  ; VectorType * getSolution () const;  ; void allocateSystem ();  ; void createSystemMatrix ();  Allocate the object for the global matrix. More...;  ; void createSystemRHSVector ();  Allocate the object for the RHS. More...;  ; void createSystemSolutionVector ();  Allocate the object for the solution. More...;  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemRHSVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemSolutionVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void resizeSystem (sofa::Size n);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear sy",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:1565,Usability,clear,clearSystem,1565,"r system. If the linear system is written as Ax=b, it is A. More...;  ; StoredVectorType rhs { nullptr };  The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. More...;  ; StoredVectorType solution { nullptr };  The solution of the linear system. If the linear system is written as Ax=b, it is x. More...;  . Public Member Functions; MatrixType * getMatrix () const;  ; VectorType * getRHS () const;  ; VectorType * getSolution () const;  ; void allocateSystem ();  ; void createSystemMatrix ();  Allocate the object for the global matrix. More...;  ; void createSystemRHSVector ();  Allocate the object for the RHS. More...;  ; void createSystemSolutionVector ();  Allocate the object for the solution. More...;  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemRHSVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemSolutionVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void resizeSystem (sofa::Size n);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear sy",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:1699,Usability,clear,clearSystem,1699,"r system. If the linear system is written as Ax=b, it is A. More...;  ; StoredVectorType rhs { nullptr };  The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. More...;  ; StoredVectorType solution { nullptr };  The solution of the linear system. If the linear system is written as Ax=b, it is x. More...;  . Public Member Functions; MatrixType * getMatrix () const;  ; VectorType * getRHS () const;  ; VectorType * getSolution () const;  ; void allocateSystem ();  ; void createSystemMatrix ();  Allocate the object for the global matrix. More...;  ; void createSystemRHSVector ();  Allocate the object for the RHS. More...;  ; void createSystemSolutionVector ();  Allocate the object for the solution. More...;  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemRHSVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemSolutionVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void resizeSystem (sofa::Size n);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear sy",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2682,Usability,clear,clearSystem,2682,"  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2845,Usability,clear,clearSystem,2845," TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [3/3]. tem",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2867,Usability,clear,clearSystem,2867,"tor >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSyste",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2988,Usability,clear,clearSystem,2988,"e linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemRHSVector. Allocate the object f",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:3010,Usability,clear,clearSystem,3010," TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemRHSVector. Allocate the object for the RHS. . ◆ createSystemSolutionVector() [1/3]. SOFA_COMPONENT_LINEA",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:3154,Usability,clear,clearSystem,3154,"x, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemRHSVector. Allocate the object for the RHS. . ◆ createSystemSolutionVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphS",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::LocalMatrixMaps< c, Real > Member List . This is the complete list of members for sofa::component::linearsystem::LocalMatrixMaps< c, Real >, including all inherited members. clear()sofa::component::linearsystem::LocalMatrixMaps< c, Real >inline; componentLocalMatrixsofa::component::linearsystem::LocalMatrixMaps< c, Real >; ComponentType typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >; indexVerificationStrategysofa::component::linearsystem::LocalMatrixMaps< c, Real >; ListMatrixType typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >; mappedLocalMatrixsofa::component::linearsystem::LocalMatrixMaps< c, Real >; PairMechanicalStates typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >. Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html:305,Usability,clear,clear,305,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::LocalMatrixMaps< c, Real > Member List . This is the complete list of members for sofa::component::linearsystem::LocalMatrixMaps< c, Real >, including all inherited members. clear()sofa::component::linearsystem::LocalMatrixMaps< c, Real >inline; componentLocalMatrixsofa::component::linearsystem::LocalMatrixMaps< c, Real >; ComponentType typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >; indexVerificationStrategysofa::component::linearsystem::LocalMatrixMaps< c, Real >; ListMatrixType typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >; mappedLocalMatrixsofa::component::linearsystem::LocalMatrixMaps< c, Real >; PairMechanicalStates typedefsofa::component::linearsystem::LocalMatrixMaps< c, Real >. Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html:1272,Usability,clear,clear,1272,"earsystem::LocalMatrixMaps< c, Real > Struct Template Reference . #include <MatrixLinearSystem.h>; Detailed Description; template<Contribution c, class Real>; struct sofa::component::linearsystem::LocalMatrixMaps< c, Real >; Data structure storing local matrix components created during the matrix assembly and associated to each component contributing to the global matrix . Public Attributes; std::map< ComponentType *, std::map< PairMechanicalStates, AssemblingMappedMatrixAccumulator< c, Real > * > > mappedLocalMatrix;  The local matrix (value) that has been created and associated to a mapped component (key) More...;  ; std::map< ComponentType *, std::shared_ptr< core::matrixaccumulator::IndexVerificationStrategy > > indexVerificationStrategy;  A verification strategy allowing to verify that the matrix indices provided are valid. More...;  ; std::map< ComponentType *, std::map< PairMechanicalStates, BaseAssemblingMatrixAccumulator< c > * > > componentLocalMatrix;  . Public Member Functions; void clear ();  . Attribute details. ◆ componentLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, BaseAssemblingMatrixAccumulator<c>* > > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::componentLocalMatrix. ◆ indexVerificationStrategy. template<Contribution c, class Real > . std::map< ComponentType*, std::shared_ptr<core::matrixaccumulator::IndexVerificationStrategy> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::indexVerificationStrategy. A verification strategy allowing to verify that the matrix indices provided are valid. . ◆ mappedLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, AssemblingMappedMatrixAccumulator<c, Real>*> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::mappedLocalMatrix. The local matrix (value) that has been created and associated to a mapped component (key) . Function details. ◆ clear(). template<Cont",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html:2241,Usability,clear,clear,2241,"al >; Data structure storing local matrix components created during the matrix assembly and associated to each component contributing to the global matrix . Public Attributes; std::map< ComponentType *, std::map< PairMechanicalStates, AssemblingMappedMatrixAccumulator< c, Real > * > > mappedLocalMatrix;  The local matrix (value) that has been created and associated to a mapped component (key) More...;  ; std::map< ComponentType *, std::shared_ptr< core::matrixaccumulator::IndexVerificationStrategy > > indexVerificationStrategy;  A verification strategy allowing to verify that the matrix indices provided are valid. More...;  ; std::map< ComponentType *, std::map< PairMechanicalStates, BaseAssemblingMatrixAccumulator< c > * > > componentLocalMatrix;  . Public Member Functions; void clear ();  . Attribute details. ◆ componentLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, BaseAssemblingMatrixAccumulator<c>* > > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::componentLocalMatrix. ◆ indexVerificationStrategy. template<Contribution c, class Real > . std::map< ComponentType*, std::shared_ptr<core::matrixaccumulator::IndexVerificationStrategy> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::indexVerificationStrategy. A verification strategy allowing to verify that the matrix indices provided are valid. . ◆ mappedLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, AssemblingMappedMatrixAccumulator<c, Real>*> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::mappedLocalMatrix. The local matrix (value) that has been created and associated to a mapped component (key) . Function details. ◆ clear(). template<Contribution c, class Real > . void sofa::component::linearsystem::LocalMatrixMaps< c, Real >::clear ; (; ). inline . sofacomponentlinearsystemLocalMatrixMaps; Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html:2354,Usability,clear,clear,2354,"al >; Data structure storing local matrix components created during the matrix assembly and associated to each component contributing to the global matrix . Public Attributes; std::map< ComponentType *, std::map< PairMechanicalStates, AssemblingMappedMatrixAccumulator< c, Real > * > > mappedLocalMatrix;  The local matrix (value) that has been created and associated to a mapped component (key) More...;  ; std::map< ComponentType *, std::shared_ptr< core::matrixaccumulator::IndexVerificationStrategy > > indexVerificationStrategy;  A verification strategy allowing to verify that the matrix indices provided are valid. More...;  ; std::map< ComponentType *, std::map< PairMechanicalStates, BaseAssemblingMatrixAccumulator< c > * > > componentLocalMatrix;  . Public Member Functions; void clear ();  . Attribute details. ◆ componentLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, BaseAssemblingMatrixAccumulator<c>* > > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::componentLocalMatrix. ◆ indexVerificationStrategy. template<Contribution c, class Real > . std::map< ComponentType*, std::shared_ptr<core::matrixaccumulator::IndexVerificationStrategy> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::indexVerificationStrategy. A verification strategy allowing to verify that the matrix indices provided are valid. . ◆ mappedLocalMatrix. template<Contribution c, class Real > . std::map< ComponentType*, std::map<PairMechanicalStates, AssemblingMappedMatrixAccumulator<c, Real>*> > sofa::component::linearsystem::LocalMatrixMaps< c, Real >::mappedLocalMatrix. The local matrix (value) that has been created and associated to a mapped component (key) . Function details. ◆ clear(). template<Contribution c, class Real > . void sofa::component::linearsystem::LocalMatrixMaps< c, Real >::clear ; (; ). inline . sofacomponentlinearsystemLocalMatrixMaps; Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_local_matrix_maps.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer-members.html:298,Modifiability,inherit,inherited,298,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::MappedMassMatrixObserver< Real > Member List . This is the complete list of members for sofa::component::linearsystem::MappedMassMatrixObserver< Real >, including all inherited members. accumulatorsofa::component::linearsystem::MappedMassMatrixObserver< Real >; getObservableMass() constsofa::component::linearsystem::MappedMassMatrixObserver< Real >; getObservableState() constsofa::component::linearsystem::MappedMassMatrixObserver< Real >; hasObservableChanged()sofa::component::linearsystem::MappedMassMatrixObserver< Real >; m_dataTrackersofa::component::linearsystem::MappedMassMatrixObserver< Real >protected; m_invariantMassMatrixsofa::component::linearsystem::MappedMassMatrixObserver< Real >; m_invariantProjectedMassMatrixsofa::component::linearsystem::MappedMassMatrixObserver< Real >; m_mstatesofa::component::linearsystem::MappedMassMatrixObserver< Real >protected; m_newObservablessofa::component::linearsystem::MappedMassMatrixObserver< Real >protected; m_observedMasssofa::component::linearsystem::MappedMassMatrixObserver< Real >protected; observe(core::behavior::BaseMass *mass)sofa::component::linearsystem::MappedMassMatrixObserver< Real >; observe(core::BaseMapping *mapping)sofa::component::linearsystem::MappedMassMatrixObserver< Real >; observe(core::behavior::BaseMechanicalState *mstate)sofa::component::linearsystem::MappedMassMatrixObserver< Real >. Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html:600,Performance,cache,cache,600,﻿. SOFA API: sofa::component::linearsystem::MappedMassMatrixObserver< Real > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::MappedMassMatrixObserver< Real > Struct Template Reference . #include <MappedMassMatrixObserver.h>; Detailed Description; template<class Real>; struct sofa::component::linearsystem::MappedMassMatrixObserver< Real >; Pre-compute the mapped mass matrix assuming it is constant and store it. Support cache invalidation . Public Attributes; BaseAssemblingMatrixAccumulator< core::matrixaccumulator::Contribution::MASS > * accumulator { nullptr };  The mass accumulator associated to the observable mass. More...;  ; std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantMassMatrix;  ; Data< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantProjectedMassMatrix;  . Protected Attributes; core::DataTracker m_dataTracker;  ; core::behavior::BaseMass * m_observedMass { nullptr };  ; core::behavior::BaseMechanicalState * m_mstate { nullptr };  The state associated to the observable mass. More...;  ; bool m_newObservables = true;  . Public Member Functions; void observe (core::behavior::BaseMass *mass);  The provided mass is observed to track cache invalidation. More...;  ; void observe (core::BaseMapping *mapping);  ; void observe (core::behavior::BaseMechanicalState *mstate);  The provided state (associated to the mass) is observed to track cache invalidation. More...;  ; core::behavior::BaseMass * getObservableMass () const;  Return the observable mass. More...;  ; core::behavior::BaseMechanicalState * getObservableState () const;  Return the observable state. More...;  ; bool hasObservableChanged ();  Return true if the tracking of the observables noticed a change since the last call. More...;  . Attribute details. ◆ accumulator. template<class Rea,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html:1380,Performance,cache,cache,1380, > Struct Template Reference . #include <MappedMassMatrixObserver.h>; Detailed Description; template<class Real>; struct sofa::component::linearsystem::MappedMassMatrixObserver< Real >; Pre-compute the mapped mass matrix assuming it is constant and store it. Support cache invalidation . Public Attributes; BaseAssemblingMatrixAccumulator< core::matrixaccumulator::Contribution::MASS > * accumulator { nullptr };  The mass accumulator associated to the observable mass. More...;  ; std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantMassMatrix;  ; Data< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantProjectedMassMatrix;  . Protected Attributes; core::DataTracker m_dataTracker;  ; core::behavior::BaseMass * m_observedMass { nullptr };  ; core::behavior::BaseMechanicalState * m_mstate { nullptr };  The state associated to the observable mass. More...;  ; bool m_newObservables = true;  . Public Member Functions; void observe (core::behavior::BaseMass *mass);  The provided mass is observed to track cache invalidation. More...;  ; void observe (core::BaseMapping *mapping);  ; void observe (core::behavior::BaseMechanicalState *mstate);  The provided state (associated to the mass) is observed to track cache invalidation. More...;  ; core::behavior::BaseMass * getObservableMass () const;  Return the observable mass. More...;  ; core::behavior::BaseMechanicalState * getObservableState () const;  Return the observable state. More...;  ; bool hasObservableChanged ();  Return true if the tracking of the observables noticed a change since the last call. More...;  . Attribute details. ◆ accumulator. template<class Real > . BaseAssemblingMatrixAccumulator<core::matrixaccumulator::Contribution::MASS>* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::accumulator { nullptr }. The mass accumulator associated to the observable mass. . ◆ m_dataTracker. template<class Real > . core::DataTracker sofa::component::linearsystem::MappedMass,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html:1584,Performance,cache,cache,1584,rver< Real >; Pre-compute the mapped mass matrix assuming it is constant and store it. Support cache invalidation . Public Attributes; BaseAssemblingMatrixAccumulator< core::matrixaccumulator::Contribution::MASS > * accumulator { nullptr };  The mass accumulator associated to the observable mass. More...;  ; std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantMassMatrix;  ; Data< linearalgebra::CompressedRowSparseMatrix< Real > > m_invariantProjectedMassMatrix;  . Protected Attributes; core::DataTracker m_dataTracker;  ; core::behavior::BaseMass * m_observedMass { nullptr };  ; core::behavior::BaseMechanicalState * m_mstate { nullptr };  The state associated to the observable mass. More...;  ; bool m_newObservables = true;  . Public Member Functions; void observe (core::behavior::BaseMass *mass);  The provided mass is observed to track cache invalidation. More...;  ; void observe (core::BaseMapping *mapping);  ; void observe (core::behavior::BaseMechanicalState *mstate);  The provided state (associated to the mass) is observed to track cache invalidation. More...;  ; core::behavior::BaseMass * getObservableMass () const;  Return the observable mass. More...;  ; core::behavior::BaseMechanicalState * getObservableState () const;  Return the observable state. More...;  ; bool hasObservableChanged ();  Return true if the tracking of the observables noticed a change since the last call. More...;  . Attribute details. ◆ accumulator. template<class Real > . BaseAssemblingMatrixAccumulator<core::matrixaccumulator::Contribution::MASS>* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::accumulator { nullptr }. The mass accumulator associated to the observable mass. . ◆ m_dataTracker. template<class Real > . core::DataTracker sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_dataTracker. protected . ◆ m_invariantMassMatrix. template<class Real > . std::shared_ptr<linearalgebra::CompressedRowSparseMatrix<Real> > sofa::c,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html:4334,Performance,cache,cache,4334,ppedMassMatrixObserver< Real >::m_invariantProjectedMassMatrix. ◆ m_mstate. template<class Real > . core::behavior::BaseMechanicalState* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_mstate { nullptr }. protected . The state associated to the observable mass. . ◆ m_newObservables. template<class Real > . bool sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_newObservables = true. protected . ◆ m_observedMass. template<class Real > . core::behavior::BaseMass* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_observedMass { nullptr }. protected . Function details. ◆ getObservableMass(). template<class Real > . core::behavior::BaseMass * sofa::component::linearsystem::MappedMassMatrixObserver< Real >::getObservableMass. Return the observable mass. . ◆ getObservableState(). template<class Real > . core::behavior::BaseMechanicalState * sofa::component::linearsystem::MappedMassMatrixObserver< Real >::getObservableState. Return the observable state. . ◆ hasObservableChanged(). template<class Real > . bool sofa::component::linearsystem::MappedMassMatrixObserver< Real >::hasObservableChanged. Return true if the tracking of the observables noticed a change since the last call. . ◆ observe() [1/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::BaseMapping * ; mapping). ◆ observe() [2/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::behavior::BaseMass * ; mass). The provided mass is observed to track cache invalidation. . ◆ observe() [3/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::behavior::BaseMechanicalState * ; mstate). The provided state (associated to the mass) is observed to track cache invalidation. . sofacomponentlinearsystemMappedMassMatrixObserver; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html:4596,Performance,cache,cache,4596,ppedMassMatrixObserver< Real >::m_invariantProjectedMassMatrix. ◆ m_mstate. template<class Real > . core::behavior::BaseMechanicalState* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_mstate { nullptr }. protected . The state associated to the observable mass. . ◆ m_newObservables. template<class Real > . bool sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_newObservables = true. protected . ◆ m_observedMass. template<class Real > . core::behavior::BaseMass* sofa::component::linearsystem::MappedMassMatrixObserver< Real >::m_observedMass { nullptr }. protected . Function details. ◆ getObservableMass(). template<class Real > . core::behavior::BaseMass * sofa::component::linearsystem::MappedMassMatrixObserver< Real >::getObservableMass. Return the observable mass. . ◆ getObservableState(). template<class Real > . core::behavior::BaseMechanicalState * sofa::component::linearsystem::MappedMassMatrixObserver< Real >::getObservableState. Return the observable state. . ◆ hasObservableChanged(). template<class Real > . bool sofa::component::linearsystem::MappedMassMatrixObserver< Real >::hasObservableChanged. Return true if the tracking of the observables noticed a change since the last call. . ◆ observe() [1/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::BaseMapping * ; mapping). ◆ observe() [2/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::behavior::BaseMass * ; mass). The provided mass is observed to track cache invalidation. . ◆ observe() [3/3]. template<class Real > . void sofa::component::linearsystem::MappedMassMatrixObserver< Real >::observe ; (; core::behavior::BaseMechanicalState * ; mstate). The provided state (associated to the mass) is observed to track cache invalidation. . sofacomponentlinearsystemMappedMassMatrixObserver; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapped_mass_matrix_observer.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapping_graph_1_1_same_group_components-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::MappingGraph::SameGroupComponents Member List . This is the complete list of members for sofa::component::linearsystem::MappingGraph::SameGroupComponents, including all inherited members. forceFieldssofa::component::linearsystem::MappingGraph::SameGroupComponents; massessofa::component::linearsystem::MappingGraph::SameGroupComponents. Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapping_graph_1_1_same_group_components-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_mapping_graph_1_1_same_group_components-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet Member List . This is the complete list of members for sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet, including all inherited members. discardRowCol(sofa::Index row, sofa::Index col) overridesofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichletvirtual; m_globalMatrixsofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet; m_offsetsofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet; ~Dirichlet() override=defaultsofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet; ~ZeroDirichletCondition()=defaultsofa::core::behavior::ZeroDirichletConditionvirtual. Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet.html:1054,Modifiability,inherit,inherited,1054,"linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet Struct Referencefinal . #include <MatrixLinearSystem.h>. Inheritance diagram for sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet:. [legend]; Detailed Description; template<class TMatrix, class TVector>; struct sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet; Define how zero Dirichlet boundary conditions are applied on the global matrix . Public Attributes; sofa::type::Vec2u m_offset;  ; TMatrix * m_globalMatrix { nullptr };  The matrix to apply a zero Dirichlet boundary condition. More...;  . Public Member Functions;  ~Dirichlet () override=default;  ; void discardRowCol (sofa::Index row, sofa::Index col) override;  ;  Public Member Functions inherited from sofa::core::behavior::ZeroDirichletCondition; virtual ~ZeroDirichletCondition ()=default;  . Attribute details. ◆ m_globalMatrix. template<class TMatrix , class TVector > . TMatrix* sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet::m_globalMatrix { nullptr }. The matrix to apply a zero Dirichlet boundary condition. . ◆ m_offset. template<class TMatrix , class TVector > . sofa::type::Vec2u sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet::m_offset. Constructor details. ◆ ~Dirichlet(). template<class TMatrix , class TVector > . sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet::~Dirichlet ; (; ). overridedefault . Function details. ◆ discardRowCol(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::Dirichlet::discardRowCol ; (; sofa::Index ; , . sofa::Index ;  . ). overridevirtual . Zero ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_dirichlet.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_independent_contributors-members.html:360,Modifiability,inherit,inherited,360,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors Member List . This is the complete list of members for sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors, including all inherited members. idsofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors; m_dampingsofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors; m_geometricStiffnesssofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors; m_masssofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors; m_stiffnesssofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::IndependentContributors. Generated on Mon Nov 11 2024 02:47:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_independent_contributors-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system_1_1_independent_contributors-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_center_of_mass_mapping_operation-members.html:314,Modifiability,inherit,inherited,314,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::linear::CenterOfMassMappingOperation< Model > Member List . This is the complete list of members for sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >, including all inherited members. computeTotalMass(const Model *model, const sofa::core::behavior::BaseMass *mass)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic; Coord typedefsofa::component::mapping::linear::CenterOfMassMappingOperation< Model >; Deriv typedefsofa::component::mapping::linear::CenterOfMassMappingOperation< Model >; fetchMass(const Model *m)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic; getVecCoord(const Model *m, const sofa::core::VecId id)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic; getVecDeriv(Model *m, const sofa::core::VecId id)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic; VecCoord typedefsofa::component::mapping::linear::CenterOfMassMappingOperation< Model >; VecDeriv typedefsofa::component::mapping::linear::CenterOfMassMappingOperation< Model >; WeightedCoord(const VecCoord *v, const sofa::core::behavior::BaseMass *m)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic; WeightedDeriv(const VecDeriv *v, const sofa::core::behavior::BaseMass *m)sofa::component::mapping::linear::CenterOfMassMappingOperation< Model >inlinestatic. Generated on Mon Nov 11 2024 02:50:15 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_center_of_mass_mapping_operation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_center_of_mass_mapping_operation-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::linear::RigidMappingMatrixHelper< 2, Real > Member List . This is the complete list of members for sofa::component::mapping::linear::RigidMappingMatrixHelper< 2, Real >, including all inherited members. setMatrix(Matrix &mat, const Vector &vec)sofa::component::mapping::linear::RigidMappingMatrixHelper< 2, Real >inlinestatic. Generated on Mon Nov 11 2024 02:50:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::linear::RigidMappingMatrixHelper< 3, Real > Member List . This is the complete list of members for sofa::component::mapping::linear::RigidMappingMatrixHelper< 3, Real >, including all inherited members. setMatrix(Matrix &mat, const Vector &vec)sofa::component::mapping::linear::RigidMappingMatrixHelper< 3, Real >inlinestatic. Generated on Mon Nov 11 2024 02:50:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1linear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html:323,Deployability,update,updateTarget,323,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Member List . This is the complete list of members for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping, including all inherited members. updateTarget(unsigned index, SReal x, SReal y, SReal z)=0sofa::component::mapping::nonlinear::BaseDistanceFromTargetMappingpure virtual. Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Member List . This is the complete list of members for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping, including all inherited members. updateTarget(unsigned index, SReal x, SReal y, SReal z)=0sofa::component::mapping::nonlinear::BaseDistanceFromTargetMappingpure virtual. Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html:496,Deployability,update,updateTarget,496,"﻿. SOFA API: sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Referenceabstract . #include <DistanceFromTargetMapping.h>. Inheritance diagram for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping:. [legend]. Public Member Functions; virtual void updateTarget (unsigned index, SReal x, SReal y, SReal z)=0;  . Function details. ◆ updateTarget(). virtual void sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping::updateTarget ; (; unsigned ; index, . SReal ; x, . SReal ; y, . SReal ; z . ). pure virtual . Implemented in sofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >. sofacomponentmappingnonlinearBaseDistanceFromTargetMapping; Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html:579,Deployability,update,updateTarget,579,"﻿. SOFA API: sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Referenceabstract . #include <DistanceFromTargetMapping.h>. Inheritance diagram for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping:. [legend]. Public Member Functions; virtual void updateTarget (unsigned index, SReal x, SReal y, SReal z)=0;  . Function details. ◆ updateTarget(). virtual void sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping::updateTarget ; (; unsigned ; index, . SReal ; x, . SReal ; y, . SReal ; z . ). pure virtual . Implemented in sofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >. sofacomponentmappingnonlinearBaseDistanceFromTargetMapping; Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html:676,Deployability,update,updateTarget,676,"﻿. SOFA API: sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Referenceabstract . #include <DistanceFromTargetMapping.h>. Inheritance diagram for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping:. [legend]. Public Member Functions; virtual void updateTarget (unsigned index, SReal x, SReal y, SReal z)=0;  . Function details. ◆ updateTarget(). virtual void sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping::updateTarget ; (; unsigned ; index, . SReal ; x, . SReal ; y, . SReal ; z . ). pure virtual . Implemented in sofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >. sofacomponentmappingnonlinearBaseDistanceFromTargetMapping; Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping_1_1_jacobian_entry-members.html:408,Modifiability,inherit,inherited,408,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::JacobianEntry Member List . This is the complete list of members for sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::JacobianEntry, including all inherited members. jacobianValuesofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::JacobianEntry; operator<(const JacobianEntry &other) constsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::JacobianEntryinline; vertexIdsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::JacobianEntry. Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping_1_1_jacobian_entry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping_1_1_jacobian_entry-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 2, Real > Member List . This is the complete list of members for sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 2, Real >, including all inherited members. setMatrix(Matrix &mat, const Vector &vec)sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 2, Real >inlinestatic. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_012_00_01_real_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 3, Real > Member List . This is the complete list of members for sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 3, Real >, including all inherited members. setMatrix(Matrix &mat, const Vector &vec)sofa::component::mapping::nonlinear::RigidMappingMatrixHelper< 3, Real >inlinestatic. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping_matrix_helper_3_013_00_01_real_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor-members.html:318,Modifiability,inherit,inherited,318,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mass::AddMToMatrixFunctor< Deriv, MassType, MatrixType > Member List . This is the complete list of members for sofa::component::mass::AddMToMatrixFunctor< Deriv, MassType, MatrixType >, including all inherited members. operator()(MatrixType *mat, MassType mass, int pos, MassType fact)sofa::component::mass::AddMToMatrixFunctor< Deriv, MassType, MatrixType >inline; operator()(MatrixType *mat, MassType mass, int posRow, int posColumn, MassType fact)sofa::component::mass::AddMToMatrixFunctor< Deriv, MassType, MatrixType >inline. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor_3_01defaulttype_1_1_rigid_deriv_3_01d7907f01a4f64739137740e507957d60.html:426,Modifiability,inherit,inherited,426,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mass::AddMToMatrixFunctor< defaulttype::RigidDeriv< N, Real >, defaulttype::RigidMass< N, Real >, MatrixType > Member List . This is the complete list of members for sofa::component::mass::AddMToMatrixFunctor< defaulttype::RigidDeriv< N, Real >, defaulttype::RigidMass< N, Real >, MatrixType >, including all inherited members. operator()(MatrixType *mat, const defaulttype::RigidMass< N, Real > &mass, int pos, Real fact)sofa::component::mass::AddMToMatrixFunctor< defaulttype::RigidDeriv< N, Real >, defaulttype::RigidMass< N, Real >, MatrixType >inline. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor_3_01defaulttype_1_1_rigid_deriv_3_01d7907f01a4f64739137740e507957d60.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_add_m_to_matrix_functor_3_01defaulttype_1_1_rigid_deriv_3_01d7907f01a4f64739137740e507957d60.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01defaulttype_1_1_std_vector_types_3_01_t_coord_6d3a1e75ff1118f5711a636ce8049aa7.html:346,Modifiability,inherit,inherited,346,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mass::MassType< defaulttype::StdVectorTypes< TCoord, TDeriv, TReal > > Member List . This is the complete list of members for sofa::component::mass::MassType< defaulttype::StdVectorTypes< TCoord, TDeriv, TReal > >, including all inherited members. type typedefsofa::component::mass::MassType< defaulttype::StdVectorTypes< TCoord, TDeriv, TReal > >. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01defaulttype_1_1_std_vector_types_3_01_t_coord_6d3a1e75ff1118f5711a636ce8049aa7.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01defaulttype_1_1_std_vector_types_3_01_t_coord_6d3a1e75ff1118f5711a636ce8049aa7.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01sofa_1_1defaulttype_1_1_std_rigid_types_3_01_n_00_01real_01_4_01_4-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mass::MassType< sofa::defaulttype::StdRigidTypes< N, real > > Member List . This is the complete list of members for sofa::component::mass::MassType< sofa::defaulttype::StdRigidTypes< N, real > >, including all inherited members. type typedefsofa::component::mass::MassType< sofa::defaulttype::StdRigidTypes< N, real > >. Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01sofa_1_1defaulttype_1_1_std_rigid_types_3_01_n_00_01real_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mass_1_1_mass_type_3_01sofa_1_1defaulttype_1_1_std_rigid_types_3_01_n_00_01real_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field_1_1_temp_vars-members.html:374,Modifiability,inherit,inherited,374,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars Member List . This is the complete list of members for sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars, including all inherited members. dampingsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; nelemssofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; pos6Dsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; stiffabssofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; stiffnesssofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; vcentersofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; vinv_r2sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars; vrsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::TempVars. Generated on Mon Nov 11 2024 02:52:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field_1_1_temp_vars-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field_1_1_temp_vars-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:128,Testability,test,testing,128,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:240,Testability,test,testing,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:329,Testability,test,testing,329,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:374,Testability,test,testing,374,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:436,Testability,test,testing,436,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:478,Testability,test,testing,478,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:510,Testability,test,testing,510,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:561,Testability,test,testing,561,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:606,Testability,test,testing,606,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:656,Testability,test,testing,656,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:759,Testability,test,testing,759,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:805,Testability,test,testing,805,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html:856,Testability,test,testing,856,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::odesolver::testing::ODESolverSpringTest Member List . This is the complete list of members for sofa::component::odesolver::testing::ODESolverSpringTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; m_sisofa::component::odesolver::testing::ODESolverSpringTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; prepareScene(double K, double m, double l0)sofa::component::odesolver::testing::ODESolverSpringTestinline; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:499,Modifiability,inherit,inherited,499,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:739,Modifiability,inherit,inherited,739,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:889,Modifiability,inherit,inherited,889,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:1147,Modifiability,inherit,inherited,1147,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:41,Testability,test,testing,41,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:260,Testability,test,testing,260,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:394,Testability,test,testing,394,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:520,Testability,test,testing,520,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:545,Testability,test,testing,545,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:593,Testability,test,testing,593,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:760,Testability,test,testing,760,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:910,Testability,test,testing,910,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:1168,Testability,test,testing,1168,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:1328,Testability,test,testing,1328,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html:1436,Testability,test,testing,1436,"﻿. SOFA API: sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::testing::ODESolverSpringTest Struct Reference . #include <ODESolverSpringTest.h>. Inheritance diagram for sofa::component::odesolver::testing::ODESolverSpringTest:. [legend]. Public Attributes; SceneInstance m_si {};  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void prepareScene (double K, double m, double l0);  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_si. SceneInstance sofa::component::odesolver::testing::ODESolverSpringTest::m_si {}. Function details. ◆ prepareScene(). void sofa::component::odesolver::testing::ODESolverSpringTest::prepareScene ; (; double ; K, . double ; m, . double ; l0 . ). inline . sofacomponentodesolvertestingODESolverSpringTest; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1odesolver_1_1testing_1_1_o_d_e_solver_spring_test.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters-members.html:358,Modifiability,inherit,inherited,358,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Member List . This is the complete list of members for sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >, including all inherited members. anisotropyDirectionsofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; Coord typedefsofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; parameterAlphasofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; parameterArraysofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; parameterTausofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; Real typedefsofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >. Generated on Mon Nov 11 2024 03:01:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:1169,Deployability,configurat,configuration,1169,"l members . sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterTau. sofacomponentsolidmechanicsfemhyperelasticmaterialMaterialParameters; Generated on Mon No",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:651,Energy Efficiency,energy,energy,651,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<t",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:1889,Integrability,depend,depends,1889,"::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterTau. sofacomponentsolidmechanicsfemhyperelasticmaterialMaterialParameters; Generated on Mon Nov 11 2024 03:01:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:1169,Modifiability,config,configuration,1169,"l members . sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterTau. sofacomponentsolidmechanicsfemhyperelasticmaterialMaterialParameters; Generated on Mon No",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_edge_information_1_1_spring-members.html:374,Modifiability,inherit,inherited,374,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::EdgeInformation::Spring Member List . This is the complete list of members for sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::EdgeInformation::Spring, including all inherited members. DfDxsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::EdgeInformation::Spring; edgesofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::EdgeInformation::Spring; restLengthsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::EdgeInformation::Spring. Generated on Mon Nov 11 2024 03:04:21 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_edge_information_1_1_spring-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_edge_information_1_1_spring-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_force_output-members.html:350,Modifiability,inherit,inherited,350,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::ForceOutput Member List . This is the complete list of members for sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::ForceOutput, including all inherited members. forcesofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::ForceOutput; forceIntensitysofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::ForceOutput; inverseLengthsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::ForceOutput. Generated on Mon Nov 11 2024 03:04:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_force_output-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs_1_1_force_output-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html:548,Energy Efficiency,energy,energysofa,548,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Member List . This is the complete list of members for sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce, including all inherited members. dForce_dXsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; DPos typedefsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; energysofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; forcesofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce. Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html:338,Modifiability,inherit,inherited,338,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Member List . This is the complete list of members for sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce, including all inherited members. dForce_dXsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; DPos typedefsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; energysofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; forcesofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce. Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html:390,Energy Efficiency,energy,energy,390,"﻿. SOFA API: sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference . #include <SpringForceField.h>. Public Attributes; Real energy;  ; std::pair< DPos, DPos > force;  ; type::MatNoInit< N, N, Real > dForce_dX;  . Attribute details. ◆ dForce_dX. template<class DataTypes > . type::MatNoInit<N, N, Real> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::dForce_dX. ◆ energy. template<class DataTypes > . Real sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::energy. ◆ force. template<class DataTypes > . std::pair<DPos, DPos> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::force. sofacomponentsolidmechanicsspringSpringForceFieldSpringForce; Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html:666,Energy Efficiency,energy,energy,666,"﻿. SOFA API: sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference . #include <SpringForceField.h>. Public Attributes; Real energy;  ; std::pair< DPos, DPos > force;  ; type::MatNoInit< N, N, Real > dForce_dX;  . Attribute details. ◆ dForce_dX. template<class DataTypes > . type::MatNoInit<N, N, Real> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::dForce_dX. ◆ energy. template<class DataTypes > . Real sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::energy. ◆ force. template<class DataTypes > . std::pair<DPos, DPos> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::force. sofacomponentsolidmechanicsspringSpringForceFieldSpringForce; Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html:793,Energy Efficiency,energy,energy,793,"﻿. SOFA API: sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference . #include <SpringForceField.h>. Public Attributes; Real energy;  ; std::pair< DPos, DPos > force;  ; type::MatNoInit< N, N, Real > dForce_dX;  . Attribute details. ◆ dForce_dX. template<class DataTypes > . type::MatNoInit<N, N, Real> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::dForce_dX. ◆ energy. template<class DataTypes > . Real sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::energy. ◆ force. template<class DataTypes > . std::pair<DPos, DPos> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::force. sofacomponentsolidmechanicsspringSpringForceFieldSpringForce; Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field_1_1_spring-members.html:340,Modifiability,inherit,inherited,340,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Spring Member List . This is the complete list of members for sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Spring, including all inherited members. kdsofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Spring; kssofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Spring; operator<<(std::ostream &os, const Spring &)sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Springfriend; operator>>(std::istream &in, Spring &)sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Springfriend; restVectorsofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Spring; Spring(Real _ks, Real _kd, Deriv _rl)sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Springinline; Spring()sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::Springinline. Generated on Mon Nov 11 2024 03:08:49 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field_1_1_spring-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field_1_1_spring-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_ramification_topology_1_1_connexion-members.html:342,Modifiability,inherit,inherited,342,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion Member List . This is the complete list of members for sofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion, including all inherited members. _childrensofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _coarsestParentsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _hexaIdxsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _neighborssofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _nonRamifiedHexaIdxsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _parentsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; _tmpsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; Children typedefsofa::component::topology::container::grid::SparseGridRamificationTopology::Connexion; Connexion()sofa::component::topology::container::grid::SparseGridRamificationTopology::Connexioninline; propagateConnexionNumberToNeighbors(int connexionNumber, const type::vector< Connexion * > &allFineConnexions)sofa::component::topology::container::grid::SparseGridRamificationTopology::Connexioninline. Generated on Mon Nov 11 2024 03:10:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_ramification_topology_1_1_connexion-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_ramification_topology_1_1_connexion-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_base_ordering_method_1_1_sparse_matrix_pattern-members.html:294,Modifiability,inherit,inherited,294,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern Member List . This is the complete list of members for sofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern, including all inherited members. colsIndexsofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern; matrixSizesofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern; numberOfNonZerossofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern; rowBeginsofa::core::behavior::BaseOrderingMethod::SparseMatrixPattern. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_base_ordering_method_1_1_sparse_matrix_pattern-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_base_ordering_method_1_1_sparse_matrix_pattern-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_block_type-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::BlockType Member List . This is the complete list of members for sofa::core::behavior::BlockType, including all inherited members. blocDatasofa::core::behavior::BlockType; blocPrecisionsofa::core::behavior::BlockType; operator<(const BlockType &blocType) constsofa::core::behavior::BlockTypeinline; operator<<(std::ostream &out, const BlockType &s)sofa::core::behavior::BlockTypefriend; operator==(const BlockType &blocType) constsofa::core::behavior::BlockTypeinline; toString() constsofa::core::behavior::BlockTypeinline. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_block_type-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_block_type-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer_1_1_dispatcher_force_field__add_k_to_matrix-members.html:348,Modifiability,inherit,inherited,348,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF > Member List . This is the complete list of members for sofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF >, including all inherited members. DispatcherForceField_addKToMatrix(FF *main, const sofa::core::MechanicalParams *mparams)sofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF >inline; mainsofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF >; mparamssofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF >; operator()(const MatrixWriter &m)sofa::core::behavior::BlocMatrixWriter< TBloc >::DispatcherForceField_addKToMatrix< FF >inline. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer_1_1_dispatcher_force_field__add_k_to_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer_1_1_dispatcher_force_field__add_k_to_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_damping_matrix_1_1_d_f-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::DampingMatrix::DF Member List . This is the complete list of members for sofa::core::behavior::DampingMatrix::DF, including all inherited members. DF(BaseMechanicalState *_mstate1, DampingMatrix *_mat)sofa::core::behavior::DampingMatrix::DFinline; withRespectToVelocityIn(BaseMechanicalState *mstate2) constsofa::core::behavior::DampingMatrix::DFinline. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_damping_matrix_1_1_d_f-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_damping_matrix_1_1_d_f-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_stiffness_matrix_1_1_d_f-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::StiffnessMatrix::DF Member List . This is the complete list of members for sofa::core::behavior::StiffnessMatrix::DF, including all inherited members. DF(BaseMechanicalState *_mstate1, StiffnessMatrix *_mat)sofa::core::behavior::StiffnessMatrix::DFinline; withRespectToPositionsIn(BaseMechanicalState *mstate2) constsofa::core::behavior::StiffnessMatrix::DFinline. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_stiffness_matrix_1_1_d_f-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_stiffness_matrix_1_1_d_f-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_zero_dirichlet_condition-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::behavior::ZeroDirichletCondition Member List . This is the complete list of members for sofa::core::behavior::ZeroDirichletCondition, including all inherited members. discardRowCol(sofa::Index, sofa::Index)sofa::core::behavior::ZeroDirichletConditioninlinevirtual; ~ZeroDirichletCondition()=defaultsofa::core::behavior::ZeroDirichletConditionvirtual. Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_zero_dirichlet_condition-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1behavior_1_1_zero_dirichlet_condition-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::get_base_object_strong< c > Member List . This is the complete list of members for sofa::core::get_base_object_strong< c >, including all inherited members. ComponentType typedefsofa::core::get_base_object_strong< c >; type typedefsofa::core::get_base_object_strong< c >. Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong.html:561,Integrability,depend,depending,561,"﻿. SOFA API: sofa::core::get_base_object_strong< c > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::core::get_base_object_strong< c > Struct Template Reference . #include <BaseMatrixAccumulatorComponent.h>; Detailed Description; template<matrixaccumulator::Contribution c>; struct sofa::core::get_base_object_strong< c >; Provides member typedef type for known Contribution using SFINAE; Typedef type is an abstract strong type derived from MatrixAccumulator and BaseObject, and depending on . sofacoreget_base_object_strong; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1get__base__object__strong.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong.html:551,Integrability,depend,depending,551,﻿. SOFA API: sofa::core::matrixaccumulator::get_abstract_strong< c > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_abstract_strong< c > Struct Template Reference . #include <MatrixAccumulator.h>; Detailed Description; template<Contribution c>; struct sofa::core::matrixaccumulator::get_abstract_strong< c >; Provides member typedef @type for known Contribution using SFINAE; Typedef @type is an abstract strong type derived from @MatrixAccumulatorInterface and depending on Typedef @ComponentType is the type of object associated to the Contribution . sofacorematrixaccumulatorget_abstract_strong; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_abstract_strong< Contribution::DAMPING > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_abstract_strong< Contribution::DAMPING >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::DAMPING >; MatrixBuilderType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::DAMPING >; type typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::DAMPING >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_g_e_o_m_e588029b2bcc0b21ff1fc66832f9851cb.html:346,Modifiability,inherit,inherited,346,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >; MatrixBuilderType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >; type typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_g_e_o_m_e588029b2bcc0b21ff1fc66832f9851cb.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_g_e_o_m_e588029b2bcc0b21ff1fc66832f9851cb.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_abstract_strong< Contribution::MASS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_abstract_strong< Contribution::MASS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::MASS >; MatrixBuilderType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::MASS >; type typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::MASS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_abstract_strong< Contribution::STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_abstract_strong< Contribution::STIFFNESS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::STIFFNESS >; MatrixBuilderType typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::STIFFNESS >; type typedefsofa::core::matrixaccumulator::get_abstract_strong< Contribution::STIFFNESS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong.html:561,Integrability,depend,depending,561,﻿. SOFA API: sofa::core::matrixaccumulator::get_list_abstract_strong< c > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_list_abstract_strong< c > Struct Template Reference . #include <MatrixAccumulator.h>; Detailed Description; template<Contribution c>; struct sofa::core::matrixaccumulator::get_list_abstract_strong< c >; Provides member typedef @type for known Contribution using SFINAE; Typedef @type is an abstract strong type derived from @ListMatrixAccumulator and depending on . sofacorematrixaccumulatorget_list_abstract_strong; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::DAMPING > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::DAMPING >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::DAMPING >; type typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::DAMPING >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_g_ef5b917c1f63b4183ce767c7a826f61b9.html:356,Modifiability,inherit,inherited,356,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::GEOMETRIC_STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >; type typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::GEOMETRIC_STIFFNESS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_g_ef5b917c1f63b4183ce767c7a826f61b9.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_g_ef5b917c1f63b4183ce767c7a826f61b9.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html:326,Modifiability,inherit,inherited,326,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::MASS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::MASS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::MASS >; type typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::MASS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_m_a_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html:336,Modifiability,inherit,inherited,336,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::STIFFNESS >, including all inherited members. ComponentType typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::STIFFNESS >; type typedefsofa::core::matrixaccumulator::get_list_abstract_strong< Contribution::STIFFNESS >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1get__list__abstract__strong_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_composite_index_verification_strategy-members.html:330,Modifiability,inherit,inherited,330,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< Strategies > Member List . This is the complete list of members for sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< Strategies >, including all inherited members. checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< Strategies >inline; skip_insertion_if_error typedefsofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< Strategies >; verify_index typedefsofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< Strategies >. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_composite_index_verification_strategy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_composite_index_verification_strategy-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::ContributionName< Contribution::DAMPING > Member List . This is the complete list of members for sofa::core::matrixaccumulator::ContributionName< Contribution::DAMPING >, including all inherited members. Name()sofa::core::matrixaccumulator::ContributionName< Contribution::DAMPING >inlinestatic. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_d_a_m_p_i_n_g_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_g_e_o_m_e_t_701e39a001625a51e06b3390efed52d8.html:340,Modifiability,inherit,inherited,340,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::ContributionName< Contribution::GEOMETRIC_STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::ContributionName< Contribution::GEOMETRIC_STIFFNESS >, including all inherited members. Name()sofa::core::matrixaccumulator::ContributionName< Contribution::GEOMETRIC_STIFFNESS >inlinestatic. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_g_e_o_m_e_t_701e39a001625a51e06b3390efed52d8.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_g_e_o_m_e_t_701e39a001625a51e06b3390efed52d8.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_m_a_s_s_01_4-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::ContributionName< Contribution::MASS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::ContributionName< Contribution::MASS >, including all inherited members. Name()sofa::core::matrixaccumulator::ContributionName< Contribution::MASS >inlinestatic. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_m_a_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_m_a_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html:320,Modifiability,inherit,inherited,320,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::ContributionName< Contribution::STIFFNESS > Member List . This is the complete list of members for sofa::core::matrixaccumulator::ContributionName< Contribution::STIFFNESS >, including all inherited members. Name()sofa::core::matrixaccumulator::ContributionName< Contribution::STIFFNESS >inlinestatic. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_contribution_name_3_01_contribution_1_1_s_t_i_f_f_n_e_s_s_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_index_verification_strategy-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::IndexVerificationStrategy Member List . This is the complete list of members for sofa::core::matrixaccumulator::IndexVerificationStrategy, including all inherited members. checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col)=0sofa::core::matrixaccumulator::IndexVerificationStrategypure virtual; skip_insertion_if_error typedefsofa::core::matrixaccumulator::IndexVerificationStrategy; verify_index typedefsofa::core::matrixaccumulator::IndexVerificationStrategy; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_index_verification_strategy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_index_verification_strategy-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy Member List . This is the complete list of members for sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy, including all inherited members. checkColIndex(sofa::SignedIndex col)=0sofa::core::matrixaccumulator::IndividualIndexVerificationStrategyprotectedpure virtual; checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::core::matrixaccumulator::IndividualIndexVerificationStrategyinlinevirtual; checkRowIndex(sofa::SignedIndex row)=0sofa::core::matrixaccumulator::IndividualIndexVerificationStrategyprotectedpure virtual; skip_insertion_if_error typedefsofa::core::matrixaccumulator::IndexVerificationStrategy; verify_index typedefsofa::core::matrixaccumulator::IndexVerificationStrategy; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy.html:626,Modifiability,inherit,inherited,626,"﻿. SOFA API: sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy Struct Referenceabstract . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy:. [legend]. Public Member Functions; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Protected Member Functions; virtual bool checkRowIndex (sofa::SignedIndex row)=0;  ; virtual bool checkColIndex (sofa::SignedIndex col)=0;  . Function details. ◆ checkColIndex(). virtual bool sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy::checkColIndex ; (; sofa::SignedIndex ; col). protectedpure virtual . Implemented in sofa::core::matrixaccumulator::RangeVerification. ◆ checkRowColIndices(). bool sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy::checkRowColIndices ; (; const sofa::SignedIndex ; row, . const sofa::SignedIndex ; col . ). inlineoverridevirtual . Implements sofa::core::matrixaccumulator::IndexVerificationStrategy. ◆ checkRowIndex(). virtual bool sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy::checkRowIndex ; (; sofa::SignedIndex ; row). protectedpure virtual . Implemented in sofa::core::matrixaccumulator::RangeVerification. sofacorematrixaccumulatorIndividualIndexVerificationStrategy; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_individual_index_verification_strategy.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::NoIndexVerification Member List . This is the complete list of members for sofa::core::matrixaccumulator::NoIndexVerification, including all inherited members. skip_insertion_if_error typedefsofa::core::matrixaccumulator::NoIndexVerification; verify_index typedefsofa::core::matrixaccumulator::NoIndexVerification; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification.html:422,Modifiability,inherit,inherited,422,﻿. SOFA API: sofa::core::matrixaccumulator::NoIndexVerification Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::core::matrixaccumulator::NoIndexVerification Struct Reference . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::NoIndexVerification:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . sofacorematrixaccumulatorNoIndexVerification; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_no_index_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::RangeVerification Member List . This is the complete list of members for sofa::core::matrixaccumulator::RangeVerification, including all inherited members. checkColIndex(sofa::SignedIndex col) overridesofa::core::matrixaccumulator::RangeVerificationvirtual; checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::core::matrixaccumulator::IndividualIndexVerificationStrategyinlinevirtual; checkRowIndex(sofa::SignedIndex row) overridesofa::core::matrixaccumulator::RangeVerificationvirtual; logger() constsofa::core::matrixaccumulator::RangeVerification; m_messageComponentsofa::core::matrixaccumulator::RangeVerification; maxColIndexsofa::core::matrixaccumulator::RangeVerification; maxRowIndexsofa::core::matrixaccumulator::RangeVerification; minColIndexsofa::core::matrixaccumulator::RangeVerification; minRowIndexsofa::core::matrixaccumulator::RangeVerification; skip_insertion_if_error typedefsofa::core::matrixaccumulator::RangeVerification; verify_index typedefsofa::core::matrixaccumulator::RangeVerification; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html:657,Testability,log,logger,657,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::matrixaccumulator::RangeVerification Member List . This is the complete list of members for sofa::core::matrixaccumulator::RangeVerification, including all inherited members. checkColIndex(sofa::SignedIndex col) overridesofa::core::matrixaccumulator::RangeVerificationvirtual; checkRowColIndices(const sofa::SignedIndex row, const sofa::SignedIndex col) overridesofa::core::matrixaccumulator::IndividualIndexVerificationStrategyinlinevirtual; checkRowIndex(sofa::SignedIndex row) overridesofa::core::matrixaccumulator::RangeVerificationvirtual; logger() constsofa::core::matrixaccumulator::RangeVerification; m_messageComponentsofa::core::matrixaccumulator::RangeVerification; maxColIndexsofa::core::matrixaccumulator::RangeVerification; maxRowIndexsofa::core::matrixaccumulator::RangeVerification; minColIndexsofa::core::matrixaccumulator::RangeVerification; minRowIndexsofa::core::matrixaccumulator::RangeVerification; skip_insertion_if_error typedefsofa::core::matrixaccumulator::RangeVerification; verify_index typedefsofa::core::matrixaccumulator::RangeVerification; ~IndexVerificationStrategy()=defaultsofa::core::matrixaccumulator::IndexVerificationStrategyvirtual. Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:980,Modifiability,inherit,inherited,980,"trixaccumulator::RangeVerification Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::matrixaccumulator::RangeVerification Struct Reference . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::RangeVerification:. [legend]. Public Attributes; sofa::SignedIndex minRowIndex { 0 };  ; sofa::SignedIndex maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::SignedIndex minColIndex { 0 };  ; sofa::SignedIndex maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:1184,Modifiability,inherit,inherited,1184,"trixaccumulator::RangeVerification Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::matrixaccumulator::RangeVerification Struct Reference . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::RangeVerification:. [legend]. Public Attributes; sofa::SignedIndex minRowIndex { 0 };  ; sofa::SignedIndex maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::SignedIndex minColIndex { 0 };  ; sofa::SignedIndex maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:782,Testability,log,logging,782,"trixaccumulator::RangeVerification Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::matrixaccumulator::RangeVerification Struct Reference . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::RangeVerification:. [legend]. Public Attributes; sofa::SignedIndex minRowIndex { 0 };  ; sofa::SignedIndex maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::SignedIndex minColIndex { 0 };  ; sofa::SignedIndex maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:823,Testability,log,logger,823,"trixaccumulator::RangeVerification Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::matrixaccumulator::RangeVerification Struct Reference . #include <MatrixAccumulator.h>. Inheritance diagram for sofa::core::matrixaccumulator::RangeVerification:. [legend]. Public Attributes; sofa::SignedIndex minRowIndex { 0 };  ; sofa::SignedIndex maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::SignedIndex minColIndex { 0 };  ; sofa::SignedIndex maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() };  ; sofa::core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:2445,Testability,log,logger,2445,"core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkColIndex ; (; sofa::SignedIndex ; col). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ checkRowIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkRowIndex ; (; sofa::SignedIndex ; row). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::core::matrixaccumulator::RangeVerification::logger ; (; ); const. sofacorematrixaccumulatorRangeVerification; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:2463,Testability,log,logging,2463,"core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkColIndex ; (; sofa::SignedIndex ; col). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ checkRowIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkRowIndex ; (; sofa::SignedIndex ; row). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::core::matrixaccumulator::RangeVerification::logger ; (; ); const. sofacorematrixaccumulatorRangeVerification; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html:2554,Testability,log,logger,2554,"core::objectmodel::BaseObject * m_messageComponent { nullptr };  . Public Member Functions; helper::logging::MessageDispatcher::LoggerStream logger () const;  ; bool checkRowIndex (sofa::SignedIndex row) override;  ; bool checkColIndex (sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy; bool checkRowColIndices (const sofa::SignedIndex row, const sofa::SignedIndex col) override;  ;  Public Member Functions inherited from sofa::core::matrixaccumulator::IndexVerificationStrategy; virtual ~IndexVerificationStrategy ()=default;  . Additional Inherited Members. Attribute details. ◆ m_messageComponent. sofa::core::objectmodel::BaseObject* sofa::core::matrixaccumulator::RangeVerification::m_messageComponent { nullptr }. ◆ maxColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxColIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ maxRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::maxRowIndex { std::numeric_limits<sofa::SignedIndex>::max() }. ◆ minColIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minColIndex { 0 }. ◆ minRowIndex. sofa::SignedIndex sofa::core::matrixaccumulator::RangeVerification::minRowIndex { 0 }. Function details. ◆ checkColIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkColIndex ; (; sofa::SignedIndex ; col). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ checkRowIndex(). bool sofa::core::matrixaccumulator::RangeVerification::checkRowIndex ; (; sofa::SignedIndex ; row). overridevirtual . Implements sofa::core::matrixaccumulator::IndividualIndexVerificationStrategy. ◆ logger(). helper::logging::MessageDispatcher::LoggerStream sofa::core::matrixaccumulator::RangeVerification::logger ; (; ); const. sofacorematrixaccumulatorRangeVerification; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1matrixaccumulator_1_1_range_verification.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name-members.html:320,Modifiability,inherit,inherited,320,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< T > Member List . This is the complete list of members for sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< T >, including all inherited members. Get()sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< T >inlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name_3_01f5b603fa2507d3a0e5a0c76f9a214451.html:346,Modifiability,inherit,inherited,346,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< C< T1, Ts... > > Member List . This is the complete list of members for sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< C< T1, Ts... > >, including all inherited members. Get()sofa::core::objectmodel::BaseClassNameHelper::DefaultTypeTemplateName< C< T1, Ts... > >inlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name_3_01f5b603fa2507d3a0e5a0c76f9a214451.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_base_class_name_helper_1_1_default_type_template_name_3_01f5b603fa2507d3a0e5a0c76f9a214451.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_0a68410d99502fe8265b0c6310990001c.html:348,Modifiability,inherit,inherited,348,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::T Member List . This is the complete list of members for sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::T, including all inherited members. get() constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator TDestType *() constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator!() constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator!=(const TDestPtr &p) constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator*() constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator->() constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator=(const TDestPtr &v)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; operator==(const TDestPtr &p) constsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; pathsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::T; ptrsofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::T; T()sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinline; T(const TDestPtr &p)sofa::core::objectmodel::LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >::Tinlineexplicit. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_0a68410d99502fe8265b0c6310990001c.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_link_traits_value_type_3_01_t_dest_type_00_01_t_dest_ptr_0a68410d99502fe8265b0c6310990001c.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_parents-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Parents< T, Types > Member List . This is the complete list of members for sofa::core::objectmodel::Parents< T, Types >, including all inherited members. get(const std::size_t i)sofa::core::objectmodel::Parents< T, Types >inlinestatic; nbsofa::core::objectmodel::Parents< T, Types >static. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_parents-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_parents-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::TClassParents< Parent > Member List . This is the complete list of members for sofa::core::objectmodel::TClassParents< Parent >, including all inherited members. get(const std::size_t i)sofa::core::objectmodel::TClassParents< Parent >inlinestatic; nb()sofa::core::objectmodel::TClassParents< Parent >inlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01void_01_4-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::TClassParents< void > Member List . This is the complete list of members for sofa::core::objectmodel::TClassParents< void >, including all inherited members. get(const std::size_t i)sofa::core::objectmodel::TClassParents< void >inlinestatic; nb()sofa::core::objectmodel::TClassParents< void >inlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01void_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01void_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01_parents_3_01_types_8_8_8_01_4_01_4-members.html:294,Modifiability,inherit,inherited,294,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::TClassParents< Parents< Types... > > Member List . This is the complete list of members for sofa::core::objectmodel::TClassParents< Parents< Types... > >, including all inherited members. get(const std::size_t i)sofa::core::objectmodel::TClassParents< Parents< Types... > >inlinestatic; nb()sofa::core::objectmodel::TClassParents< Parents< Types... > >inlinestatic. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01_parents_3_01_types_8_8_8_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1objectmodel_1_1_t_class_parents_3_01_parents_3_01_types_8_8_8_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_elem_ancestor_elem-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::topology::ElemAncestorElem< NV > Member List . This is the complete list of members for sofa::core::topology::ElemAncestorElem< NV >, including all inherited members. ElemAncestorElem()sofa::core::topology::ElemAncestorElem< NV >inline; ElemAncestorElem(const type::fixed_array< PointAncestorElem, NV > &_pointSrcElems, const type::vector< TopologyElemID > &_srcElems)sofa::core::topology::ElemAncestorElem< NV >inline; ElemAncestorElem(const type::fixed_array< PointAncestorElem, NV > &_pointSrcElems, const TopologyElemID &_srcElem)sofa::core::topology::ElemAncestorElem< NV >inline; pointSrcElemssofa::core::topology::ElemAncestorElem< NV >; srcElemssofa::core::topology::ElemAncestorElem< NV >. Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_elem_ancestor_elem-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_elem_ancestor_elem-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_point_ancestor_elem-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::topology::PointAncestorElem Member List . This is the complete list of members for sofa::core::topology::PointAncestorElem, including all inherited members. indexsofa::core::topology::PointAncestorElem; LocalCoords typedefsofa::core::topology::PointAncestorElem; localCoordssofa::core::topology::PointAncestorElem; PointAncestorElem()sofa::core::topology::PointAncestorEleminline; PointAncestorElem(geometry::ElementType _type, Topology::ElemID _index, const LocalCoords &_localCoords)sofa::core::topology::PointAncestorEleminline; typesofa::core::topology::PointAncestorElem. Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_point_ancestor_elem-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_point_ancestor_elem-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_edge_01_4-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::topology::TopologyChangeElementInfo< Topology::Edge > Member List . This is the complete list of members for sofa::core::topology::TopologyChangeElementInfo< Topology::Edge >, including all inherited members. AncestorElem typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; EAdded typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; EIndicesSwap typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; EMoved_Adding typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; EMoved_Removing typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; ERemoved typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; ERenumbering typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; USE_EMOVED enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; USE_EMOVED_ADDING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Edge >; USE_EMOVED_REMOVING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Edge >. Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_edge_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_edge_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_hexahedron_01_4-members.html:314,Modifiability,inherit,inherited,314,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron > Member List . This is the complete list of members for sofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >, including all inherited members. AncestorElem typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; EAdded typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; EIndicesSwap typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; EMoved_Adding typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; EMoved_Removing typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; ERemoved typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; ERenumbering typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; USE_EMOVED enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; USE_EMOVED_ADDING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >; USE_EMOVED_REMOVING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Hexahedron >. Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_hexahedron_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_hexahedron_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_point_01_4-members.html:304,Modifiability,inherit,inherited,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::topology::TopologyChangeElementInfo< Topology::Point > Member List . This is the complete list of members for sofa::core::topology::TopologyChangeElementInfo< Topology::Point >, including all inherited members. AncestorElem typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; EAdded typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; EIndicesSwap typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; EMoved typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; ERemoved typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; ERenumbering typedefsofa::core::topology::TopologyChangeElementInfo< Topology::Point >; USE_EMOVED enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Point >; USE_EMOVED_ADDING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Point >; USE_EMOVED_REMOVING enum valuesofa::core::topology::TopologyChangeElementInfo< Topology::Point >. Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_point_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1topology_1_1_topology_change_element_info_3_01_topology_1_1_point_01_4-members.html
