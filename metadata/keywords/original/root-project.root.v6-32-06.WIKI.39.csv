id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3378,Availability,error,error,3378,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3508,Availability,error,error,3508,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3690,Availability,error,error,3690,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3751,Availability,error,error,3751,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3871,Availability,error,error,3871,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3914,Availability,error,errors,3914,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3963,Availability,error,errors,3963,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4063,Availability,error,error,4063,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4129,Availability,error,error,4129,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4732,Availability,error,errors,4732,"id Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a sin",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4842,Availability,error,error,4842,"ouble eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4951,Availability,error,error,4951,"re the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single cal",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4973,Availability,error,error,4973,"re the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single cal",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5242,Availability,error,error,5242,"; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the p",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5546,Availability,error,error,5546," the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5626,Availability,error,errortype,5626,"igned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (uns",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6008,Availability,error,error,6008,"igned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (uns",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6140,Availability,error,errors,6140,"ouble GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used dir",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6172,Availability,error,errors,6172,"ouble GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used dir",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6200,Availability,error,errors,6200,"ouble GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used dir",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6328,Availability,error,errors,6328,"on of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6438,Availability,error,errors,6438,"on of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6666,Availability,error,errors,6666,"ve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6756,Availability,error,error,6756,"ve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6930,Availability,error,error,6930,"ve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:7015,Availability,error,error,7015,"ntError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; double RefVolume () const;  retrieve the reference volume used to normalize the data when the option bin volume is set ;  ; void SetRefVolume (double value);  set the reference volume used to normalize the data when the option bin volume is set ;  ; double SumOfContent () const;  compute the total sum of the data content (sum of weights in case o",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:7070,Availability,error,error,7070,"ntError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; double RefVolume () const;  retrieve the reference volume used to normalize the data when the option bin volume is set ;  ; void SetRefVolume (double value);  set the reference volume used to normalize the data when the option bin volume is set ;  ; double SumOfContent () const;  compute the total sum of the data content (sum of weights in case o",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:7308,Availability,error,errors,7308,"y when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ;  ; BinData & LogTransform ();  apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ;  ; BinData & operator= (const BinData &rhs);  assignment operator ;  ; double RefVolume () const;  retrieve the reference volume used to normalize the data when the option bin volume is set ;  ; void SetRefVolume (double value);  set the reference volume used to normalize the data when the option bin volume is set ;  ; double SumOfContent () const;  compute the total sum of the data content (sum of weights in case of weighted data set) ;  ; double SumOfError2 () const;  compute the total sum of the error square (sum of weight square in case of a weighted data set) ;  ; double Value (unsigned int ipoint) const;  return the value for the given fit point ;  ; const double * ValuePtr (unsigned int ipoint) const;  return a pointer to the value for the given fit poi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:8150,Availability,error,error,8150,,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:13829,Availability,error,errors,13829,"herited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::B",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:14053,Availability,avail,available,14053,"std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::BinData::ErrorType. EnumeratorkNoError ; kValueError ; kCoordError ; kAsymError . Definition at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not know",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:15555,Availability,error,errors,15555,"tion at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ; Definition at line 24 of file BinData.cxx. ◆ BinData() [2/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from option and default range ; Definition at line 40 of file BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:15622,Availability,error,errors,15622,"tion at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ; Definition at line 24 of file BinData.cxx. ◆ BinData() [2/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from option and default range ; Definition at line 40 of file BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:15924,Availability,error,errors,15924," then use Initialize later one if the size is not known ; Definition at line 24 of file BinData.cxx. ◆ BinData() [2/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from option and default range ; Definition at line 40 of file BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, . const double * ; eval . ). constructor from external data for 3D with errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:16264,Availability,error,errors,16264,"e BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, . const double * ; eval . ). constructor from external data for 3D with errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; rhs). copy constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . doubl",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:16654,Availability,error,errors,16654,".cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, . const double * ; eval . ). constructor from external data for 3D with errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; rhs). copy constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ;",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17390,Availability,error,error,17390," ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, . const double * ; eval . ). constructor from external data for 3D with errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; rhs). copy constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17636,Availability,error,error,17636,"th errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; rhs). copy constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17859,Availability,error,error,17859,"py constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the co",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17916,Availability,error,error,17916,"py constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the co",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17978,Availability,error,error,17978,"py constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the co",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18348,Availability,error,error,18348,"oordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18409,Availability,error,error,18409,"oordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18629,Availability,error,error,18629,"le BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; e",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18672,Availability,error,errors,18672,"le BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; e",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18721,Availability,error,errors,18721,"le BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; e",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18913,Availability,error,error,18913,"verse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). Equivalent to Initialize() ; preallocate a data set with given size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18979,Availability,error,error,18979,"verse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). Equivalent to Initialize() ; preallocate a data set with given size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:19804,Availability,error,error,19804,"dd one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). Equivalent to Initialize() ; preallocate a data set with given size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data sets, while if not compatible the old data are erased and new space of new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:20771,Availability,error,errors,20771,"size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data sets, while if not compatible the old data are erased and new space of new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:20966,Availability,error,error,20966,"while if not compatible the old data are erased and new space of new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Defini",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21033,Availability,error,error,21033,"new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). do",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21256,Availability,error,error,21256,"return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21278,Availability,error,error,21278,"return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21381,Availability,error,error,21381,"empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21450,Availability,error,errors,21450,"eturn a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinate",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21480,Availability,error,errors,21480,"on at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; un",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21581,Availability,error,error,21581,"::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save versi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21639,Availability,error,errors,21639,"const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21678,Availability,error,error,21678,"const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21747,Availability,error,errors,21747,"e . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorCo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:22186,Availability,error,error,22186,"r ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:22853,Availability,error,error,22853,"nData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the l",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:23166,Availability,error,errortype,23166,"e error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:23757,Availability,error,error,23757,"CoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinDa",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:23893,Availability,error,error,23893," a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24113,Availability,error,errors,24113,"rieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24145,Availability,error,errors,24145,"rieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24173,Availability,error,errors,24173,"rieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24251,Availability,error,errors,24251,"BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24273,Availability,error,errors,24273,"BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24530,Availability,error,errors,24530," ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsig",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24640,Availability,error,errors,24640," ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsig",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:25049,Availability,error,errors,25049,"; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:25232,Availability,error,error,25232,"te errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . R",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:25752,Availability,error,error,25752,"nData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ; Definition at line 325 of file BinData.h. ◆ IsWeighted(). bool ROOT::Fit::BinData::IsWeighted ; (; ); const. inline . return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ; Definiti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:26269,Availability,error,error,26269,"nitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ; Definition at line 325 of file BinData.h. ◆ IsWeighted(). bool ROOT::Fit::BinData::IsWeighted ; (; ); const. inline . return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ; Definition at line 584 of file BinData.h. ◆ LogTransform(). BinData & ROOT::Fit::BinData::LogTransform ; (; ). apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ; IN case it does, an empty data set is returned ; Definition at line 349 of file BinData.cxx. ◆ operator=(). BinData & ROOT::Fit::BinData::operator= ; (; const BinData & ; rhs). assignment operator ; Definition at line 230 of file BinData.cxx. ◆ RefVolume(). double ROOT::Fit::B",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:26324,Availability,error,error,26324,"nitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ; Definition at line 325 of file BinData.h. ◆ IsWeighted(). bool ROOT::Fit::BinData::IsWeighted ; (; ); const. inline . return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ; Definition at line 584 of file BinData.h. ◆ LogTransform(). BinData & ROOT::Fit::BinData::LogTransform ; (; ). apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ; IN case it does, an empty data set is returned ; Definition at line 349 of file BinData.cxx. ◆ operator=(). BinData & ROOT::Fit::BinData::operator= ; (; const BinData & ; rhs). assignment operator ; Definition at line 230 of file BinData.cxx. ◆ RefVolume(). double ROOT::Fit::B",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:26650,Availability,error,errors,26650,"e ; err = kValueError . ). inline . Preallocate a data set with given size, dimension and error type. ; If the data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ; Definition at line 325 of file BinData.h. ◆ IsWeighted(). bool ROOT::Fit::BinData::IsWeighted ; (; ); const. inline . return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ; Definition at line 584 of file BinData.h. ◆ LogTransform(). BinData & ROOT::Fit::BinData::LogTransform ; (; ). apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ; IN case it does, an empty data set is returned ; Definition at line 349 of file BinData.cxx. ◆ operator=(). BinData & ROOT::Fit::BinData::operator= ; (; const BinData & ; rhs). assignment operator ; Definition at line 230 of file BinData.cxx. ◆ RefVolume(). double ROOT::Fit::BinData::RefVolume ; (; ); const. inline . retrieve the reference volume used to normalize the data when the option bin volume is set ; Definition at line 552 of file BinData.h. ◆ SetRefVolume(). void ROOT::Fit::BinData::SetRefVolume ; (; double ; value). inline . set the reference volume used to normalize the data w",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:28062,Availability,error,error,28062,t is returned ; Definition at line 349 of file BinData.cxx. ◆ operator=(). BinData & ROOT::Fit::BinData::operator= ; (; const BinData & ; rhs). assignment operator ; Definition at line 230 of file BinData.cxx. ◆ RefVolume(). double ROOT::Fit::BinData::RefVolume ; (; ); const. inline . retrieve the reference volume used to normalize the data when the option bin volume is set ; Definition at line 552 of file BinData.h. ◆ SetRefVolume(). void ROOT::Fit::BinData::SetRefVolume ; (; double ; value). inline . set the reference volume used to normalize the data when the option bin volume is set ; Definition at line 557 of file BinData.h. ◆ SumOfContent(). double ROOT::Fit::BinData::SumOfContent ; (; ); const. inline . compute the total sum of the data content (sum of weights in case of weighted data set) ; Definition at line 571 of file BinData.h. ◆ SumOfError2(). double ROOT::Fit::BinData::SumOfError2 ; (; ); const. inline . compute the total sum of the error square (sum of weight square in case of a weighted data set) ; Definition at line 577 of file BinData.h. ◆ UnWrap(). void ROOT::Fit::BinData::UnWrap ; (; ). protected . Definition at line 743 of file BinData.cxx. ◆ Value(). double ROOT::Fit::BinData::Value ; (; unsigned int ; ipoint); const. inline . return the value for the given fit point ; Definition at line 220 of file BinData.h. ◆ ValuePtr(). const double * ROOT::Fit::BinData::ValuePtr ; (; unsigned int ; ipoint); const. inline . return a pointer to the value for the given fit point ; Definition at line 232 of file BinData.h. Member Data Documentation. ◆ fBinEdge. std::vector< std::vector< double > > ROOT::Fit::BinData::fBinEdge. private . Definition at line 631 of file BinData.h. ◆ fCoordErrors. std::vector< std::vector< double > > ROOT::Fit::BinData::fCoordErrors. private . Definition at line 615 of file BinData.h. ◆ fCoordErrorsPtr. std::vector< const double* > ROOT::Fit::BinData::fCoordErrorsPtr. private . Definition at line 616 of file BinData.h. ◆ fData. st,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:31085,Availability,error,errors,31085,DataErrorHigh. private . Definition at line 621 of file BinData.h. ◆ fDataErrorHighPtr. const double* ROOT::Fit::BinData::fDataErrorHighPtr. private . Definition at line 624 of file BinData.h. ◆ fDataErrorLow. std::vector< double > ROOT::Fit::BinData::fDataErrorLow. private . Definition at line 622 of file BinData.h. ◆ fDataErrorLowPtr. const double* ROOT::Fit::BinData::fDataErrorLowPtr. private . Definition at line 625 of file BinData.h. ◆ fDataErrorPtr. const double* ROOT::Fit::BinData::fDataErrorPtr. private . Definition at line 623 of file BinData.h. ◆ fDataPtr. const double* ROOT::Fit::BinData::fDataPtr. private . Definition at line 613 of file BinData.h. ◆ fErrorType. ErrorType ROOT::Fit::BinData::fErrorType. private . Definition at line 602 of file BinData.h. ◆ fIsWeighted. bool ROOT::Fit::BinData::fIsWeighted = false. private . flag to indicate weighted data ; Definition at line 603 of file BinData.h. ◆ fpTmpBinEdgeVector. double* ROOT::Fit::BinData::fpTmpBinEdgeVector. private . not threadsafe stuff! ; Definition at line 634 of file BinData.h. ◆ fpTmpCoordErrorVector. double* ROOT::Fit::BinData::fpTmpCoordErrorVector. private . not threadsafe stuff! ; Definition at line 629 of file BinData.h. ◆ fRefVolume. double ROOT::Fit::BinData::fRefVolume. private . reference bin volume - used to normalize the bins in case of variable bins data ; Definition at line 604 of file BinData.h. ◆ fSumContent. double ROOT::Fit::BinData::fSumContent = 0. private . total sum of the bin data content ; Definition at line 605 of file BinData.h. ◆ fSumError2. double ROOT::Fit::BinData::fSumError2 = 0. private . total sum square of the errors ; Definition at line 606 of file BinData.h. Libraries for ROOT::Fit::BinData:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/BinData.h; math/mathcore/src/BinData.cxx. ROOTFitBinData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:1107,Energy Efficiency,efficient,efficient,1107,"hing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from option and default range ;  ;  BinData (unsigned",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:1189,Energy Efficiency,consumption,consumption,1189,"ons |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from option and default range ;  ;  BinData (unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from dimension of point and ma",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:2241,Energy Efficiency,allocate,allocate,2241," Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5792,Energy Efficiency,efficient,efficient,5792,"igned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (uns",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:14882,Energy Efficiency,allocate,allocate,14882,"d from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::BinData::ErrorType. EnumeratorkNoError ; kValueError ; kCoordError ; kAsymError . Definition at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ; Definition at line 24 of file BinData.cxx. ◆ BinData() [2/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from option and default range ; Definition at line 40 of file BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data fo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:20049,Energy Efficiency,allocate,allocated,20049,"dd one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). Equivalent to Initialize() ; preallocate a data set with given size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data sets, while if not compatible the old data are erased and new space of new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:23434,Energy Efficiency,efficient,efficient,23434,"OOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetP",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5011,Integrability,depend,depending,5011,"re the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single cal",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:12566,Integrability,rout,routines,12566,"d int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void ComputeSums ();  ; void InitBinEdge ();  ; void InitDataVector ();  ; void InitializeErrors ();  ; void UnWrap ();  ;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; do",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21316,Integrability,depend,depending,21316,"return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:8449,Modifiability,inherit,inherited,8449,,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:12492,Modifiability,inherit,inherited,12492,"d int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void ComputeSums ();  ; void InitBinEdge ();  ; void InitDataVector ();  ; void InitializeErrors ();  ; void UnWrap ();  ;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; do",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:13693,Modifiability,variab,variable,13693,"herited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::B",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:13906,Modifiability,inherit,inherited,13906,"std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::vector< double > fData;  Stores the data values the same way as the coordinates. ;  ; std::vector< double > fDataError;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::BinData::ErrorType. EnumeratorkNoError ; kValueError ; kCoordError ; kAsymError . Definition at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not know",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:14135,Modifiability,inherit,inherited,14135,"or;  ; std::vector< double > fDataErrorHigh;  ; const double * fDataErrorHighPtr;  ; std::vector< double > fDataErrorLow;  ; const double * fDataErrorLowPtr;  ; const double * fDataErrorPtr;  ; const double * fDataPtr;  ; ErrorType fErrorType;  ; bool fIsWeighted = false;  flag to indicate weighted data ;  ; double * fpTmpBinEdgeVector;  not threadsafe stuff! ;  ; double * fpTmpCoordErrorVector;  not threadsafe stuff! ;  ; double fRefVolume;  reference bin volume - used to normalize the bins in case of variable bins data ;  ; double fSumContent = 0;  total sum of the bin data content ;  ; double fSumError2 = 0;  total sum square of the errors ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/BinData.h>. Inheritance diagram for ROOT::Fit::BinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ErrorType. enum ROOT::Fit::BinData::ErrorType. EnumeratorkNoError ; kValueError ; kCoordError ; kAsymError . Definition at line 56 of file BinData.h. Constructor & Destructor Documentation. ◆ BinData() [1/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). explicit . constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ; Definition at line 24 of file BinData.cxx. ◆ BinData() [2/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueE",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:30784,Modifiability,variab,variable,30784,DataErrorHigh. private . Definition at line 621 of file BinData.h. ◆ fDataErrorHighPtr. const double* ROOT::Fit::BinData::fDataErrorHighPtr. private . Definition at line 624 of file BinData.h. ◆ fDataErrorLow. std::vector< double > ROOT::Fit::BinData::fDataErrorLow. private . Definition at line 622 of file BinData.h. ◆ fDataErrorLowPtr. const double* ROOT::Fit::BinData::fDataErrorLowPtr. private . Definition at line 625 of file BinData.h. ◆ fDataErrorPtr. const double* ROOT::Fit::BinData::fDataErrorPtr. private . Definition at line 623 of file BinData.h. ◆ fDataPtr. const double* ROOT::Fit::BinData::fDataPtr. private . Definition at line 613 of file BinData.h. ◆ fErrorType. ErrorType ROOT::Fit::BinData::fErrorType. private . Definition at line 602 of file BinData.h. ◆ fIsWeighted. bool ROOT::Fit::BinData::fIsWeighted = false. private . flag to indicate weighted data ; Definition at line 603 of file BinData.h. ◆ fpTmpBinEdgeVector. double* ROOT::Fit::BinData::fpTmpBinEdgeVector. private . not threadsafe stuff! ; Definition at line 634 of file BinData.h. ◆ fpTmpCoordErrorVector. double* ROOT::Fit::BinData::fpTmpCoordErrorVector. private . not threadsafe stuff! ; Definition at line 629 of file BinData.h. ◆ fRefVolume. double ROOT::Fit::BinData::fRefVolume. private . reference bin volume - used to normalize the bins in case of variable bins data ; Definition at line 604 of file BinData.h. ◆ fSumContent. double ROOT::Fit::BinData::fSumContent = 0. private . total sum of the bin data content ; Definition at line 605 of file BinData.h. ◆ fSumError2. double ROOT::Fit::BinData::fSumError2 = 0. private . total sum square of the errors ; Definition at line 606 of file BinData.h. Libraries for ROOT::Fit::BinData:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/BinData.h; math/mathcore/src/BinData.cxx. ROOTFitBinData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:11904,Security,access,access,11904," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void ComputeSums ();  ; void InitBinEdge ();  ; void InitDataVector ();  ; void InitializeErrors ();  ; void UnWrap ();  ;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:12172,Security,access,access,12172," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void ComputeSums ();  ; void InitBinEdge ();  ; void InitDataVector ();  ; void InitializeErrors ();  ; void UnWrap ();  ;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:12230,Security,access,access,12230," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void ComputeSums ();  ; void InitBinEdge ();  ; void InitDataVector ();  ; void InitializeErrors ();  ; void UnWrap ();  ;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Private Attributes; std::vector< std::vector< double > > fBinEdge;  ; std::vector< std::vector< double > > fCoordErrors;  ; std::vector< const double * > fCoordErrorsPtr;  ; std::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6485,Testability,assert,assert,6485,"on of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ;  ; bool IsWeighted () const;  return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24320,Testability,assert,assert,24320,"BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:24687,Testability,assert,assert,24687," ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ; It must be called only when the coordinate errors and asymmetric errors are stored otherwise it will produce an assert. ; Definition at line 480 of file BinData.h. ◆ GetPointError() [2/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errvalue . ); const. inline . Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ; Definition at line 462 of file BinData.h. ◆ HasBinEdges(). bool ROOT::Fit::BinData::HasBinEdges ; (; ); const. inline . query if the data store the bin edges instead of the center ; Definition at line 545 of file BinData.h. ◆ HaveAsymErrors(). bool ROOT::Fit::BinData::HaveAsymErrors ; (; ); const. inline . flag to control if data provides asymmetric errors on the value ; Definition at line 146 of file BinData.h. ◆ HaveCoordErrors(). bool ROOT::Fit::BinData::HaveCoordErrors ; (; ); const. inline . flag to control if data provides error on the coordinates ; Definition at line 134 of file BinData.h. ◆ InitBinEdge(). void ROOT::Fit::BinData::InitBinEdge ; (; ). protected . Definition at line 725 of file BinData.cxx. ◆ InitDataVector(). void ROOT::Fit::BinData::InitDataVector ; (; ). protected . Definition at line 645 of file BinData.cxx. ◆ Initialize(). void ROOT::Fit::BinData::Initialize ; (; unsig",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html:432,Availability,error,error,432,". ROOT: ROOT::Fit::Box Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Fit::Box Class Reference. . Definition at line 36 of file SparseData.cxx. Public Member Functions;  Box (const vector< double > &min, const vector< double > &max, const double value=0.0, const double error=1.0);  ; void AddVal (const double value);  ; double GetError () const;  ; const vector< double > & GetMax () const;  ; const vector< double > & GetMin () const;  ; double GetVal () const;  ; bool operator== (const Box &b);  . Private Attributes; double fError;  ; vector< double > fMax;  ; vector< double > fMin;  ; double fVal;  . Friends; class BoxContainer;  ; ostream & operator<< (ostream &os, const Box &b);  . Constructor & Destructor Documentation. ◆ Box(). ROOT::Fit::Box::Box ; (; const vector< double > & ; min, . const vector< double > & ; max, . const double ; value = 0.0, . const double ; error = 1.0 . ). inline . Definition at line 41 of file SparseData.cxx. Member Function Documentation. ◆ AddVal(). void ROOT::Fit::Box::AddVal ; (; const double ; value). inline . Definition at line 62 of file SparseData.cxx. ◆ GetError(). double ROOT::Fit::Box::GetError ; (; ); const. inline . Definition at line 59 of file SparseData.cxx. ◆ GetMax(). const vector< double > & ROOT::Fit::Box::GetMax ; (; ); const. inline . Definition at line 55 of file SparseData.cxx. ◆ GetMin(). const vector< double > & ROOT::Fit::Box::GetMin ; (; ); const. inline . Definition at line 53 of file SparseData.cxx. ◆ GetVal(). double ROOT::Fit::Box::GetVal ; (; ); const. inline . Definition at line 57 of file SparseData.cxx. ◆ operator==(). bool ROOT::Fit::Box::operator== ; (; const Box & ; b). inline . Definition at line 48 of file SparseData.cxx. Friends And Related Symbol Documentation. ◆ BoxContainer. friend class BoxContainer. friend . Definition at line 64 of",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Box.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html:1043,Availability,error,error,1043,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Fit::Box Class Reference. . Definition at line 36 of file SparseData.cxx. Public Member Functions;  Box (const vector< double > &min, const vector< double > &max, const double value=0.0, const double error=1.0);  ; void AddVal (const double value);  ; double GetError () const;  ; const vector< double > & GetMax () const;  ; const vector< double > & GetMin () const;  ; double GetVal () const;  ; bool operator== (const Box &b);  . Private Attributes; double fError;  ; vector< double > fMax;  ; vector< double > fMin;  ; double fVal;  . Friends; class BoxContainer;  ; ostream & operator<< (ostream &os, const Box &b);  . Constructor & Destructor Documentation. ◆ Box(). ROOT::Fit::Box::Box ; (; const vector< double > & ; min, . const vector< double > & ; max, . const double ; value = 0.0, . const double ; error = 1.0 . ). inline . Definition at line 41 of file SparseData.cxx. Member Function Documentation. ◆ AddVal(). void ROOT::Fit::Box::AddVal ; (; const double ; value). inline . Definition at line 62 of file SparseData.cxx. ◆ GetError(). double ROOT::Fit::Box::GetError ; (; ); const. inline . Definition at line 59 of file SparseData.cxx. ◆ GetMax(). const vector< double > & ROOT::Fit::Box::GetMax ; (; ); const. inline . Definition at line 55 of file SparseData.cxx. ◆ GetMin(). const vector< double > & ROOT::Fit::Box::GetMin ; (; ); const. inline . Definition at line 53 of file SparseData.cxx. ◆ GetVal(). double ROOT::Fit::Box::GetVal ; (; ); const. inline . Definition at line 57 of file SparseData.cxx. ◆ operator==(). bool ROOT::Fit::Box::operator== ; (; const Box & ; b). inline . Definition at line 48 of file SparseData.cxx. Friends And Related Symbol Documentation. ◆ BoxContainer. friend class BoxContainer. friend . Definition at line 64 of file SparseData.cxx. ◆ operator<<. ost",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Box.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN-members.html:269,Modifiability,inherit,inherited,269,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType > Member List. This is the complete list of members for ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >, including all inherited members. BaseFCN typedefROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >; BaseFunction typedefROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >; BaseObjFunction typedefROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >; BasicFCN(const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Chi2FCN(const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inline; Chi2FCN(const BinData &data, const IModelFunction &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inline; Chi2FCN(const Chi2FCN &f)ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inline; Clone() constROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) constROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExe",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:3709,Deployability,update,update,3709,"l HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Protected Member Functions; virtual void SetNFitPoints (unsigned int n) const;  set number of fit points (need to be called in const methods, make it const) ;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private A",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:4588,Integrability,interface,interface,4588,"tual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Protected Member Functions; virtual void SetNFitPoints (unsigned int n) const;  set number of fit points (need to be called in const methods, make it const) ;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  ; std::vector< double > fGrad;  for derivatives ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Attributes inherited from ROOT::Fit::B",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:10174,Integrability,interface,interface,10174,"vFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. inlinevirtual . i-th chi-square residual ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 117 of file Chi2FCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 153 of file Chi2FCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 144 of file Chi2FCN.h. ◆ Gradient(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::Gradient ; (; const double * ; x, . double * ; g . ); const. inlinevirtual . Definition at line 123 of file Chi2FCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . Chi2FCN & ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::operator= ; (; const Chi2FCN< DerivFunType, ModelFunType > & ; rhs). inline . Assignment operator. ; Definition at line 97 of file Chi2FCN.h. ◆ SetNFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::SetNFitPoints ; (; unsigned int ; n); const. inlineprotectedvirtual . set number of fit points (need to be called in const methods, make it const) ; Definition at line 137 of file Chi2FCN.h. ◆ Type(",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:1109,Modifiability,inherit,inherited,1109,"OT::Fit::Chi2FCN< DerivFunType, ModelFunType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >Chi2FCN class for binned fits using the least square methods. ; Definition at line 46 of file Chi2FCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  Chi2FCN (const BinData &data, const IModelFunction &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Same Constructor from data set (binned ) and model function cloning the function and the data. ;  ;  Chi2FCN (const Chi2FCN &f);  Copy constructor. ;  ;  Chi2FCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const do",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2367,Modifiability,inherit,inherited,2367," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2910,Modifiability,inherit,inherited,2910," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:3927,Modifiability,inherit,inherited,3927,"FitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Protected Member Functions; virtual void SetNFitPoints (unsigned int n) const;  set number of fit points (need to be called in const methods, make it const) ;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  ; std::vector< double > fGrad;  for derivatives ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGra",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:4858,Modifiability,inherit,inherited,4858,"ted Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  ; std::vector< double > fGrad;  for derivatives ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/Chi2FCN.h>. Inheritance diagram for ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class Mo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:5041,Modifiability,inherit,inherited,5041,"td::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  ; std::vector< double > fGrad;  for derivatives ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/Chi2FCN.h>. Inheritance diagram for ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType, ModelFunType, BinData> ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 51 of file Chi2FCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::BaseFunction. Definition ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:5473,Modifiability,inherit,inherited,5473,"td::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  ; std::vector< double > fGrad;  for derivatives ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/Chi2FCN.h>. Inheritance diagram for ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType, ModelFunType, BinData> ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 51 of file Chi2FCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::BaseFunction. Definition ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2484,Security,access,access,2484," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2574,Security,access,access,2574," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2738,Security,access,access,2738," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:2853,Security,access,access,2853," &func, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from data set (binned ) and model function. ;  ; virtual ~Chi2FCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th chi-square residual ;  ; virtual void Gradient (const double *x, double *g) const;  ; Chi2FCN & operator= (const Chi2FCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update numb",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange-members.html:213,Modifiability,inherit,inherited,213,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::DataRange Member List. This is the complete list of members for ROOT::Fit::DataRange, including all inherited members. AddRange(unsigned int icoord, double xmin, double xmax)ROOT::Fit::DataRange; AddRange(double xmin, double xmax)ROOT::Fit::DataRangeinline; AddRange(double xmin, double xmax, double ymin, double ymax)ROOT::Fit::DataRangeinline; AddRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)ROOT::Fit::DataRangeinline; CleanRangeSet(unsigned int icoord, double xmin, double xmax)ROOT::Fit::DataRangeprotected; Clear(unsigned int icoord=0)ROOT::Fit::DataRange; DataRange(unsigned int dim=1)ROOT::Fit::DataRangeinlineexplicit; DataRange(double xmin, double xmax)ROOT::Fit::DataRange; DataRange(double xmin, double xmax, double ymin, double ymax)ROOT::Fit::DataRange; DataRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)ROOT::Fit::DataRange; fRangesROOT::Fit::DataRangeprivate; GetInfRange(double &x1, double &x2)ROOT::Fit::DataRangeprotectedstatic; GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constROOT::Fit::DataRangeinline; GetRange(unsigned int icoord, double &xmin, double &xmax) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, double &ymin, double &ymax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, double &ymin, double &ymax, double &zmin, double &zmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double *xmin, double *xmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; IsInside(double x, unsigned int icoord=0) constROOT::Fit::DataRange; IsInside(const double *x) constROOT::Fit::DataRangeinline; IsSet() constROOT::Fit::DataRangeinline; NDim() constROOT::Fit::DataRangeinlin",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1DataRange-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:2102,Usability,clear,clear,2102,"the first coordinate icoord ;  ; void AddRange (double xmin, double xmax, double ymin, double ymax);  add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate ;  ; void AddRange (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);  add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and [zmin,zmax] for the third coordinate ;  ; void AddRange (unsigned int icoord, double xmin, double xmax);  add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one, but takes the OR with existing ranges. ;  ; void Clear (unsigned int icoord=0);  clear all ranges in one coordinate (is now -inf, +inf) ;  ; void GetRange (double &xmin, double &xmax, double &ymin, double &ymax, double &zmin, double &zmax, unsigned int irange=0) const;  get range for the x and y and z coordinates ;  ; void GetRange (double &xmin, double &xmax, double &ymin, double &ymax, unsigned int irange=0) const;  get range for the x and y coordinates ;  ; void GetRange (double &xmin, double &xmax, unsigned int irange=0) const;  get first range for the x - coordinate ;  ; void GetRange (double *xmin, double *xmax, unsigned int irange=0) const;  get range for coordinates and fill the vector ;  ; void GetRange (unsigned int icoord, double &xmin, double &xmax) const;  get the first range for given coordinate. ;  ; void GetRange (unsigned int irange, unsigned int icoord, double &xmin, double &xmax) const;  get the i-th range for given coordinate. ;  ; bool IsInside (const double *x) const;  check if a multi-dimpoint is inside the range ;  ; bool IsInside (double x, unsigned int icoord=0) const;  check if a point is inside the range for the given coordinate ;  ; bool IsSet () const;  return true if a range has been set in any of the coordinates i.e. ;  ; unsigned int NDim () const;  get range dimension ;  ; std::pair< double, double > operator() (unsigned int icoord=0, unsigned int irange=0) const;  return t",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1DataRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:7876,Usability,clear,clear,7876,"zmax . ). inline . add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and [zmin,zmax] for the third coordinate ; Definition at line 173 of file DataRange.h. ◆ AddRange() [4/4]. void ROOT::Fit::DataRange::AddRange ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one, but takes the OR with existing ranges. ; if want to replace range use method SetRange, which replace range with existing one ; Definition at line 94 of file DataRange.cxx. ◆ CleanRangeSet(). void ROOT::Fit::DataRange::CleanRangeSet ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). protected . internal function to remove all the existing ranges between xmin and xmax called when a new range is inserted ; Definition at line 165 of file DataRange.cxx. ◆ Clear(). void ROOT::Fit::DataRange::Clear ; (; unsigned int ; icoord = 0). clear all ranges in one coordinate (is now -inf, +inf) ; Definition at line 158 of file DataRange.cxx. ◆ GetInfRange(). void ROOT::Fit::DataRange::GetInfRange ; (; double & ; x1, . double & ; x2 . ). staticprotected . Definition at line 182 of file DataRange.cxx. ◆ GetRange() [1/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . double & ; zmin, . double & ; zmax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y and z coordinates ; Definition at line 135 of file DataRange.h. ◆ GetRange() [2/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y coordinates ; Definition at line 129 of file DataRange.h. ◆ GetRange() [3/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . unsigned int ; irange = 0 . ); const. inline . get first range for the x - coordinate ; Definition at line",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1DataRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html:692,Modifiability,inherit,inherited,692,". ROOT: ROOT::Fit::FcnAdapter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::FcnAdapter Class Reference. . Definition at line 27 of file FcnAdapter.h. Public Member Functions;  FcnAdapter (void(*fcn)(int &, double *, double &, double *, int), int dim=0);  ;  ~FcnAdapter () override;  ; ROOT::Math::IMultiGenFunction * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; void SetDimension (int dim);  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  . Private Attributes; unsigned int fDim;  ; void(* fFCN )(int &, double *, double &, double *, int);  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Fit/FcnAdapter.h>. Inheritance diagram for ROOT::Fit::FcnAdapter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FcnAdapter(). ROOT::Fit::FcnAdapter::FcnAdapter ; (; void(*)(int &, double *, double &, double *, int) ; fcn, . int ; dim = 0 . ). inline . Definition at line 31 of file FcnAdapter.h. ◆ ~FcnAdapter(). ROOT::Fit::FcnAdapter::~FcnAdapter ; (; ). inlineoverride . Definition at line 36 of file FcnAdapter.h. Member Function Documentation. ◆ Clone(). ROOT::Math::IMultiGenFunction * ROOT::Fit::FcnAdapter::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class must implement their",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FcnAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html:1141,Modifiability,inherit,inherited,1141,"ember Functions |; Private Attributes |; List of all members ; ROOT::Fit::FcnAdapter Class Reference. . Definition at line 27 of file FcnAdapter.h. Public Member Functions;  FcnAdapter (void(*fcn)(int &, double *, double &, double *, int), int dim=0);  ;  ~FcnAdapter () override;  ; ROOT::Math::IMultiGenFunction * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; void SetDimension (int dim);  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  . Private Attributes; unsigned int fDim;  ; void(* fFCN )(int &, double *, double &, double *, int);  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Fit/FcnAdapter.h>. Inheritance diagram for ROOT::Fit::FcnAdapter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FcnAdapter(). ROOT::Fit::FcnAdapter::FcnAdapter ; (; void(*)(int &, double *, double &, double *, int) ; fcn, . int ; dim = 0 . ). inline . Definition at line 31 of file FcnAdapter.h. ◆ ~FcnAdapter(). ROOT::Fit::FcnAdapter::~FcnAdapter ; (; ). inlineoverride . Definition at line 36 of file FcnAdapter.h. Member Function Documentation. ◆ Clone(). ROOT::Math::IMultiGenFunction * ROOT::Fit::FcnAdapter::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class must implement their version of the Clone method. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 40 of file FcnAdapter.h. ◆ DoEval(). double ROOT::Fit::FcnAdapter::DoEval ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FcnAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig-members.html:213,Modifiability,inherit,inherited,213,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::FitConfig Member List. This is the complete list of members for ROOT::Fit::FitConfig, including all inherited members. CreateMinimizer()ROOT::Fit::FitConfig; CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)ROOT::Fit::FitConfiginline; FitConfig(unsigned int npar=0)ROOT::Fit::FitConfig; FitConfig(const FitConfig &rhs)ROOT::Fit::FitConfig; fMinimizerOptsROOT::Fit::FitConfigprivate; fMinosErrorsROOT::Fit::FitConfigprivate; fMinosParamsROOT::Fit::FitConfigprivate; fNormErrorsROOT::Fit::FitConfigprivate; fParabErrorsROOT::Fit::FitConfigprivate; fSettingsROOT::Fit::FitConfigprivate; fUpdateAfterFitROOT::Fit::FitConfigprivate; fWeightCorrROOT::Fit::FitConfigprivate; MinimizerAlgoType() constROOT::Fit::FitConfiginline; MinimizerName() constROOT::Fit::FitConfig; MinimizerOptions()ROOT::Fit::FitConfiginline; MinimizerType() constROOT::Fit::FitConfiginline; MinosErrors() constROOT::Fit::FitConfiginline; MinosParams() constROOT::Fit::FitConfiginline; NormalizeErrors() constROOT::Fit::FitConfiginline; NPar() constROOT::Fit::FitConfiginline; operator=(const FitConfig &rhs)ROOT::Fit::FitConfig; ParabErrors() constROOT::Fit::FitConfiginline; ParamsSettings() constROOT::Fit::FitConfiginline; ParamsSettings()ROOT::Fit::FitConfiginline; ParamsValues() constROOT::Fit::FitConfig; ParSettings(unsigned int i) constROOT::Fit::FitConfiginline; ParSettings(unsigned int i)ROOT::Fit::FitConfiginline; SetDefaultMinimizer(const char *type, const char *algo=nullptr)ROOT::Fit::FitConfigstatic; SetFromFitResult(const FitResult &rhs)ROOT::Fit::FitConfig; SetMinimizer(const char *type, const char *algo=nullptr)ROOT::Fit::FitConfiginline; SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)ROOT::Fit::FitConfig; SetMinosErrors(bool on=true)ROOT::Fit::FitConfiginline; SetMinosErrors(const std::vector< unsigned int > &paramInd)ROOT::Fit::FitConfiginline; Set",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:1379,Availability,error,errors,1379,"FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:1619,Availability,error,errors,1619,"FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:1838,Availability,error,errors,1838,"FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:2814,Availability,error,errors,2814,"Settings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, const char *algo=nullptr);  set minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrecti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3168,Availability,error,error,3168,"Settings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, const char *algo=nullptr);  set minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrecti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3266,Availability,error,errors,3266,"Settings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, const char *algo=nullptr);  set minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrecti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3741,Availability,error,error,3741,"ons ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWei",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3925,Availability,error,error,3925,"ctor< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4293,Availability,error,error,4293,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4453,Availability,error,error,4453,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4520,Availability,error,errors,4520,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4788,Availability,error,errors,4788,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:6692,Availability,error,errors,6692,. ; Create always new parameter setting list from a given model function ; Definition at line 109 of file FitConfig.h. ◆ MinimizerAlgoType(). const std::string & ROOT::Fit::FitConfig::MinimizerAlgoType ; (; ); const. inline . return type of minimizer algorithms ; Definition at line 192 of file FitConfig.h. ◆ MinimizerName(). std::string ROOT::Fit::FitConfig::MinimizerName ; (; ); const. return Minimizer full name (type / algorithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitConfig::MinimizerType ; (; ); const. inline . return type of minimizer package ; Definition at line 187 of file FitConfig.h. ◆ MinosErrors(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ operator=(). FitConfig & ROOT::Fit::FitConfig::operator= ; (; const FitConfig & ; rhs). Definition at line 62 of file FitConfig.cxx. ◆ ParabErrors(). bool ROOT::Fit::FitConfig::ParabErrors ; (; ); const. inline . do analysis for parabolic errors ; Definition at line 205 of file FitConfig.h. ◆ ParamsSettings() [1/2]. std::vector< ROOT::Fit::ParameterSettings ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:7122,Availability,error,errors,7122,orithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitConfig::MinimizerType ; (; ); const. inline . return type of minimizer package ; Definition at line 187 of file FitConfig.h. ◆ MinosErrors(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ operator=(). FitConfig & ROOT::Fit::FitConfig::operator= ; (; const FitConfig & ; rhs). Definition at line 62 of file FitConfig.cxx. ◆ ParabErrors(). bool ROOT::Fit::FitConfig::ParabErrors ; (; ); const. inline . do analysis for parabolic errors ; Definition at line 205 of file FitConfig.h. ◆ ParamsSettings() [1/2]. std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ). inline . get the vector of parameter settings (non-const method) ; Definition at line 91 of file FitConfig.h. ◆ ParamsSettings() [2/2]. const std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ); const. inline . get the vector of parameter settings (const method) ; Definition at line 86 of file FitConfig.h. ◆ ParamsValues(). std::vector< d,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:7605,Availability,error,errors,7605,(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ operator=(). FitConfig & ROOT::Fit::FitConfig::operator= ; (; const FitConfig & ; rhs). Definition at line 62 of file FitConfig.cxx. ◆ ParabErrors(). bool ROOT::Fit::FitConfig::ParabErrors ; (; ); const. inline . do analysis for parabolic errors ; Definition at line 205 of file FitConfig.h. ◆ ParamsSettings() [1/2]. std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ). inline . get the vector of parameter settings (non-const method) ; Definition at line 91 of file FitConfig.h. ◆ ParamsSettings() [2/2]. const std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ); const. inline . get the vector of parameter settings (const method) ; Definition at line 86 of file FitConfig.h. ◆ ParamsValues(). std::vector< double > ROOT::Fit::FitConfig::ParamsValues ; (; ); const. return a vector of stored parameter values (i.e initial fit parameters) ; Definition at line 262 of file FitConfig.cxx. ◆ ParSettings() [1/2]. ParameterSettings & ROOT::Fit::FitConfig::ParSettings ; (; unsigned int ; i). inline . get the parameter settings for the i-th parameter (non-const method) ; Definition at line 81 of file FitConfig.h. ◆ ParSettings() [2/2]. const ParameterSettings & ROOT::Fit::Fi,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:9724,Availability,error,errors,9724,"76 of file FitConfig.h. ◆ SetDefaultMinimizer(). void ROOT::Fit::FitConfig::SetDefaultMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). static . static function to control default minimizer type and algorithm ; Definition at line 252 of file FitConfig.cxx. ◆ SetFromFitResult(). void ROOT::Fit::FitConfig::SetFromFitResult ; (; const FitResult & ; rhs). Definition at line 80 of file FitConfig.cxx. ◆ SetMinimizer(). void ROOT::Fit::FitConfig::SetMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). inline . set minimizer type ; Definition at line 179 of file FitConfig.h. ◆ SetMinimizerOptions(). void ROOT::Fit::FitConfig::SetMinimizerOptions ; (; const ROOT::Math::MinimizerOptions & ; minopt). set all the minimizer options using class MinimizerOptions ; Definition at line 257 of file FitConfig.cxx. ◆ SetMinosErrors() [1/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; bool ; on = true). inline . set Minos errors computation to be performed after fitting ; Definition at line 229 of file FitConfig.h. ◆ SetMinosErrors() [2/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; const std::vector< unsigned int > & ; paramInd). inline . set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ; Definition at line 237 of file FitConfig.h. ◆ SetNormErrors(). void ROOT::Fit::FitConfig::SetNormErrors ; (; bool ; on = true). inline . set the option to normalize the error on the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:10280,Availability,error,error,10280," inline . set minimizer type ; Definition at line 179 of file FitConfig.h. ◆ SetMinimizerOptions(). void ROOT::Fit::FitConfig::SetMinimizerOptions ; (; const ROOT::Math::MinimizerOptions & ; minopt). set all the minimizer options using class MinimizerOptions ; Definition at line 257 of file FitConfig.cxx. ◆ SetMinosErrors() [1/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; bool ; on = true). inline . set Minos errors computation to be performed after fitting ; Definition at line 229 of file FitConfig.h. ◆ SetMinosErrors() [2/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; const std::vector< unsigned int > & ; paramInd). inline . set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ; Definition at line 237 of file FitConfig.h. ◆ SetNormErrors(). void ROOT::Fit::FitConfig::SetNormErrors ; (; bool ; on = true). inline . set the option to normalize the error on the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:10477,Availability,error,errors,10477," ; minopt). set all the minimizer options using class MinimizerOptions ; Definition at line 257 of file FitConfig.cxx. ◆ SetMinosErrors() [1/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; bool ; on = true). inline . set Minos errors computation to be performed after fitting ; Definition at line 229 of file FitConfig.h. ◆ SetMinosErrors() [2/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; const std::vector< unsigned int > & ; paramInd). inline . set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ; Definition at line 237 of file FitConfig.h. ◆ SetNormErrors(). void ROOT::Fit::FitConfig::SetNormErrors ; (; bool ; on = true). inline . set the option to normalize the error on the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction f",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11498,Availability,error,error,11498,"e FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11879,Availability,error,error,11879,"nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::Parameter",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:12252,Availability,error,error,12252,after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for wei,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:12585,Availability,error,error,12585,fig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:12740,Availability,error,errors,12740,ne . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:13269,Availability,error,errors,13269,ne . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:389,Deployability,configurat,configuration,389,". ROOT: ROOT::Fit::FitConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::FitConfig Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. ; Definition at line 47 of file FitConfig.h. Public Member Functions;  FitConfig (const FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:783,Deployability,configurat,configuration,783,". ROOT: ROOT::Fit::FitConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::FitConfig Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. ; Definition at line 47 of file FitConfig.h. Public Member Functions;  FitConfig (const FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3615,Deployability,configurat,configuration,3615,"minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3809,Deployability,configurat,configuration,3809,"ons ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWei",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4690,Deployability,update,update,4690,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4701,Deployability,configurat,configuration,4701,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:5447,Deployability,configurat,configuration,5447,error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at line 173 of file FitConfig.cxx. ◆ CreateParamsSettings(). template<class T > . void ROOT::Fit::FitConfig::CreateParamsSettings ; (; const ROOT::Math::IParamMultiFunctionTempl< T > & ; func). inline . set the parameter settings from a model function. ; Create always new parameter setting list from a given model function ; Definition at line 109 of file FitConfig.h. ◆ MinimizerAlgoType(). const std::string & ROOT::Fit::FitConfig::MinimizerAlgoType ; (; ); const. inline . return type of minimizer algorithms ; Definition at line 192 of file FitConfig.h. ◆ MinimizerName(). std::string ROOT::Fit::FitConfig::MinimizerName ; (; ); const. return Minimizer full name (type / algorithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std:,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11268,Deployability,configurat,configuration,11268,"n the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Defini",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11662,Deployability,configurat,configuration,11662,"finition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:13084,Deployability,update,update,13084,ne . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:13095,Deployability,configurat,configuration,13095,ne . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:389,Modifiability,config,configuration,389,". ROOT: ROOT::Fit::FitConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::FitConfig Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. ; Definition at line 47 of file FitConfig.h. Public Member Functions;  FitConfig (const FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:783,Modifiability,config,configuration,783,". ROOT: ROOT::Fit::FitConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::FitConfig Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. ; Definition at line 47 of file FitConfig.h. Public Member Functions;  FitConfig (const FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3615,Modifiability,config,configuration,3615,"minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3809,Modifiability,config,configuration,3809,"ons ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWei",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4701,Modifiability,config,configuration,4701,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:5447,Modifiability,config,configuration,5447,error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at line 173 of file FitConfig.cxx. ◆ CreateParamsSettings(). template<class T > . void ROOT::Fit::FitConfig::CreateParamsSettings ; (; const ROOT::Math::IParamMultiFunctionTempl< T > & ; func). inline . set the parameter settings from a model function. ; Create always new parameter setting list from a given model function ; Definition at line 109 of file FitConfig.h. ◆ MinimizerAlgoType(). const std::string & ROOT::Fit::FitConfig::MinimizerAlgoType ; (; ); const. inline . return type of minimizer algorithms ; Definition at line 192 of file FitConfig.h. ◆ MinimizerName(). std::string ROOT::Fit::FitConfig::MinimizerName ; (; ); const. return Minimizer full name (type / algorithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std:,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11268,Modifiability,config,configuration,11268,"n the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Defini",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11662,Modifiability,config,configuration,11662,"finition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:13095,Modifiability,config,configuration,13095,ne . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNormErrors. bool ROOT::Fit::FitConfig::fNormErrors. private . flag for error normalization ; Definition at line 259 of file FitConfig.h. ◆ fParabErrors. bool ROOT::Fit::FitConfig::fParabErrors. private . get correct parabolic errors estimate (call Hesse after minimizing) ; Definition at line 260 of file FitConfig.h. ◆ fSettings. std::vector<ROOT::Fit::ParameterSettings> ROOT::Fit::FitConfig::fSettings. private . vector with the parameter settings ; Definition at line 265 of file FitConfig.h. ◆ fUpdateAfterFit. bool ROOT::Fit::FitConfig::fUpdateAfterFit. private . update the configuration after a fit using the result ; Definition at line 262 of file FitConfig.h. ◆ fWeightCorr. bool ROOT::Fit::FitConfig::fWeightCorr. private . apply correction to errors for weights fits ; Definition at line 263 of file FitConfig.h. Libraries for ROOT::Fit::FitConfig:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitConfig.h; math/mathcore/src/FitConfig.cxx. ROOTFitFitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:2839,Performance,perform,performed,2839,"Settings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, const char *algo=nullptr);  set minimizer type ;  ; void SetMinimizerOptions (const ROOT::Math::MinimizerOptions &minopt);  set all the minimizer options using class MinimizerOptions ;  ; void SetMinosErrors (bool on=true);  set Minos errors computation to be performed after fitting ;  ; void SetMinosErrors (const std::vector< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrecti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:9749,Performance,perform,performed,9749,"76 of file FitConfig.h. ◆ SetDefaultMinimizer(). void ROOT::Fit::FitConfig::SetDefaultMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). static . static function to control default minimizer type and algorithm ; Definition at line 252 of file FitConfig.cxx. ◆ SetFromFitResult(). void ROOT::Fit::FitConfig::SetFromFitResult ; (; const FitResult & ; rhs). Definition at line 80 of file FitConfig.cxx. ◆ SetMinimizer(). void ROOT::Fit::FitConfig::SetMinimizer ; (; const char * ; type, . const char * ; algo = nullptr . ). inline . set minimizer type ; Definition at line 179 of file FitConfig.h. ◆ SetMinimizerOptions(). void ROOT::Fit::FitConfig::SetMinimizerOptions ; (; const ROOT::Math::MinimizerOptions & ; minopt). set all the minimizer options using class MinimizerOptions ; Definition at line 257 of file FitConfig.cxx. ◆ SetMinosErrors() [1/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; bool ; on = true). inline . set Minos errors computation to be performed after fitting ; Definition at line 229 of file FitConfig.h. ◆ SetMinosErrors() [2/2]. void ROOT::Fit::FitConfig::SetMinosErrors ; (; const std::vector< unsigned int > & ; paramInd). inline . set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ; Definition at line 237 of file FitConfig.h. ◆ SetNormErrors(). void ROOT::Fit::FitConfig::SetNormErrors ; (; bool ; on = true). inline . set the option to normalize the error on the result according to chi2/ndf ; Definition at line 223 of file FitConfig.h. ◆ SetParabErrors(). void ROOT::Fit::FitConfig::SetParabErrors ; (; bool ; on = true). inline . set parabolic errors ; Definition at line 226 of file FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:1193,Security,access,access,1193,"FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:6318,Security,access,access,6318,FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at line 173 of file FitConfig.cxx. ◆ CreateParamsSettings(). template<class T > . void ROOT::Fit::FitConfig::CreateParamsSettings ; (; const ROOT::Math::IParamMultiFunctionTempl< T > & ; func). inline . set the parameter settings from a model function. ; Create always new parameter setting list from a given model function ; Definition at line 109 of file FitConfig.h. ◆ MinimizerAlgoType(). const std::string & ROOT::Fit::FitConfig::MinimizerAlgoType ; (; ); const. inline . return type of minimizer algorithms ; Definition at line 192 of file FitConfig.h. ◆ MinimizerName(). std::string ROOT::Fit::FitConfig::MinimizerName ; (; ); const. return Minimizer full name (type / algorithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitConfig::MinimizerType ; (; ); const. inline . return type of minimizer package ; Definition at line 187 of file FitConfig.h. ◆ MinosErrors(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ oper,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:5106,Availability,avail,available,5106,"component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vector< double > > fCoords;  This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ;  ; std::vector< const double * > fCoordsPtr;  ; DataOptions fOptions;  ; double * fpTmpCoordVector;  ; DataRange fRange;  . #include <Fit/FitData.h>. Inheritance diagram for ROOT::Fit::FitData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FitData() [1/13]. ROOT::Fit::FitData::FitData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1 . ). explicit . construct with default option and data range ; Definition at line 20 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:13267,Availability,avail,available,13267,"t line 285 of file FitData.h. ◆ operator=(). FitData & ROOT::Fit::FitData::operator= ; (; const FitData & ; rhs). Definition at line 218 of file FitData.cxx. ◆ Opt() [1/2]. DataOptions & ROOT::Fit::FitData::Opt ; (; ). inline . Definition at line 313 of file FitData.h. ◆ Opt() [2/2]. const DataOptions & ROOT::Fit::FitData::Opt ; (; ); const. inline . access to options ; Definition at line 309 of file FitData.h. ◆ Range(). const DataRange & ROOT::Fit::FitData::Range ; (; ); const. inline . access to range ; Definition at line 321 of file FitData.h. ◆ Size(). unsigned int ROOT::Fit::FitData::Size ; (; ); const. inline . return number of fit points ; Definition at line 293 of file FitData.h. ◆ UnWrap(). void ROOT::Fit::FitData::UnWrap ; (; ). inlineprotected . Definition at line 336 of file FitData.h. ◆ VectorPadding(). static constexpr unsigned ROOT::Fit::FitData::VectorPadding ; (; const unsigned ; ). inlinestaticconstexprprotected . If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ; Then, as every number is a multiple of SIMD vector size, the padding will always be zero. ; Definition at line 372 of file FitData.h. Member Data Documentation. ◆ fCoords. std::vector< std::vector< double > > ROOT::Fit::FitData::fCoords. private . This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ; The vector of pointers stores the pointers to the first elements of the corresponding elements; If fWrapped is true, fCoords is empty. the data can only be accessed by using fCoordsPtr. ; Definition at line 403 of file FitData.h. ◆ fCoordsPtr. std::vector< const double * > ROOT::Fit::FitData::fCoordsPtr. private . Definition at line 404 of file FitData.h. ◆ fDim. unsigned int ROOT::Fit::FitData::fDim. protected . Definition at line 386 of file FitData.h. ◆ fMaxPoints. unsigned int ROOT::Fit::FitData::fMaxPoint",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:645,Integrability,wrap,wrapper,645,". ROOT: ROOT::Fit::FitData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Fit::FitData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Base class for all the fit data types: Stores the coordinates and the DataOptions. ; class holding the fit data points. It is template on the type of point, which can be for example a binned or unbinned point. It is basically a wrapper on an std::vector ; Definition at line 56 of file FitData.h. Public Member Functions;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and data range ;  ;  FitData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and default data range ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX, const double *dataY);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX, const double *dataY, const double *dataZ);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) con",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:4635,Integrability,rout,routines,4635,"ne dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vector< double > > fCoords;  This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ;  ; std::vector< const double * > fCoordsPtr;  ; DataOptions fOptions;  ; double * fpTmpCoordVector;  ; DataRange fRange;  . #include <Fit/FitData.h>. Inheritance diagram for ROOT::Fit::Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:11552,Integrability,rout,routines,11552,"Coords(). const double * ROOT::Fit::FitData::Coords ; (; unsigned int ; ipoint); const. inline . return a pointer to the coordinates data for the given fit point ; Definition at line 236 of file FitData.h. ◆ GetCoordComponent(). const double * ROOT::Fit::FitData::GetCoordComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 219 of file FitData.h. ◆ GetCoordDataPtrs(). const std::vector< const double * > & ROOT::Fit::FitData::GetCoordDataPtrs ; (; ); const. inline . direct access to coord data ptrs ; Definition at line 329 of file FitData.h. ◆ InitCoordsVector(). void ROOT::Fit::FitData::InitCoordsVector ; (; ). inlineprotected . initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ; Definition at line 171 of file FitData.h. ◆ InitFromRange(). template<class Iterator > . void ROOT::Fit::FitData::InitFromRange ; (; Iterator ; dataItr). inlineprotected . Definition at line 190 of file FitData.h. ◆ NDim(). unsigned int ROOT::Fit::FitData::NDim ; (; ); const. inline . return coordinate data dimension ; Definition at line 301 of file FitData.h. ◆ NPoints(). unsigned int ROOT::Fit::FitData::NPoints ; (; ); const. inline . return number of fit points ; Definition at line 285 of file FitData.h. ◆ operator=(). FitData & ROOT::Fit::FitData::operator= ; (; const FitData & ; rhs). Definition at line 218 of file FitData.cxx. ◆ Opt() [1/2]. DataOptions & ROOT::Fit::FitData::Opt ; (; ). inline . Definition at line 313 of file FitData.h. ◆ Opt() [2/2]. const DataOptions & ROOT::Fit::FitData::Opt ; (; ); const. inline . access to options ; Definition at line 3",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:4159,Security,access,access,4159," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vect",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:4427,Security,access,access,4427," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vect",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:4485,Security,access,access,4485," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vect",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:11380,Security,access,access,11380,"line . add one dim data with only coordinate and values ; Definition at line 254 of file FitData.h. ◆ Append(). void ROOT::Fit::FitData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1 . ). Definition at line 251 of file FitData.cxx. ◆ Coords(). const double * ROOT::Fit::FitData::Coords ; (; unsigned int ; ipoint); const. inline . return a pointer to the coordinates data for the given fit point ; Definition at line 236 of file FitData.h. ◆ GetCoordComponent(). const double * ROOT::Fit::FitData::GetCoordComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 219 of file FitData.h. ◆ GetCoordDataPtrs(). const std::vector< const double * > & ROOT::Fit::FitData::GetCoordDataPtrs ; (; ); const. inline . direct access to coord data ptrs ; Definition at line 329 of file FitData.h. ◆ InitCoordsVector(). void ROOT::Fit::FitData::InitCoordsVector ; (; ). inlineprotected . initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ; Definition at line 171 of file FitData.h. ◆ InitFromRange(). template<class Iterator > . void ROOT::Fit::FitData::InitFromRange ; (; Iterator ; dataItr). inlineprotected . Definition at line 190 of file FitData.h. ◆ NDim(). unsigned int ROOT::Fit::FitData::NDim ; (; ); const. inline . return coordinate data dimension ; Definition at line 301 of file FitData.h. ◆ NPoints(). unsigned int ROOT::Fit::FitData::NPoints ; (; ); const. inline . return number of fit points ; Definition at line 285 of file FitData.h. ◆ operator=(). FitData & ROOT::Fit::FitData::operator= ; (; const FitData & ; rhs). Definition at line 218 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:12620,Security,access,access,12620,"alization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ; Definition at line 171 of file FitData.h. ◆ InitFromRange(). template<class Iterator > . void ROOT::Fit::FitData::InitFromRange ; (; Iterator ; dataItr). inlineprotected . Definition at line 190 of file FitData.h. ◆ NDim(). unsigned int ROOT::Fit::FitData::NDim ; (; ); const. inline . return coordinate data dimension ; Definition at line 301 of file FitData.h. ◆ NPoints(). unsigned int ROOT::Fit::FitData::NPoints ; (; ); const. inline . return number of fit points ; Definition at line 285 of file FitData.h. ◆ operator=(). FitData & ROOT::Fit::FitData::operator= ; (; const FitData & ; rhs). Definition at line 218 of file FitData.cxx. ◆ Opt() [1/2]. DataOptions & ROOT::Fit::FitData::Opt ; (; ). inline . Definition at line 313 of file FitData.h. ◆ Opt() [2/2]. const DataOptions & ROOT::Fit::FitData::Opt ; (; ); const. inline . access to options ; Definition at line 309 of file FitData.h. ◆ Range(). const DataRange & ROOT::Fit::FitData::Range ; (; ); const. inline . access to range ; Definition at line 321 of file FitData.h. ◆ Size(). unsigned int ROOT::Fit::FitData::Size ; (; ); const. inline . return number of fit points ; Definition at line 293 of file FitData.h. ◆ UnWrap(). void ROOT::Fit::FitData::UnWrap ; (; ). inlineprotected . Definition at line 336 of file FitData.h. ◆ VectorPadding(). static constexpr unsigned ROOT::Fit::FitData::VectorPadding ; (; const unsigned ; ). inlinestaticconstexprprotected . If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ; Then, as every number is a multiple of SIMD vector size, the padding will always be zero. ; Definition at line 372 of file FitData.h. Member Data Documentation. ◆ fCoords. std::vector< std::vector< double > > ROOT::Fit::FitData::fCoords. private . This vector stores the vectorizable data: The inner vectors contain the coord",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:12761,Security,access,access,12761,"ition at line 171 of file FitData.h. ◆ InitFromRange(). template<class Iterator > . void ROOT::Fit::FitData::InitFromRange ; (; Iterator ; dataItr). inlineprotected . Definition at line 190 of file FitData.h. ◆ NDim(). unsigned int ROOT::Fit::FitData::NDim ; (; ); const. inline . return coordinate data dimension ; Definition at line 301 of file FitData.h. ◆ NPoints(). unsigned int ROOT::Fit::FitData::NPoints ; (; ); const. inline . return number of fit points ; Definition at line 285 of file FitData.h. ◆ operator=(). FitData & ROOT::Fit::FitData::operator= ; (; const FitData & ; rhs). Definition at line 218 of file FitData.cxx. ◆ Opt() [1/2]. DataOptions & ROOT::Fit::FitData::Opt ; (; ). inline . Definition at line 313 of file FitData.h. ◆ Opt() [2/2]. const DataOptions & ROOT::Fit::FitData::Opt ; (; ); const. inline . access to options ; Definition at line 309 of file FitData.h. ◆ Range(). const DataRange & ROOT::Fit::FitData::Range ; (; ); const. inline . access to range ; Definition at line 321 of file FitData.h. ◆ Size(). unsigned int ROOT::Fit::FitData::Size ; (; ); const. inline . return number of fit points ; Definition at line 293 of file FitData.h. ◆ UnWrap(). void ROOT::Fit::FitData::UnWrap ; (; ). inlineprotected . Definition at line 336 of file FitData.h. ◆ VectorPadding(). static constexpr unsigned ROOT::Fit::FitData::VectorPadding ; (; const unsigned ; ). inlinestaticconstexprprotected . If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ; Then, as every number is a multiple of SIMD vector size, the padding will always be zero. ; Definition at line 372 of file FitData.h. Member Data Documentation. ◆ fCoords. std::vector< std::vector< double > > ROOT::Fit::FitData::fCoords. private . This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ; The vector of pointers stores the poi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:13908,Security,access,accessed,13908,"it points ; Definition at line 293 of file FitData.h. ◆ UnWrap(). void ROOT::Fit::FitData::UnWrap ; (; ). inlineprotected . Definition at line 336 of file FitData.h. ◆ VectorPadding(). static constexpr unsigned ROOT::Fit::FitData::VectorPadding ; (; const unsigned ; ). inlinestaticconstexprprotected . If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ; Then, as every number is a multiple of SIMD vector size, the padding will always be zero. ; Definition at line 372 of file FitData.h. Member Data Documentation. ◆ fCoords. std::vector< std::vector< double > > ROOT::Fit::FitData::fCoords. private . This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ; The vector of pointers stores the pointers to the first elements of the corresponding elements; If fWrapped is true, fCoords is empty. the data can only be accessed by using fCoordsPtr. ; Definition at line 403 of file FitData.h. ◆ fCoordsPtr. std::vector< const double * > ROOT::Fit::FitData::fCoordsPtr. private . Definition at line 404 of file FitData.h. ◆ fDim. unsigned int ROOT::Fit::FitData::fDim. protected . Definition at line 386 of file FitData.h. ◆ fMaxPoints. unsigned int ROOT::Fit::FitData::fMaxPoints. protected . Definition at line 384 of file FitData.h. ◆ fNPoints. unsigned int ROOT::Fit::FitData::fNPoints. protected . Definition at line 385 of file FitData.h. ◆ fOptions. DataOptions ROOT::Fit::FitData::fOptions. private . Definition at line 380 of file FitData.h. ◆ fpTmpCoordVector. double* ROOT::Fit::FitData::fpTmpCoordVector. private . Definition at line 406 of file FitData.h. ◆ fRange. DataRange ROOT::Fit::FitData::fRange. private . Definition at line 381 of file FitData.h. ◆ fWrapped. bool ROOT::Fit::FitData::fWrapped. protected . Definition at line 376 of file FitData.h. Libraries for ROOT::Fit::FitData:. [legend]; The docum",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult-members.html:213,Modifiability,inherit,inherited,213,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::FitResult Member List. This is the complete list of members for ROOT::Fit::FitResult, including all inherited members. Chi2() constROOT::Fit::FitResultinline; Contour(unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683)ROOT::Fit::FitResult; Correlation(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrix(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrixStatus() constROOT::Fit::FitResultinline; Edm() constROOT::Fit::FitResultinline; Error(unsigned int i) constROOT::Fit::FitResultinline; Errors() constROOT::Fit::FitResultinline; fBoundParamsROOT::Fit::FitResultprotected; fChi2ROOT::Fit::FitResultprotected; fCovMatrixROOT::Fit::FitResultprotected; fCovStatusROOT::Fit::FitResultprotected; fEdmROOT::Fit::FitResultprotected; fErrorsROOT::Fit::FitResultprotected; fFitDataROOT::Fit::FitResultprotected; fFitFuncROOT::Fit::FitResultprotected; fFixedParamsROOT::Fit::FitResultprotected; fGlobalCCROOT::Fit::FitResultprotected; FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)ROOT::Fit::FitResult; FitResult()ROOT::Fit::FitResult; FitResult(const FitConfig &fconfig)ROOT::Fit::FitResult; FittedBinData() constROOT::Fit::FitResult; FittedFunction() constROOT::Fit::FitResultinline; FitterROOT::Fit::FitResultfriend; fMinimizerROOT::Fit::FitResultprotected; fMinimTypeROOT::Fit::FitResultprotected; fMinosErrorsROOT::Fit::FitResultprotected; fNCallsROOT::Fit::FitResultprotected; fNdfROOT::Fit::FitResultprotected; fNFreeROOT::Fit::FitResultprotected; fNormalizedROOT::Fit::FitResultprotected; fObjFuncROOT::Fit::FitResultprotected; fParamBoundsROOT::Fit::FitRes",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:490,Availability,error,error,490,". ROOT: ROOT::Fit::FitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::Fit::FitResult Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. ; When the fit is valid, it is constructed from a Minimizer and a model function pointer ; Definition at line 47 of file FitResult.h. Public Types; typedef ROOT::Math::IParamMultiFunction IModelFunction;  . Public Member Functions;  FitResult ();  Default constructor for an empty (non valid) fit result. ;  ;  FitResult (const FitConfig &fconfig);  Constructor from a fit-config for a dummy fit (e.g. ;  ; virtual ~FitResult ();  Destructor. ;  ; double Chi2 () const;  Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2100,Availability,error,error,2100,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2178,Availability,error,errors,2178,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2745,Availability,avail,available,2745," int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:4142,Availability,error,errors,4142,"; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; template<class Matrix > ; void GetCovarianceMatrix (Matrix &mat) const;  fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:4521,Availability,error,error,4521,"; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; template<class Matrix > ; void GetCovarianceMatrix (Matrix &mat) const;  fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:5033,Availability,error,error,5033,"g operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - retu",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:5098,Availability,error,error,5098,"st;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:5566,Availability,error,errors,5566,"he parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std::vector) ;  ; double ParError (unsigned int i) const;  parameter error by index ;  ; std::string ParName (unsigned int i) const;  name of the parameter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:5629,Availability,error,errors,5629,"he parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std::vector) ;  ; double ParError (unsigned int i) const;  parameter error by index ;  ; std::string ParName (unsigned int i) const;  name of the parameter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:6192,Availability,error,error,6192,"he parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std::vector) ;  ; double ParError (unsigned int i) const;  parameter error by index ;  ; std::string ParName (unsigned int i) const;  name of the parameter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:6466,Availability,error,error,6466,"he parabolic error ;  ; double MinFcnValue () const;  Return value of the objective function (chi2 or likelihood) used in the fit. ;  ; const std::string & MinimizerType () const;  minimization quantities ;  ; unsigned int NCalls () const;  Number of function calls to find minimum. ;  ; unsigned int Ndf () const;  Number of degree of freedom. ;  ; unsigned int NFreeParameters () const;  get total number of free parameters ;  ; bool NormalizedErrors () const;  flag to check if errors are normalized ;  ; void NormalizeErrors ();  normalize errors using chi2/ndf for chi2 fits ;  ; unsigned int NPar () const;  total number of parameters (abbreviation) ;  ; unsigned int NTotalParameters () const;  get total number of parameters ;  ; double Parameter (unsigned int i) const;  parameter value by index ;  ; bool ParameterBounds (unsigned int ipar, double &lower, double &upper) const;  retrieve parameter bounds - return false if parameter is not bound ;  ; const std::vector< double > & Parameters () const;  parameter values (return std::vector) ;  ; double ParError (unsigned int i) const;  parameter error by index ;  ; std::string ParName (unsigned int i) const;  name of the parameter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7102,Availability,error,errors,7102,"eter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total paramete",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7590,Availability,error,error,7590,";  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ;  ; int fCovStatus;  covariance matrix status code ;  ; double fEdm;  expected distance from minimum ;  ; std::vector< double > fErrors;  errors ;  ; std::shared_ptr< FitData > fFitData;  ! data set used in the fit ;  ; std::shared_ptr< IModelFunction > fFitFunc;  ! model function res",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7655,Availability,error,error,7655," double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ;  ; int fCovStatus;  covariance matrix status code ;  ; double fEdm;  expected distance from minimum ;  ; std::vector< double > fErrors;  errors ;  ; std::shared_ptr< FitData > fFitData;  ! data set used in the fit ;  ; std::shared_ptr< IModelFunction > fFitFunc;  ! model function resulting from the fit. ;  ; std::map< unsigned int, bool > fFixedParams;  list of fixed parameters ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:8416,Availability,error,errors,8416,"zer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ;  ; int fCovStatus;  covariance matrix status code ;  ; double fEdm;  expected distance from minimum ;  ; std::vector< double > fErrors;  errors ;  ; std::shared_ptr< FitData > fFitData;  ! data set used in the fit ;  ; std::shared_ptr< IModelFunction > fFitFunc;  ! model function resulting from the fit. ;  ; std::map< unsigned int, bool > fFixedParams;  list of fixed parameters ;  ; std::vector< double > fGlobalCC;  global Correlation coefficient ;  ; std::shared_ptr< ROOT::Math::Minimizer > fMinimizer;  ! minimizer object used for fitting ;  ; std::string fMinimType;  string indicating type of minimizer ;  ; std::map< unsigned int, std::pair< double, double > > fMinosErrors;  map contains the two Minos errors ;  ; unsigned int fNCalls;  number of function calls ;  ; unsigned int fNdf;  number of degree of freedom ;  ; unsigned int fNFree;  number of fit free parameters (total parameters are in size of parameter vector) ;  ; bool fNormalized;  flag for indicating is errors are normalized ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:8992,Availability,error,errors,8992,"ams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ;  ; int fCovStatus;  covariance matrix status code ;  ; double fEdm;  expected distance from minimum ;  ; std::vector< double > fErrors;  errors ;  ; std::shared_ptr< FitData > fFitData;  ! data set used in the fit ;  ; std::shared_ptr< IModelFunction > fFitFunc;  ! model function resulting from the fit. ;  ; std::map< unsigned int, bool > fFixedParams;  list of fixed parameters ;  ; std::vector< double > fGlobalCC;  global Correlation coefficient ;  ; std::shared_ptr< ROOT::Math::Minimizer > fMinimizer;  ! minimizer object used for fitting ;  ; std::string fMinimType;  string indicating type of minimizer ;  ; std::map< unsigned int, std::pair< double, double > > fMinosErrors;  map contains the two Minos errors ;  ; unsigned int fNCalls;  number of function calls ;  ; unsigned int fNdf;  number of degree of freedom ;  ; unsigned int fNFree;  number of fit free parameters (total parameters are in size of parameter vector) ;  ; bool fNormalized;  flag for indicating is errors are normalized ;  ; std::shared_ptr< ROOT::Math::IMultiGenFunction > fObjFunc;  ! objective function used for fitting ;  ; std::vector< std::pair< double, double > > fParamBounds;  parameter bounds ;  ; std::vector< double > fParams;  parameter values. Size is total number of parameters ;  ; std::vector< std::string > fParNames;  parameter names (only with FCN only fits, when fFitFunc=0) ;  ; int fStatus;  minimizer status code ;  ; double fVal;  minimum function value ;  ; bool fValid;  flag for indicating valid fit ;  . Friends; class Fitter;  . #include <Fit/FitResult.h>. Inheritance diagram for ROOT::Fit::FitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ IModelFunction. typedef ROO",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:9260,Availability,error,errors,9260,"ams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ;  ; int fCovStatus;  covariance matrix status code ;  ; double fEdm;  expected distance from minimum ;  ; std::vector< double > fErrors;  errors ;  ; std::shared_ptr< FitData > fFitData;  ! data set used in the fit ;  ; std::shared_ptr< IModelFunction > fFitFunc;  ! model function resulting from the fit. ;  ; std::map< unsigned int, bool > fFixedParams;  list of fixed parameters ;  ; std::vector< double > fGlobalCC;  global Correlation coefficient ;  ; std::shared_ptr< ROOT::Math::Minimizer > fMinimizer;  ! minimizer object used for fitting ;  ; std::string fMinimType;  string indicating type of minimizer ;  ; std::map< unsigned int, std::pair< double, double > > fMinosErrors;  map contains the two Minos errors ;  ; unsigned int fNCalls;  number of function calls ;  ; unsigned int fNdf;  number of degree of freedom ;  ; unsigned int fNFree;  number of fit free parameters (total parameters are in size of parameter vector) ;  ; bool fNormalized;  flag for indicating is errors are normalized ;  ; std::shared_ptr< ROOT::Math::IMultiGenFunction > fObjFunc;  ! objective function used for fitting ;  ; std::vector< std::pair< double, double > > fParamBounds;  parameter bounds ;  ; std::vector< double > fParams;  parameter values. Size is total number of parameters ;  ; std::vector< std::string > fParNames;  parameter names (only with FCN only fits, when fFitFunc=0) ;  ; int fStatus;  minimizer status code ;  ; double fVal;  minimum function value ;  ; bool fValid;  flag for indicating valid fit ;  . Friends; class Fitter;  . #include <Fit/FitResult.h>. Inheritance diagram for ROOT::Fit::FitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ IModelFunction. typedef ROO",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:11745,Availability,error,error,11745,". Member Function Documentation. ◆ Chi2(). double ROOT::Fit::FitResult::Chi2 ; (; ); const. inline . Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ; Definition at line 153 of file FitResult.h. ◆ Contour(). bool ROOT::Fit::FitResult::Contour ; (; unsigned int ; ipar, . unsigned int ; jpar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; confLevel = 0.683 . ). create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ; Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false A array for x and y points should be provided Pass optionally the confidence level, default is 0.683 it is assumed that ErrorDef() defines the right error definition (i.e 1 sigma error for one parameter).; If not the confidence level are scaled to new level ; Definition at line 660 of file FitResult.cxx. ◆ Correlation(). double ROOT::Fit::FitResult::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve correlation elements ; Definition at line 225 of file FitResult.h. ◆ CovMatrix(). double ROOT::Fit::FitResult::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve covariance matrix element ; Definition at line 215 of file FitResult.h. ◆ CovMatrixStatus(). int ROOT::Fit::FitResult::CovMatrixStatus ; (; ); const. inline . covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitR",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:11775,Availability,error,error,11775,"T::Fit::FitResult::Chi2 ; (; ); const. inline . Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ; Definition at line 153 of file FitResult.h. ◆ Contour(). bool ROOT::Fit::FitResult::Contour ; (; unsigned int ; ipar, . unsigned int ; jpar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; confLevel = 0.683 . ). create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ; Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false A array for x and y points should be provided Pass optionally the confidence level, default is 0.683 it is assumed that ErrorDef() defines the right error definition (i.e 1 sigma error for one parameter).; If not the confidence level are scaled to new level ; Definition at line 660 of file FitResult.cxx. ◆ Correlation(). double ROOT::Fit::FitResult::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve correlation elements ; Definition at line 225 of file FitResult.h. ◆ CovMatrix(). double ROOT::Fit::FitResult::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve covariance matrix element ; Definition at line 215 of file FitResult.h. ◆ CovMatrixStatus(). int ROOT::Fit::FitResult::CovMatrixStatus ; (; ); const. inline . covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitResult::Error ; (; unsigned int ; i); const. inline . p",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:12792,Availability,error,error,12792,"nfidence level are scaled to new level ; Definition at line 660 of file FitResult.cxx. ◆ Correlation(). double ROOT::Fit::FitResult::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve correlation elements ; Definition at line 225 of file FitResult.h. ◆ CovMatrix(). double ROOT::Fit::FitResult::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve covariance matrix element ; Definition at line 215 of file FitResult.h. ◆ CovMatrixStatus(). int ROOT::Fit::FitResult::CovMatrixStatus ; (; ); const. inline . covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitResult::Error ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 179 of file FitResult.h. ◆ Errors(). const std::vector< double > & ROOT::Fit::FitResult::Errors ; (; ); const. inline . parameter errors (return st::vector) ; Definition at line 162 of file FitResult.h. ◆ FillResult(). void ROOT::Fit::FitResult::FillResult ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const FitConfig & ; fconfig, . const std::shared_ptr< IModelFunction > & ; f, . bool ; isValid, . unsigned int ; sizeOfData = 0, . int ; fitType = 1, . const ROOT::Math::IMultiGenFunction * ; chi2func = nullptr, . unsigned int ; ncalls = 0 . ). Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ; Definition at line 100 of file FitResult.cxx. ◆ FittedBinData(). const BinData * ROOT::Fit::FitResult::FittedBinData ; (; ); const. return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ; Definition",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:12958,Availability,error,errors,12958,"signed int ; j . ); const. inline . retrieve correlation elements ; Definition at line 225 of file FitResult.h. ◆ CovMatrix(). double ROOT::Fit::FitResult::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . retrieve covariance matrix element ; Definition at line 215 of file FitResult.h. ◆ CovMatrixStatus(). int ROOT::Fit::FitResult::CovMatrixStatus ; (; ); const. inline . covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitResult::Error ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 179 of file FitResult.h. ◆ Errors(). const std::vector< double > & ROOT::Fit::FitResult::Errors ; (; ); const. inline . parameter errors (return st::vector) ; Definition at line 162 of file FitResult.h. ◆ FillResult(). void ROOT::Fit::FitResult::FillResult ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const FitConfig & ; fconfig, . const std::shared_ptr< IModelFunction > & ; f, . bool ; isValid, . unsigned int ; sizeOfData = 0, . int ; fitType = 1, . const ROOT::Math::IMultiGenFunction * ; chi2func = nullptr, . unsigned int ; ncalls = 0 . ). Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ; Definition at line 100 of file FitResult.cxx. ◆ FittedBinData(). const BinData * ROOT::Fit::FitResult::FittedBinData ; (; ); const. return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ; Definition at line 631 of file FitResult.cxx. ◆ FittedFunction(). const IModelFunction * ROOT::Fit::FitResult::FittedFunction ; (; ); const. inline . fitting quantities ; Return poin",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:13740,Availability,avail,available,13740,"; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 179 of file FitResult.h. ◆ Errors(). const std::vector< double > & ROOT::Fit::FitResult::Errors ; (; ); const. inline . parameter errors (return st::vector) ; Definition at line 162 of file FitResult.h. ◆ FillResult(). void ROOT::Fit::FitResult::FillResult ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const FitConfig & ; fconfig, . const std::shared_ptr< IModelFunction > & ; f, . bool ; isValid, . unsigned int ; sizeOfData = 0, . int ; fitType = 1, . const ROOT::Math::IMultiGenFunction * ; chi2func = nullptr, . unsigned int ; ncalls = 0 . ). Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ; Definition at line 100 of file FitResult.cxx. ◆ FittedBinData(). const BinData * ROOT::Fit::FitResult::FittedBinData ; (; ); const. return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ; Definition at line 631 of file FitResult.cxx. ◆ FittedFunction(). const IModelFunction * ROOT::Fit::FitResult::FittedFunction ; (; ); const. inline . fitting quantities ; Return pointer to model (fit) function with fitted parameter values. Pointer is managed internally. I must not be deleted ; Definition at line 139 of file FitResult.h. ◆ GetConfidenceIntervals() [1/3]. void ROOT::Fit::FitResult::GetConfidenceIntervals ; (; const BinData & ; data, . double * ; ci, . double ; cl = 0.95, . bool ; norm = false . ); const. evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ; This method is maintained for backward compatibility and will be deprecated ; Definition at line 583 of file FitResult.cxx. ◆ GetConfidenceIntervals() [2/3]. std::vector< double > ROOT::Fit::FitResult::GetConfidenceIntervals ; (; doubl",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:16794,Availability,error,errors,16794,"ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalCC(). double ROOT::Fit::FitResult::GlobalCC ; (; unsigned int ; i); const. inline . parameter global correlation coefficient ; Definition at line 209 of file FitResult.h. ◆ HasMinosError(). bool ROOT::Fit::FitResult::HasMinosError ; (; unsigned int ; i); const. query if parameter i has the Minos error ; Definition at line 325 of file FitResult.cxx. ◆ Index(). int ROOT::Fit::FitResult::Index ; (; const std::string & ; name); const. get index for parameter name (return -1 if not found) ; Definition at line 351 of file FitResult.cxx. ◆ IsEmpty(). bool ROOT::Fit::FitResult::I",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:17544,Availability,error,error,17544,"lass implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalCC(). double ROOT::Fit::FitResult::GlobalCC ; (; unsigned int ; i); const. inline . parameter global correlation coefficient ; Definition at line 209 of file FitResult.h. ◆ HasMinosError(). bool ROOT::Fit::FitResult::HasMinosError ; (; unsigned int ; i); const. query if parameter i has the Minos error ; Definition at line 325 of file FitResult.cxx. ◆ Index(). int ROOT::Fit::FitResult::Index ; (; const std::string & ; name); const. get index for parameter name (return -1 if not found) ; Definition at line 351 of file FitResult.cxx. ◆ IsEmpty(). bool ROOT::Fit::FitResult::IsEmpty ; (; ); const. inline . True if a fit result does not exist (even invalid) with parameter values. ; Definition at line 108 of file FitResult.h. ◆ IsParameterBound(). bool ROOT::Fit::FitResult::IsParameterBound ; (; unsigned int ; ipar); const. query if a parameter is bound ; Definition at line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that s",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:18577,Availability,error,error,18577,"n at line 325 of file FitResult.cxx. ◆ Index(). int ROOT::Fit::FitResult::Index ; (; const std::string & ; name); const. get index for parameter name (return -1 if not found) ; Definition at line 351 of file FitResult.cxx. ◆ IsEmpty(). bool ROOT::Fit::FitResult::IsEmpty ; (; ); const. inline . True if a fit result does not exist (even invalid) with parameter values. ; Definition at line 108 of file FitResult.h. ◆ IsParameterBound(). bool ROOT::Fit::FitResult::IsParameterBound ; (; unsigned int ; ipar); const. query if a parameter is bound ; Definition at line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that subsequent operations like error analysis (e.g. Minos) failed. In that case the status can be still true if the original minimization algorithm succeeded in finding the minimum. One can query in that case the minimizer return status using Status(). It is responsibility to the Minimizer class to tag a found minimum as valid or not and to produce also a status code. ; Definition at line 105 of file FitResult.h. ◆ LowerError(). double ROOT::Fit::FitResult::LowerError ; (; unsigned int ; i); const. lower Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 332 of file FitResult.cxx. ◆ MinFcnValue(). double ROOT::Fit::FitResult::MinFcnValue ; (; ); const. inline . Return value of the objective function (chi2 or likelihood) used in the fit. ; Definition at line 111 of file FitResult.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitResult::MinimizerType ; (; ); const. inline . minimization quantities ; minimizer type ; Definition at line 93 of file FitR",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:19062,Availability,error,error,19062,"t ; ipar); const. query if a parameter is bound ; Definition at line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that subsequent operations like error analysis (e.g. Minos) failed. In that case the status can be still true if the original minimization algorithm succeeded in finding the minimum. One can query in that case the minimizer return status using Status(). It is responsibility to the Minimizer class to tag a found minimum as valid or not and to produce also a status code. ; Definition at line 105 of file FitResult.h. ◆ LowerError(). double ROOT::Fit::FitResult::LowerError ; (; unsigned int ; i); const. lower Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 332 of file FitResult.cxx. ◆ MinFcnValue(). double ROOT::Fit::FitResult::MinFcnValue ; (; ); const. inline . Return value of the objective function (chi2 or likelihood) used in the fit. ; Definition at line 111 of file FitResult.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitResult::MinimizerType ; (; ); const. inline . minimization quantities ; minimizer type ; Definition at line 93 of file FitResult.h. ◆ ModelFunction(). std::shared_ptr< IModelFunction > ROOT::Fit::FitResult::ModelFunction ; (; ). inlineprotected . Return pointer non const pointer to model (fit) function with fitted parameter values. ; used by Fitter class ; Definition at line 337 of file FitResult.h. ◆ NCalls(). unsigned int ROOT::Fit::FitResult::NCalls ; (; ); const. inline . Number of function calls to find minimum. ; Definition at line 114 of file FitResult.h. ◆ Ndf(). unsigned int ROOT::Fit::FitResult::Ndf ; (",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:19127,Availability,error,error,19127,"line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that subsequent operations like error analysis (e.g. Minos) failed. In that case the status can be still true if the original minimization algorithm succeeded in finding the minimum. One can query in that case the minimizer return status using Status(). It is responsibility to the Minimizer class to tag a found minimum as valid or not and to produce also a status code. ; Definition at line 105 of file FitResult.h. ◆ LowerError(). double ROOT::Fit::FitResult::LowerError ; (; unsigned int ; i); const. lower Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 332 of file FitResult.cxx. ◆ MinFcnValue(). double ROOT::Fit::FitResult::MinFcnValue ; (; ); const. inline . Return value of the objective function (chi2 or likelihood) used in the fit. ; Definition at line 111 of file FitResult.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitResult::MinimizerType ; (; ); const. inline . minimization quantities ; minimizer type ; Definition at line 93 of file FitResult.h. ◆ ModelFunction(). std::shared_ptr< IModelFunction > ROOT::Fit::FitResult::ModelFunction ; (; ). inlineprotected . Return pointer non const pointer to model (fit) function with fitted parameter values. ; used by Fitter class ; Definition at line 337 of file FitResult.h. ◆ NCalls(). unsigned int ROOT::Fit::FitResult::NCalls ; (; ); const. inline . Number of function calls to find minimum. ; Definition at line 114 of file FitResult.h. ◆ Ndf(). unsigned int ROOT::Fit::FitResult::Ndf ; (; ); const. inline . Number of degree of freedom. ; Definition ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:20440,Availability,error,errors,20440,"(; ); const. inline . minimization quantities ; minimizer type ; Definition at line 93 of file FitResult.h. ◆ ModelFunction(). std::shared_ptr< IModelFunction > ROOT::Fit::FitResult::ModelFunction ; (; ). inlineprotected . Return pointer non const pointer to model (fit) function with fitted parameter values. ; used by Fitter class ; Definition at line 337 of file FitResult.h. ◆ NCalls(). unsigned int ROOT::Fit::FitResult::NCalls ; (; ); const. inline . Number of function calls to find minimum. ; Definition at line 114 of file FitResult.h. ◆ Ndf(). unsigned int ROOT::Fit::FitResult::Ndf ; (; ); const. inline . Number of degree of freedom. ; Definition at line 156 of file FitResult.h. ◆ NFreeParameters(). unsigned int ROOT::Fit::FitResult::NFreeParameters ; (; ); const. inline . get total number of free parameters ; Definition at line 125 of file FitResult.h. ◆ NormalizedErrors(). bool ROOT::Fit::FitResult::NormalizedErrors ; (; ); const. inline . flag to check if errors are normalized ; Definition at line 308 of file FitResult.h. ◆ NormalizeErrors(). void ROOT::Fit::FitResult::NormalizeErrors ; (; ). normalize errors using chi2/ndf for chi2 fits ; Definition at line 298 of file FitResult.cxx. ◆ NPar(). unsigned int ROOT::Fit::FitResult::NPar ; (; ); const. inline . total number of parameters (abbreviation) ; Definition at line 122 of file FitResult.h. ◆ NTotalParameters(). unsigned int ROOT::Fit::FitResult::NTotalParameters ; (; ); const. inline . get total number of parameters ; Definition at line 120 of file FitResult.h. ◆ Parameter(). double ROOT::Fit::FitResult::Parameter ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 174 of file FitResult.h. ◆ ParameterBounds(). bool ROOT::Fit::FitResult::ParameterBounds ; (; unsigned int ; ipar, . double & ; lower, . double & ; upper . ); const. retrieve parameter bounds - return false if parameter is not bound ; Definition at line 369 of file FitResult.cxx. ◆ Parameters(). const std::vecto",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:20590,Availability,error,errors,20590,"ROOT::Fit::FitResult::ModelFunction ; (; ). inlineprotected . Return pointer non const pointer to model (fit) function with fitted parameter values. ; used by Fitter class ; Definition at line 337 of file FitResult.h. ◆ NCalls(). unsigned int ROOT::Fit::FitResult::NCalls ; (; ); const. inline . Number of function calls to find minimum. ; Definition at line 114 of file FitResult.h. ◆ Ndf(). unsigned int ROOT::Fit::FitResult::Ndf ; (; ); const. inline . Number of degree of freedom. ; Definition at line 156 of file FitResult.h. ◆ NFreeParameters(). unsigned int ROOT::Fit::FitResult::NFreeParameters ; (; ); const. inline . get total number of free parameters ; Definition at line 125 of file FitResult.h. ◆ NormalizedErrors(). bool ROOT::Fit::FitResult::NormalizedErrors ; (; ); const. inline . flag to check if errors are normalized ; Definition at line 308 of file FitResult.h. ◆ NormalizeErrors(). void ROOT::Fit::FitResult::NormalizeErrors ; (; ). normalize errors using chi2/ndf for chi2 fits ; Definition at line 298 of file FitResult.cxx. ◆ NPar(). unsigned int ROOT::Fit::FitResult::NPar ; (; ); const. inline . total number of parameters (abbreviation) ; Definition at line 122 of file FitResult.h. ◆ NTotalParameters(). unsigned int ROOT::Fit::FitResult::NTotalParameters ; (; ); const. inline . get total number of parameters ; Definition at line 120 of file FitResult.h. ◆ Parameter(). double ROOT::Fit::FitResult::Parameter ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 174 of file FitResult.h. ◆ ParameterBounds(). bool ROOT::Fit::FitResult::ParameterBounds ; (; unsigned int ; ipar, . double & ; lower, . double & ; upper . ); const. retrieve parameter bounds - return false if parameter is not bound ; Definition at line 369 of file FitResult.cxx. ◆ Parameters(). const std::vector< double > & ROOT::Fit::FitResult::Parameters ; (; ); const. inline . parameter values (return std::vector) ; Definition at line 167 of file FitResult.h. ◆ Par",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:21721,Availability,error,error,21721,"e . total number of parameters (abbreviation) ; Definition at line 122 of file FitResult.h. ◆ NTotalParameters(). unsigned int ROOT::Fit::FitResult::NTotalParameters ; (; ); const. inline . get total number of parameters ; Definition at line 120 of file FitResult.h. ◆ Parameter(). double ROOT::Fit::FitResult::Parameter ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 174 of file FitResult.h. ◆ ParameterBounds(). bool ROOT::Fit::FitResult::ParameterBounds ; (; unsigned int ; ipar, . double & ; lower, . double & ; upper . ); const. retrieve parameter bounds - return false if parameter is not bound ; Definition at line 369 of file FitResult.cxx. ◆ Parameters(). const std::vector< double > & ROOT::Fit::FitResult::Parameters ; (; ); const. inline . parameter values (return std::vector) ; Definition at line 167 of file FitResult.h. ◆ ParError(). double ROOT::Fit::FitResult::ParError ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 183 of file FitResult.h. ◆ ParName(). std::string ROOT::Fit::FitResult::ParName ; (; unsigned int ; i); const. name of the parameter ; Definition at line 382 of file FitResult.cxx. ◆ Print(). void ROOT::Fit::FitResult::Print ; (; std::ostream & ; os, . bool ; covmat = false . ); const. print the result and optionally covariance matrix and correlations ; Definition at line 389 of file FitResult.cxx. ◆ PrintCovMatrix(). void ROOT::Fit::FitResult::PrintCovMatrix ; (; std::ostream & ; os); const. print error matrix and correlations ; Definition at line 447 of file FitResult.cxx. ◆ Prob(). double ROOT::Fit::FitResult::Prob ; (; ); const. p value of the fit (chi2 probability) ; Definition at line 320 of file FitResult.cxx. ◆ Scan(). bool ROOT::Fit::FitResult::Scan ; (; unsigned int ; ipar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; xmin = 0, . double ; xmax = 0 . ). scan likelihood value of parameter and fill the given graph. ; Scan parameter i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:22261,Availability,error,error,22261," & ; upper . ); const. retrieve parameter bounds - return false if parameter is not bound ; Definition at line 369 of file FitResult.cxx. ◆ Parameters(). const std::vector< double > & ROOT::Fit::FitResult::Parameters ; (; ); const. inline . parameter values (return std::vector) ; Definition at line 167 of file FitResult.h. ◆ ParError(). double ROOT::Fit::FitResult::ParError ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 183 of file FitResult.h. ◆ ParName(). std::string ROOT::Fit::FitResult::ParName ; (; unsigned int ; i); const. name of the parameter ; Definition at line 382 of file FitResult.cxx. ◆ Print(). void ROOT::Fit::FitResult::Print ; (; std::ostream & ; os, . bool ; covmat = false . ); const. print the result and optionally covariance matrix and correlations ; Definition at line 389 of file FitResult.cxx. ◆ PrintCovMatrix(). void ROOT::Fit::FitResult::PrintCovMatrix ; (; std::ostream & ; os); const. print error matrix and correlations ; Definition at line 447 of file FitResult.cxx. ◆ Prob(). double ROOT::Fit::FitResult::Prob ; (; ); const. p value of the fit (chi2 probability) ; Definition at line 320 of file FitResult.cxx. ◆ Scan(). bool ROOT::Fit::FitResult::Scan ; (; unsigned int ; ipar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; xmin = 0, . double ; xmax = 0 . ). scan likelihood value of parameter and fill the given graph. ; Scan parameter ipar between value of xmin and xmax A array for x and y points should be provided. ; Definition at line 639 of file FitResult.cxx. ◆ SetChi2AndNdf(). void ROOT::Fit::FitResult::SetChi2AndNdf ; (; double ; chi2, . unsigned int ; npoints . ). Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:23382,Availability,error,errors,23382,"ity) ; Definition at line 320 of file FitResult.cxx. ◆ Scan(). bool ROOT::Fit::FitResult::Scan ; (; unsigned int ; ipar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; xmin = 0, . double ; xmax = 0 . ). scan likelihood value of parameter and fill the given graph. ; Scan parameter ipar between value of xmin and xmax A array for x and y points should be provided. ; Definition at line 639 of file FitResult.cxx. ◆ SetChi2AndNdf(). void ROOT::Fit::FitResult::SetChi2AndNdf ; (; double ; chi2, . unsigned int ; npoints . ). Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::SetMinosError ; (; unsigned int ; i, . double ; elow, . double ; eup . ). set the Minos errors for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for paramete",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24392,Availability,error,error,24392," for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi2 fits) ; Definition at line 352 of file FitResult.h. ◆ fCovMatrix. std::vector<double> ROOT::Fit::FitResult::fCovMatrix. protected . covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ; Definition at line 362 of file FitResult.h. ◆ fCovStatus. int ROOT::Fit::Fit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24457,Availability,error,error,24457," ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi2 fits) ; Definition at line 352 of file FitResult.h. ◆ fCovMatrix. std::vector<double> ROOT::Fit::FitResult::fCovMatrix. protected . covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ; Definition at line 362 of file FitResult.h. ◆ fCovStatus. int ROOT::Fit::FitResult::fCovStatus. protected . covariance matrix status code ;",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:25703,Availability,error,errors,25703,"class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi2 fits) ; Definition at line 352 of file FitResult.h. ◆ fCovMatrix. std::vector<double> ROOT::Fit::FitResult::fCovMatrix. protected . covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ; Definition at line 362 of file FitResult.h. ◆ fCovStatus. int ROOT::Fit::FitResult::fCovStatus. protected . covariance matrix status code ; Definition at line 349 of file FitResult.h. ◆ fEdm. double ROOT::Fit::FitResult::fEdm. protected . expected distance from minimum ; Definition at line 351 of file FitResult.h. ◆ fErrors. std::vector<double> ROOT::Fit::FitResult::fErrors. protected . errors ; Definition at line 361 of file FitResult.h. ◆ fFitData. std::shared_ptr<FitData> ROOT::Fit::FitResult::fFitData. protected . ! data set used in the fit ; Definition at line 356 of file FitResult.h. ◆ fFitFunc. std::shared_ptr<IModelFunction> ROOT::Fit::FitResult::fFitFunc. protected . ! model function resulting from the fit. ; Definition at line 355 of file FitResult.h. ◆ fFixedParams. std::map<unsigned int, bool> ROOT::Fit::FitResult::fFixedParams. protected . list of fixed parameters ; Definition at line 357 of file FitResult.h. ◆ fGlobalCC. std::vector<double> ROOT::Fit::FitResult::fGlobalCC. protected . global Correlation coefficient ; Definition at line 363 of file FitResult.h. ◆ fMinimizer. std::shared_ptr<ROOT::Math::Minimizer> ROOT::Fit::FitResult::fMinimizer. protected . ! minimizer object used for fitting ; Definition at line 353 of file FitResult.h. ◆ fMinimType. std::string ROOT::Fit::FitResult::fMinimType. protected . string indicating type of minimizer ; Definition at line 365 of file Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:26880,Availability,error,errors,26880," file FitResult.h. ◆ fFitFunc. std::shared_ptr<IModelFunction> ROOT::Fit::FitResult::fFitFunc. protected . ! model function resulting from the fit. ; Definition at line 355 of file FitResult.h. ◆ fFixedParams. std::map<unsigned int, bool> ROOT::Fit::FitResult::fFixedParams. protected . list of fixed parameters ; Definition at line 357 of file FitResult.h. ◆ fGlobalCC. std::vector<double> ROOT::Fit::FitResult::fGlobalCC. protected . global Correlation coefficient ; Definition at line 363 of file FitResult.h. ◆ fMinimizer. std::shared_ptr<ROOT::Math::Minimizer> ROOT::Fit::FitResult::fMinimizer. protected . ! minimizer object used for fitting ; Definition at line 353 of file FitResult.h. ◆ fMinimType. std::string ROOT::Fit::FitResult::fMinimType. protected . string indicating type of minimizer ; Definition at line 365 of file FitResult.h. ◆ fMinosErrors. std::map<unsigned int, std::pair<double,double> > ROOT::Fit::FitResult::fMinosErrors. protected . map contains the two Minos errors ; Definition at line 364 of file FitResult.h. ◆ fNCalls. unsigned int ROOT::Fit::FitResult::fNCalls. protected . number of function calls ; Definition at line 347 of file FitResult.h. ◆ fNdf. unsigned int ROOT::Fit::FitResult::fNdf. protected . number of degree of freedom ; Definition at line 346 of file FitResult.h. ◆ fNFree. unsigned int ROOT::Fit::FitResult::fNFree. protected . number of fit free parameters (total parameters are in size of parameter vector) ; Definition at line 345 of file FitResult.h. ◆ fNormalized. bool ROOT::Fit::FitResult::fNormalized. protected . flag for indicating is errors are normalized ; Definition at line 344 of file FitResult.h. ◆ fObjFunc. std::shared_ptr<ROOT::Math::IMultiGenFunction> ROOT::Fit::FitResult::fObjFunc. protected . ! objective function used for fitting ; Definition at line 354 of file FitResult.h. ◆ fParamBounds. std::vector<std::pair<double,double> > ROOT::Fit::FitResult::fParamBounds. protected . parameter bounds ; Definition at line 359 of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:27488,Availability,error,errors,27488,"imizer object used for fitting ; Definition at line 353 of file FitResult.h. ◆ fMinimType. std::string ROOT::Fit::FitResult::fMinimType. protected . string indicating type of minimizer ; Definition at line 365 of file FitResult.h. ◆ fMinosErrors. std::map<unsigned int, std::pair<double,double> > ROOT::Fit::FitResult::fMinosErrors. protected . map contains the two Minos errors ; Definition at line 364 of file FitResult.h. ◆ fNCalls. unsigned int ROOT::Fit::FitResult::fNCalls. protected . number of function calls ; Definition at line 347 of file FitResult.h. ◆ fNdf. unsigned int ROOT::Fit::FitResult::fNdf. protected . number of degree of freedom ; Definition at line 346 of file FitResult.h. ◆ fNFree. unsigned int ROOT::Fit::FitResult::fNFree. protected . number of fit free parameters (total parameters are in size of parameter vector) ; Definition at line 345 of file FitResult.h. ◆ fNormalized. bool ROOT::Fit::FitResult::fNormalized. protected . flag for indicating is errors are normalized ; Definition at line 344 of file FitResult.h. ◆ fObjFunc. std::shared_ptr<ROOT::Math::IMultiGenFunction> ROOT::Fit::FitResult::fObjFunc. protected . ! objective function used for fitting ; Definition at line 354 of file FitResult.h. ◆ fParamBounds. std::vector<std::pair<double,double> > ROOT::Fit::FitResult::fParamBounds. protected . parameter bounds ; Definition at line 359 of file FitResult.h. ◆ fParams. std::vector<double> ROOT::Fit::FitResult::fParams. protected . parameter values. Size is total number of parameters ; Definition at line 360 of file FitResult.h. ◆ fParNames. std::vector<std::string> ROOT::Fit::FitResult::fParNames. protected . parameter names (only with FCN only fits, when fFitFunc=0) ; Definition at line 366 of file FitResult.h. ◆ fStatus. int ROOT::Fit::FitResult::fStatus. protected . minimizer status code ; Definition at line 348 of file FitResult.h. ◆ fVal. double ROOT::Fit::FitResult::fVal. protected . minimum function value ; Definition at line 350 of file Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2583,Deployability,configurat,configuration,2583,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7472,Deployability,configurat,configuration,7472,"eter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total paramete",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:13490,Deployability,configurat,configuration,13490,"alculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitResult::Error ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 179 of file FitResult.h. ◆ Errors(). const std::vector< double > & ROOT::Fit::FitResult::Errors ; (; ); const. inline . parameter errors (return st::vector) ; Definition at line 162 of file FitResult.h. ◆ FillResult(). void ROOT::Fit::FitResult::FillResult ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const FitConfig & ; fconfig, . const std::shared_ptr< IModelFunction > & ; f, . bool ; isValid, . unsigned int ; sizeOfData = 0, . int ; fitType = 1, . const ROOT::Math::IMultiGenFunction * ; chi2func = nullptr, . unsigned int ; ncalls = 0 . ). Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ; Definition at line 100 of file FitResult.cxx. ◆ FittedBinData(). const BinData * ROOT::Fit::FitResult::FittedBinData ; (; ); const. return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ; Definition at line 631 of file FitResult.cxx. ◆ FittedFunction(). const IModelFunction * ROOT::Fit::FitResult::FittedFunction ; (; ); const. inline . fitting quantities ; Return pointer to model (fit) function with fitted parameter values. Pointer is managed internally. I must not be deleted ; Definition at line 139 of file FitResult.h. ◆ GetConfidenceIntervals() [1/3]. void ROOT::Fit::FitResult::GetConfidenceIntervals ; (; const BinData & ; data, . double * ; ci, . double ; cl = 0.95, . bool ; norm = false . ); const. evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24125,Deployability,configurat,configuration,24125,"chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::SetMinosError ; (; unsigned int ; i, . double ; elow, . double ; eup . ). set the Minos errors for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:3815,Energy Efficiency,allocate,allocates,3815,"; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; template<class Matrix > ; void GetCovarianceMatrix (Matrix &mat) const;  fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:4051,Energy Efficiency,allocate,allocates,4051,"; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; template<class Matrix > ; void GetCovarianceMatrix (Matrix &mat) const;  fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:16272,Energy Efficiency,allocate,allocates,16272,"ls for an array of n points x. ; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space. For 1-dim points : stride1=1, stride2=1 for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n for multi-dim points arranged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1; the confidence interval are returned in the array ci cl is the desired confidence interval value norm is a flag to control if the intervals need to be normalized to the chi2/ndf value The intervals can be corrected optionally using the chi2/ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalC",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:16612,Energy Efficiency,allocate,allocates,16612,"ence interval are returned in the array ci cl is the desired confidence interval value norm is a flag to control if the intervals need to be normalized to the chi2/ndf value The intervals can be corrected optionally using the chi2/ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalCC(). double ROOT::Fit::FitResult::GlobalCC ; (; unsigned int ; i); const. inline . parameter global correlation coefficient ; Definition at line 209 of file FitResult.h. ◆ HasMinosError(). bool ROOT::Fit::FitResult::HasMinosError ; (; unsigned int ; i); const. query if parameter i has the Minos error ; Definition at line 325 of file FitResult.c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:1018,Modifiability,config,config,1018,". ROOT: ROOT::Fit::FitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::Fit::FitResult Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. ; When the fit is valid, it is constructed from a Minimizer and a model function pointer ; Definition at line 47 of file FitResult.h. Public Types; typedef ROOT::Math::IParamMultiFunction IModelFunction;  . Public Member Functions;  FitResult ();  Default constructor for an empty (non valid) fit result. ;  ;  FitResult (const FitConfig &fconfig);  Constructor from a fit-config for a dummy fit (e.g. ;  ; virtual ~FitResult ();  Destructor. ;  ; double Chi2 () const;  Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:2583,Modifiability,config,configuration,2583,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7472,Modifiability,config,configuration,7472,"eter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total paramete",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:10477,Modifiability,config,config,10477,"tor< double > fParams;  parameter values. Size is total number of parameters ;  ; std::vector< std::string > fParNames;  parameter names (only with FCN only fits, when fFitFunc=0) ;  ; int fStatus;  minimizer status code ;  ; double fVal;  minimum function value ;  ; bool fValid;  flag for indicating valid fit ;  . Friends; class Fitter;  . #include <Fit/FitResult.h>. Inheritance diagram for ROOT::Fit::FitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ IModelFunction. typedef ROOT::Math::IParamMultiFunction ROOT::Fit::FitResult::IModelFunction. Definition at line 51 of file FitResult.h. Constructor & Destructor Documentation. ◆ FitResult() [1/2]. ROOT::Fit::FitResult::FitResult ; (; ). Default constructor for an empty (non valid) fit result. ; Definition at line 45 of file FitResult.cxx. ◆ FitResult() [2/2]. ROOT::Fit::FitResult::FitResult ; (; const FitConfig & ; fconfig). Constructor from a fit-config for a dummy fit (e.g. ; when only one fcn evaluation is done) ; Definition at line 52 of file FitResult.cxx. ◆ ~FitResult(). virtual ROOT::Fit::FitResult::~FitResult ; (; ). inlinevirtual . Destructor. ; Definition at line 69 of file FitResult.h. Member Function Documentation. ◆ Chi2(). double ROOT::Fit::FitResult::Chi2 ; (; ); const. inline . Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ; Definition at line 153 of file FitResult.h. ◆ Contour(). bool ROOT::Fit::FitResult::Contour ; (; unsigned int ; ipar, . unsigned int ; jpar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; confLevel = 0.683 . ). create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ; Create a 2D cont",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:13490,Modifiability,config,configuration,13490,"alculated, =1 approximated, =2 made pos def , =3 accurate ; Definition at line 133 of file FitResult.h. ◆ Edm(). double ROOT::Fit::FitResult::Edm ; (; ); const. inline . Expected distance from minimum. ; Definition at line 117 of file FitResult.h. ◆ Error(). double ROOT::Fit::FitResult::Error ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 179 of file FitResult.h. ◆ Errors(). const std::vector< double > & ROOT::Fit::FitResult::Errors ; (; ); const. inline . parameter errors (return st::vector) ; Definition at line 162 of file FitResult.h. ◆ FillResult(). void ROOT::Fit::FitResult::FillResult ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const FitConfig & ; fconfig, . const std::shared_ptr< IModelFunction > & ; f, . bool ; isValid, . unsigned int ; sizeOfData = 0, . int ; fitType = 1, . const ROOT::Math::IMultiGenFunction * ; chi2func = nullptr, . unsigned int ; ncalls = 0 . ). Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ; Definition at line 100 of file FitResult.cxx. ◆ FittedBinData(). const BinData * ROOT::Fit::FitResult::FittedBinData ; (; ); const. return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ; Definition at line 631 of file FitResult.cxx. ◆ FittedFunction(). const IModelFunction * ROOT::Fit::FitResult::FittedFunction ; (; ); const. inline . fitting quantities ; Return pointer to model (fit) function with fitted parameter values. Pointer is managed internally. I must not be deleted ; Definition at line 139 of file FitResult.h. ◆ GetConfidenceIntervals() [1/3]. void ROOT::Fit::FitResult::GetConfidenceIntervals ; (; const BinData & ; data, . double * ; ci, . double ; cl = 0.95, . bool ; norm = false . ); const. evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24125,Modifiability,config,configuration,24125,"chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::SetMinosError ; (; unsigned int ; i, . double ; elow, . double ; eup . ). set the Minos errors for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:7452,Performance,perform,performed,7452,"eter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Protected Member Functions; std::shared_ptr< IModelFunction > ModelFunction ();  Return pointer non const pointer to model (fit) function with fitted parameter values. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  . Protected Attributes; std::map< unsigned int, unsigned int > fBoundParams;  list of limited parameters ;  ; double fChi2;  fit chi2 value (different than fval in case of chi2 fits) ;  ; std::vector< double > fCovMatrix;  covariance matrix (size is npar*(npar+1)/2) where npar is total paramete",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:15863,Performance,perform,performed,15863,"nfidenceIntervals ; (; double ; cl = 0.95, . bool ; norm = false . ); const. evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ; Definition at line 599 of file FitResult.cxx. ◆ GetConfidenceIntervals() [3/3]. void ROOT::Fit::FitResult::GetConfidenceIntervals ; (; unsigned int ; n, . unsigned int ; stride1, . unsigned int ; stride2, . const double * ; x, . double * ; ci, . double ; cl = 0.95, . bool ; norm = false . ); const. get confidence intervals for an array of n points x. ; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space. For 1-dim points : stride1=1, stride2=1 for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n for multi-dim points arranged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1; the confidence interval are returned in the array ci cl is the desired confidence interval value norm is a flag to control if the intervals need to be normalized to the chi2/ndf value The intervals can be corrected optionally using the chi2/ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). co",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24105,Performance,perform,performed,24105,"chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::SetMinosError ; (; unsigned int ; i, . double ; elow, . double ; eup . ). set the Minos errors for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:1328,Testability,log,log-likelihood,1328,"ibutes |; Friends |; List of all members ; ROOT::Fit::FitResult Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. ; When the fit is valid, it is constructed from a Minimizer and a model function pointer ; Definition at line 47 of file FitResult.h. Public Types; typedef ROOT::Math::IParamMultiFunction IModelFunction;  . Public Member Functions;  FitResult ();  Default constructor for an empty (non valid) fit result. ;  ;  FitResult (const FitConfig &fconfig);  Constructor from a fit-config for a dummy fit (e.g. ;  ; virtual ~FitResult ();  Destructor. ;  ; double Chi2 () const;  Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:11042,Testability,log,log-likelihood,11042," Opera instead.; [legend]; Member Typedef Documentation. ◆ IModelFunction. typedef ROOT::Math::IParamMultiFunction ROOT::Fit::FitResult::IModelFunction. Definition at line 51 of file FitResult.h. Constructor & Destructor Documentation. ◆ FitResult() [1/2]. ROOT::Fit::FitResult::FitResult ; (; ). Default constructor for an empty (non valid) fit result. ; Definition at line 45 of file FitResult.cxx. ◆ FitResult() [2/2]. ROOT::Fit::FitResult::FitResult ; (; const FitConfig & ; fconfig). Constructor from a fit-config for a dummy fit (e.g. ; when only one fcn evaluation is done) ; Definition at line 52 of file FitResult.cxx. ◆ ~FitResult(). virtual ROOT::Fit::FitResult::~FitResult ; (; ). inlinevirtual . Destructor. ; Definition at line 69 of file FitResult.h. Member Function Documentation. ◆ Chi2(). double ROOT::Fit::FitResult::Chi2 ; (; ); const. inline . Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ; Definition at line 153 of file FitResult.h. ◆ Contour(). bool ROOT::Fit::FitResult::Contour ; (; unsigned int ; ipar, . unsigned int ; jpar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; confLevel = 0.683 . ). create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ; Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false A array for x and y points should be provided Pass optionally the confidence level, default is 0.683 it is assumed that ErrorDef() defines the right error definition (i.e 1 sigma error for one parameter).; If not the confidence level are scaled to new level ; Definition at line 660 of file FitResult.cxx. ◆ Correlation(). double ROOT::Fit::FitResult::Correlation ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1FitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:207,Modifiability,inherit,inherited,207,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::Fitter Member List. This is the complete list of members for ROOT::Fit::Fitter, including all inherited members. ApplyWeightCorrection(const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false)ROOT::Fit::Fitter; BaseFunc typedefROOT::Fit::Fitter; BaseGradFunc typedefROOT::Fit::Fitter; CalculateHessErrors()ROOT::Fit::Fitter; CalculateMinosErrors()ROOT::Fit::Fitter; Config() constROOT::Fit::Fitterinline; Config()ROOT::Fit::Fitterinline; DoBinnedLikelihoodFit(bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoInitMinimizer()ROOT::Fit::Fitterprotected; DoLeastSquareFit(const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoLinearFit()ROOT::Fit::Fitterprotected; DoMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoMinimization(const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoSetFCN(bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType)ROOT::Fit::Fitterprotected; DoUnbinnedLikelihoodFit(bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoUpdateFitConfig()ROOT::Fit::Fitterprotected; DoUpdateMinimizerOptions(bool canDifferentMinim=true)ROOT::Fit::Fitterprotected; DoWeightMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; EvalFCN()ROOT::Fit::Fitter; ExamineFCN()ROOT::Fit::Fitterprotected; fBinFitROOT::Fit::Fitterprivate; fConfigROOT::Fit::Fitterprivate; fDataROOT::Fit::Fitterprivate; fDataSizeROOT::Fit::Fitterprivate; fExtObjFunctionROOT::Fit::Fitterprivate; fFitTypeROOT::Fit::Fitterprivate; fFuncR",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:589,Modifiability,extend,extended,589," ApplyWeightCorrection(const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false)ROOT::Fit::Fitter; BaseFunc typedefROOT::Fit::Fitter; BaseGradFunc typedefROOT::Fit::Fitter; CalculateHessErrors()ROOT::Fit::Fitter; CalculateMinosErrors()ROOT::Fit::Fitter; Config() constROOT::Fit::Fitterinline; Config()ROOT::Fit::Fitterinline; DoBinnedLikelihoodFit(bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoInitMinimizer()ROOT::Fit::Fitterprotected; DoLeastSquareFit(const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoLinearFit()ROOT::Fit::Fitterprotected; DoMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoMinimization(const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoSetFCN(bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType)ROOT::Fit::Fitterprotected; DoUnbinnedLikelihoodFit(bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoUpdateFitConfig()ROOT::Fit::Fitterprotected; DoUpdateMinimizerOptions(bool canDifferentMinim=true)ROOT::Fit::Fitterprotected; DoWeightMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; EvalFCN()ROOT::Fit::Fitter; ExamineFCN()ROOT::Fit::Fitterprotected; fBinFitROOT::Fit::Fitterprivate; fConfigROOT::Fit::Fitterprivate; fDataROOT::Fit::Fitterprivate; fDataSizeROOT::Fit::Fitterprivate; fExtObjFunctionROOT::Fit::Fitterprivate; fFitTypeROOT::Fit::Fitterprivate; fFuncR",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:1332,Modifiability,extend,extended,1332,"aseFunc typedefROOT::Fit::Fitter; BaseGradFunc typedefROOT::Fit::Fitter; CalculateHessErrors()ROOT::Fit::Fitter; CalculateMinosErrors()ROOT::Fit::Fitter; Config() constROOT::Fit::Fitterinline; Config()ROOT::Fit::Fitterinline; DoBinnedLikelihoodFit(bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoInitMinimizer()ROOT::Fit::Fitterprotected; DoLeastSquareFit(const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoLinearFit()ROOT::Fit::Fitterprotected; DoMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoMinimization(const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; DoSetFCN(bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType)ROOT::Fit::Fitterprotected; DoUnbinnedLikelihoodFit(bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterprotected; DoUpdateFitConfig()ROOT::Fit::Fitterprotected; DoUpdateMinimizerOptions(bool canDifferentMinim=true)ROOT::Fit::Fitterprotected; DoWeightMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; EvalFCN()ROOT::Fit::Fitter; ExamineFCN()ROOT::Fit::Fitterprotected; fBinFitROOT::Fit::Fitterprivate; fConfigROOT::Fit::Fitterprivate; fDataROOT::Fit::Fitterprivate; fDataSizeROOT::Fit::Fitterprivate; fExtObjFunctionROOT::Fit::Fitterprivate; fFitTypeROOT::Fit::Fitterprivate; fFuncROOT::Fit::Fitterprivate; fFunc_vROOT::Fit::Fitterprivate; Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinl",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:2525,Modifiability,extend,extended,2525,"(bool canDifferentMinim=true)ROOT::Fit::Fitterprotected; DoWeightMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)ROOT::Fit::Fitterprotected; EvalFCN()ROOT::Fit::Fitter; ExamineFCN()ROOT::Fit::Fitterprotected; fBinFitROOT::Fit::Fitterprivate; fConfigROOT::Fit::Fitterprivate; fDataROOT::Fit::Fitterprivate; fDataSizeROOT::Fit::Fitterprivate; fExtObjFunctionROOT::Fit::Fitterprivate; fFitTypeROOT::Fit::Fitterprivate; fFuncROOT::Fit::Fitterprivate; fFunc_vROOT::Fit::Fitterprivate; Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr)ROOT::Fit::Fitter; FitFCN(MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN()ROOT::Fit::Fitter; Fitter()ROOT::Fit::Fitterinline; Fitter(const std::shared_ptr< FitResult > &result)ROOT::Fit:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:2699,Modifiability,extend,extended,2699,"Fitterprotected; EvalFCN()ROOT::Fit::Fitter; ExamineFCN()ROOT::Fit::Fitterprotected; fBinFitROOT::Fit::Fitterprivate; fConfigROOT::Fit::Fitterprivate; fDataROOT::Fit::Fitterprivate; fDataSizeROOT::Fit::Fitterprivate; fExtObjFunctionROOT::Fit::Fitterprivate; fFitTypeROOT::Fit::Fitterprivate; fFuncROOT::Fit::Fitterprivate; fFunc_vROOT::Fit::Fitterprivate; Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; Fit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr)ROOT::Fit::Fitter; FitFCN(const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr)ROOT::Fit::Fitter; FitFCN(MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; FitFCN()ROOT::Fit::Fitter; Fitter()ROOT::Fit::Fitterinline; Fitter(const std::shared_ptr< FitResult > &result)ROOT::Fit::Fitter; Fitter(const Fitter &)=deleteROOT::Fit::Fitter; fMinimizerROOT::Fit::Fitterprivate; fObjFunctionROOT::Fit::Fitterprivate; fResultROOT::Fit::Fitterprivate; fUseGradie",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:4604,Modifiability,extend,extended,4604,"Fitterprivate; fObjFunctionROOT::Fit::Fitterprivate; fResultROOT::Fit::Fitterprivate; fUseGradientROOT::Fit::Fitterprivate; GetDataFromFCN()ROOT::Fit::Fitterprotected; GetFCN() constROOT::Fit::Fitterinline; GetMinimizer() constROOT::Fit::Fitterinline; GetNCallsFromFCN()ROOT::Fit::Fitterprotected; IGradModel1DFunction typedefROOT::Fit::Fitter; IGradModelFunction typedefROOT::Fit::Fitter; IGradModelFunction_v typedefROOT::Fit::Fitter; IModel1DFunction typedefROOT::Fit::Fitter; IModelFunction typedefROOT::Fit::Fitter; IModelFunction_v typedefROOT::Fit::Fitter; IModelFunctionTempl typedefROOT::Fit::Fitter; IsBinFit() constROOT::Fit::Fitterinline; LeastSquareFit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const Data &data, const Function &func, bool extended)ROOT::Fit::Fitterinline; LinearFit(const BinData &data)ROOT::Fit::Fitterinline; LinearFit(const std::shared_ptr< BinData > &data)ROOT::Fit::Fitterinline; MinuitFCN_t typedefROOT::Fit::Fitter; ObjFunction() constROOT::Fit::Fitterinlineprotected; operator=(const Fitter &)=deleteROOT::Fi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:4785,Modifiability,extend,extended,4785,"tROOT::Fit::Fitterinline; GetMinimizer() constROOT::Fit::Fitterinline; GetNCallsFromFCN()ROOT::Fit::Fitterprotected; IGradModel1DFunction typedefROOT::Fit::Fitter; IGradModelFunction typedefROOT::Fit::Fitter; IGradModelFunction_v typedefROOT::Fit::Fitter; IModel1DFunction typedefROOT::Fit::Fitter; IModelFunction typedefROOT::Fit::Fitter; IModelFunction_v typedefROOT::Fit::Fitter; IModelFunctionTempl typedefROOT::Fit::Fitter; IsBinFit() constROOT::Fit::Fitterinline; LeastSquareFit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const Data &data, const Function &func, bool extended)ROOT::Fit::Fitterinline; LinearFit(const BinData &data)ROOT::Fit::Fitterinline; LinearFit(const std::shared_ptr< BinData > &data)ROOT::Fit::Fitterinline; MinuitFCN_t typedefROOT::Fit::Fitter; ObjFunction() constROOT::Fit::Fitterinlineprotected; operator=(const Fitter &)=deleteROOT::Fit::Fitter; Result() constROOT::Fit::Fitterinline; SetData(const std::shared_ptr< Data > &data)ROOT::Fit::Fitterinlineprotected; SetData(const Data &data)ROOT::Fit::Fitterinlineprote",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:4949,Modifiability,extend,extended,4949,"IGradModelFunction typedefROOT::Fit::Fitter; IGradModelFunction_v typedefROOT::Fit::Fitter; IModel1DFunction typedefROOT::Fit::Fitter; IModelFunction typedefROOT::Fit::Fitter; IModelFunction_v typedefROOT::Fit::Fitter; IModelFunctionTempl typedefROOT::Fit::Fitter; IsBinFit() constROOT::Fit::Fitterinline; LeastSquareFit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const Data &data, const Function &func, bool extended)ROOT::Fit::Fitterinline; LinearFit(const BinData &data)ROOT::Fit::Fitterinline; LinearFit(const std::shared_ptr< BinData > &data)ROOT::Fit::Fitterinline; MinuitFCN_t typedefROOT::Fit::Fitter; ObjFunction() constROOT::Fit::Fitterinlineprotected; operator=(const Fitter &)=deleteROOT::Fit::Fitter; Result() constROOT::Fit::Fitterinline; SetData(const std::shared_ptr< Data > &data)ROOT::Fit::Fitterinlineprotected; SetData(const Data &data)ROOT::Fit::Fitterinlineprotected; SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::IMul",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:5133,Modifiability,extend,extended,5133,"nction_v typedefROOT::Fit::Fitter; IModelFunctionTempl typedefROOT::Fit::Fitter; IsBinFit() constROOT::Fit::Fitterinline; LeastSquareFit(const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const Data &data, const Function &func, bool extended)ROOT::Fit::Fitterinline; LinearFit(const BinData &data)ROOT::Fit::Fitterinline; LinearFit(const std::shared_ptr< BinData > &data)ROOT::Fit::Fitterinline; MinuitFCN_t typedefROOT::Fit::Fitter; ObjFunction() constROOT::Fit::Fitterinlineprotected; operator=(const Fitter &)=deleteROOT::Fit::Fitter; Result() constROOT::Fit::Fitterinline; SetData(const std::shared_ptr< Data > &data)ROOT::Fit::Fitterinlineprotected; SetData(const Data &data)ROOT::Fit::Fitterinlineprotected; SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func,",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html:5315,Modifiability,extend,extended,5315,"licy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)ROOT::Fit::Fitterinline; LikelihoodFit(const Data &data, const Function &func, bool extended)ROOT::Fit::Fitterinline; LinearFit(const BinData &data)ROOT::Fit::Fitterinline; LinearFit(const std::shared_ptr< BinData > &data)ROOT::Fit::Fitterinline; MinuitFCN_t typedefROOT::Fit::Fitter; ObjFunction() constROOT::Fit::Fitterinlineprotected; operator=(const Fitter &)=deleteROOT::Fit::Fitter; Result() constROOT::Fit::Fitterinline; SetData(const std::shared_ptr< Data > &data)ROOT::Fit::Fitterinlineprotected; SetData(const Data &data)ROOT::Fit::Fitterinlineprotected; SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)ROOT::Fit::Fitter; SetFCN(const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr)ROOT::Fit::Fitt",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:930,Availability,error,errors,930,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2381,Availability,error,error,2381,"radFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2520,Availability,error,error,2520,"empl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EE",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2736,Availability,error,error,2736,"empl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EE",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2810,Availability,error,error,2810,"cified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pr",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2942,Availability,error,error,2942,"cified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pr",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17040,Availability,error,error,17040," Definition at line 102 of file Fitter.h. ◆ Fitter() [2/3]. ROOT::Fit::Fitter::Fitter ; (; const std::shared_ptr< FitResult > & ; result). Constructor from a result. ; Definition at line 51 of file Fitter.cxx. ◆ ~Fitter(). virtual ROOT::Fit::Fitter::~Fitter ; (; ). inlinevirtual . Destructor. ; Make it virtual in case users derive from Fitter class to extend it by adding new methods. This is needed to avoid a warning seen when doing from Python (see ROOT issue #12391 ). Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an er",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17503,Availability,error,error,17503,"-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const metho",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17719,Availability,error,error,17719,"-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const metho",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17940,Availability,error,error,17940,"). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). prote",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18072,Availability,error,error,18072,"). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). prote",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:685,Deployability,configurat,configuration,685,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3012,Deployability,configurat,configuration,3012,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3104,Deployability,configurat,configuration,3104,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:13215,Deployability,configurat,configuration,13215,"l< double > * ObjFunction () const;  Return pointer to the used objective function for fitting. ;  ; template<class Data > ; void SetData (const Data &data);  Set the input data for the fit (Copying the given data object) ;  ; template<class Data > ; void SetData (const std::shared_ptr< Data > &data);  Set the input data for the fit using a shared ptr (No Copying) ;  . Private Attributes; bool fBinFit = false;  flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ;  ; FitConfig fConfig;  fitter configuration (options and parameter settings) ;  ; std::shared_ptr< ROOT::Fit::FitData > fData;  ! pointer to the fit data (binned or unbinned data) ;  ; int fDataSize = 0;  size of data sets (need for Fumili or LM fitters) ;  ; const ROOT::Math::IMultiGenFunction * fExtObjFunction = nullptr;  ! pointer to an external FCN ;  ; int fFitType = 0;  type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ;  ; std::shared_ptr< IModelFunction > fFunc;  ! copy of the fitted function containing on output the fit result ;  ; std::shared_ptr< IModelFunction_v > fFunc_v;  ! copy of the fitted function containing on output the fit result ;  ; std::shared_ptr< ROOT::Math::Minimizer > fMinimizer;  ! pointer to used minimizer ;  ; std::shared_ptr< ROOT::Math::IMultiGenFunction > fObjFunction;  ! pointer to used objective function ;  ; std::shared_ptr< ROOT::Fit::FitResult > fResult;  ! pointer to the object containing the result of the fit ;  ; bool fUseGradient = false;  flag to indicate if using gradient or not ;  . #include <Fit/Fitter.h>; Member Typedef Documentation. ◆ BaseFunc. typedef ROOT::Math::IMultiGenFunction ROOT::Fit::Fitter::BaseFunc. Definition at line 95 of file Fitter.h. ◆ BaseGradFunc. typedef ROOT::Math::IMultiGradFunction ROOT::Fit::Fitter::BaseGradFunc. Definition at line 96 of file Fitter.h. ◆ IGradModel1DFunction. typedef ROOT::Math::IParamGradFunction ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18412,Deployability,configurat,configuration,18412,"ool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoM",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18592,Deployability,configurat,configuration,18592,"lled only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoMinimization() [1/2]. bool ROOT::Fit::Fitter::DoMinimization ; (; const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr). protected . Definition at line 795 of file Fitter.c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:36988,Deployability,configurat,configuration,36988,"ic 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConfig ROOT::Fit::Fitter::fConfig. private . fitter configuration (options and parameter settings) ; Definition at line 562 of file Fitter.h. ◆ fData. std::shared_ptr<ROOT::Fit::FitData> ROOT::Fit::Fitter::fData. private . ! pointer to the fit data (binned or unbinned data) ; Definition at line 572 of file Fitter.h. ◆ fDataSize. int ROOT::Fit::Fitter::fDataSize = 0. private . size of data sets (need for Fumili or LM fitters) ; Definition at line 560 of file Fitter.h. ◆ fExtObjFunction. const ROOT::Math::IMultiGenFunction* ROOT::Fit::Fitter::fExtObjFunction = nullptr. private . ! pointer to an external FCN ; Definition at line 576 of file Fitter.h. ◆ fFitType. int ROOT::Fit::Fitter::fFitType = 0. private . type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ; Definition at line 558 of file Fitter.h. ◆ fFunc. std::shared_ptr<IModelFunction> ROOT::Fit::Fitter::fFunc. private . ! copy of the fitted function containing on output the fit result ; Definition at line 566 of file Fitter.h. ◆ fFunc_v. std::shared_ptr<IModelFunction_v> ROOT::Fit::Fitter::fFunc_v",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:1802,Integrability,interface,interface,1802,"points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error an",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3959,Integrability,interface,interface,3959,"hen a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FC",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4797,Integrability,interface,interface,4797,"data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; ROOT::Math::IMultiGenFunction * GetFCN () const;  return pointer to last used objective function (is NULL in case fit is not y",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4938,Integrability,interface,interface,4938,"on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; ROOT::Math::IMultiGenFunction * GetFCN () const;  return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ;  ; ROOT::Math::Minimizer * GetMinimizer () const; ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:5158,Integrability,interface,interface,5158,"T::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; ROOT::Math::IMultiGenFunction * GetFCN () const;  return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ;  ; ROOT::Math::Minimizer * GetMinimizer () const;  return pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone. ;  ; bool IsBin",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:8194,Integrability,interface,interface,8194,"OT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:8364,Integrability,interface,interface,8364,"OT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ;  ; bool SetFCN (MinuitFCN_t fcn, int npar=0, const double *params=",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:8572,Integrability,interface,interface,8572,"xecutionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ;  ; bool SetFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consid",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:8936,Integrability,interface,interface,8936,"lass is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ;  ; bool SetFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (l",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:9084,Integrability,interface,interface,9084,"lass is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ;  ; bool SetFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (l",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:9404,Integrability,interface,interface,9404,"d by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const IModelFunction &func, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ;  ; bool SetFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:10337,Integrability,interface,interface,10337,"nst double *params=nullptr, unsigned int dataSize=0, int fitType=0);  set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool D",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:10505,Integrability,interface,interface,10505," assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  ; template<class Function > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool DoLeastSquareFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least sq",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:10674,Integrability,interface,interface,10674,"ction > ; bool SetFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool DoLeastSquareFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least square fit ;  ; bool DoMinimization (const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; template<class ObjFunc_t > ; bool DoMinimization (std::unique_ptr< ObjFunc_t",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:10830,Integrability,interface,interface,10830,"+ callable object implementing double () (const double *) Note that the function dimension (i.e. ;  ; void SetFitType (int type);  Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ;  ; void SetFunction (const IGradModel1DFunction &func, bool useGradient=true);  Set the fitted function from 1D gradient parametric function interface. ;  ; void SetFunction (const IGradModelFunction &func, bool useGradient=true);  Set the fitted function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool DoLeastSquareFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least square fit ;  ; bool DoMinimization (const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; template<class ObjFunc_t > ; bool DoMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  do minimization ;  ; bool DoSetFCN (bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:15735,Integrability,interface,interface,15735,"at line 91 of file Fitter.h. ◆ IGradModelFunction_v. typedef ROOT::Math::IParamMultiGradFunction ROOT::Fit::Fitter::IGradModelFunction_v. Definition at line 89 of file Fitter.h. ◆ IModel1DFunction. typedef ROOT::Math::IParamFunction ROOT::Fit::Fitter::IModel1DFunction. Definition at line 92 of file Fitter.h. ◆ IModelFunction. typedef ROOT::Math::IParamMultiFunction ROOT::Fit::Fitter::IModelFunction. Definition at line 81 of file Fitter.h. ◆ IModelFunction_v. typedef ROOT::Math::IParamMultiFunction ROOT::Fit::Fitter::IModelFunction_v. Definition at line 88 of file Fitter.h. ◆ IModelFunctionTempl. template<class T > . using ROOT::Fit::Fitter::IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>. Definition at line 83 of file Fitter.h. ◆ MinuitFCN_t. typedef void(* ROOT::Fit::Fitter::MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag). fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 339 of file Fitter.h. Constructor & Destructor Documentation. ◆ Fitter() [1/3]. ROOT::Fit::Fitter::Fitter ; (; ). inline . Default constructor. ; Definition at line 102 of file Fitter.h. ◆ Fitter() [2/3]. ROOT::Fit::Fitter::Fitter ; (; const std::shared_ptr< FitResult > & ; result). Constructor from a result. ; Definition at line 51 of file Fitter.cxx. ◆ ~Fitter(). virtual ROOT::Fit::Fitter::~Fitter ; (; ). inlinevirtual . Destructor. ; Make it virtual in case users derive from Fitter class to extend it by adding new methods. This is needed to avoid a warning seen when doing from Python (see ROOT issue #12391 ). Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copya",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:22510,Integrability,interface,interface,22510,"efinition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at li",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:24107,Integrability,interface,interface,24107," . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ; Give optionally the initial parameter values, data size to have the fit Ndf correctly set in the FitResult and flag specifying the type of fit. The fitType can be: 0 undefined, 1 least square fit, 2 unbinned likelihood fit, 3 binned likelihood fit Note th",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:24428,Integrability,interface,interface,24428,"/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ; Give optionally the initial parameter values, data size to have the fit Ndf correctly set in the FitResult and flag specifying the type of fit. The fitType can be: 0 undefined, 1 least square fit, 2 unbinned likelihood fit, 3 binned likelihood fit Note that if the parameters values are not given (params=0) the current parameter settings are used. The parameter settings can be created before by using the FitConfig::SetParamsSetting. If they have not been created they are created automatically when the params pointer is not zero. Note that passing a params != 0 will set",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:24797,Integrability,interface,interface,24797,"ol ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ; Give optionally the initial parameter values, data size to have the fit Ndf correctly set in the FitResult and flag specifying the type of fit. The fitType can be: 0 undefined, 1 least square fit, 2 unbinned likelihood fit, 3 binned likelihood fit Note that if the parameters values are not given (params=0) the current parameter settings are used. The parameter settings can be created before by using the FitConfig::SetParamsSetting. If they have not been created they are created automatically when the params pointer is not zero. Note that passing a params != 0 will set the parameter settings to the new value AND also the step sizes to some pre-defined value (stepsize = 0.3 * abs(parameter_value) ) ; Definition at line 217 of file Fitter.cxx. ◆ FitFCN() [5/6]. bool ROOT::Fit::Fitter::FitFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). De",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29359,Integrability,interface,interface,29359,". ◆ LeastSquareFit() [2/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit NOT copying the input data. ; Definition at line 179 of file Fitter.h. ◆ LikelihoodFit() [1/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = R",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:32320,Integrability,interface,interface,32320,"nd managed by the Fitter class ; Definition at line 544 of file Fitter.h. ◆ operator=(). Fitter & ROOT::Fit::Fitter::operator= ; (; const Fitter & ; ). delete . Assignment operator (disabled, class is not copyable) . ◆ Result(). const FitResult & ROOT::Fit::Fitter::Result ; (; ); const. inline . get fit result ; Definition at line 394 of file Fitter.h. ◆ SetData() [1/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const Data & ; data). inlineprotected . Set the input data for the fit (Copying the given data object) ; Definition at line 526 of file Fitter.h. ◆ SetData() [2/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const std::shared_ptr< Data > & ; data). inlineprotected . Set the input data for the fit using a shared ptr (No Copying) ; Definition at line 520 of file Fitter.h. ◆ SetFCN() [1/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 195 of file Fitter.cxx. ◆ SetFCN() [2/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFun",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:32670,Integrability,interface,interface,32670,"ter.h. ◆ SetData() [1/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const Data & ; data). inlineprotected . Set the input data for the fit (Copying the given data object) ; Definition at line 526 of file Fitter.h. ◆ SetData() [2/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const std::shared_ptr< Data > & ; data). inlineprotected . Set the input data for the fit using a shared ptr (No Copying) ; Definition at line 520 of file Fitter.h. ◆ SetFCN() [1/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 195 of file Fitter.cxx. ◆ SetFCN() [2/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const IModelFunction & ; func, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:33027,Integrability,interface,interface,33027,"r (No Copying) ; Definition at line 520 of file Fitter.h. ◆ SetFCN() [1/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 195 of file Fitter.cxx. ◆ SetFCN() [2/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const IModelFunction & ; func, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ; Definition at line 183 of file Fitter.cxx. ◆ SetFCN() [5/6]. bool ROOT::Fit::Fitter::SetFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). set objective function using user provided FCN w",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:33501,Integrability,interface,interface,33501," the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const IModelFunction & ; func, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ; Definition at line 183 of file Fitter.cxx. ◆ SetFCN() [5/6]. bool ROOT::Fit::Fitter::SetFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 242 of file Fitter.cxx. ◆ SetFCN() [6/6]. template<class Function > . bool ROOT::Fit::Fitter::SetFCN ; (; unsigned int ; npar, . Function & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set a generic FCN function as a C++ callable object implementing double () (const double *) Note t",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:33649,Integrability,interface,interface,33649," the objective function (FCN) using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ SetFCN() [3/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const IModelFunction & ; func, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ; Definition at line 183 of file Fitter.cxx. ◆ SetFCN() [5/6]. bool ROOT::Fit::Fitter::SetFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 242 of file Fitter.cxx. ◆ SetFCN() [6/6]. template<class Function > . bool ROOT::Fit::Fitter::SetFCN ; (; unsigned int ; npar, . Function & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set a generic FCN function as a C++ callable object implementing double () (const double *) Note t",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:34079,Integrability,interface,interface,34079,"s for FitFCN. ; Definition at line 179 of file Fitter.cxx. ◆ SetFCN() [4/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const IModelFunction & ; func, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set the FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction) and optionally the initial parameters See also note above for the initial parameters for FitFCN With this interface we pass in addition a ModelFunction that will be attached to the FitResult and used to compute confidence interval of the fit. ; Definition at line 183 of file Fitter.cxx. ◆ SetFCN() [5/6]. bool ROOT::Fit::Fitter::SetFCN ; (; MinuitFCN_t ; fcn, . int ; npar = 0, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). set objective function using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 242 of file Fitter.cxx. ◆ SetFCN() [6/6]. template<class Function > . bool ROOT::Fit::Fitter::SetFCN ; (; unsigned int ; npar, . Function & ; fcn, . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ; the number of parameter) is needed in this case For the options see documentation for following methods FitFCN(IMultiGenFunction & fcn,..) ; Definition at line 656 of file Fitter.h. ◆ SetFitType(). void ROOT::Fit::Fitter::SetFitType ; (; int ; type). inline . Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:35444,Integrability,interface,interface,35444," . const double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ; the number of parameter) is needed in this case For the options see documentation for following methods FitFCN(IMultiGenFunction & fcn,..) ; Definition at line 656 of file Fitter.h. ◆ SetFitType(). void ROOT::Fit::Fitter::SetFitType ; (; int ; type). inline . Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ; Definition at line 481 of file Fitter.h. ◆ SetFunction() [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:35709,Integrability,interface,interface,35709,"eded in this case For the options see documentation for following methods FitFCN(IMultiGenFunction & fcn,..) ; Definition at line 656 of file Fitter.h. ◆ SetFitType(). void ROOT::Fit::Fitter::SetFitType ; (; int ; type). inline . Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ; Definition at line 481 of file Fitter.h. ◆ SetFunction() [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:35975,Integrability,interface,interface,35975,"xternal FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ; Definition at line 481 of file Fitter.h. ◆ SetFunction() [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConf",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:36042,Integrability,interface,interface,36042,"Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ; Definition at line 481 of file Fitter.h. ◆ SetFunction() [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConfig ROOT::Fit::Fitter::fConfig. private . fitter configuration (options and parameter settings) ; D",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:36293,Integrability,interface,interface,36293,") [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConfig ROOT::Fit::Fitter::fConfig. private . fitter configuration (options and parameter settings) ; Definition at line 562 of file Fitter.h. ◆ fData. std::shared_ptr<ROOT::Fit::FitData> ROOT::Fit::Fitter::fData. private . ! pointer to the fit data (binned or unbinned data) ; Definition at line 572 of file Fitter.h. ◆ fDataSiz",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:685,Modifiability,config,configuration,685,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:808,Modifiability,config,config,808,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3012,Modifiability,config,configuration,3012,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3104,Modifiability,config,configuration,3104,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3845,Modifiability,extend,extended,3845,"hen a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FC",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4220,Modifiability,extend,extended,4220,"OOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=null",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4432,Modifiability,extend,extended,4432," || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic F",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:6593,Modifiability,extend,extended,6593,"ction * GetFCN () const;  return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ;  ; ROOT::Math::Minimizer * GetMinimizer () const;  return pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone. ;  ; bool IsBinFit () const;  query if fit is binned. ;  ; bool LeastSquareFit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit copying the input data. ;  ; bool LeastSquareFit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit NOT copying the input data. ;  ; bool LikelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input d",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:6850,Modifiability,extend,extended,6850,"Minimizer * GetMinimizer () const;  return pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone. ;  ; bool IsBinFit () const;  query if fit is binned. ;  ; bool LeastSquareFit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit copying the input data. ;  ; bool LeastSquareFit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit NOT copying the input data. ;  ; bool LikelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shar",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:7020,Modifiability,extend,extended,7020,"sBinFit () const;  query if fit is binned. ;  ; bool LeastSquareFit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit copying the input data. ;  ; bool LeastSquareFit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit NOT copying the input data. ;  ; bool LikelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:7265,Modifiability,extend,extended,7265,";  ; bool LeastSquareFit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit NOT copying the input data. ;  ; bool LikelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objectiv",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:7495,Modifiability,extend,extended,7495,"kelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dime",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:7659,Modifiability,extend,extended,7659,"kelihoodFit (const BinData &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit copying the input data. ;  ; template<class Data , class Function > ; bool LikelihoodFit (const Data &data, const Function &func, bool extended);  Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ;  ; bool LikelihoodFit (const std::shared_ptr< BinData > &data, bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ;  ; bool LikelihoodFit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Un-binned Likelihood fit copying the input data Default is NOT extended. ;  ; bool LinearFit (const BinData &data);  Do a linear fit copying the input data. ;  ; bool LinearFit (const std::shared_ptr< BinData > &data);  Do a linear fit using a shared_ptr for NOT copying the input data. ;  ; Fitter & operator= (const Fitter &)=delete;  Assignment operator (disabled, class is not copyable) ;  ; const FitResult & Result () const;  get fit result ;  ; bool SetFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodFunction interface. ;  ; bool SetFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Set the objective function (FCN) using a FitMethodGradFunction interface. ;  ; bool SetFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Set the FCN function represented by a multi-dime",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:11109,Modifiability,extend,extended,11109,"function (model function) from a parametric gradient function interface. ;  ; void SetFunction (const IModel1DFunction &func, bool useGradient=false);  Set the fitted function (model function) from a vectorized parametric function interface. ;  ; void SetFunction (const IModelFunction &func, bool useGradient=false);  Set the fitted function (model function) from a parametric function interface. ;  ; void SetNumberOfFitPoints (unsigned int npoints);  Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ;  . Protected Member Functions; bool DoBinnedLikelihoodFit (bool extended=true, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  binned likelihood fit ;  ; bool DoInitMinimizer ();  ; bool DoLeastSquareFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least square fit ;  ; bool DoMinimization (const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; template<class ObjFunc_t > ; bool DoMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  do minimization ;  ; bool DoSetFCN (bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType);  Set Objective function. ;  ; bool DoUnbinnedLikelihoodFit (bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  un-binned likelihood fit ;  ; void DoUpdateFitConfig ();  ; bool DoUpdateMinimizerOptions (bool canDifferentMinim=true);  ; template<class ObjFunc_t > ; bool DoWeightMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; void ExamineFCN ();  look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ;  ; template<class ObjFuncType > ; bool GetDataFromFCN ();  intern",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:11880,Modifiability,extend,extended,11880,"areFit (const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  least square fit ;  ; bool DoLinearFit ();  linear least square fit ;  ; bool DoMinimization (const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; template<class ObjFunc_t > ; bool DoMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  do minimization ;  ; bool DoSetFCN (bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType);  Set Objective function. ;  ; bool DoUnbinnedLikelihoodFit (bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  un-binned likelihood fit ;  ; void DoUpdateFitConfig ();  ; bool DoUpdateMinimizerOptions (bool canDifferentMinim=true);  ; template<class ObjFunc_t > ; bool DoWeightMinimization (std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr);  ; void ExamineFCN ();  look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ;  ; template<class ObjFuncType > ; bool GetDataFromFCN ();  internal functions to get data set and model function from FCN useful for fits done with customized FCN classes ;  ; int GetNCallsFromFCN ();  ; const ROOT::Math::IBaseFunctionMultiDimTempl< double > * ObjFunction () const;  Return pointer to the used objective function for fitting. ;  ; template<class Data > ; void SetData (const Data &data);  Set the input data for the fit (Copying the given data object) ;  ; template<class Data > ; void SetData (const std::shared_ptr< Data > &data);  Set the input data for the fit using a shared ptr (No Copying) ;  . Private Attributes; bool fBinFit = false;  flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ;  ; FitConfig fConfig;  fitter configuration (options and parameter settings) ;  ; std::shared_p",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:13215,Modifiability,config,configuration,13215,"l< double > * ObjFunction () const;  Return pointer to the used objective function for fitting. ;  ; template<class Data > ; void SetData (const Data &data);  Set the input data for the fit (Copying the given data object) ;  ; template<class Data > ; void SetData (const std::shared_ptr< Data > &data);  Set the input data for the fit using a shared ptr (No Copying) ;  . Private Attributes; bool fBinFit = false;  flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ;  ; FitConfig fConfig;  fitter configuration (options and parameter settings) ;  ; std::shared_ptr< ROOT::Fit::FitData > fData;  ! pointer to the fit data (binned or unbinned data) ;  ; int fDataSize = 0;  size of data sets (need for Fumili or LM fitters) ;  ; const ROOT::Math::IMultiGenFunction * fExtObjFunction = nullptr;  ! pointer to an external FCN ;  ; int fFitType = 0;  type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ;  ; std::shared_ptr< IModelFunction > fFunc;  ! copy of the fitted function containing on output the fit result ;  ; std::shared_ptr< IModelFunction_v > fFunc_v;  ! copy of the fitted function containing on output the fit result ;  ; std::shared_ptr< ROOT::Math::Minimizer > fMinimizer;  ! pointer to used minimizer ;  ; std::shared_ptr< ROOT::Math::IMultiGenFunction > fObjFunction;  ! pointer to used objective function ;  ; std::shared_ptr< ROOT::Fit::FitResult > fResult;  ! pointer to the object containing the result of the fit ;  ; bool fUseGradient = false;  flag to indicate if using gradient or not ;  . #include <Fit/Fitter.h>; Member Typedef Documentation. ◆ BaseFunc. typedef ROOT::Math::IMultiGenFunction ROOT::Fit::Fitter::BaseFunc. Definition at line 95 of file Fitter.h. ◆ BaseGradFunc. typedef ROOT::Math::IMultiGradFunction ROOT::Fit::Fitter::BaseGradFunc. Definition at line 96 of file Fitter.h. ◆ IGradModel1DFunction. typedef ROOT::Math::IParamGradFunction ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:16427,Modifiability,extend,extend,16427,"onTempl. template<class T > . using ROOT::Fit::Fitter::IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>. Definition at line 83 of file Fitter.h. ◆ MinuitFCN_t. typedef void(* ROOT::Fit::Fitter::MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag). fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 339 of file Fitter.h. Constructor & Destructor Documentation. ◆ Fitter() [1/3]. ROOT::Fit::Fitter::Fitter ; (; ). inline . Default constructor. ; Definition at line 102 of file Fitter.h. ◆ Fitter() [2/3]. ROOT::Fit::Fitter::Fitter ; (; const std::shared_ptr< FitResult > & ; result). Constructor from a result. ; Definition at line 51 of file Fitter.cxx. ◆ ~Fitter(). virtual ROOT::Fit::Fitter::~Fitter ; (; ). inlinevirtual . Destructor. ; Make it virtual in case users derive from Fitter class to extend it by adding new methods. This is needed to avoid a warning seen when doing from Python (see ROOT issue #12391 ). Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18412,Modifiability,config,configuration,18412,"ool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoM",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18592,Modifiability,config,configuration,18592,"lled only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoMinimization() [1/2]. bool ROOT::Fit::Fitter::DoMinimization ; (; const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr). protected . Definition at line 795 of file Fitter.c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18749,Modifiability,extend,extended,18749,"lse) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoMinimization() [1/2]. bool ROOT::Fit::Fitter::DoMinimization ; (; const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr). protected . Definition at line 795 of file Fitter.cxx. ◆ DoMinimization() [2/2]. template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoMinimization ; (; std::uniq",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:20254,Modifiability,extend,extended,20254,"east square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoMinimization() [1/2]. bool ROOT::Fit::Fitter::DoMinimization ; (; const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr). protected . Definition at line 795 of file Fitter.cxx. ◆ DoMinimization() [2/2]. template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoMinimization ; (; std::unique_ptr< ObjFunc_t > ; f, . const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr . ). protected . do minimization ; Definition at line 836 of file Fitter.cxx. ◆ DoSetFCN(). bool ROOT::Fit::Fitter::DoSetFCN ; (; bool ; useExtFCN, . const ROOT::Math::IMultiGenFunction & ; fcn, . const double * ; params, . unsigned int ; dataSize, . int ; fitType . ). protected . Set Objective function. ; Definition at line 137 of file Fitter.cxx. ◆ DoUnbinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoUnbinnedLikelihoodFit ; (; bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . un-binned likelihood fit ; Definition at line 440 of file Fitter.cxx. ◆ DoUpdateFitConfig(). void ROOT::Fit::Fitter::DoUpdateFitConfig ; (; ). protected . Definition at line 860 of file Fitter.cxx. ◆ DoUpdateMinimizerOptions(). bool ROOT::Fit::Fitter::DoUpdateMinimizerOptions ; (; bool ; canDifferentMinim = true). protected . Definition at line 763 of file Fitter.cxx. ◆ DoWeightMinimization(). template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoWeightMinimization ; (; std::unique_ptr< ObjFunc_t > ; f, . const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr . ). protected . Definition at line 845 of file Fitter.cxx. ◆ EvalFCN(). bool ROOT::Fit::Fitter::EvalFCN ; (; ). Perform a simple FCN evaluation. ; FitResult will be modified and contain the value of the FCN ; Definition at line 288 of file Fitter.cxx. ◆ ExamineFCN(). void ROOT::Fit::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:22396,Modifiability,extend,extended,22396,"efinition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at li",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23106,Modifiability,extend,extended,23106," const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction inter",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23488,Modifiability,extend,extended,23488,"ametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can b",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:28843,Modifiability,extend,extended,28843,"). bool ROOT::Fit::Fitter::IsBinFit ; (; ); const. inline . query if fit is binned. ; In cse of false the fit can be unbinned or is not defined (like in case of fitting through a ROOT::Fit::Fitter::FitFCN) ; Definition at line 433 of file Fitter.h. ◆ LeastSquareFit() [1/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit copying the input data. ; Definition at line 172 of file Fitter.h. ◆ LeastSquareFit() [2/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit NOT copying the input data. ; Definition at line 179 of file Fitter.h. ◆ LikelihoodFit() [1/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ Lik",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29022,Modifiability,extend,extended,29022,"rough a ROOT::Fit::Fitter::FitFCN) ; Definition at line 433 of file Fitter.h. ◆ LeastSquareFit() [1/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit copying the input data. ; Definition at line 172 of file Fitter.h. ◆ LeastSquareFit() [2/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit NOT copying the input data. ; Definition at line 179 of file Fitter.h. ◆ LikelihoodFit() [1/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; ex",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29241,Modifiability,extend,extended,29241,"= ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit copying the input data. ; Definition at line 172 of file Fitter.h. ◆ LeastSquareFit() [2/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit NOT copying the input data. ; Definition at line 179 of file Fitter.h. ◆ LikelihoodFit() [1/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ Likelihoo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29584,Modifiability,extend,extended,29584,"nPolicy::kSequential . ). inline . Fit a binned data set using a least square fit NOT copying the input data. ; Definition at line 179 of file Fitter.h. ◆ LikelihoodFit() [1/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29790,Modifiability,extend,extended,29790,"er::LikelihoodFit ; (; const BinData & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:29965,Modifiability,extend,extended,29965,"Likelihood fit copying the input data. ; Default is extended. ; Definition at line 203 of file Fitter.h. ◆ LikelihoodFit() [2/5]. template<class Data , class Function > . bool ROOT::Fit::Fitter::LikelihoodFit ; (; const Data & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const std::shared_ptr< BinData > & ; data). inline . Do a linear fit using a shared_ptr for NOT copying the input data. ; Definition at line 254 of file Fitter.h. ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:30179,Modifiability,extend,extended,30179," & ; data, . const Function & ; func, . bool ; extended . ). inline . Likelihood fit given a data set (Binned or Un-binned) using any generic model function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const std::shared_ptr< BinData > & ; data). inline . Do a linear fit using a shared_ptr for NOT copying the input data. ; Definition at line 254 of file Fitter.h. ◆ ObjFunction(). const ROOT::Math::IBaseFunctionMultiDimTempl< double > * ROOT::Fit::Fitter::ObjFunction ; (; ); const. inlineprotected . Return pointer to the used objective function for fitting. ; If using an external func",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:30334,Modifiability,extend,extended,30334,"el function. ; This interface copies the input data and the model function object ; Definition at line 239 of file Fitter.h. ◆ LikelihoodFit() [3/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const std::shared_ptr< BinData > & ; data). inline . Do a linear fit using a shared_ptr for NOT copying the input data. ; Definition at line 254 of file Fitter.h. ◆ ObjFunction(). const ROOT::Math::IBaseFunctionMultiDimTempl< double > * ROOT::Fit::Fitter::ObjFunction ; (; ); const. inlineprotected . Return pointer to the used objective function for fitting. ; If using an external function (e.g. given in SetFCN), return the cached pointer, otherwise use the one stored as shared ptr and managed by the Fitter class ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:30518,Modifiability,extend,extended,30518,"ool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< BinData > & ; data, . bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is extended. ; Definition at line 212 of file Fitter.h. ◆ LikelihoodFit() [4/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit using a shared_ptr for NOT copying the input data. ; Default is NOT extended ; Definition at line 229 of file Fitter.h. ◆ LikelihoodFit() [5/5]. bool ROOT::Fit::Fitter::LikelihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const std::shared_ptr< BinData > & ; data). inline . Do a linear fit using a shared_ptr for NOT copying the input data. ; Definition at line 254 of file Fitter.h. ◆ ObjFunction(). const ROOT::Math::IBaseFunctionMultiDimTempl< double > * ROOT::Fit::Fitter::ObjFunction ; (; ); const. inlineprotected . Return pointer to the used objective function for fitting. ; If using an external function (e.g. given in SetFCN), return the cached pointer, otherwise use the one stored as shared ptr and managed by the Fitter class ; Definition at line 544 of file Fitter.h. ◆ operator=(). Fitter & ROOT::Fit::Fitter::operator= ; (; const Fitter & ; ). delete . Assignment operator (disabled, clas",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:36988,Modifiability,config,configuration,36988,"ic 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆ fBinFit. bool ROOT::Fit::Fitter::fBinFit = false. private . flag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used to compute chi2 for binned likelihood fit ; Definition at line 554 of file Fitter.h. ◆ fConfig. FitConfig ROOT::Fit::Fitter::fConfig. private . fitter configuration (options and parameter settings) ; Definition at line 562 of file Fitter.h. ◆ fData. std::shared_ptr<ROOT::Fit::FitData> ROOT::Fit::Fitter::fData. private . ! pointer to the fit data (binned or unbinned data) ; Definition at line 572 of file Fitter.h. ◆ fDataSize. int ROOT::Fit::Fitter::fDataSize = 0. private . size of data sets (need for Fumili or LM fitters) ; Definition at line 560 of file Fitter.h. ◆ fExtObjFunction. const ROOT::Math::IMultiGenFunction* ROOT::Fit::Fitter::fExtObjFunction = nullptr. private . ! pointer to an external FCN ; Definition at line 576 of file Fitter.h. ◆ fFitType. int ROOT::Fit::Fitter::fFitType = 0. private . type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ; Definition at line 558 of file Fitter.h. ◆ fFunc. std::shared_ptr<IModelFunction> ROOT::Fit::Fitter::fFunc. private . ! copy of the fitted function containing on output the fit result ; Definition at line 566 of file Fitter.h. ◆ fFunc_v. std::shared_ptr<IModelFunction_v> ROOT::Fit::Fitter::fFunc_v",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:404,Performance,perform,performing,404,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:444,Performance,perform,performed,444,". ROOT: ROOT::Fit::Fitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::Fitter Class ReferenceMath » MathCore » Fitting and Parameter Estimation » User Fitting classes. ; Fitter class, entry point for performing all type of fits. ; Fits are performed using the generic ROOT::Fit::Fitter::Fit method. The inputs are the data points and a model function (using a ROOT::Math::IParamFunction) The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class. The configuration of the fit (parameters, options, etc...) are specified in the ROOT::Math::FitConfig class. After fitting the config of the fit will be modified to have the new values the resulting parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with initial parameters by calling FitConfig.SetUpdateAfterFit(false); ; Definition at line 77 of file Fitter.h. Public Types; typedef ROOT::Math::IMultiGenFunction BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ; typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;  ; typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2509,Performance,perform,perform,2509,"empl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EE",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2799,Performance,perform,perform,2799,"cified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pr",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3781,Performance,perform,performed,3781,"hen a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FC",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17492,Performance,perform,perform,17492,"-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const metho",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17929,Performance,perform,perform,17929,"). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). prote",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:22332,Performance,perform,performed,22332,"efinition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at li",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:26967,Performance,perform,performing,26967,"st double * ; params = nullptr, . unsigned int ; dataSize = 0, . int ; fitType = 0 . ). Fit using the a generic FCN function as a C++ callable object implementing double () (const double *) Note that the function dimension (i.e. ; the number of parameter) is needed in this case For the options see documentation for following methods FitFCN(IMultiGenFunction & fcn,..) ; Definition at line 649 of file Fitter.h. ◆ GetDataFromFCN(). template<class ObjFuncType > . bool ROOT::Fit::Fitter::GetDataFromFCN. protected . internal functions to get data set and model function from FCN useful for fits done with customized FCN classes ; Definition at line 584 of file Fitter.h. ◆ GetFCN(). ROOT::Math::IMultiGenFunction * ROOT::Fit::Fitter::GetFCN ; (; ); const. inline . return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ; To be used after the fitting. The pointer should not be stored and will be invalided after performing a new fitting. In this case a new instance of the function pointer will be re-created and can be obtained calling again GetFCN() ; Definition at line 455 of file Fitter.h. ◆ GetMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::Fitter::GetMinimizer ; (; ); const. inline . return pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone. ; To be used only after fitting. The pointer should not be stored and will be invalided after performing a new fitting. In this case a new instance of ROOT::Math::Minimizer will be re-created and can be obtained calling again GetMinimizer() ; Definition at line 444 of file Fitter.h. ◆ GetNCallsFromFCN(). int ROOT::Fit::Fitter::GetNCallsFromFCN ; (; ). protected . Definition at line 870 of file Fitter.cxx. ◆ IsBinFit(). bool ROOT::Fit::Fitter::IsBinFit ; (; ); const. inline . query if fit is binned. ; In cse of false",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:27522,Performance,perform,performing,27522,"model function from FCN useful for fits done with customized FCN classes ; Definition at line 584 of file Fitter.h. ◆ GetFCN(). ROOT::Math::IMultiGenFunction * ROOT::Fit::Fitter::GetFCN ; (; ); const. inline . return pointer to last used objective function (is NULL in case fit is not yet done) This pointer will be valid as far as the fitter class has not been deleted. ; To be used after the fitting. The pointer should not be stored and will be invalided after performing a new fitting. In this case a new instance of the function pointer will be re-created and can be obtained calling again GetFCN() ; Definition at line 455 of file Fitter.h. ◆ GetMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::Fitter::GetMinimizer ; (; ); const. inline . return pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone. ; To be used only after fitting. The pointer should not be stored and will be invalided after performing a new fitting. In this case a new instance of ROOT::Math::Minimizer will be re-created and can be obtained calling again GetMinimizer() ; Definition at line 444 of file Fitter.h. ◆ GetNCallsFromFCN(). int ROOT::Fit::Fitter::GetNCallsFromFCN ; (; ). protected . Definition at line 870 of file Fitter.cxx. ◆ IsBinFit(). bool ROOT::Fit::Fitter::IsBinFit ; (; ); const. inline . query if fit is binned. ; In cse of false the fit can be unbinned or is not defined (like in case of fitting through a ROOT::Fit::Fitter::FitFCN) ; Definition at line 433 of file Fitter.h. ◆ LeastSquareFit() [1/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit copying the input data. ; Definition at line 172 of file Fitter.h. ◆ LeastSquareFit() [2/2]. bool ROOT::Fit::Fitter::LeastSquareFit ; (; const std::shared_ptr< Bin",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:31235,Performance,cache,cached,31235,"ihoodFit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Un-binned Likelihood fit copying the input data Default is NOT extended. ; Definition at line 221 of file Fitter.h. ◆ LinearFit() [1/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const BinData & ; data). inline . Do a linear fit copying the input data. ; Definition at line 247 of file Fitter.h. ◆ LinearFit() [2/2]. bool ROOT::Fit::Fitter::LinearFit ; (; const std::shared_ptr< BinData > & ; data). inline . Do a linear fit using a shared_ptr for NOT copying the input data. ; Definition at line 254 of file Fitter.h. ◆ ObjFunction(). const ROOT::Math::IBaseFunctionMultiDimTempl< double > * ROOT::Fit::Fitter::ObjFunction ; (; ); const. inlineprotected . Return pointer to the used objective function for fitting. ; If using an external function (e.g. given in SetFCN), return the cached pointer, otherwise use the one stored as shared ptr and managed by the Fitter class ; Definition at line 544 of file Fitter.h. ◆ operator=(). Fitter & ROOT::Fit::Fitter::operator= ; (; const Fitter & ; ). delete . Assignment operator (disabled, class is not copyable) . ◆ Result(). const FitResult & ROOT::Fit::Fitter::Result ; (; ); const. inline . get fit result ; Definition at line 394 of file Fitter.h. ◆ SetData() [1/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const Data & ; data). inlineprotected . Set the input data for the fit (Copying the given data object) ; Definition at line 526 of file Fitter.h. ◆ SetData() [2/2]. template<class Data > . void ROOT::Fit::Fitter::SetData ; (; const std::shared_ptr< Data > & ; data). inlineprotected . Set the input data for the fit using a shared ptr (No Copying) ; Definition at line 520 of file Fitter.h. ◆ SetFCN() [1/6]. bool ROOT::Fit::Fitter::SetFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Set the objective functio",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:16478,Safety,avoid,avoid,16478,"aramMultiFunctionTempl<T>. Definition at line 83 of file Fitter.h. ◆ MinuitFCN_t. typedef void(* ROOT::Fit::Fitter::MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag). fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ; Definition at line 339 of file Fitter.h. Constructor & Destructor Documentation. ◆ Fitter() [1/3]. ROOT::Fit::Fitter::Fitter ; (; ). inline . Default constructor. ; Definition at line 102 of file Fitter.h. ◆ Fitter() [2/3]. ROOT::Fit::Fitter::Fitter ; (; const std::shared_ptr< FitResult > & ; result). Constructor from a result. ; Definition at line 51 of file Fitter.cxx. ◆ ~Fitter(). virtual ROOT::Fit::Fitter::~Fitter ; (; ). inlinevirtual . Destructor. ; Make it virtual in case users derive from Fitter class to extend it by adding new methods. This is needed to avoid a warning seen when doing from Python (see ROOT issue #12391 ). Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:21792,Safety,avoid,avoid,21792,"tMinimization(). template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoWeightMinimization ; (; std::unique_ptr< ObjFunc_t > ; f, . const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr . ). protected . Definition at line 845 of file Fitter.cxx. ◆ EvalFCN(). bool ROOT::Fit::Fitter::EvalFCN ; (; ). Perform a simple FCN evaluation. ; FitResult will be modified and contain the value of the FCN ; Definition at line 288 of file Fitter.cxx. ◆ ExamineFCN(). void ROOT::Fit::Fitter::ExamineFCN ; (; ). protected . look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ; Definition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecuti",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23332,Safety,avoid,avoid,23332,"t is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMet",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2998,Security,access,access,2998,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3086,Security,access,access,3086,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18398,Security,access,access,18398,"ool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoM",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:18574,Security,access,access,18574,"lled only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices can be passed for selecting the parameters to analyse using FitConfig::SetMinosErrors ; Definition at line 593 of file Fitter.cxx. ◆ Config() [1/2]. FitConfig & ROOT::Fit::Fitter::Config ; (; ). inline . access to the configuration (non const method) ; Definition at line 427 of file Fitter.h. ◆ Config() [2/2]. const FitConfig & ROOT::Fit::Fitter::Config ; (; ); const. inline . access to the fit configuration (const method) ; Definition at line 422 of file Fitter.h. ◆ DoBinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoBinnedLikelihoodFit ; (; bool ; extended = true, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . binned likelihood fit ; Definition at line 360 of file Fitter.cxx. ◆ DoInitMinimizer(). bool ROOT::Fit::Fitter::DoInitMinimizer ; (; ). protected . Definition at line 692 of file Fitter.cxx. ◆ DoLeastSquareFit(). bool ROOT::Fit::Fitter::DoLeastSquareFit ; (; const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential). protected . least square fit ; Definition at line 309 of file Fitter.cxx. ◆ DoLinearFit(). bool ROOT::Fit::Fitter::DoLinearFit ; (; ). protected . linear least square fit ; Definition at line 513 of file Fitter.cxx. ◆ DoMinimization() [1/2]. bool ROOT::Fit::Fitter::DoMinimization ; (; const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr). protected . Definition at line 795 of file Fitter.c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4366,Testability,log,log-likelihood,4366,"OOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=null",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:4578,Testability,log,log-likelihood,4578," || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; bool Fit (const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool Fit (const UnBinData &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit an un-binned data set using the negative log-likelihood method. ;  ; bool FitFCN ();  Perform a fit with the previously set FCN function. ;  ; bool FitFCN (const ROOT::Math::FitMethodFunction &fcn, const double *params=nullptr);  Fit using a FitMethodFunction interface. ;  ; bool FitFCN (const ROOT::Math::FitMethodGradFunction &fcn, const double *params=nullptr);  Fit using a FitMethodGradFunction interface. ;  ; bool FitFCN (const ROOT::Math::IMultiGenFunction &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the given FCN function represented by a multi-dimensional function interface (ROOT::Math::IMultiGenFunction). ;  ; bool FitFCN (MinuitFCN_t fcn, int npar=0, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  ; template<class Function > ; bool FitFCN (unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0);  Fit using the a generic F",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:17169,Testability,log,log-likelihood,17169,"t > & ; result). Constructor from a result. ; Definition at line 51 of file Fitter.cxx. ◆ ~Fitter(). virtual ROOT::Fit::Fitter::~Fitter ; (; ). inlinevirtual . Destructor. ; Make it virtual in case users derive from Fitter class to extend it by adding new methods. This is needed to avoid a warning seen when doing from Python (see ROOT issue #12391 ). Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes. ; Definition at line 117 of file Fitter.h. ◆ Fitter() [3/3]. ROOT::Fit::Fitter::Fitter ; (; const Fitter & ; ). delete . Copy constructor (disabled, class is not copyable) . Member Function Documentation. ◆ ApplyWeightCorrection(). bool ROOT::Fit::Fitter::ApplyWeightCorrection ; (; const ROOT::Math::IMultiGenFunction & ; loglw2, . bool ; minimizeW2L = false . ). apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ; The passed function (loglw2) is a log-likelihood function implemented using the sum of weight squared When using FitConfig.SetWeightCorrection() this correction is applied automatically when doing a likelihood fit (binned or unbinned) ; Definition at line 886 of file Fitter.cxx. ◆ CalculateHessErrors(). bool ROOT::Fit::Fitter::CalculateHessErrors ; (; ). perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ; A new FitResult with the Hessian result will be produced ; Definition at line 530 of file Fitter.cxx. ◆ CalculateMinosErrors(). bool ROOT::Fit::Fitter::CalculateMinosErrors ; (; ). perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ; The result will be appended in the fit result class Optionally a vector of parameter indices c",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23272,Testability,log,log-likelihood,23272," any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN()",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23654,Testability,log,log-likelihood,23654,".h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:3166,Usability,simpl,simple,3166,"opy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ;  ; bool Fit (const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::E",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:21071,Usability,simpl,simple,21071,"pe . ). protected . Set Objective function. ; Definition at line 137 of file Fitter.cxx. ◆ DoUnbinnedLikelihoodFit(). bool ROOT::Fit::Fitter::DoUnbinnedLikelihoodFit ; (; bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). protected . un-binned likelihood fit ; Definition at line 440 of file Fitter.cxx. ◆ DoUpdateFitConfig(). void ROOT::Fit::Fitter::DoUpdateFitConfig ; (; ). protected . Definition at line 860 of file Fitter.cxx. ◆ DoUpdateMinimizerOptions(). bool ROOT::Fit::Fitter::DoUpdateMinimizerOptions ; (; bool ; canDifferentMinim = true). protected . Definition at line 763 of file Fitter.cxx. ◆ DoWeightMinimization(). template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoWeightMinimization ; (; std::unique_ptr< ObjFunc_t > ; f, . const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr . ). protected . Definition at line 845 of file Fitter.cxx. ◆ EvalFCN(). bool ROOT::Fit::Fitter::EvalFCN ; (; ). Perform a simple FCN evaluation. ; FitResult will be modified and contain the value of the FCN ; Definition at line 288 of file Fitter.cxx. ◆ ExamineFCN(). void ROOT::Fit::Fitter::ExamineFCN ; (; ). protected . look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ; Definition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitte",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:287,Modifiability,inherit,inherited,287,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType > Member List. This is the complete list of members for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >, including all inherited members. BaseFCN typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BaseFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BaseObjFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BasicFCN(const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Clone() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::BasicFitMethodFunction< DerivFunType >",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3402,Modifiability,extend,extended,3402,"rivFunType, ModelFunType >inlinevirtual; HasHessian() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; Hessian(const double *x, double *hess) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; IGradModelFunction typedefROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; IModelFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodF",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3656,Modifiability,extend,extended,3656,"nction typedefROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; IModelFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< Data",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:4058,Deployability,update,update,4058,"l HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicF",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:4277,Integrability,interface,interface,4277,"tr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMu",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:11069,Integrability,interface,interface,11069,"ual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. inlinevirtual . i-th likelihood contribution and its gradient ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 121 of file LogLikelihoodFCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 161 of file LogLikelihoodFCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 155 of file LogLikelihoodFCN.h. ◆ Gradient(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Gradient ; (; const double * ; x, . double * ; g . ); const. inlinevirtual . Definition at line 127 of file LogLikelihoodFCN.h. ◆ NFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual unsigned int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::NFitPoints ; (; ); const. inlinevirtual . Definition at line 118 of file LogLikelihoodFCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . LogLikelihoodFCN & ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::operator= ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; rhs). inline . Assignment operator. ; Definition at line 99 of file LogLikelihoodFCN.h. ◆ Type(). template<class DerivFu",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:1162,Modifiability,inherit,inherited,1162,"e > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >LogLikelihoodFCN class for likelihood fits. ; it is template to distinguish gradient and non-gradient case ; Definition at line 40 of file LogLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  LogLikelihoodFCN (const LogLikelihoodFCN &f);  Copy constructor. ;  ;  LogLikelihoodFCN (const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ;  LogLikelihoodFCN (const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) for object managed by users. ;  ; virtual ~LogLikelihoodFCN ();",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:1581,Modifiability,extend,extended,1581," line 40 of file LogLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  LogLikelihoodFCN (const LogLikelihoodFCN &f);  Copy constructor. ;  ;  LogLikelihoodFCN (const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ;  LogLikelihoodFCN (const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) for object managed by users. ;  ; virtual ~LogLikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::F",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:1837,Modifiability,extend,extended,1837," line 40 of file LogLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  LogLikelihoodFCN (const LogLikelihoodFCN &f);  Copy constructor. ;  ;  LogLikelihoodFCN (const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ;  LogLikelihoodFCN (const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) for object managed by users. ;  ; virtual ~LogLikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::F",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:2716,Modifiability,inherit,inherited,2716,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:3259,Modifiability,inherit,inherited,3259,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:4487,Modifiability,extend,extended,4487,"ivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunc",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:4747,Modifiability,inherit,inherited,4747,"verride;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:4930,Modifiability,inherit,inherited,4930,"of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/LogLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef D",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:5368,Modifiability,inherit,inherited,5368,"of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag for indicating if likelihood is extended ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/LogLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef D",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:5860,Modifiability,inherit,inherited,5860,"Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/LogLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 45 of file LogLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::Bas",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:8207,Modifiability,extend,extended,8207,"ParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destruct",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:8724,Modifiability,extend,extended,8724,"ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 86 of file LogLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParam",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:13516,Modifiability,extend,extended,13516,"e >.; Definition at line 134 of file LogLikelihoodFCN.h. ◆ UseSumOfWeightSquare(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::UseSumOfWeightSquare ; (; bool ; on = true). inline . Definition at line 139 of file LogLikelihoodFCN.h. Member Data Documentation. ◆ fExecutionPolicy. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ::ROOT::EExecutionPolicy ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fExecutionPolicy. private . Execution policy. ; Definition at line 176 of file LogLikelihoodFCN.h. ◆ fGrad. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . std::vector<double> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fGrad. mutableprivate . for derivatives ; Definition at line 174 of file LogLikelihoodFCN.h. ◆ fIsExtended. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . bool ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fIsExtended. private . flag for indicating if likelihood is extended ; Definition at line 168 of file LogLikelihoodFCN.h. ◆ fNEffPoints. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . unsigned int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fNEffPoints. mutableprivate . number of effective points used in the fit ; Definition at line 172 of file LogLikelihoodFCN.h. ◆ fWeight. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fWeight. private . flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ; Definition at line 169 of file LogLikelihoodFCN.h. math/mathcore/inc/Fit/LogLikelihoodFCN.h. ROOTFitLogLikelihoodFCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:2833,Security,access,access,2833,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:2923,Security,access,access,2923,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:3087,Security,access,access,3087,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:3202,Security,access,access,3202,"ikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html:229,Modifiability,inherit,inherited,229,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::ParameterSettings Member List. This is the complete list of members for ROOT::Fit::ParameterSettings, including all inherited members. fFixROOT::Fit::ParameterSettingsprivate; fHasLowerLimitROOT::Fit::ParameterSettingsprivate; fHasUpperLimitROOT::Fit::ParameterSettingsprivate; Fix()ROOT::Fit::ParameterSettingsinline; fLowerLimitROOT::Fit::ParameterSettingsprivate; fNameROOT::Fit::ParameterSettingsprivate; fStepSizeROOT::Fit::ParameterSettingsprivate; fUpperLimitROOT::Fit::ParameterSettingsprivate; fValueROOT::Fit::ParameterSettingsprivate; HasLowerLimit() constROOT::Fit::ParameterSettingsinline; HasUpperLimit() constROOT::Fit::ParameterSettingsinline; IsBound() constROOT::Fit::ParameterSettingsinline; IsDoubleBound() constROOT::Fit::ParameterSettingsinline; IsFixed() constROOT::Fit::ParameterSettingsinline; LowerLimit() constROOT::Fit::ParameterSettingsinline; Name() constROOT::Fit::ParameterSettingsinline; ParameterSettings()ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val, double err)ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val, double err, double min, double max)ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val)ROOT::Fit::ParameterSettingsinline; Release()ROOT::Fit::ParameterSettingsinline; RemoveLimits()ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value, double step)ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value, double step, double lower, double upper)ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value)ROOT::Fit::ParameterSettingsinline; SetLimits(double low, double up)ROOT::Fit::ParameterSettings; SetLowerLimit(double low)ROOT::Fit::ParameterSettingsinline; SetName(const std::string &name)ROOT::Fit::ParameterSettingsinline; SetStepSize(double e",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings.html:1625,Deployability,release,release,1625,"s (equality and inequality) as functions of the parameters ; Definition at line 33 of file ParameterSettings.h. Public Member Functions;  ParameterSettings ();  Default constructor. ;  ;  ParameterSettings (const std::string &name, double val);  constructor for fixed Parameter ;  ;  ParameterSettings (const std::string &name, double val, double err);  constructor for unlimited named Parameter ;  ;  ParameterSettings (const std::string &name, double val, double err, double min, double max);  constructor for double limited Parameter. The given value should be within the given limits [min,max] ;  ; void Fix ();  fix the parameter ;  ; bool HasLowerLimit () const;  check if parameter has lower limit ;  ; bool HasUpperLimit () const;  check if parameter has upper limit ;  ; bool IsBound () const;  check if is bound ;  ; bool IsDoubleBound () const;  check if is double bound (upper AND lower limit) ;  ; bool IsFixed () const;  check if is fixed ;  ; double LowerLimit () const;  return lower limit value ;  ; const std::string & Name () const;  return name ;  ; void Release ();  release the parameter ;  ; void RemoveLimits ();  remove all limit ;  ; void Set (const std::string &name, double value);  set a fixed parameter ;  ; void Set (const std::string &name, double value, double step);  set value and name (unlimited parameter) ;  ; void Set (const std::string &name, double value, double step, double lower, double upper);  set a limited parameter. The given value should be within the given limits [min,max] ;  ; void SetLimits (double low, double up);  set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The current parameter value should be within the given limits [low,up]. ;  ; void SetLowerLimit (double low);  set a single lower limit ;  ; void SetName (const std::string &name);  interaction ;  ; void SetStepSize (double err);  set the step size ;  ; void SetUpperLimit (double up);  set a single upper limit ;  ; void SetValue (do",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings.html:5701,Deployability,release,release,5701,"r has upper limit ; Definition at line 102 of file ParameterSettings.h. ◆ IsBound(). bool ROOT::Fit::ParameterSettings::IsBound ; (; ); const. inline . check if is bound ; Definition at line 104 of file ParameterSettings.h. ◆ IsDoubleBound(). bool ROOT::Fit::ParameterSettings::IsDoubleBound ; (; ); const. inline . check if is double bound (upper AND lower limit) ; Definition at line 106 of file ParameterSettings.h. ◆ IsFixed(). bool ROOT::Fit::ParameterSettings::IsFixed ; (; ); const. inline . check if is fixed ; Definition at line 98 of file ParameterSettings.h. ◆ LowerLimit(). double ROOT::Fit::ParameterSettings::LowerLimit ; (; ); const. inline . return lower limit value ; Definition at line 94 of file ParameterSettings.h. ◆ Name(). const std::string & ROOT::Fit::ParameterSettings::Name ; (; ); const. inline . return name ; Definition at line 108 of file ParameterSettings.h. ◆ Release(). void ROOT::Fit::ParameterSettings::Release ; (; ). inline . release the parameter ; Definition at line 118 of file ParameterSettings.h. ◆ RemoveLimits(). void ROOT::Fit::ParameterSettings::RemoveLimits ; (; ). inline . remove all limit ; Definition at line 140 of file ParameterSettings.h. ◆ Set() [1/3]. void ROOT::Fit::ParameterSettings::Set ; (; const std::string & ; name, . double ; value . ). inline . set a fixed parameter ; Definition at line 83 of file ParameterSettings.h. ◆ Set() [2/3]. void ROOT::Fit::ParameterSettings::Set ; (; const std::string & ; name, . double ; value, . double ; step . ). inline . set value and name (unlimited parameter) ; Definition at line 68 of file ParameterSettings.h. ◆ Set() [3/3]. void ROOT::Fit::ParameterSettings::Set ; (; const std::string & ; name, . double ; value, . double ; step, . double ; lower, . double ; upper . ). inline . set a limited parameter. The given value should be within the given limits [min,max] ; Definition at line 75 of file ParameterSettings.h. ◆ SetLimits(). void ROOT::Fit::ParameterSettings::SetLimits ; (; double ; l",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html:295,Modifiability,inherit,inherited,295,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Member List. This is the complete list of members for ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >, including all inherited members. BaseFCN typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; BaseFunction typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; BaseObjFunction typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; BasicFCN(const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Clone() constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h, bool fullHessian) constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::Basi",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html:4170,Modifiability,extend,extended,4170,"nType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const PoissonLikelihoodFCN &rhs)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const PoissonLikelihoodFCN &f)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; T typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; Type() constROOT::Fit::PoissonLikelihoodFCN",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html:4429,Modifiability,extend,extended,4429,"stROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const PoissonLikelihoodFCN &rhs)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const PoissonLikelihoodFCN &f)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; T typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; Type() constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Type_t typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; UpdateNCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; UseSumOfWeights()ROOT::Fit::PoissonLikelihoodFCN< De",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:4166,Deployability,update,update,4166,"l HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Prot",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:4385,Integrability,interface,interface,4385,"tr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:11335,Integrability,interface,interface,11335,"tual double ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h, . bool ; fullHessian . ); const. inlinevirtual . i-th likelihood element and its gradient ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 121 of file PoissonLikelihoodFCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 195 of file PoissonLikelihoodFCN.h. ◆ DoEval(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::DoEval ; (; const double * ; x); const. inlineprivatevirtual . Evaluation of the function (required by interface) ; Definition at line 188 of file PoissonLikelihoodFCN.h. ◆ Gradient(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::Gradient ; (; const double * ; x, . double * ; g . ); const. inlinevirtual . evaluate gradient ; Definition at line 127 of file PoissonLikelihoodFCN.h. ◆ IsWeighted(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . bool ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::IsWeighted ; (; ); const. inline . Definition at line 163 of file PoissonLikelihoodFCN.h. ◆ NFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual unsigned int ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::NFitPoints ; (; ); const. inlinevirtual . Definition at line 118 of file PoissonLikelihoodFCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:1201,Modifiability,inherit,inherited,1201,"  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ; Definition at line 46 of file PoissonLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ; virtual ~PoissonLikelihoodF",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:1513,Modifiability,extend,extended,1513,"ultiFunction>; class ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ; Definition at line 46 of file PoissonLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ; virtual ~PoissonLikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:1909,Modifiability,extend,extended,1909,"ted from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ; virtual ~PoissonLikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to co",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:2824,Modifiability,inherit,inherited,2824,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:3367,Modifiability,inherit,inherited,3367,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:4581,Modifiability,extend,extended,4581," bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:4899,Modifiability,inherit,inherited,4899," ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Private Member Functions; virtual double DoDerivative (const double *x, unsigned int icoord) const;  ; virtual double DoEval (const double *x) const;  Evaluation of the function (required by interface) ;  . Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:5082,Modifiability,inherit,inherited,5082," Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/PoissonLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member T",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:5520,Modifiability,inherit,inherited,5520," Private Attributes; ::ROOT::EExecutionPolicy fExecutionPolicy;  Execution policy. ;  ; std::vector< double > fGrad;  for derivatives ;  ; bool fIsExtended;  flag to indicate if is extended (when false is a Multinomial likelihood), default is true ;  ; unsigned int fNEffPoints;  number of effective points used in the fit ;  ; int fWeight;  flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  ;  Protected Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/PoissonLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member T",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:6012,Modifiability,inherit,inherited,6012,"Types inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ;  Protected Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/PoissonLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType,ModelFunType,BinData> ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 50 of file PoissonLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 53 of file PoissonLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:8423,Modifiability,extend,extended,8423,"it::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 55 of file PoissonLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 49 of file PoissonLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 56 of file PoissonLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ PoissonLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::PoissonLikelihoodFCN ; (; const std::shared_ptr< BinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = true, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 61 of file PoissonLikelihoodFCN.h. ◆ PoissonLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::PoissonLikelihoodFCN ; (; const BinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = true, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) managed by the users. ; Definition at line 73 of file PoissonLikelihoodFCN.h. ◆ ~PoissonLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::~PoissonLikelihoodFCN ; (; ). in",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:8953,Modifiability,extend,extended,8953,"< DerivFunType, ModelFunType >::Type_t. Definition at line 56 of file PoissonLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ PoissonLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::PoissonLikelihoodFCN ; (; const std::shared_ptr< BinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = true, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 61 of file PoissonLikelihoodFCN.h. ◆ PoissonLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::PoissonLikelihoodFCN ; (; const BinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = true, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) managed by the users. ; Definition at line 73 of file PoissonLikelihoodFCN.h. ◆ ~PoissonLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::~PoissonLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 86 of file PoissonLikelihoodFCN.h. ◆ PoissonLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::PoissonLikelihoodFCN ; (; const PoissonLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 91 of file PoissonLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:14454,Modifiability,extend,extended,14454,"rivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . void ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::UseSumOfWeightSquare ; (; bool ; on = true). inline . Definition at line 173 of file PoissonLikelihoodFCN.h. Member Data Documentation. ◆ fExecutionPolicy. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ::ROOT::EExecutionPolicy ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fExecutionPolicy. private . Execution policy. ; Definition at line 210 of file PoissonLikelihoodFCN.h. ◆ fGrad. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . std::vector<double> ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fGrad. mutableprivate . for derivatives ; Definition at line 208 of file PoissonLikelihoodFCN.h. ◆ fIsExtended. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . bool ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fIsExtended. private . flag to indicate if is extended (when false is a Multinomial likelihood), default is true ; Definition at line 203 of file PoissonLikelihoodFCN.h. ◆ fNEffPoints. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . unsigned int ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fNEffPoints. mutableprivate . number of effective points used in the fit ; Definition at line 206 of file PoissonLikelihoodFCN.h. ◆ fWeight. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . int ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fWeight. private . flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ; Definition at line 204 of file PoissonLikelihoodFCN.h. math/mathcore/inc/Fit/PoissonLikelihoodFCN.h. ROOTFitPoissonLikelihoodFCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:2941,Security,access,access,2941,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:3031,Security,access,access,3031,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:3195,Security,access,access,3195,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:3310,Security,access,access,3310,"lone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h, bool fullHessian) const;  i-th likelihood element and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  evaluate gradient ;  ; bool IsWeighted () const;  ; virtual unsigned int NFitPoints () const;  ; PoissonLikelihoodFCN & operator= (const PoissonLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  Computes the full Hessian. ;  ; void UseSumOfWeights ();  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual void UpdateNCalls () const;  update number of ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:648,Testability,log,log,648,". ROOT: ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ; Definition at line 46 of file PoissonLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSe",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:990,Availability,error,error,990,". ROOT: ROOT::Fit::SparseData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::SparseData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. ; Definition at line 35 of file SparseData.h. Public Member Functions;  SparseData (const SparseData &rhs);  Copy constructor. ;  ;  SparseData (const unsigned int dim, double min[], double max[]);  Constructor with a dimension and two arrays. ;  ;  SparseData (std::vector< double > &min, std::vector< double > &max);  Constructor with a vector. ;  ;  ~SparseData () override;  Destructor. ;  ; void Add (std::vector< double > &min, std::vector< double > &max, const double content, const double error=1.0);  Adds a new bin specified by the vectors. ;  ; void GetBinData (BinData &) const;  Transforms the data into a ROOT::Fit::BinData structure. ;  ; void GetBinDataIntegral (BinData &) const;  Same as before, but returning a BinData with integral format (containing bin edges) ;  ; void GetBinDataNoZeros (BinData &) const;  Same as before, but including zero content bins. ;  ; void GetPoint (const unsigned int i, std::vector< double > &min, std::vector< double > &max, double &content, double &error);  ; unsigned int NDim () const;  Returns the dimension of the object (bins) ;  ; unsigned int NPoints () const;  Returns the number of points stored. ;  ; SparseData & operator= (const SparseData &rhs);  Assignment operator. ;  ; void PrintList () const;  Debug method to print the list of bins stored. ;  ;  Public Member Functions inherited from ROOT::Fit::FitData;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:1495,Availability,error,error,1495,"ne 35 of file SparseData.h. Public Member Functions;  SparseData (const SparseData &rhs);  Copy constructor. ;  ;  SparseData (const unsigned int dim, double min[], double max[]);  Constructor with a dimension and two arrays. ;  ;  SparseData (std::vector< double > &min, std::vector< double > &max);  Constructor with a vector. ;  ;  ~SparseData () override;  Destructor. ;  ; void Add (std::vector< double > &min, std::vector< double > &max, const double content, const double error=1.0);  Adds a new bin specified by the vectors. ;  ; void GetBinData (BinData &) const;  Transforms the data into a ROOT::Fit::BinData structure. ;  ; void GetBinDataIntegral (BinData &) const;  Same as before, but returning a BinData with integral format (containing bin edges) ;  ; void GetBinDataNoZeros (BinData &) const;  Same as before, but including zero content bins. ;  ; void GetPoint (const unsigned int i, std::vector< double > &min, std::vector< double > &max, double &content, double &error);  ; unsigned int NDim () const;  Returns the dimension of the object (bins) ;  ; unsigned int NPoints () const;  Returns the number of points stored. ;  ; SparseData & operator= (const SparseData &rhs);  Assignment operator. ;  ; void PrintList () const;  Debug method to print the list of bins stored. ;  ;  Public Member Functions inherited from ROOT::Fit::FitData;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and data range ;  ;  FitData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and default data range ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin ;  ;  FitData (const",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:6399,Availability,avail,available,6399,"ct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::Sparse",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:7720,Availability,error,error,7720,"ow SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::SparseData::SparseData ; (; const SparseData & ; rhs). Copy constructor. ; Definition at line 215 of file SparseData.cxx. ◆ ~SparseData(). ROOT::Fit::SparseData::~SparseData ; (; ). override . Destructor. ; Definition at line 227 of file SparseData.cxx. Member Function Documentation. ◆ Add(). void ROOT::Fit::SparseData::Add ; (; std::vector< double > & ; min, . std::vector< double > & ; max, . const double ; content, . const double ; error = 1.0 . ). Adds a new bin specified by the vectors. ; Definition at line 241 of file SparseData.cxx. ◆ GetBinData(). void ROOT::Fit::SparseData::GetBinData ; (; BinData & ; bd); const. Transforms the data into a ROOT::Fit::BinData structure. ; Definition at line 308 of file SparseData.cxx. ◆ GetBinDataIntegral(). void ROOT::Fit::SparseData::GetBinDataIntegral ; (; BinData & ; bd); const. Same as before, but returning a BinData with integral format (containing bin edges) ; Definition at line 330 of file SparseData.cxx. ◆ GetBinDataNoZeros(). void ROOT::Fit::SparseData::GetBinDataNoZeros ; (; BinData & ; bd); const. Same as before, but including zero content bins. ; Definition at line 348 of file SparseData.cxx. ◆ GetPoint(). void ROOT::Fit::SparseData::GetPoint ; (; const unsigned int ; i, . std::vector< double > & ; min, . std::vector< double > & ; max, . double & ; content, . double & ; error . ). Definition at line 278 of file SparseData.cxx. ◆ NDim(). unsigned int ROOT::Fit",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:8627,Availability,error,error,8627,"< double > & ; min, . std::vector< double > & ; max, . const double ; content, . const double ; error = 1.0 . ). Adds a new bin specified by the vectors. ; Definition at line 241 of file SparseData.cxx. ◆ GetBinData(). void ROOT::Fit::SparseData::GetBinData ; (; BinData & ; bd); const. Transforms the data into a ROOT::Fit::BinData structure. ; Definition at line 308 of file SparseData.cxx. ◆ GetBinDataIntegral(). void ROOT::Fit::SparseData::GetBinDataIntegral ; (; BinData & ; bd); const. Same as before, but returning a BinData with integral format (containing bin edges) ; Definition at line 330 of file SparseData.cxx. ◆ GetBinDataNoZeros(). void ROOT::Fit::SparseData::GetBinDataNoZeros ; (; BinData & ; bd); const. Same as before, but including zero content bins. ; Definition at line 348 of file SparseData.cxx. ◆ GetPoint(). void ROOT::Fit::SparseData::GetPoint ; (; const unsigned int ; i, . std::vector< double > & ; min, . std::vector< double > & ; max, . double & ; content, . double & ; error . ). Definition at line 278 of file SparseData.cxx. ◆ NDim(). unsigned int ROOT::Fit::SparseData::NDim ; (; ); const. Returns the dimension of the object (bins) ; Definition at line 235 of file SparseData.cxx. ◆ NPoints(). unsigned int ROOT::Fit::SparseData::NPoints ; (; ); const. Returns the number of points stored. ; Definition at line 229 of file SparseData.cxx. ◆ operator=(). SparseData & ROOT::Fit::SparseData::operator= ; (; const SparseData & ; rhs). Assignment operator. ; Definition at line 220 of file SparseData.cxx. ◆ PrintList(). void ROOT::Fit::SparseData::PrintList ; (; ); const. Debug method to print the list of bins stored. ; Definition at line 301 of file SparseData.cxx. Member Data Documentation. ◆ fList. std::unique_ptr<ProxyListBox> ROOT::Fit::SparseData::fList. private . Definition at line 76 of file SparseData.h. Libraries for ROOT::Fit::SparseData:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/Spa",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:5893,Integrability,rout,routines,5893,"int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:1835,Modifiability,inherit,inherited,1835," ;  ;  Public Member Functions inherited from ROOT::Fit::FitData;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:5819,Modifiability,inherit,inherited,5819,"int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:6252,Modifiability,inherit,inherited,6252,"ct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::Sparse",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:6481,Modifiability,inherit,inherited,6481,"taOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::SparseData::SparseData ; (; const SparseData & ; rhs). Copy constructor. ; Definition at line 215 of file SparseData.cxx. ◆ ~SparseData(). ROOT::Fit::SparseData::~SparseData ; (; ). override . Destructor. ; Definition at line 227 of file SparseData.",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:5290,Security,access,access,5290," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:5558,Security,access,access,5558," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:5616,Security,access,access,5616," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData-members.html:213,Modifiability,inherit,inherited,213,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::UnBinData Member List. This is the complete list of members for ROOT::Fit::UnBinData, including all inherited members. Add(double x)ROOT::Fit::UnBinDatainline; Add(double x, double y)ROOT::Fit::UnBinDatainline; Add(double x, double y, double z)ROOT::Fit::UnBinDatainline; Add(const double *x)ROOT::Fit::UnBinDatainline; Add(const double *x, double w)ROOT::Fit::UnBinDatainline; Append(unsigned int newPoints, unsigned int dim=1, bool isWeighted=false)ROOT::Fit::UnBinDatainline; ROOT::Fit::FitData::Append(unsigned int newPoints, unsigned int dim=1)ROOT::Fit::FitData; Coords(unsigned int ipoint) constROOT::Fit::FitDatainline; fCoordsROOT::Fit::FitDataprivate; fCoordsPtrROOT::Fit::FitDataprivate; fDimROOT::Fit::FitDataprotected; FitData(unsigned int maxpoints=0, unsigned int dim=1)ROOT::Fit::FitDataexplicit; FitData(const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1)ROOT::Fit::FitDataexplicit; FitData(const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1)ROOT::Fit::FitDataexplicit; FitData(const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1)ROOT::Fit::FitData; FitData(unsigned int n, const double *dataX)ROOT::Fit::FitData; FitData(unsigned int n, const double *dataX, const double *dataY)ROOT::Fit::FitData; FitData(unsigned int n, const double *dataX, const double *dataY, const double *dataZ)ROOT::Fit::FitData; FitData(const DataRange &range, unsigned int maxpoints, const double *dataX)ROOT::Fit::FitData; FitData(const DataRange &range, unsigned int maxpoints, const double *dataX, const double *dataY)ROOT::Fit::FitData; FitData(const DataRange &range, unsigned int maxpoints, const double *dataX, const double *dataY, const double *dataZ)ROOT::Fit::FitData; FitData(unsigned int n, unsigned int dim, Iterator dataItr)ROOT::Fit::FitDatainline; FitData(const DataRange &range, unsigned int maxpoint",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:707,Availability,error,error,707,". ROOT: ROOT::Fit::UnBinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::UnBinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the un-binned data sets (just x coordinates values) of any dimensions. ; There is the option to construct UnBindata copying the data inside (in the base FitData class) or using a pointer to external data, depending on which constructor of the UnBinData class is used. It is recommended to copy the input data inside, since this will be more efficient and less error prone, since the input provided data will have to be kept alive for all the time the Fit classes will be used. In case of really large data sets for limiting memory consumption then the other option can be used with special care. Specialized constructor exists for using external data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 46 of file UnBinData.h. Public Member Functions;  UnBinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from options and range ;  ;  UnBinData (const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from range and default option ;  ;  UnBinData (const UnBinData &);  copy constructor ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const DataRange &range);  constructor for 1D data and a range (data are copied inside according to the given range) ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false);  constructor",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:771,Availability,alive,alive,771,". ROOT: ROOT::Fit::UnBinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::UnBinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the un-binned data sets (just x coordinates values) of any dimensions. ; There is the option to construct UnBindata copying the data inside (in the base FitData class) or using a pointer to external data, depending on which constructor of the UnBinData class is used. It is recommended to copy the input data inside, since this will be more efficient and less error prone, since the input provided data will have to be kept alive for all the time the Fit classes will be used. In case of really large data sets for limiting memory consumption then the other option can be used with special care. Specialized constructor exists for using external data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 46 of file UnBinData.h. Public Member Functions;  UnBinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from options and range ;  ;  UnBinData (const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from range and default option ;  ;  UnBinData (const UnBinData &);  copy constructor ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const DataRange &range);  constructor for 1D data and a range (data are copied inside according to the given range) ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false);  constructor",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:9476,Availability,avail,available,9476,"ataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from dimension of point and max number of points (to pre-allocate vector) ; Definition at line 54 of file UnBinData.h. ◆ UnBinData() [2/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:688,Energy Efficiency,efficient,efficient,688,". ROOT: ROOT::Fit::UnBinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::UnBinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the un-binned data sets (just x coordinates values) of any dimensions. ; There is the option to construct UnBindata copying the data inside (in the base FitData class) or using a pointer to external data, depending on which constructor of the UnBinData class is used. It is recommended to copy the input data inside, since this will be more efficient and less error prone, since the input provided data will have to be kept alive for all the time the Fit classes will be used. In case of really large data sets for limiting memory consumption then the other option can be used with special care. Specialized constructor exists for using external data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 46 of file UnBinData.h. Public Member Functions;  UnBinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from options and range ;  ;  UnBinData (const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from range and default option ;  ;  UnBinData (const UnBinData &);  copy constructor ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const DataRange &range);  constructor for 1D data and a range (data are copied inside according to the given range) ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false);  constructor",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:878,Energy Efficiency,consumption,consumption,878,". ROOT: ROOT::Fit::UnBinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::UnBinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the un-binned data sets (just x coordinates values) of any dimensions. ; There is the option to construct UnBindata copying the data inside (in the base FitData class) or using a pointer to external data, depending on which constructor of the UnBinData class is used. It is recommended to copy the input data inside, since this will be more efficient and less error prone, since the input provided data will have to be kept alive for all the time the Fit classes will be used. In case of really large data sets for limiting memory consumption then the other option can be used with special care. Specialized constructor exists for using external data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 46 of file UnBinData.h. Public Member Functions;  UnBinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from options and range ;  ;  UnBinData (const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from range and default option ;  ;  UnBinData (const UnBinData &);  copy constructor ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const DataRange &range);  constructor for 1D data and a range (data are copied inside according to the given range) ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false);  constructor",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:2941,Energy Efficiency,allocate,allocate,2941,,MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:10132,Energy Efficiency,allocate,allocate,10132," same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from dimension of point and max number of points (to pre-allocate vector) ; Definition at line 54 of file UnBinData.h. ◆ UnBinData() [2/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from range and default option ; Definition at line 67 of file UnBinData.h. ◆ UnBinData() [3/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inline . constructor from options and range ; Definition at line 79 of file UnBinData.h. ◆ UnBinData() [4/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; n, . const double * ; dataX . ). inline . constructor for 1D external data (data are not copied inside) ; Definition at line 91 of file UnBinData.h. ◆ UnBinData() [5/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . boo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:552,Integrability,depend,depending,552,". ROOT: ROOT::Fit::UnBinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::UnBinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the un-binned data sets (just x coordinates values) of any dimensions. ; There is the option to construct UnBindata copying the data inside (in the base FitData class) or using a pointer to external data, depending on which constructor of the UnBinData class is used. It is recommended to copy the input data inside, since this will be more efficient and less error prone, since the input provided data will have to be kept alive for all the time the Fit classes will be used. In case of really large data sets for limiting memory consumption then the other option can be used with special care. Specialized constructor exists for using external data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 46 of file UnBinData.h. Public Member Functions;  UnBinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from options and range ;  ;  UnBinData (const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false);  constructor from range and default option ;  ;  UnBinData (const UnBinData &);  copy constructor ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const DataRange &range);  constructor for 1D data and a range (data are copied inside according to the given range) ;  ;  UnBinData (unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false);  constructor",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:4078,Integrability,wrap,wrapper,4078,"UnBinData (unsigned int n, const double *dataX, const double *dataY, bool isWeighted=false);  constructor for 2D external data (data are not copied inside) or 1D data with a weight (if isWeighted = true) ;  ;  UnBinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, bool isWeighted=false);  constructor for 3D external data (data are not copied inside) or 2D data with a weight (if isWeighted = true) ;  ; template<class Iterator > ;  UnBinData (unsigned int n, unsigned int dim, Iterator dataItr, bool isWeighted=false);  constructor for multi-dim external data (data are not copied inside) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ;  ~UnBinData () override;  destructor, delete pointer to internal data or external data wrapper ;  ; void Add (const double *x);  add multi-dim coordinate data ;  ; void Add (const double *x, double w);  add multi-dim coordinate data + weight ;  ; void Add (double x);  add one dim coordinate data (unweighted) ;  ; void Add (double x, double y);  add 2-dim coordinate data can also be used to add 1-dim data with a weight ;  ; void Add (double x, double y, double z);  add 3-dim coordinate data can also be used to add 2-dim data with a weight ;  ; void Append (unsigned int newPoints, unsigned int dim=1, bool isWeighted=false);  ; bool IsWeighted () const;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; UnBinData & operator= (const UnBinData &);  assignment operator ;  ; double Weight (unsigned int ipoint) const;  return weight ;  ; const double * WeightsPtr (unsigned int ipoint) const;  ;  Public Member Functions inherited from ROOT::Fit::FitData;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  constr",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8970,Integrability,rout,routines,8970,"nt newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . boo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:14258,Integrability,wrap,wrapper,14258," (data are copied inside according to the given range) or a 2D data set + weights. ; If is weighted dataZ is the pointer to the list of the weights ; Definition at line 161 of file UnBinData.h. ◆ UnBinData() [11/12]. template<class Iterator > . ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints, . unsigned int ; dim, . Iterator ; dataItr, . const DataRange & ; range, . bool ; isWeighted = false . ). inline . constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin ; Definition at line 174 of file UnBinData.h. ◆ UnBinData() [12/12]. ROOT::Fit::UnBinData::UnBinData ; (; const UnBinData & ; rhs). copy constructor ; Definition at line 24 of file UnBinData.cxx. ◆ ~UnBinData(). ROOT::Fit::UnBinData::~UnBinData ; (; ). inlineoverride . destructor, delete pointer to internal data or external data wrapper ; Definition at line 189 of file UnBinData.h. Member Function Documentation. ◆ Add() [1/5]. void ROOT::Fit::UnBinData::Add ; (; const double * ; x). inline . add multi-dim coordinate data ; Definition at line 230 of file UnBinData.h. ◆ Add() [2/5]. void ROOT::Fit::UnBinData::Add ; (; const double * ; x, . double ; w . ). inline . add multi-dim coordinate data + weight ; Definition at line 238 of file UnBinData.h. ◆ Add() [3/5]. void ROOT::Fit::UnBinData::Add ; (; double ; x). inline . add one dim coordinate data (unweighted) ; Definition at line 195 of file UnBinData.h. ◆ Add() [4/5]. void ROOT::Fit::UnBinData::Add ; (; double ; x, . double ; y . ). inline . add 2-dim coordinate data can also be used to add 1-dim data with a weight ; Definition at line 207 of file UnBinData.h. ◆ Add() [5/5]. void ROOT::Fit::UnBinData::Add ; (; double ; x, . double ; y, . double ; z . ). inline . add 3-dim coordinate data can also be used to add 2-dim data with a weight ; Definition at line",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:4935,Modifiability,inherit,inherited,4935,"passed dim refers just to the coordinate size ;  ;  ~UnBinData () override;  destructor, delete pointer to internal data or external data wrapper ;  ; void Add (const double *x);  add multi-dim coordinate data ;  ; void Add (const double *x, double w);  add multi-dim coordinate data + weight ;  ; void Add (double x);  add one dim coordinate data (unweighted) ;  ; void Add (double x, double y);  add 2-dim coordinate data can also be used to add 1-dim data with a weight ;  ; void Add (double x, double y, double z);  add 3-dim coordinate data can also be used to add 2-dim data with a weight ;  ; void Append (unsigned int newPoints, unsigned int dim=1, bool isWeighted=false);  ; bool IsWeighted () const;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; UnBinData & operator= (const UnBinData &);  assignment operator ;  ; double Weight (unsigned int ipoint) const;  return weight ;  ; const double * WeightsPtr (unsigned int ipoint) const;  ;  Public Member Functions inherited from ROOT::Fit::FitData;  FitData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and data range ;  ;  FitData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1);  construct passing options and default data range ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double *>::begin ;  ;  FitData (const DataRange &range, unsigned int maxpoints, const double *dataX, const double *dataY);  constructor for multi-dim external data and a range (data are copied inside according to the range) Uses as argument an iterator of a list (or vector) containing the const double * of the data An example could be the std::vector<const double ",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8896,Modifiability,inherit,inherited,8896,"nt newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . boo",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:9329,Modifiability,inherit,inherited,9329,"ataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from dimension of point and max number of points (to pre-allocate vector) ; Definition at line 54 of file UnBinData.h. ◆ UnBinData() [2/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:9558,Modifiability,inherit,inherited,9558,"s & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/UnBinData.h>. Inheritance diagram for ROOT::Fit::UnBinData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UnBinData() [1/12]. ROOT::Fit::UnBinData::UnBinData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from dimension of point and max number of points (to pre-allocate vector) ; Definition at line 54 of file UnBinData.h. ◆ UnBinData() [2/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . bool ; isWeighted = false . ). inlineexplicit . constructor from range and default option ; Definition at line 67 of file UnBinData.h. ◆ UnBinData() [3/12]. ROOT::Fit::UnBinData::UnBinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; m",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8390,Security,access,access,8390," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attribut",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8658,Security,access,access,8658," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attribut",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html:8716,Security,access,access,8716," containing the const double * of the data An example could be the std::vector<const double *>::begin In case of weighted data, the external data must have a dim+1 lists of data The passed dim refers just to the coordinate size ;  ; virtual ~FitData ();  dummy virtual destructor ;  ; void Add (const double *x);  add multi-dim coordinate data with only value ;  ; void Add (double x);  add one dim data with only coordinate and values ;  ; void Append (unsigned int newPoints, unsigned int dim=1);  ; const double * Coords (unsigned int ipoint) const;  return a pointer to the coordinates data for the given fit point ;  ; const double * GetCoordComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; bool fWeighted;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attribut",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:359,Safety,safe,safe,359,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:416,Security,hash,hash,416,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:729,Security,hash,hash,729,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:793,Security,hash,hash,793,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:805,Security,hash,hash,805,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:889,Security,hash,hash,889,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:927,Security,hash,hash,927,". ROOT: ROOT::Internal::RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object correspond",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1049,Security,hash,hash,1049,"RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Def",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1658,Security,hash,hash,1658,"unctions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashC",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1722,Security,hash,hash,1722,"e &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1734,Security,hash,hash,1734,"e &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1979,Security,hash,hash,1979,"static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT::Internal::RConcurrentHashColl:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/RConcurrentHashColl.hxx; core/thread/src/RConcurrentHashColl.cxx. ROOTInternalRConcurrentHashColl. ROOT master - Reference Guide",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:2163,Security,hash,hash,2163,"onding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT::Internal::RConcurrentHashColl:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/RConcurrentHashColl.hxx; core/thread/src/RConcurrentHashColl.cxx. ROOTInternalRConcurrentHashColl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:2209,Security,hash,hash,2209,"onding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT::Internal::RConcurrentHashColl:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/RConcurrentHashColl.hxx; core/thread/src/RConcurrentHashColl.cxx. ROOTInternalRConcurrentHashColl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:2262,Security,hash,hash,2262,"onding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Definition at line 56 of file RConcurrentHashColl.cxx. ◆ Insert(). bool ROOT::Internal::RConcurrentHashColl::Insert ; (; const HashValue & ; hash, . RUidColl && ; coll . ); const. If the hash is there, return false. ; Otherwise, insert the hash and UID collection and return true. ; Definition at line 61 of file RConcurrentHashColl.cxx. Member Data Documentation. ◆ fHashMap. std::unique_ptr<RHashMap> ROOT::Internal::RConcurrentHashColl::fHashMap. mutableprivate . Definition at line 32 of file RConcurrentHashColl.hxx. ◆ fRWLock. std::unique_ptr<ROOT::TRWSpinLock> ROOT::Internal::RConcurrentHashColl::fRWLock. mutableprivate . Definition at line 33 of file RConcurrentHashColl.hxx. Libraries for ROOT::Internal::RConcurrentHashColl:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/RConcurrentHashColl.hxx; core/thread/src/RConcurrentHashColl.cxx. ROOTInternalRConcurrentHashColl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:2781,Availability,avail,available,2781,"umnRegister.hxx. Public Member Functions;  RColumnRegister (ROOT::Detail::RDF::RLoopManager *lm);  ; void AddAlias (std::string_view alias, std::string_view colName);  Add a new alias to the ledger. ;  ; void AddDefine (std::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std::shared_ptr< RVariationBase > variation);  Register a new systematic variation. ;  ; std::vector< std::string_view > BuildDefineNames () const;  Return the list of the names of defined columns (no aliases). ;  ; ROOT::RDF::RVariationsDescription BuildVariationsDescription () const;  ; std::vector< std::string_view > GenerateColumnNames () const;  Return the list of the names of the defined columns (Defines + Aliases). ;  ; RDFDetail::RDefineBase * GetDefine (std::string_view colName) const;  Return the RDefine for the requested column name, or nullptr. ;  ; RDFDetail::RColumnReaderBase * GetReader (unsigned int slot, const std::string &colName, const std::string &variationName, const std::type_info &tid);  Return a RDefineReader or a RVariationReader, or nullptr if not available. ;  ; RDFDetail::RColumnReaderBase * GetReaderUnchecked (unsigned int slot, const std::string &colName, const std::string &variationName);  Return a RDefineReader or a RVariationReader, or nullptr if not available. ;  ; std::vector< std::string > GetVariationDeps (const std::string &column) const;  Get the names of all variations that directly or indirectly affect a given column. ;  ; std::vector< std::string > GetVariationDeps (const std::vector< std::string > &columns) const;  Get the names of all variations that directly or indirectly affect the specified columns. ;  ; std::vector< std::string > GetVariationsFor (const std::string &column) const;  Get the names of the variations that directly provide alternative values for this column. ;  ; bool IsAlias (std::string_view name) const;  Return true if the given column name is an existing alias. ;  ; bool IsDefine (std::s",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:2995,Availability,avail,available,2995,"::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std::shared_ptr< RVariationBase > variation);  Register a new systematic variation. ;  ; std::vector< std::string_view > BuildDefineNames () const;  Return the list of the names of defined columns (no aliases). ;  ; ROOT::RDF::RVariationsDescription BuildVariationsDescription () const;  ; std::vector< std::string_view > GenerateColumnNames () const;  Return the list of the names of the defined columns (Defines + Aliases). ;  ; RDFDetail::RDefineBase * GetDefine (std::string_view colName) const;  Return the RDefine for the requested column name, or nullptr. ;  ; RDFDetail::RColumnReaderBase * GetReader (unsigned int slot, const std::string &colName, const std::string &variationName, const std::type_info &tid);  Return a RDefineReader or a RVariationReader, or nullptr if not available. ;  ; RDFDetail::RColumnReaderBase * GetReaderUnchecked (unsigned int slot, const std::string &colName, const std::string &variationName);  Return a RDefineReader or a RVariationReader, or nullptr if not available. ;  ; std::vector< std::string > GetVariationDeps (const std::string &column) const;  Get the names of all variations that directly or indirectly affect a given column. ;  ; std::vector< std::string > GetVariationDeps (const std::vector< std::string > &columns) const;  Get the names of all variations that directly or indirectly affect the specified columns. ;  ; std::vector< std::string > GetVariationsFor (const std::string &column) const;  Get the names of the variations that directly provide alternative values for this column. ;  ; bool IsAlias (std::string_view name) const;  Return true if the given column name is an existing alias. ;  ; bool IsDefine (std::string_view name) const;  Return true if the given column name is an existing defined column. ;  ; bool IsDefineOrAlias (std::string_view name) const;  Check if the provided name is tracked in the names list. ;  ; std::strin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:6790,Availability,avail,available,6790,"iew, ROOT::Internal::RDF::RVariationsWithReaders *>. private . Definition at line 69 of file RColumnRegister.hxx. Constructor & Destructor Documentation. ◆ RColumnRegister(). ROOT::Internal::RDF::RColumnRegister::RColumnRegister ; (; ROOT::Detail::RDF::RLoopManager * ; lm). explicit . Definition at line 25 of file RDFColumnRegister.cxx. Member Function Documentation. ◆ AddAlias(). void ROOT::Internal::RDF::RColumnRegister::AddAlias ; (; std::string_view ; alias, . std::string_view ; colName . ). Add a new alias to the ledger. ; Registers the strings alias, colName with the current RDataFrame, then uses references to those string to create the new pair for the collection of aliases of this node. ; Definition at line 194 of file RDFColumnRegister.cxx. ◆ AddDefine(). void ROOT::Internal::RDF::RColumnRegister::AddDefine ; (; std::shared_ptr< RDFDetail::RDefineBase > ; define). Add a new defined column. ; Registers the pair (columnName, columnReader) with the current RDataFrame, then keeps a reference to the inserted objects to keep track of the available columns for this node. Internally it recreates the collection with the new column, and swaps it with the old one. ; Definition at line 71 of file RDFColumnRegister.cxx. ◆ AddVariation(). void ROOT::Internal::RDF::RColumnRegister::AddVariation ; (; std::shared_ptr< RVariationBase > ; variation). Register a new systematic variation. ; Definition at line 96 of file RDFColumnRegister.cxx. ◆ BuildDefineNames(). std::vector< std::string_view > ROOT::Internal::RDF::RColumnRegister::BuildDefineNames ; (; ); const. Return the list of the names of defined columns (no aliases). ; Definition at line 39 of file RDFColumnRegister.cxx. ◆ BuildVariationsDescription(). ROOT::RDF::RVariationsDescription ROOT::Internal::RDF::RColumnRegister::BuildVariationsDescription ; (; ); const. Definition at line 179 of file RDFColumnRegister.cxx. ◆ FindVariationAndReaders(). RVariationsWithReaders * ROOT::Internal::RDF::RColumnRegister::FindVariatio",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:8809,Availability,avail,available,8809,". const std::string & ; variationName . ). private . Return the RVariationsWithReaders object that handles the specified variation of the specified column, or null. ; Definition at line 166 of file RDFColumnRegister.cxx. ◆ GenerateColumnNames(). std::vector< std::string_view > ROOT::Internal::RDF::RColumnRegister::GenerateColumnNames ; (; ); const. Return the list of the names of the defined columns (Defines + Aliases). ; Definition at line 310 of file RDFColumnRegister.cxx. ◆ GetDefine(). RDFDetail::RDefineBase * ROOT::Internal::RDF::RColumnRegister::GetDefine ; (; std::string_view ; colName); const. Return the RDefine for the requested column name, or nullptr. ; Definition at line 51 of file RDFColumnRegister.cxx. ◆ GetReader(). RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::RColumnRegister::GetReader ; (; unsigned int ; slot, . const std::string & ; colName, . const std::string & ; variationName, . const std::type_info & ; requestedType . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; If requestedType does not match the actual type of the Define or Variation, an exception is thrown. ; Definition at line 258 of file RDFColumnRegister.cxx. ◆ GetReaderUnchecked(). RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::RColumnRegister::GetReaderUnchecked ; (; unsigned int ; slot, . const std::string & ; colName, . const std::string & ; variationName . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; No type checking is done on the requested reader. ; Definition at line 287 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [1/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::string & ; column); const. Get the names of all variations that directly or indirectly affect a given column. ; This list includes variations applied to the column as well as variations applied to other columns on which the value of this column depends (typically via a Define expr",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:9256,Availability,avail,available,9256,"0 of file RDFColumnRegister.cxx. ◆ GetDefine(). RDFDetail::RDefineBase * ROOT::Internal::RDF::RColumnRegister::GetDefine ; (; std::string_view ; colName); const. Return the RDefine for the requested column name, or nullptr. ; Definition at line 51 of file RDFColumnRegister.cxx. ◆ GetReader(). RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::RColumnRegister::GetReader ; (; unsigned int ; slot, . const std::string & ; colName, . const std::string & ; variationName, . const std::type_info & ; requestedType . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; If requestedType does not match the actual type of the Define or Variation, an exception is thrown. ; Definition at line 258 of file RDFColumnRegister.cxx. ◆ GetReaderUnchecked(). RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::RColumnRegister::GetReaderUnchecked ; (; unsigned int ; slot, . const std::string & ; colName, . const std::string & ; variationName . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; No type checking is done on the requested reader. ; Definition at line 287 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [1/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::string & ; column); const. Get the names of all variations that directly or indirectly affect a given column. ; This list includes variations applied to the column as well as variations applied to other columns on which the value of this column depends (typically via a Define expression). ; Definition at line 130 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [2/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::vector< std::string > & ; columns); const. Get the names of all variations that directly or indirectly affect the specified columns. ; This list includes variations applied to the columns as well as variations applied to other columns on which the value of",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:1379,Deployability,update,updated,1379,"tributes |; List of all members ; ROOT::Internal::RDF::RColumnRegister Class ReferenceDataframe. ; A binder for user-defined columns, variations and aliases. ; The storage is copy-on-write and shared between all instances of the class that have the same values.; Several components of an RDF computation graph make use of a column register. It keeps track of which columns have been defined, varied or aliased at each point of the computation graph. In many cases, the contents of the different column register instances are the same or only differ by a single extra defined/varied/aliased column. For this reason, in order to avoid unnecessary data duplication, fDefines, fAliases, fVariations and fColumnNames are all shared_ptr<const T> that (whenever possible) are shared across RColumnRegister instances that are part of the same computation graph. If a new column, alias or variation is added between one node and the next, then the new node contains a new instance of a RColumnRegister that shares all data members with the previous instance except for the one data member that needed updating, which is replaced with a new updated instance.; The contents of the collections that keep track of other objects of the computation graph are not owned by the RColumnRegister object. They are registered centrally by the RLoopManager and only accessed via reference in the RColumnRegister. ; Definition at line 68 of file RColumnRegister.hxx. Public Member Functions;  RColumnRegister (ROOT::Detail::RDF::RLoopManager *lm);  ; void AddAlias (std::string_view alias, std::string_view colName);  Add a new alias to the ledger. ;  ; void AddDefine (std::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std::shared_ptr< RVariationBase > variation);  Register a new systematic variation. ;  ; std::vector< std::string_view > BuildDefineNames () const;  Return the list of the names of defined columns (no aliases). ;  ; ROOT::RDF::RVariationsDescription Bu",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:9746,Integrability,depend,depends,9746," const std::type_info & ; requestedType . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; If requestedType does not match the actual type of the Define or Variation, an exception is thrown. ; Definition at line 258 of file RDFColumnRegister.cxx. ◆ GetReaderUnchecked(). RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::RColumnRegister::GetReaderUnchecked ; (; unsigned int ; slot, . const std::string & ; colName, . const std::string & ; variationName . ). Return a RDefineReader or a RVariationReader, or nullptr if not available. ; No type checking is done on the requested reader. ; Definition at line 287 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [1/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::string & ; column); const. Get the names of all variations that directly or indirectly affect a given column. ; This list includes variations applied to the column as well as variations applied to other columns on which the value of this column depends (typically via a Define expression). ; Definition at line 130 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [2/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::vector< std::string > & ; columns); const. Get the names of all variations that directly or indirectly affect the specified columns. ; This list includes variations applied to the columns as well as variations applied to other columns on which the value of any of these columns depend (typically via Define expressions). ; Definition at line 140 of file RDFColumnRegister.cxx. ◆ GetVariationsFor(). std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationsFor ; (; const std::string & ; column); const. Get the names of the variations that directly provide alternative values for this column. ; Definition at line 114 of file RDFColumnRegister.cxx. ◆ IsAlias(). bool ROOT::Internal::RDF::RColumnRegister::I",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:10251,Integrability,depend,depend,10251,"a RDefineReader or a RVariationReader, or nullptr if not available. ; No type checking is done on the requested reader. ; Definition at line 287 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [1/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::string & ; column); const. Get the names of all variations that directly or indirectly affect a given column. ; This list includes variations applied to the column as well as variations applied to other columns on which the value of this column depends (typically via a Define expression). ; Definition at line 130 of file RDFColumnRegister.cxx. ◆ GetVariationDeps() [2/2]. std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationDeps ; (; const std::vector< std::string > & ; columns); const. Get the names of all variations that directly or indirectly affect the specified columns. ; This list includes variations applied to the columns as well as variations applied to other columns on which the value of any of these columns depend (typically via Define expressions). ; Definition at line 140 of file RDFColumnRegister.cxx. ◆ GetVariationsFor(). std::vector< std::string > ROOT::Internal::RDF::RColumnRegister::GetVariationsFor ; (; const std::string & ; column); const. Get the names of the variations that directly provide alternative values for this column. ; Definition at line 114 of file RDFColumnRegister.cxx. ◆ IsAlias(). bool ROOT::Internal::RDF::RColumnRegister::IsAlias ; (; std::string_view ; name); const. Return true if the given column name is an existing alias. ; Definition at line 218 of file RDFColumnRegister.cxx. ◆ IsDefine(). bool ROOT::Internal::RDF::RColumnRegister::IsDefine ; (; std::string_view ; name); const. Return true if the given column name is an existing defined column. ; Definition at line 226 of file RDFColumnRegister.cxx. ◆ IsDefineOrAlias(). bool ROOT::Internal::RDF::RColumnRegister::IsDefineOrAlias ; (; std::string_view ; name); ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:875,Safety,avoid,avoid,875,". ROOT: ROOT::Internal::RDF::RColumnRegister Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RDF::RColumnRegister Class ReferenceDataframe. ; A binder for user-defined columns, variations and aliases. ; The storage is copy-on-write and shared between all instances of the class that have the same values.; Several components of an RDF computation graph make use of a column register. It keeps track of which columns have been defined, varied or aliased at each point of the computation graph. In many cases, the contents of the different column register instances are the same or only differ by a single extra defined/varied/aliased column. For this reason, in order to avoid unnecessary data duplication, fDefines, fAliases, fVariations and fColumnNames are all shared_ptr<const T> that (whenever possible) are shared across RColumnRegister instances that are part of the same computation graph. If a new column, alias or variation is added between one node and the next, then the new node contains a new instance of a RColumnRegister that shares all data members with the previous instance except for the one data member that needed updating, which is replaced with a new updated instance.; The contents of the collections that keep track of other objects of the computation graph are not owned by the RColumnRegister object. They are registered centrally by the RLoopManager and only accessed via reference in the RColumnRegister. ; Definition at line 68 of file RColumnRegister.hxx. Public Member Functions;  RColumnRegister (ROOT::Detail::RDF::RLoopManager *lm);  ; void AddAlias (std::string_view alias, std::string_view colName);  Add a new alias to the ledger. ;  ; void AddDefine (std::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std:",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:1592,Security,access,accessed,1592,"er. It keeps track of which columns have been defined, varied or aliased at each point of the computation graph. In many cases, the contents of the different column register instances are the same or only differ by a single extra defined/varied/aliased column. For this reason, in order to avoid unnecessary data duplication, fDefines, fAliases, fVariations and fColumnNames are all shared_ptr<const T> that (whenever possible) are shared across RColumnRegister instances that are part of the same computation graph. If a new column, alias or variation is added between one node and the next, then the new node contains a new instance of a RColumnRegister that shares all data members with the previous instance except for the one data member that needed updating, which is replaced with a new updated instance.; The contents of the collections that keep track of other objects of the computation graph are not owned by the RColumnRegister object. They are registered centrally by the RLoopManager and only accessed via reference in the RColumnRegister. ; Definition at line 68 of file RColumnRegister.hxx. Public Member Functions;  RColumnRegister (ROOT::Detail::RDF::RLoopManager *lm);  ; void AddAlias (std::string_view alias, std::string_view colName);  Add a new alias to the ledger. ;  ; void AddDefine (std::shared_ptr< RDFDetail::RDefineBase > column);  Add a new defined column. ;  ; void AddVariation (std::shared_ptr< RVariationBase > variation);  Register a new systematic variation. ;  ; std::vector< std::string_view > BuildDefineNames () const;  Return the list of the names of defined columns (no aliases). ;  ; ROOT::RDF::RVariationsDescription BuildVariationsDescription () const;  ; std::vector< std::string_view > GenerateColumnNames () const;  Return the list of the names of the defined columns (Defines + Aliases). ;  ; RDFDetail::RDefineBase * GetDefine (std::string_view colName) const;  Return the RDefine for the requested column name, or nullptr. ;  ; RDFDetail::RColumnRe",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:476,Performance,load,loaded,476,". ROOT: ROOT::Internal::TBranchCacheInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchCacheInfo Class Reference. . Definition at line 35 of file TBranchCacheInfo.h. Public Member Functions; bool AllUsed () const;  Return true if all the baskets that are marked loaded are also mark as used. ;  ; void GetUnused (std::vector< Int_t > &unused);  Return a set of unused basket, let's not re-read them. ;  ; bool HasBeenUsed (Int_t basketNumber) const;  Return true if the basket has been marked as 'used'. ;  ; bool IsInCache (Int_t basketNumber) const;  Return true if the basket is currently in the cache. ;  ; bool IsVetoed (Int_t basketNumber) const;  Return true if the basket is currently vetoed. ;  ; void Print (const char *owner, Long64_t *entries) const;  Print the info we have for the baskets. ;  ; void Reset ();  Reset all info. ;  ; void SetIsInCache (Int_t basketNumber);  Mark if the basket is currently in the cache. ;  ; void SetUsed (Int_t basketNumber);  Mark if the basket has been marked as 'used'. ;  ; void Veto (Int_t basketNumber);  Mark if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCach",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:813,Performance,cache,cache,813,". ROOT: ROOT::Internal::TBranchCacheInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchCacheInfo Class Reference. . Definition at line 35 of file TBranchCacheInfo.h. Public Member Functions; bool AllUsed () const;  Return true if all the baskets that are marked loaded are also mark as used. ;  ; void GetUnused (std::vector< Int_t > &unused);  Return a set of unused basket, let's not re-read them. ;  ; bool HasBeenUsed (Int_t basketNumber) const;  Return true if the basket has been marked as 'used'. ;  ; bool IsInCache (Int_t basketNumber) const;  Return true if the basket is currently in the cache. ;  ; bool IsVetoed (Int_t basketNumber) const;  Return true if the basket is currently vetoed. ;  ; void Print (const char *owner, Long64_t *entries) const;  Print the info we have for the baskets. ;  ; void Reset ();  Reset all info. ;  ; void SetIsInCache (Int_t basketNumber);  Mark if the basket is currently in the cache. ;  ; void SetUsed (Int_t basketNumber);  Mark if the basket has been marked as 'used'. ;  ; void Veto (Int_t basketNumber);  Mark if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCach",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:1140,Performance,cache,cache,1140," Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchCacheInfo Class Reference. . Definition at line 35 of file TBranchCacheInfo.h. Public Member Functions; bool AllUsed () const;  Return true if all the baskets that are marked loaded are also mark as used. ;  ; void GetUnused (std::vector< Int_t > &unused);  Return a set of unused basket, let's not re-read them. ;  ; bool HasBeenUsed (Int_t basketNumber) const;  Return true if the basket has been marked as 'used'. ;  ; bool IsInCache (Int_t basketNumber) const;  Return true if the basket is currently in the cache. ;  ; bool IsVetoed (Int_t basketNumber) const;  Return true if the basket is currently vetoed. ;  ; void Print (const char *owner, Long64_t *entries) const;  Print the info we have for the baskets. ;  ; void Reset ();  Reset all info. ;  ; void SetIsInCache (Int_t basketNumber);  Mark if the basket is currently in the cache. ;  ; void SetUsed (Int_t basketNumber);  Mark if the basket has been marked as 'used'. ;  ; void Veto (Int_t basketNumber);  Mark if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCacheInfo::EStates. private . EnumeratorkLoaded ; kUsed ; kVetoed ; kSize . Definition at line 37 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:2285,Performance,load,loaded,2285,"k if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCacheInfo::EStates. private . EnumeratorkLoaded ; kUsed ; kVetoed ; kSize . Definition at line 37 of file TBranchCacheInfo.h. Member Function Documentation. ◆ AllUsed(). bool ROOT::Internal::TBranchCacheInfo::AllUsed ; (; ); const. inline . Return true if all the baskets that are marked loaded are also mark as used. ; Definition at line 109 of file TBranchCacheInfo.h. ◆ GetUnused(). void ROOT::Internal::TBranchCacheInfo::GetUnused ; (; std::vector< Int_t > & ; unused). inline . Return a set of unused basket, let's not re-read them. ; Definition at line 122 of file TBranchCacheInfo.h. ◆ HasBeenUsed(). bool ROOT::Internal::TBranchCacheInfo::HasBeenUsed ; (; Int_t ; basketNumber); const. inline . Return true if the basket has been marked as 'used'. ; Definition at line 76 of file TBranchCacheInfo.h. ◆ IsInCache(). bool ROOT::Internal::TBranchCacheInfo::IsInCache ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently in the cache. ; Definition at line 86 of file TBranchCacheInfo.h. ◆ IsVetoed(). bool ROOT::Internal::TBranchCacheInfo::IsVetoed ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently vetoed. ; Definition at line 105 of file TBranchCacheInfo.h. ◆ Print(). void ROOT::Internal::TBranchCacheInfo::Pr",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:2959,Performance,cache,cache,2959,"tion Documentation. ◆ EStates. enum ROOT::Internal::TBranchCacheInfo::EStates. private . EnumeratorkLoaded ; kUsed ; kVetoed ; kSize . Definition at line 37 of file TBranchCacheInfo.h. Member Function Documentation. ◆ AllUsed(). bool ROOT::Internal::TBranchCacheInfo::AllUsed ; (; ); const. inline . Return true if all the baskets that are marked loaded are also mark as used. ; Definition at line 109 of file TBranchCacheInfo.h. ◆ GetUnused(). void ROOT::Internal::TBranchCacheInfo::GetUnused ; (; std::vector< Int_t > & ; unused). inline . Return a set of unused basket, let's not re-read them. ; Definition at line 122 of file TBranchCacheInfo.h. ◆ HasBeenUsed(). bool ROOT::Internal::TBranchCacheInfo::HasBeenUsed ; (; Int_t ; basketNumber); const. inline . Return true if the basket has been marked as 'used'. ; Definition at line 76 of file TBranchCacheInfo.h. ◆ IsInCache(). bool ROOT::Internal::TBranchCacheInfo::IsInCache ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently in the cache. ; Definition at line 86 of file TBranchCacheInfo.h. ◆ IsVetoed(). bool ROOT::Internal::TBranchCacheInfo::IsVetoed ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently vetoed. ; Definition at line 105 of file TBranchCacheInfo.h. ◆ Print(). void ROOT::Internal::TBranchCacheInfo::Print ; (; const char * ; owner, . Long64_t * ; entries . ); const. inline . Print the info we have for the baskets. ; Definition at line 141 of file TBranchCacheInfo.h. ◆ Reset(). void ROOT::Internal::TBranchCacheInfo::Reset ; (; ). inline . Reset all info. ; Definition at line 134 of file TBranchCacheInfo.h. ◆ SetIsInCache(). void ROOT::Internal::TBranchCacheInfo::SetIsInCache ; (; Int_t ; basketNumber). inline . Mark if the basket is currently in the cache. ; Definition at line 89 of file TBranchCacheInfo.h. ◆ SetState(). void ROOT::Internal::TBranchCacheInfo::SetState ; (; Int_t ; basketNumber, . EStates ; what . ). inlineprivate . Mark if the basket ha",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:3732,Performance,cache,cache,3732,"the basket has been marked as 'used'. ; Definition at line 76 of file TBranchCacheInfo.h. ◆ IsInCache(). bool ROOT::Internal::TBranchCacheInfo::IsInCache ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently in the cache. ; Definition at line 86 of file TBranchCacheInfo.h. ◆ IsVetoed(). bool ROOT::Internal::TBranchCacheInfo::IsVetoed ; (; Int_t ; basketNumber); const. inline . Return true if the basket is currently vetoed. ; Definition at line 105 of file TBranchCacheInfo.h. ◆ Print(). void ROOT::Internal::TBranchCacheInfo::Print ; (; const char * ; owner, . Long64_t * ; entries . ); const. inline . Print the info we have for the baskets. ; Definition at line 141 of file TBranchCacheInfo.h. ◆ Reset(). void ROOT::Internal::TBranchCacheInfo::Reset ; (; ). inline . Reset all info. ; Definition at line 134 of file TBranchCacheInfo.h. ◆ SetIsInCache(). void ROOT::Internal::TBranchCacheInfo::SetIsInCache ; (; Int_t ; basketNumber). inline . Mark if the basket is currently in the cache. ; Definition at line 89 of file TBranchCacheInfo.h. ◆ SetState(). void ROOT::Internal::TBranchCacheInfo::SetState ; (; Int_t ; basketNumber, . EStates ; what . ). inlineprivate . Mark if the basket has been marked has the 'what' state. ; Definition at line 68 of file TBranchCacheInfo.h. ◆ SetUsed(). void ROOT::Internal::TBranchCacheInfo::SetUsed ; (; Int_t ; basketNumber). inline . Mark if the basket has been marked as 'used'. ; Definition at line 79 of file TBranchCacheInfo.h. ◆ TestState(). bool ROOT::Internal::TBranchCacheInfo::TestState ; (; Int_t ; basketNumber, . EStates ; what . ); const. inlineprivate . Return true if the basket has been marked as having the 'what' state. ; Definition at line 60 of file TBranchCacheInfo.h. ◆ UpdatePedestal(). void ROOT::Internal::TBranchCacheInfo::UpdatePedestal ; (; Int_t ; basketNumber). inlineprivate . Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ; Definition at line 48 of file TB",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:4914,Performance,load,loaded,4914,"::SetIsInCache ; (; Int_t ; basketNumber). inline . Mark if the basket is currently in the cache. ; Definition at line 89 of file TBranchCacheInfo.h. ◆ SetState(). void ROOT::Internal::TBranchCacheInfo::SetState ; (; Int_t ; basketNumber, . EStates ; what . ). inlineprivate . Mark if the basket has been marked has the 'what' state. ; Definition at line 68 of file TBranchCacheInfo.h. ◆ SetUsed(). void ROOT::Internal::TBranchCacheInfo::SetUsed ; (; Int_t ; basketNumber). inline . Mark if the basket has been marked as 'used'. ; Definition at line 79 of file TBranchCacheInfo.h. ◆ TestState(). bool ROOT::Internal::TBranchCacheInfo::TestState ; (; Int_t ; basketNumber, . EStates ; what . ); const. inlineprivate . Return true if the basket has been marked as having the 'what' state. ; Definition at line 60 of file TBranchCacheInfo.h. ◆ UpdatePedestal(). void ROOT::Internal::TBranchCacheInfo::UpdatePedestal ; (; Int_t ; basketNumber). inlineprivate . Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ; Definition at line 48 of file TBranchCacheInfo.h. ◆ Veto(). void ROOT::Internal::TBranchCacheInfo::Veto ; (; Int_t ; basketNumber). inline . Mark if the basket should be vetoed in the next round. ; This happens when the basket was loaded in the previous round and was not used and is overlapping to the next round/cluster ; Definition at line 98 of file TBranchCacheInfo.h. Member Data Documentation. ◆ fBasketPedestal. Int_t ROOT::Internal::TBranchCacheInfo::fBasketPedestal {-1}. private . Definition at line 44 of file TBranchCacheInfo.h. ◆ fInfo. TBits ROOT::Internal::TBranchCacheInfo::fInfo. private . Definition at line 45 of file TBranchCacheInfo.h. Libraries for ROOT::Internal::TBranchCacheInfo:. [legend]; The documentation for this class was generated from the following file:; tree/tree/inc/TBranchCacheInfo.h. ROOTInternalTBranchCacheInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:3846,Availability,error,error,3846,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:3935,Availability,error,error,3935,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:4090,Availability,error,error,4090,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:4387,Availability,error,error,4387,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:8471,Availability,error,error,8471,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Name of the branch. ;  ; TString fContainerName;  Name of the container. ;  ; TVirtualStreamerInfo * fInfo;  Streamer info. ;  ; ELocation fIsClones;  Type of container. ;  ; TBranchDescriptor * fParent;  Descriptor of the parent branch (NULL for topmost) ;  ; TString fSubBranchPrefix;  Prefix",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:3852,Integrability,message,message,3852,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:4393,Integrability,message,message,4393,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:5383,Integrability,message,message,5383,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:8477,Integrability,message,message,8477,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Name of the branch. ;  ; TString fContainerName;  Name of the container. ;  ; TVirtualStreamerInfo * fInfo;  Streamer info. ;  ; ELocation fIsClones;  Type of container. ;  ; TBranchDescriptor * fParent;  Descriptor of the parent branch (NULL for topmost) ;  ; TString fSubBranchPrefix;  Prefix",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:8850,Integrability,message,message,8850," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Name of the branch. ;  ; TString fContainerName;  Name of the container. ;  ; TVirtualStreamerInfo * fInfo;  Streamer info. ;  ; ELocation fIsClones;  Type of container. ;  ; TBranchDescriptor * fParent;  Descriptor of the parent branch (NULL for topmost) ;  ; TString fSubBranchPrefix;  Prefix (e.g. if the branch name is ""A."" the prefix is ""A"". ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:649,Modifiability,inherit,inherited,649,". ROOT: ROOT::Internal::TBranchDescriptor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Internal::TBranchDescriptor Class Reference. . Definition at line 55 of file TTreeReaderGenerator.h. Public Member Functions;  TBranchDescriptor (const char *type, TVirtualStreamerInfo *info, const char *branchname, const char *subBranchPrefix, ELocation isclones, const TString &containerName, TBranchDescriptor *parent=nullptr);  ; bool IsClones () const;  ; bool IsSTL () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title)",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:2389,Modifiability,inherit,inherited,2389,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:3482,Modifiability,inherit,inheritance,3482,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:5481,Modifiability,inherit,inherits,5481,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:5598,Modifiability,inherit,inherits,5598,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:9569,Modifiability,inherit,inherited,9569," settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Name of the branch. ;  ; TString fContainerName;  Name of the container. ;  ; TVirtualStreamerInfo * fInfo;  Streamer info. ;  ; ELocation fIsClones;  Type of container. ;  ; TBranchDescriptor * fParent;  Descriptor of the parent branch (NULL for topmost) ;  ; TString fSubBranchPrefix;  Prefix (e.g. if the branch name is ""A."" the prefix is ""A"". ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t G",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:10225,Modifiability,inherit,inherited,10225," ; TString fSubBranchPrefix;  Prefix (e.g. if the branch name is ""A."" the prefix is ""A"". ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TBranchDescriptor:. This browser is not able to show S",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:10435,Modifiability,inherit,inherited,10435," ; TString fSubBranchPrefix;  Prefix (e.g. if the branch name is ""A."" the prefix is ""A"". ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TBranchDescriptor:. This browser is not able to show S",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:10938,Modifiability,inherit,inherited,10938,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TBranchDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchDescriptor(). ROOT::Internal::TBranchDescriptor::TBranchDescriptor ; (; const char * ; type, . TVirtualStreamerInfo * ; info, . const char * ; branchname, . const char * ; subBranchPrefix, . ELocation ; isclones, . const TString & ; containerName, . TBranchDescriptor * ; parent = nullptr . ). inline . Definition at line 64 of file TTreeReaderGenerator.h. Member Function Documentation. ◆ IsClones(). bool ROOT::Internal::TBranchDescriptor::IsClones ; (; ); const. inline . Definition at line 80 of file TTreeR",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:11037,Modifiability,inherit,inherited,11037,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TBranchDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchDescriptor(). ROOT::Internal::TBranchDescriptor::TBranchDescriptor ; (; const char * ; type, . TVirtualStreamerInfo * ; info, . const char * ; branchname, . const char * ; subBranchPrefix, . ELocation ; isclones, . const TString & ; containerName, . TBranchDescriptor * ; parent = nullptr . ). inline . Definition at line 64 of file TTreeReaderGenerator.h. Member Function Documentation. ◆ IsClones(). bool ROOT::Internal::TBranchDescriptor::IsClones ; (; ); const. inline . Definition at line 80 of file TTreeR",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:11242,Modifiability,inherit,inherited,11242,"; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TBranchDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchDescriptor(). ROOT::Internal::TBranchDescriptor::TBranchDescriptor ; (; const char * ; type, . TVirtualStreamerInfo * ; info, . const char * ; branchname, . const char * ; subBranchPrefix, . ELocation ; isclones, . const TString & ; containerName, . TBranchDescriptor * ; parent = nullptr . ). inline . Definition at line 64 of file TTreeReaderGenerator.h. Member Function Documentation. ◆ IsClones(). bool ROOT::Internal::TBranchDescriptor::IsClones ; (; ); const. inline . Definition at line 80 of file TTreeReaderGenerator.h. ◆ IsSTL(). bool ROOT::Internal::TBranchDescriptor::IsSTL ; (; ); const. inline . Definition at line 82 of file TTreeReaderGenerator.h. Member Data Documentation. ◆ fBranchName",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:1517,Security,hash,hash,1517,"st TString &containerName, TBranchDescriptor *parent=nullptr);  ; bool IsClones () const;  ; bool IsSTL () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html:835,Availability,error,error,835,. ROOT: ROOT::Internal::TBranchIMTHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Internal::TBranchIMTHelper Class Reference. ; A helper class for managing IMT work during TTree:Fill operations. ; Definition at line 28 of file TBranchIMTHelper.h. Public Member Functions; Long64_t GetNbytes ();  ; Long64_t GetNerrors ();  ; template<typename FN > ; void Run (const FN &lambda);  ; void Wait ();  . Private Types; using TaskGroup_t = ROOT::Experimental::TTaskGroup;  . Private Attributes; std::atomic< Long64_t > fBytes {0};  Total number of bytes written by this helper. ;  ; std::unique_ptr< TaskGroup_t > fGroup;  ; std::atomic< Int_t > fNerrors {0};  Total error count of all tasks done by this helper. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tree/tree/src/TBranchIMTHelper.h>; Member Typedef Documentation. ◆ TaskGroup_t. using ROOT::Internal::TBranchIMTHelper::TaskGroup_t = ROOT::Experimental::TTaskGroup. private . Definition at line 31 of file TBranchIMTHelper.h. Member Function Documentation. ◆ GetNbytes(). Long64_t ROOT::Internal::TBranchIMTHelper::GetNbytes ; (; ). inline . Definition at line 57 of file TBranchIMTHelper.h. ◆ GetNerrors(). Long64_t ROOT::Internal::TBranchIMTHelper::GetNerrors ; (; ). inline . Definition at line 58 of file TBranchIMTHelper.h. ◆ Run(). template<typename FN > . void ROOT::Internal::TBranchIMTHelper::Run ; (; const FN & ; lambda). inline . Definition at line 35 of file TBranchIMTHelper.h. ◆ Wait(). void ROOT::Internal::TBranchIMTHelper::Wait ; (; ). inline . Definition at line 51 of file TBranchIMTHelper.h. Member Data Documentation. ◆ fBytes. std::atomic<Long64_t> ROOT::Internal::TBranchIMTHelper::fBytes {0}. private . Total number of bytes written by this helper. ; Definition at line 61 of file TBranchIMTHelper.h. ◆ fG,MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html:2233,Availability,error,error,2233,template<typename FN > ; void Run (const FN &lambda);  ; void Wait ();  . Private Types; using TaskGroup_t = ROOT::Experimental::TTaskGroup;  . Private Attributes; std::atomic< Long64_t > fBytes {0};  Total number of bytes written by this helper. ;  ; std::unique_ptr< TaskGroup_t > fGroup;  ; std::atomic< Int_t > fNerrors {0};  Total error count of all tasks done by this helper. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tree/tree/src/TBranchIMTHelper.h>; Member Typedef Documentation. ◆ TaskGroup_t. using ROOT::Internal::TBranchIMTHelper::TaskGroup_t = ROOT::Experimental::TTaskGroup. private . Definition at line 31 of file TBranchIMTHelper.h. Member Function Documentation. ◆ GetNbytes(). Long64_t ROOT::Internal::TBranchIMTHelper::GetNbytes ; (; ). inline . Definition at line 57 of file TBranchIMTHelper.h. ◆ GetNerrors(). Long64_t ROOT::Internal::TBranchIMTHelper::GetNerrors ; (; ). inline . Definition at line 58 of file TBranchIMTHelper.h. ◆ Run(). template<typename FN > . void ROOT::Internal::TBranchIMTHelper::Run ; (; const FN & ; lambda). inline . Definition at line 35 of file TBranchIMTHelper.h. ◆ Wait(). void ROOT::Internal::TBranchIMTHelper::Wait ; (; ). inline . Definition at line 51 of file TBranchIMTHelper.h. Member Data Documentation. ◆ fBytes. std::atomic<Long64_t> ROOT::Internal::TBranchIMTHelper::fBytes {0}. private . Total number of bytes written by this helper. ; Definition at line 61 of file TBranchIMTHelper.h. ◆ fGroup. std::unique_ptr<TaskGroup_t> ROOT::Internal::TBranchIMTHelper::fGroup. private . Definition at line 64 of file TBranchIMTHelper.h. ◆ fNerrors. std::atomic<Int_t> ROOT::Internal::TBranchIMTHelper::fNerrors {0}. private . Total error count of all tasks done by this helper. ; Definition at line 62 of file TBranchIMTHelper.h. tree/tree/src/TBranchIMTHelper.h. ROOTInternalTBranchIMTHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchIMTHelper.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6298,Availability,error,error,6298,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6387,Availability,error,error,6387,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6542,Availability,error,error,6542,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6839,Availability,error,error,6839,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:10923,Availability,error,error,10923,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from T",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6304,Integrability,message,message,6304,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:6845,Integrability,message,message,6845,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:7835,Integrability,message,message,7835,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:10929,Integrability,message,message,10929,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from T",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:11302,Integrability,message,message,11302," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:565,Modifiability,inherit,inherited,565,". ROOT: ROOT::Internal::TBranchProxyClassDescriptor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchProxyClassDescriptor Class Reference. . Definition at line 26 of file TBranchProxyClassDescriptor.h. Public Types; enum  ELocation { ;   kOut =0; , kClones; , kSTL; , kInsideClones; , ;   kInsideSTL. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBranchProxyClassDescriptor (const char *branchname);  Constructor for a branch constructed from a leaf list. ;  ;  TBranchProxyClassDescriptor (const char *type, TVirtualStreamerInfo *info, const char *branchname, const char *branchPrefix, ELocation isclones, UInt_t splitlevel, const TString &containerName);  Constructor. ;  ;  TBranchProxyClassDescriptor (const char *type, TVirtualStreamerInfo *info, const char *branchname, ELocation isclones, UInt_t splitlevel, const TString &containerName);  Constructor. ;  ; void AddDescriptor (TBranchProxyDescriptor *desc, bool isBase);  Add a descriptor to this proxy. ;  ; const char * GetBranchName () const;  Get the branch name. ;  ; TString GetContainerName () const;  Return the name of the container holding this class, if any. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:3101,Modifiability,inherit,inherited,3101,"d in or outside of a TClonesArray. ;  ; const char * GetRawSymbol () const;  Get the real symbol name. ;  ; UInt_t GetSplitLevel () const;  Return the split level of the branch. ;  ; const char * GetSubBranchPrefix () const;  Get the prefix from the branch name. ;  ; TClass * IsA () const override;  ; bool IsClones () const;  Return true if this proxy is for a TClonesArray. ;  ; virtual bool IsEquivalent (const TBranchProxyClassDescriptor *other);  Return true if this description is the 'same' as the other decription. ;  ; bool IsLoaded () const;  Return true if the class needed by the branch is loaded. ;  ; bool IsSTL () const;  Return true if this proxy is for a TClonesArray. ;  ; void OutputDecl (FILE *hf, int offset, UInt_t);  Output the declaration and implementation of this emulation class. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:4841,Modifiability,inherit,inherited,4841,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:5934,Modifiability,inherit,inheritance,5934,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:7933,Modifiability,inherit,inherits,7933,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:8050,Modifiability,inherit,inherits,8050,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:11903,Modifiability,inherit,inherited,11903,"his function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:12113,Modifiability,inherit,inherited,12113,"his function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:13264,Modifiability,inherit,inherited,13264," Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ; UInt_t fMaxDatamemberType;  ; TString fRawSymbol;  ; UInt_t fSplitLevel;  ; TString fSubBranchPrefix;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyClassDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyClassDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ELocation. enum ROOT::Internal::TBranchProxyClassDescriptor::ELocation. EnumeratorkOut ; kClones ; kSTL ; kInsideClones ; kInsideSTL . Definition at line 29 of file TBranchProxyClassDescriptor.h. Constructor & Destructor Documentation. ◆ TBranchProxyClassDescriptor() [1/4]. ROOT::Internal::TBranchProxyClassDescriptor::TBranchProxyClassDescriptor ; (; const TBranchProxyClassDescriptor & ; b). inlineprivate . Definition at line 47 of file TBranchProxyClassDescriptor.h. ◆ TBranchProxyClassDesc",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:13363,Modifiability,inherit,inherited,13363," Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ; UInt_t fMaxDatamemberType;  ; TString fRawSymbol;  ; UInt_t fSplitLevel;  ; TString fSubBranchPrefix;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyClassDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyClassDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ELocation. enum ROOT::Internal::TBranchProxyClassDescriptor::ELocation. EnumeratorkOut ; kClones ; kSTL ; kInsideClones ; kInsideSTL . Definition at line 29 of file TBranchProxyClassDescriptor.h. Constructor & Destructor Documentation. ◆ TBranchProxyClassDescriptor() [1/4]. ROOT::Internal::TBranchProxyClassDescriptor::TBranchProxyClassDescriptor ; (; const TBranchProxyClassDescriptor & ; b). inlineprivate . Definition at line 47 of file TBranchProxyClassDescriptor.h. ◆ TBranchProxyClassDesc",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:13568,Modifiability,inherit,inherited,13568," in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make the typename a proper class name without having the really deal with namespace and templates. ;  ; TBranchProxyClassDescriptor & operator= (const TBranchProxyClassDescriptor &);  . Private Attributes; TString fBranchName;  ; TString fContainerName;  ; TVirtualStreamerInfo * fInfo;  ; ELocation fIsClones;  ; bool fIsLeafList;  ; TList fListOfBaseProxies;  ; TList fListOfSubProxies;  ; UInt_t fMaxDatamemberType;  ; TString fRawSymbol;  ; UInt_t fSplitLevel;  ; TString fSubBranchPrefix;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyClassDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyClassDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ELocation. enum ROOT::Internal::TBranchProxyClassDescriptor::ELocation. EnumeratorkOut ; kClones ; kSTL ; kInsideClones ; kInsideSTL . Definition at line 29 of file TBranchProxyClassDescriptor.h. Constructor & Destructor Documentation. ◆ TBranchProxyClassDescriptor() [1/4]. ROOT::Internal::TBranchProxyClassDescriptor::TBranchProxyClassDescriptor ; (; const TBranchProxyClassDescriptor & ; b). inlineprivate . Definition at line 47 of file TBranchProxyClassDescriptor.h. ◆ TBranchProxyClassDescriptor() [2/4]. TBranchProxyClassDescriptor::TBranchProxyClassDescriptor ; (; const char * ; type, . TVirtualStreamerInfo * ; info, . const char * ; branchname, . ELocation ; isclones, . UInt_t ; splitleve",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:2724,Performance,load,loaded,2724,"st TString &containerName);  Constructor. ;  ; void AddDescriptor (TBranchProxyDescriptor *desc, bool isBase);  Add a descriptor to this proxy. ;  ; const char * GetBranchName () const;  Get the branch name. ;  ; TString GetContainerName () const;  Return the name of the container holding this class, if any. ;  ; TVirtualStreamerInfo * GetInfo () const;  ; ELocation GetIsClones () const;  Return whether the branch is inside, nested in or outside of a TClonesArray. ;  ; const char * GetRawSymbol () const;  Get the real symbol name. ;  ; UInt_t GetSplitLevel () const;  Return the split level of the branch. ;  ; const char * GetSubBranchPrefix () const;  Get the prefix from the branch name. ;  ; TClass * IsA () const override;  ; bool IsClones () const;  Return true if this proxy is for a TClonesArray. ;  ; virtual bool IsEquivalent (const TBranchProxyClassDescriptor *other);  Return true if this description is the 'same' as the other decription. ;  ; bool IsLoaded () const;  Return true if the class needed by the branch is loaded. ;  ; bool IsSTL () const;  Return true if this proxy is for a TClonesArray. ;  ; void OutputDecl (FILE *hf, int offset, UInt_t);  Output the declaration and implementation of this emulation class. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:11858,Performance,load,loaded,11858,"(UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool IsLoaded (const char *);  Return true if the class needed by the branch is loaded. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBranchProxyClassDescriptor (const TBranchProxyClassDescriptor &b);  ; void NameToSymbol ();  Make",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:18524,Performance,load,loaded,18524,xx. ◆ GetSubBranchPrefix(). const char * TBranchProxyClassDescriptor::GetSubBranchPrefix ; (; ); const. Get the prefix from the branch name. ; Definition at line 135 of file TBranchProxyClassDescriptor.cxx. ◆ IsA(). TClass * ROOT::Internal::TBranchProxyClassDescriptor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TBranchProxyClassDescriptor.h. ◆ IsClones(). bool TBranchProxyClassDescriptor::IsClones ; (; ); const. Return true if this proxy is for a TClonesArray. ; Definition at line 245 of file TBranchProxyClassDescriptor.cxx. ◆ IsEquivalent(). bool TBranchProxyClassDescriptor::IsEquivalent ; (; const TBranchProxyClassDescriptor * ; other). virtual . Return true if this description is the 'same' as the other decription. ; Definition at line 158 of file TBranchProxyClassDescriptor.cxx. ◆ IsLoaded() [1/2]. bool TBranchProxyClassDescriptor::IsLoaded ; (; ); const. Return true if the class needed by the branch is loaded. ; Definition at line 222 of file TBranchProxyClassDescriptor.cxx. ◆ IsLoaded() [2/2]. bool TBranchProxyClassDescriptor::IsLoaded ; (; const char * ; classname). static . Return true if the class needed by the branch is loaded. ; Definition at line 230 of file TBranchProxyClassDescriptor.cxx. ◆ IsSTL(). bool TBranchProxyClassDescriptor::IsSTL ; (; ); const. Return true if this proxy is for a TClonesArray. ; Definition at line 253 of file TBranchProxyClassDescriptor.cxx. ◆ NameToSymbol(). void TBranchProxyClassDescriptor::NameToSymbol ; (; ). private . Make the typename a proper class name without having the really deal with namespace and templates. ; Definition at line 37 of file TBranchProxyClassDescriptor.cxx. ◆ operator=(). TBranchProxyClassDescriptor & ROOT::Internal::TBranchProxyClassDescriptor::operator= ; (; const TBranchProxyClassDescriptor & ; ). inlineprivate . Definition at line 48 of file TBranchProxyClassDescriptor.h. ◆ OutputDecl(). void TBranc,MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:18751,Performance,load,loaded,18751,"OT::Internal::TBranchProxyClassDescriptor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TBranchProxyClassDescriptor.h. ◆ IsClones(). bool TBranchProxyClassDescriptor::IsClones ; (; ); const. Return true if this proxy is for a TClonesArray. ; Definition at line 245 of file TBranchProxyClassDescriptor.cxx. ◆ IsEquivalent(). bool TBranchProxyClassDescriptor::IsEquivalent ; (; const TBranchProxyClassDescriptor * ; other). virtual . Return true if this description is the 'same' as the other decription. ; Definition at line 158 of file TBranchProxyClassDescriptor.cxx. ◆ IsLoaded() [1/2]. bool TBranchProxyClassDescriptor::IsLoaded ; (; ); const. Return true if the class needed by the branch is loaded. ; Definition at line 222 of file TBranchProxyClassDescriptor.cxx. ◆ IsLoaded() [2/2]. bool TBranchProxyClassDescriptor::IsLoaded ; (; const char * ; classname). static . Return true if the class needed by the branch is loaded. ; Definition at line 230 of file TBranchProxyClassDescriptor.cxx. ◆ IsSTL(). bool TBranchProxyClassDescriptor::IsSTL ; (; ); const. Return true if this proxy is for a TClonesArray. ; Definition at line 253 of file TBranchProxyClassDescriptor.cxx. ◆ NameToSymbol(). void TBranchProxyClassDescriptor::NameToSymbol ; (; ). private . Make the typename a proper class name without having the really deal with namespace and templates. ; Definition at line 37 of file TBranchProxyClassDescriptor.cxx. ◆ operator=(). TBranchProxyClassDescriptor & ROOT::Internal::TBranchProxyClassDescriptor::operator= ; (; const TBranchProxyClassDescriptor & ; ). inlineprivate . Definition at line 48 of file TBranchProxyClassDescriptor.h. ◆ OutputDecl(). void TBranchProxyClassDescriptor::OutputDecl ; (; FILE * ; hf, . int ; offset, . UInt_t ;  . ). Output the declaration and implementation of this emulation class. ; Definition at line 277 of file TBranchProxyClassDescriptor.cxx. ◆ Streame",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:3969,Security,hash,hash,3969," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:4663,Availability,error,error,4663,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:4752,Availability,error,error,4752,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:4907,Availability,error,error,4907,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:5204,Availability,error,error,5204,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:9288,Availability,error,error,9288,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:4669,Integrability,message,message,4669,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:5210,Integrability,message,message,5210,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:6200,Integrability,message,message,6200,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:9294,Integrability,message,message,9294,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:9667,Integrability,message,message,9667," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:1466,Modifiability,inherit,inherited,1466,"r *branchname, bool split=true, bool skipped=false, bool isleaflist=false);  Constructor. ;  ; const char * GetBranchName ();  Get the branch name. ;  ; const char * GetDataName ();  Get the name of the data member. ;  ; const char * GetTypeName ();  Get the name of the type of the data member. ;  ; TClass * IsA () const override;  ; bool IsEquivalent (const TBranchProxyDescriptor *other, bool inClass=false);  Return true if this description is the 'same' as the other description. ;  ; bool IsSplit () const;  Return true if the branch is split. ;  ; void OutputDecl (FILE *hf, int offset, UInt_t maxVarname);  Output the declaration corresponding to this proxy. ;  ; void OutputInit (FILE *hf, int offset, UInt_t maxVarname, const char *prefix);  Output the initialization corresponding to this proxy. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:3206,Modifiability,inherit,inherited,3206,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:4299,Modifiability,inherit,inheritance,4299,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:6298,Modifiability,inherit,inherits,6298,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:6415,Modifiability,inherit,inherits,6415,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:10168,Modifiability,inherit,inherited,10168,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; bool fBranchIsSkipped;  ; TString fBranchName;  ; TString fDataName;  ; bool fIsLeafList;  ; bool fIsSplit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ))",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:10378,Modifiability,inherit,inherited,10378,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; bool fBranchIsSkipped;  ; TString fBranchName;  ; TString fDataName;  ; bool fIsLeafList;  ; bool fIsSplit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ))",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:11039,Modifiability,inherit,inherited,11039,"c const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; bool fBranchIsSkipped;  ; TString fBranchName;  ; TString fDataName;  ; bool fIsLeafList;  ; bool fIsSplit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyDescriptor.h>. Inheritance diagram f",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:11680,Modifiability,inherit,inherited,11680,"l_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; bool fBranchIsSkipped;  ; TString fBranchName;  ; TString fDataName;  ; bool fIsLeafList;  ; bool fIsSplit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchProxyDescriptor(). TBranchProxyDescriptor::TBranchProxyDescriptor ; (; const char * ; dataname, . const char * ; type, . const char * ; branchname, . bool ; split = true, . bool ; skipped = false, . bool ; isleaflist = false . ). Constructor. ; Definition at line 37 of file TBranchProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TBranchProxyDescriptor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:11779,Modifiability,inherit,inherited,11779,"l_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; bool fBranchIsSkipped;  ; TString fBranchName;  ; TString fDataName;  ; bool fIsLeafList;  ; bool fIsSplit;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchProxyDescriptor(). TBranchProxyDescriptor::TBranchProxyDescriptor ; (; const char * ; dataname, . const char * ; type, . const char * ; branchname, . bool ; split = true, . bool ; skipped = false, . bool ; isleaflist = false . ). Constructor. ; Definition at line 37 of file TBranchProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TBranchProxyDescriptor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:11984,Modifiability,inherit,inherited,11984,"it;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TBranchProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchProxyDescriptor(). TBranchProxyDescriptor::TBranchProxyDescriptor ; (; const char * ; dataname, . const char * ; type, . const char * ; branchname, . bool ; split = true, . bool ; skipped = false, . bool ; isleaflist = false . ). Constructor. ; Definition at line 37 of file TBranchProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TBranchProxyDescriptor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Internal::TBranchProxyDescriptor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Internal::TBranchProxyDescriptor::Class_Version ; (",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html:2334,Security,hash,hash,2334," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:3742,Availability,error,error,3742,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:3831,Availability,error,error,3831,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:3986,Availability,error,error,3986,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:4283,Availability,error,error,4283,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:8752,Availability,error,error,8752," the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Cl",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:3748,Integrability,message,message,3748,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:4289,Integrability,message,message,4289,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:5491,Integrability,message,message,5491,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:8758,Integrability,message,message,8758," the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Cl",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:9131,Integrability,message,message,9131," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking o",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:605,Modifiability,inherit,inherited,605,". ROOT: ROOT::Internal::TCheckHashRecursiveRemoveConsistency Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::Internal::TCheckHashRecursiveRemoveConsistency Class Reference. . Definition at line 38 of file TCheckHashRecursiveRemoveConsistency.h. Classes; struct  Value;  . Public Types; enum  EResult { kInconsistent; , kInconclusive; , kConsistent; };  ; using Value_t = Value;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCheckHashRecursiveRemoveConsistency ();  ;  ~TCheckHashRecursiveRemoveConsistency ();  ; void Add (TObject *obj);  ; EResult CheckRecursiveRemove (TClass &classRef);  ; TClass * FindMissingRecursiveRemove (TClass &classRef);  ; EResult HasConsistentHashMember (TClass &classRef);  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ; void SlowRemove (TObject *obj);  ; void Streamer (TBuffer &R__b) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool VerifyRecursiveRemove (const char *classname);  ; bool VerifyRecursiveRemove (TClass &classRef);  ;  Public Member Functions inherited from TObje",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:1981,Modifiability,inherit,inherited,1981,"StatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCheckHashRecursiveRemoveConsistency ();  ;  ~TCheckHashRecursiveRemoveConsistency ();  ; void Add (TObject *obj);  ; EResult CheckRecursiveRemove (TClass &classRef);  ; TClass * FindMissingRecursiveRemove (TClass &classRef);  ; EResult HasConsistentHashMember (TClass &classRef);  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ; void SlowRemove (TObject *obj);  ; void Streamer (TBuffer &R__b) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool VerifyRecursiveRemove (const char *classname);  ; bool VerifyRecursiveRemove (TClass &classRef);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:3378,Modifiability,inherit,inheritance,3378,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:5589,Modifiability,inherit,inherits,5589,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:5706,Modifiability,inherit,inherits,5706,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:9673,Modifiability,inherit,inherited,9673," virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::list< Value > fCont;  ; std::mutex fMutex;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/meta/src/TCheck",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:10276,Modifiability,inherit,inherited,10276,"ect to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::list< Value > fCont;  ; std::mutex fMutex;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/meta/src/TCheckHashRecursiveRemoveConsistency.h>. Inheritance diagram for ROOT::Internal::TCheckHashRecursiveRemoveConsistency:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Value_t. using ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Value_t = Value. Definition at line 44 of file TCheckHashRecursiveRemoveConsistency.h. Member Enumeration Documentation. ◆ EResult. enum ROOT::Internal::TCheckHashRecursiveRemoveConsistency::EResult. EnumeratorkInconsistent ; kInconclusive ; kConsistent . Definition at line 114 of file TCheckHashRecursiveRemoveConsistency.h. Constructor & Destructor Documentation. ◆ TCheckHashRecursiveRemoveConsistency",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:10375,Modifiability,inherit,inherited,10375,"ect to the current directory. ;  . Static Public Member Functions; static bool Check (TClass &classRef);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::list< Value > fCont;  ; std::mutex fMutex;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/meta/src/TCheckHashRecursiveRemoveConsistency.h>. Inheritance diagram for ROOT::Internal::TCheckHashRecursiveRemoveConsistency:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Value_t. using ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Value_t = Value. Definition at line 44 of file TCheckHashRecursiveRemoveConsistency.h. Member Enumeration Documentation. ◆ EResult. enum ROOT::Internal::TCheckHashRecursiveRemoveConsistency::EResult. EnumeratorkInconsistent ; kInconclusive ; kConsistent . Definition at line 114 of file TCheckHashRecursiveRemoveConsistency.h. Constructor & Destructor Documentation. ◆ TCheckHashRecursiveRemoveConsistency",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:5220,Security,hash,hash,5220," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:2371,Availability,avail,available,2371," argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (M",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:2160,Energy Efficiency,reduce,reduce,2160,"arameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:353,Integrability,interface,interface,353,". ROOT: ROOT::Internal::TExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third ar",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:432,Integrability,depend,depending,432,". ROOT: ROOT::Internal::TExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third ar",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:1702,Integrability,wrap,wrapped,1702,"imes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the n",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:3169,Integrability,interface,interface,3169,"ould be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (Map) and accumulate the results into a single value (Reduce).Definition TExecutor.hxx:213; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; v@ vDefinition rootcling_impl.cxx:3699. Definition at line 37 of file TExecutor.hxx. Classes; struct  MapRetType;  Helper class to get the correct return type from the Map function, necessary to infer the ResolveExecutorAndMap function type. More...;  ; struct  MapRetType< F, unsigned >;  . Public Member Functions;  TExecutor (const TExecutor &)=delete;  ;  TExecutor (ROOT::EExecutionPolicy execPolicy, unsigned nWorkers=0);  Class constructor. ;  ;  TExecutor (unsigned nWorkers=0);  Class constructor. ;  ; unsigned GetPoolSize () const;  Return the number of pooled workers. ;  ; template<class F ,",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:14463,Integrability,wrap,wrapping,14463,"emplate<class F , class T , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector. ; Implementation of the Map method.; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 184 of file TExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 162 of file TExecutor.hxx. ◆ MapReduce() [1/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:5857,Modifiability,inherit,inherited,5857,"t_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc, unsigned nChunks) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >;  Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutor & operator= (const TExecutor &)=delete;  ; ROOT::EExecutionPolicy Policy () const;  Return the execution policy the executor is set to. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:6815,Modifiability,inherit,inheriting,6815,"r is set to. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:7662,Modifiability,inherit,inheriting,7662,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; using Unused_t = ROOT::TSequentialExecutor;  . Private Member Functions; templa",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:10120,Modifiability,inherit,inherited,10120,"ond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; template<class F , class T > ; auto ResolveExecutorAndMap (F func, T &&args) -> std::vector< typename MapRetType< F, typename std::decay< T >::type >::type >;  Function called from Map to select and execute the correct Executor according to the set Execution Policy. ;  . Private Attributes; ROOT::EExecutionPolicy fExecPolicy;  ; std::unique_ptr< ROOT::TProcessExecutor > fProcessExecutor;  ; std::unique_ptr< ROOT::TSequentialExecutor > fSequentialExecutor;  ; std::unique_ptr< ROOT::TThreadExecutor > fThreadExecutor;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TExecutor.hxx>. Inheritance diagram for ROOT::Internal::TExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Unused_t. using ROOT::Internal::TExecutor::Unused_t = ROOT::TSequentialExecutor. private . Definition at line 101 of file TExecutor.hxx. Constructor & Destructor Documentation. ◆ TExecutor() [1/3]. ROOT::Internal::TExecutor::TExecutor ; (; unsigned ; nWorkers = 0). inlineexplicit . Class constructor. ; Sets the default execution policy and initializes the corresponding executor. Defaults to multithreaded execution policy if ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:2646,Performance,optimiz,optimization,2646,"ed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (Map) and accumulate the results into a single value (Reduce).Definition TExecutor.hxx:213; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; v@ vDefinition rootcling_impl.cxx:3",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:15069,Performance,perform,performs,15069,"pl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 162 of file TExecutor.hxx. ◆ MapReduce() [1/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 305 of file TExecutor.hxx. ◆ MapReduce() [2/5]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function over a sequence of indexes (Map) and accumulate",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:16264,Performance,perform,performs,16264,"lements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 305 of file TExecutor.hxx. ◆ MapReduce() [2/5]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsSequence of indexes to execute func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 236 of file TExecutor.hxx. ◆ MapReduce() [3/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:17432,Performance,perform,performs,17432,"gsSequence of indexes to execute func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 236 of file TExecutor.hxx. ◆ MapReduce() [3/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single valu",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:18596,Performance,perform,performs,18596," ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reducti",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:19717,Performance,perform,performs,19717,"e passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; nTimesNumber of times function should be called. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 213 of file TExecutor.hxx. ◆ operator=(). TExecutor & ROOT::Internal::TExecutor::operator= ; (; const TExecutor & ; ). delete . ◆ Policy(). ROOT::EExecutionPolicy ROOT::Internal::TExecutor::Policy ; (; ); const. inline . Return the execution policy the executor is set to. ; Definition at line 57 of file TExecutor.hxx. ◆ ResolveExecutorAndMap(). template<c",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:2475,Safety,avoid,avoid,2475," argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (M",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html:1210,Usability,simpl,simply,1210,"ns |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (c",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4440,Availability,error,error,4440,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4529,Availability,error,error,4529,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4684,Availability,error,error,4684,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4981,Availability,error,error,4981,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:9065,Availability,error,error,9065,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4446,Integrability,message,message,4446,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4987,Integrability,message,message,4987,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:5977,Integrability,message,message,5977,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:9071,Integrability,message,message,9071,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:9444,Integrability,message,message,9444," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:1243,Modifiability,inherit,inherited,1243,"e Attributes |; List of all members ; ROOT::Internal::TFriendProxyDescriptor Class Reference. . Definition at line 22 of file TFriendProxyDescriptor.h. Public Member Functions;  TFriendProxyDescriptor (const char *treename, const char *aliasname, Int_t index);  Constructor. ;  ; Int_t GetIndex () const;  ; TList * GetListOfTopProxies ();  ; TClass * IsA () const override;  ; bool IsDuplicate ();  ; bool IsEquivalent (const TFriendProxyDescriptor *other);  Return true if this descriptor and the other are equivalent (describe the same entity). ;  ; void OutputClassDecl (FILE *hf, int offset, UInt_t maxVarname);  Print the declaration needed for this descriptor. ;  ; void OutputDecl (FILE *hf, int offset, UInt_t maxVarname);  Print the declaration needed for this descriptor. ;  ; void SetDuplicate ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:2983,Modifiability,inherit,inherited,2983,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:4076,Modifiability,inherit,inheritance,4076,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:6075,Modifiability,inherit,inherits,6075,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:6192,Modifiability,inherit,inherits,6192,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:9945,Modifiability,inherit,inherited,9945,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TFriendProxyDescriptor (const TFriendProxyDescriptor &b);  ; TFriendProxyDescriptor & operator= (const TFriendProxyDescriptor &b);  . Private Attributes; bool fDuplicate;  ; Int_t fIndex;  ; TList fListOfTopProxies;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:10155,Modifiability,inherit,inherited,10155,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TFriendProxyDescriptor (const TFriendProxyDescriptor &b);  ; TFriendProxyDescriptor & operator= (const TFriendProxyDescriptor &b);  . Private Attributes; bool fDuplicate;  ; Int_t fIndex;  ; TList fListOfTopProxies;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:10931,Modifiability,inherit,inherited,10931,"  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TFriendProxyDescriptor (const TFriendProxyDescriptor &b);  ; TFriendProxyDescriptor & operator= (const TFriendProxyDescriptor &b);  . Private Attributes; bool fDuplicate;  ; Int_t fIndex;  ; TList fListOfTopProxies;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFriendProxyDescriptor.h>. Inheritance diagram f",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:11572,Modifiability,inherit,inherited,11572,"ptor (const TFriendProxyDescriptor &b);  ; TFriendProxyDescriptor & operator= (const TFriendProxyDescriptor &b);  . Private Attributes; bool fDuplicate;  ; Int_t fIndex;  ; TList fListOfTopProxies;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFriendProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TFriendProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFriendProxyDescriptor() [1/2]. ROOT::Internal::TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const TFriendProxyDescriptor & ; b). private . ◆ TFriendProxyDescriptor() [2/2]. TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const char * ; treename, . const char * ; aliasname, . Int_t ; index . ). Constructor. ; Definition at line 31 of file TFriendProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TFriendProxyDescriptor::Class ; (; ). static . ReturnsTCl",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:11671,Modifiability,inherit,inherited,11671,"ptor (const TFriendProxyDescriptor &b);  ; TFriendProxyDescriptor & operator= (const TFriendProxyDescriptor &b);  . Private Attributes; bool fDuplicate;  ; Int_t fIndex;  ; TList fListOfTopProxies;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFriendProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TFriendProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFriendProxyDescriptor() [1/2]. ROOT::Internal::TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const TFriendProxyDescriptor & ; b). private . ◆ TFriendProxyDescriptor() [2/2]. TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const char * ; treename, . const char * ; aliasname, . Int_t ; index . ). Constructor. ; Definition at line 31 of file TFriendProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TFriendProxyDescriptor::Class ; (; ). static . ReturnsTCl",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:11876,Modifiability,inherit,inherited,11876,"es;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFriendProxyDescriptor.h>. Inheritance diagram for ROOT::Internal::TFriendProxyDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFriendProxyDescriptor() [1/2]. ROOT::Internal::TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const TFriendProxyDescriptor & ; b). private . ◆ TFriendProxyDescriptor() [2/2]. TFriendProxyDescriptor::TFriendProxyDescriptor ; (; const char * ; treename, . const char * ; aliasname, . Int_t ; index . ). Constructor. ; Definition at line 31 of file TFriendProxyDescriptor.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TFriendProxyDescriptor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Internal::TFriendProxyDescriptor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constex",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:2111,Security,hash,hash,2111," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4103,Availability,error,error,4103,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4192,Availability,error,error,4192,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4347,Availability,error,error,4347,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4644,Availability,error,error,4644,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:8587,Availability,error,error,8587,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4109,Integrability,message,message,4109,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4650,Integrability,message,message,4650,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:5640,Integrability,message,message,5640,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:8593,Integrability,message,message,8593,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:8966,Integrability,message,message,8966," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:1008,Modifiability,inherit,inherited,1008,"aseBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::THnBaseBrowsable Class Reference. ; TBrowser helper for THnBase. ; Definition at line 300 of file THnBase.h. Public Member Functions;  THnBaseBrowsable (THnBase *hist, Int_t axis);  Construct a THnBaseBrowsable. ;  ;  ~THnBaseBrowsable () override;  Destruct a THnBaseBrowsable. ;  ; void Browse (TBrowser *b) override;  Browse an axis of a THnBase, i.e. draw its projection. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:2748,Modifiability,inherit,inherited,2748,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:3739,Modifiability,inherit,inheritance,3739,"ions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:5738,Modifiability,inherit,inherits,5738,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:5855,Modifiability,inherit,inherits,5855,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:9467,Modifiability,inherit,inherited,9467,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Int_t fAxis;  ; THnBase * fHist;  ; TH1 * fProj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecated",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:9677,Modifiability,inherit,inherited,9677,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Int_t fAxis;  ; THnBase * fHist;  ; TH1 * fProj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecated",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:10279,Modifiability,inherit,inherited,10279,");  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Int_t fAxis;  ; THnBase * fHist;  ; TH1 * fProj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <THnBase.h>. Inheritance diagram for ROOT::Intern",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:10920,Modifiability,inherit,inherited,10920,"t destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Int_t fAxis;  ; THnBase * fHist;  ; TH1 * fProj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <THnBase.h>. Inheritance diagram for ROOT::Internal::THnBaseBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::THnBaseBrowsable ; (; THnBase * ; hist, . Int_t ; axis . ). Construct a THnBaseBrowsable. ; Definition at line 1633 of file THnBase.cxx. ◆ ~THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::~THnBaseBrowsable ; (; ). override . Destruct a THnBaseBrowsable. ; Definition at line 1649 of file THnBase.cxx. Member Function Documentation. ◆ Browse(). void ROOT::Internal::THnBaseBrowsable::Browse ; (; TBrowser * ; b). overridevirtual . Browse an axis of a THnBase, i.e. draw its",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:11019,Modifiability,inherit,inherited,11019,"t destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Int_t fAxis;  ; THnBase * fHist;  ; TH1 * fProj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <THnBase.h>. Inheritance diagram for ROOT::Internal::THnBaseBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::THnBaseBrowsable ; (; THnBase * ; hist, . Int_t ; axis . ). Construct a THnBaseBrowsable. ; Definition at line 1633 of file THnBase.cxx. ◆ ~THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::~THnBaseBrowsable ; (; ). override . Destruct a THnBaseBrowsable. ; Definition at line 1649 of file THnBase.cxx. Member Function Documentation. ◆ Browse(). void ROOT::Internal::THnBaseBrowsable::Browse ; (; TBrowser * ; b). overridevirtual . Browse an axis of a THnBase, i.e. draw its",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:11224,Modifiability,inherit,inherited,11224,"oj;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <THnBase.h>. Inheritance diagram for ROOT::Internal::THnBaseBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::THnBaseBrowsable ; (; THnBase * ; hist, . Int_t ; axis . ). Construct a THnBaseBrowsable. ; Definition at line 1633 of file THnBase.cxx. ◆ ~THnBaseBrowsable(). ROOT::Internal::THnBaseBrowsable::~THnBaseBrowsable ; (; ). override . Destruct a THnBaseBrowsable. ; Definition at line 1649 of file THnBase.cxx. Member Function Documentation. ◆ Browse(). void ROOT::Internal::THnBaseBrowsable::Browse ; (; TBrowser * ; b). overridevirtual . Browse an axis of a THnBase, i.e. draw its projection. ; Reimplemented from TObject.; Definition at line 1657 of file THnBase.cxx. ◆ Class(). static TClass * ROOT::Internal::THnBaseBrowsable::Class ; (; ). static . ReturnsTClass descri",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:1876,Security,hash,hash,1876," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3411,Availability,error,error,3411,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3500,Availability,error,error,3500,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3655,Availability,error,error,3655,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3952,Availability,error,error,3952,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:8387,Availability,error,error,8387," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3417,Integrability,message,message,3417,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3958,Integrability,message,message,3958,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:5160,Integrability,message,message,5160,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:8393,Integrability,message,message,8393," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:8766,Integrability,message,message,8766," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; stati",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:687,Modifiability,inherit,inherited,687,". ROOT: ROOT::Internal::TreeUtils::RNoCleanupNotifier Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TreeUtils::RNoCleanupNotifier Class Reference. . Definition at line 64 of file InternalTreeUtils.hxx. Public Member Functions;  RNoCleanupNotifier ();  ; TClass * IsA () const override;  ; void RegisterChain (TChain &c);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >;  TNotifyLink (RNoCleanupNotifierHelper *subscriber);  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Call Notify on our subscriber and propagate the call to the next link. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNotifyLinkBase; void Clear (Option_t *="""") override;  ; TObject * GetNext () const;  ; TClass * IsA () const override;  ; Bool_t IsLinked ();  ; template<class Chain > ; void PrependLink (Chain &chain);  Set this link as the head of the chain's list of notify subscribers. ;  ; template<class Chain > ; void RemoveLink (Chain &chain);  Remove this link from a chain's list of notify subscribers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstrac",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:1105,Modifiability,inherit,inherited,1105," Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TreeUtils::RNoCleanupNotifier Class Reference. . Definition at line 64 of file InternalTreeUtils.hxx. Public Member Functions;  RNoCleanupNotifier ();  ; TClass * IsA () const override;  ; void RegisterChain (TChain &c);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >;  TNotifyLink (RNoCleanupNotifierHelper *subscriber);  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Call Notify on our subscriber and propagate the call to the next link. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNotifyLinkBase; void Clear (Option_t *="""") override;  ; TObject * GetNext () const;  ; TClass * IsA () const override;  ; Bool_t IsLinked ();  ; template<class Chain > ; void PrependLink (Chain &chain);  Set this link as the head of the chain's list of notify subscribers. ;  ; template<class Chain > ; void RemoveLink (Chain &chain);  Remove this link from a chain's list of notify subscribers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:1689,Modifiability,inherit,inherited,1689,"Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >;  TNotifyLink (RNoCleanupNotifierHelper *subscriber);  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Call Notify on our subscriber and propagate the call to the next link. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNotifyLinkBase; void Clear (Option_t *="""") override;  ; TObject * GetNext () const;  ; TClass * IsA () const override;  ; Bool_t IsLinked ();  ; template<class Chain > ; void PrependLink (Chain &chain);  Set this link as the head of the chain's list of notify subscribers. ;  ; template<class Chain > ; void RemoveLink (Chain &chain);  Remove this link from a chain's list of notify subscribers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:3047,Modifiability,inherit,inheritance,3047,""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:5258,Modifiability,inherit,inherits,5258,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:5375,Modifiability,inherit,inherits,5375,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:9267,Modifiability,inherit,inherited,9267," UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:9510,Modifiability,inherit,inherited,9510," UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:9729,Modifiability,inherit,inherited,9729," UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:10333,Modifiability,inherit,inherited,10333,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNotifyLinkBase; TObject * fNext = nullptr;  Next nod",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:10433,Modifiability,inherit,inherited,10433,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNotifyLinkBase; TObject * fNext = nullptr;  Next nod",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:11074,Modifiability,inherit,inherited,11074," in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNotifyLinkBase; TObject * fNext = nullptr;  Next node in a TChain's list of subscribers. ;  ; TNotifyLinkBase * fPrevious = nullptr;  Previous node in a TChain's list of subscribers to its notification. ;  . #include <ROOT/InternalTreeUtils.hxx>. Inheritance diagram for ROOT::Internal::TreeUtils::RNoCleanupNotifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RNoCleanupNotifier(). ROOT::Internal::TreeUtils::RNoCleanupNotifier::RNoCleanupNotifier ; (; ). inline . Definition at line 68 of file InternalTreeUtils.hxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name()",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:11173,Modifiability,inherit,inherited,11173," in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNotifyLinkBase; TObject * fNext = nullptr;  Next node in a TChain's list of subscribers. ;  ; TNotifyLinkBase * fPrevious = nullptr;  Previous node in a TChain's list of subscribers to its notification. ;  . #include <ROOT/InternalTreeUtils.hxx>. Inheritance diagram for ROOT::Internal::TreeUtils::RNoCleanupNotifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RNoCleanupNotifier(). ROOT::Internal::TreeUtils::RNoCleanupNotifier::RNoCleanupNotifier ; (; ). inline . Definition at line 68 of file InternalTreeUtils.hxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name()",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:11378,Modifiability,inherit,inherited,11378,"( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNotifyLinkBase; TObject * fNext = nullptr;  Next node in a TChain's list of subscribers. ;  ; TNotifyLinkBase * fPrevious = nullptr;  Previous node in a TChain's list of subscribers to its notification. ;  . #include <ROOT/InternalTreeUtils.hxx>. Inheritance diagram for ROOT::Internal::TreeUtils::RNoCleanupNotifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RNoCleanupNotifier(). ROOT::Internal::TreeUtils::RNoCleanupNotifier::RNoCleanupNotifier ; (; ). inline . Definition at line 68 of file InternalTreeUtils.hxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Internal::TreeUtils::RNoCleanupNotifier",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:4889,Security,hash,hash,4889," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:2967,Availability,error,error,2967,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:3056,Availability,error,error,3056,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:3211,Availability,error,error,3211,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:3508,Availability,error,error,3508,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8182,Availability,error,error,8182,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:2973,Integrability,message,message,2973,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:3514,Integrability,message,message,3514,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:4716,Integrability,message,message,4716,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const ch",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8188,Integrability,message,message,8188,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8561,Integrability,message,message,8561,"rimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:435,Modifiability,inherit,inherited,435,". ROOT: ROOT::Internal::TTreeReaderDescriptor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Internal::TTreeReaderDescriptor Class Reference. . Definition at line 40 of file TTreeReaderGenerator.h. Public Types; enum  ReaderType { kValue; , kArray; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeReaderDescriptor (ReaderType type, TString dataType, TString name, TString branchName);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void C",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:1206,Modifiability,inherit,inherited,1206,"rs |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Internal::TTreeReaderDescriptor Class Reference. . Definition at line 40 of file TTreeReaderGenerator.h. Public Types; enum  ReaderType { kValue; , kArray; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeReaderDescriptor (ReaderType type, TString dataType, TString name, TString branchName);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Comp",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:2603,Modifiability,inherit,inheritance,2603,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:4814,Modifiability,inherit,inherits,4814,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:4931,Modifiability,inherit,inherits,4931,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not pro",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:9127,Modifiability,inherit,inherited,9127,"NE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TTreeReaderDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ReaderType. enum ROOT::Internal::TTreeReaderDescriptor::ReaderType. Enume",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:9630,Modifiability,inherit,inherited,9630,"ullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TTreeReaderDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ReaderType. enum ROOT::Internal::TTreeReaderDescriptor::ReaderType. EnumeratorkValue ; kArray . Definition at line 42 of file TTreeReaderGenerator.h. Constructor & Destructor Documentation. ◆ TTreeReaderDescriptor(). ROOT::Internal::TTreeReaderDescriptor::TTreeReaderDescriptor ; (; ReaderType ; type, . TString ; dataType, . TString ; name, . TString ; branchName . ). inline . Definition at line 48 of file TTreeReaderGenerator.h. Member Data Documentation. ◆ fBranchName. TString ROOT::Internal::TTreeReaderDescriptor::fBranchName. Branch corresponding to the reader. ; Definition at line 46 of file",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:9729,Modifiability,inherit,inherited,9729,"ullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TTreeReaderDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ReaderType. enum ROOT::Internal::TTreeReaderDescriptor::ReaderType. EnumeratorkValue ; kArray . Definition at line 42 of file TTreeReaderGenerator.h. Constructor & Destructor Documentation. ◆ TTreeReaderDescriptor(). ROOT::Internal::TTreeReaderDescriptor::TTreeReaderDescriptor ; (; ReaderType ; type, . TString ; dataType, . TString ; name, . TString ; branchName . ). inline . Definition at line 48 of file TTreeReaderGenerator.h. Member Data Documentation. ◆ fBranchName. TString ROOT::Internal::TTreeReaderDescriptor::fBranchName. Branch corresponding to the reader. ; Definition at line 46 of file",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:4445,Security,hash,hash,4445," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:3023,Availability,error,error,3023,"tion at line 142 of file RVec.hxx. Constructor & Destructor Documentation. ◆ SmallVectorBase() [1/2]. ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBase ; (; ). protecteddelete . ◆ SmallVectorBase() [2/2]. ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBase ; (; void * ; FirstEl, . size_t ; TotalCapacity . ). inlineprotected . Definition at line 156 of file RVec.hxx. Member Function Documentation. ◆ capacity(). size_t ROOT::Internal::VecOps::SmallVectorBase::capacity ; (; ); const. inlinenoexcept . Definition at line 175 of file RVec.hxx. ◆ empty(). bool ROOT::Internal::VecOps::SmallVectorBase::empty ; (; ); const. inline . Definition at line 177 of file RVec.hxx. ◆ grow_pod(). void ROOT::Internal::VecOps::SmallVectorBase::grow_pod ; (; void * ; FirstEl, . size_t ; MinSize, . size_t ; TSize . ). protected . This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ; This function will report a fatal error if it cannot increase capacity. ; Definition at line 51 of file RVec.cxx. ◆ Owns(). bool ROOT::Internal::VecOps::SmallVectorBase::Owns ; (; ); const. inlineprotected . If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inl",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:4301,Availability,avail,available,4301,"cting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:4321,Deployability,update,update,4321,"cting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:1031,Energy Efficiency,reduce,reduce,1031,". ROOT: ROOT::Internal::VecOps::SmallVectorBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Internal::VecOps::SmallVectorBase Class Reference. ; This is all the stuff common to all SmallVectors. ; Definition at line 138 of file RVec.hxx. Public Types; using Size_T = int32_t;  . Public Member Functions; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  . Protected Attributes; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Size_T. using ROOT::Internal::VecOps::SmallVectorBase::Si",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:2962,Energy Efficiency,reduce,reduce,2962,"Typedef Documentation. ◆ Size_T. using ROOT::Internal::VecOps::SmallVectorBase::Size_T = int32_t. Definition at line 142 of file RVec.hxx. Constructor & Destructor Documentation. ◆ SmallVectorBase() [1/2]. ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBase ; (; ). protecteddelete . ◆ SmallVectorBase() [2/2]. ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBase ; (; void * ; FirstEl, . size_t ; TotalCapacity . ). inlineprotected . Definition at line 156 of file RVec.hxx. Member Function Documentation. ◆ capacity(). size_t ROOT::Internal::VecOps::SmallVectorBase::capacity ; (; ); const. inlinenoexcept . Definition at line 175 of file RVec.hxx. ◆ empty(). bool ROOT::Internal::VecOps::SmallVectorBase::empty ; (; ); const. inline . Definition at line 177 of file RVec.hxx. ◆ grow_pod(). void ROOT::Internal::VecOps::SmallVectorBase::grow_pod ; (; void * ; FirstEl, . size_t ; MinSize, . size_t ; TSize . ). protected . This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ; This function will report a fatal error if it cannot increase capacity. ; Definition at line 51 of file RVec.cxx. ◆ Owns(). bool ROOT::Internal::VecOps::SmallVectorBase::Owns ; (; ); const. inlineprotected . If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of f",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:4349,Safety,avoid,avoids,4349,"void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= 0. ; Definition at line 148 of file RVec.hxx. Libraries for ROOT::Internal::VecOps::SmallVectorBase:. [legend]; The documentati",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:2768,Energy Efficiency,allocate,allocated,2768,"ter data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:2847,Energy Efficiency,allocate,allocated,2847,"ter data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:3157,Energy Efficiency,allocate,allocated,3157," () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", con",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:3596,Energy Efficiency,reduce,reduce,3596,":VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is alread",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:6859,Energy Efficiency,allocate,allocated,6859,"ly_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::SmallVectorTemplateBase ; (; size_t ; Size). inlineprotected . Definition at line 330 of file RVec.hxx. Member Function Documentation. ◆ destroy_range(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . static void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::destroy_range ; (; T * ; S, . T * ; E . ). inlinestaticprotected . Definition at line 332 of file RVec.hxx. ◆ grow(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::grow ; (; size_t ; MinSize = 0). protected . Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ; Guarantees space for at least one more element, or MinSize more elements if specified. . ◆ pop_back(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::pop_back ; (; ). inline . Definition at line 378 of file RVec.hxx. ◆ push_back() [1/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::push_back ; (; const T & ; Elt). inline . Definition at line 362 of file RVec.hxx. ◆ push_back() [2/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:6938,Energy Efficiency,allocate,allocated,6938,"ly_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::SmallVectorTemplateBase ; (; size_t ; Size). inlineprotected . Definition at line 330 of file RVec.hxx. Member Function Documentation. ◆ destroy_range(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . static void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::destroy_range ; (; T * ; S, . T * ; E . ). inlinestaticprotected . Definition at line 332 of file RVec.hxx. ◆ grow(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::grow ; (; size_t ; MinSize = 0). protected . Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ; Guarantees space for at least one more element, or MinSize more elements if specified. . ◆ pop_back(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::pop_back ; (; ). inline . Definition at line 378 of file RVec.hxx. ◆ push_back() [1/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::push_back ; (; const T & ; Elt). inline . Definition at line 362 of file RVec.hxx. ◆ push_back() [2/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:1283,Modifiability,inherit,inherited,1283,"y_move_constructible<T>::value) && std::is_trivially_destructible<T>::value>; class ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that are designed to work with non-trivial T's. ; We approximate is_trivially_copyable with trivial move/copy construction and trivial destruction. While the standard doesn't specify that you're allowed copy these types with memcpy, there is no way for the type to observe this. This catches the important case of std::pair<POD, POD>, which is not trivially assignable. ; Definition at line 328 of file RVec.hxx. Public Member Functions; void pop_back ();  ; void push_back (const T &Elt);  ; void push_back (T &&Elt);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; b",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:2402,Modifiability,inherit,inherited,2402,"s inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions in",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:2898,Modifiability,inherit,inherited,2898," () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", con",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:3279,Modifiability,inherit,inherited,3279,":VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is alread",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:4300,Modifiability,inherit,inherited,4300,"lete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Static Protected Member Functions; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::Smal",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:4708,Modifiability,inherit,inherited,4708,"eeded. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SmallVectorTemplateBase(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:5209,Modifiability,inherit,inherited,5209,"eeded. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SmallVectorTemplateBase(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:5314,Modifiability,inherit,inherited,5314,"eeded. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SmallVectorTemplateBase(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:2710,Energy Efficiency,allocate,allocated,2710,"onst noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using Base = SmallVectorBase;  . Private Member Functions; void * getFirstEl () const;  Find the address of the first element. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_ma",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:3149,Energy Efficiency,reduce,reduce,3149,"_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using Base = SmallVectorBase;  . Private Member Functions; void * getFirstEl () const;  Find the address of the first element. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:10725,Energy Efficiency,allocate,allocated,10725," 284 of file RVec.hxx. ◆ front() [2/2]. template<typename T > . const_reference ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::front ; (; ); const. inline . Definition at line 292 of file RVec.hxx. ◆ getFirstEl(). template<typename T > . void * ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::getFirstEl ; (; ); const. inlineprivate . Find the address of the first element. ; For this pointer math to be valid with small-size of 0 for T with lots of alignment, it's important that SmallVectorStorage is properly-aligned even for small-size of 0. ; Definition at line 212 of file RVec.hxx. ◆ grow_pod(). template<typename T > . void ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::grow_pod ; (; size_t ; MinSize, . size_t ; TSize . ). inlineprotected . Definition at line 222 of file RVec.hxx. ◆ isSmall(). template<typename T > . bool ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::isSmall ; (; ); const. inlineprotected . Return true if this is a smallvector which has not had dynamic memory allocated for it. ; Definition at line 226 of file RVec.hxx. ◆ max_size(). template<typename T > . size_type ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::max_size ; (; ); const. inlinenoexcept . Definition at line 275 of file RVec.hxx. ◆ rbegin() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ); const. inlinenoexcept . Definition at line 268 of file RVec.hxx. ◆ rbegin() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ). inlinenoexcept . Definition at line 267 of file RVec.hxx. ◆ rend() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ); const. inlinenoexcept . Definition at line 271 of file RVec.hxx. ◆ rend() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ). inlinenoexcept",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:557,Integrability,depend,depend,557,". ROOT: ROOT::Internal::VecOps::SmallVectorTemplateCommon< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; List of all members ; ROOT::Internal::VecOps::SmallVectorTemplateCommon< T > Class Template Reference. ; template<typename T>; class ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. ; Definition at line 206 of file RVec.hxx. Public Types; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:1083,Modifiability,inherit,inherited,1083,". ROOT: ROOT::Internal::VecOps::SmallVectorTemplateCommon< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; List of all members ; ROOT::Internal::VecOps::SmallVectorTemplateCommon< T > Class Template Reference. ; template<typename T>; class ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. ; Definition at line 206 of file RVec.hxx. Public Types; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:2239,Modifiability,inherit,inherited,2239,"ps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like da",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:2832,Modifiability,inherit,inherited,2832,"_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using Base = SmallVectorBase;  . Private Member Functions; void * getFirstEl () const;  Find the address of the first element. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:3530,Modifiability,inherit,inherited,3530,"ow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using Base = SmallVectorBase;  . Private Member Functions; void * getFirstEl () const;  Find the address of the first element. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Base. template<typename T > . using ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::Base = SmallVectorBase. private . Definition at line 207 of file RVec.hxx. ◆ const_iterator. template<typename T > . ",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:3916,Modifiability,inherit,inherited,3916,"e_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using Base = SmallVectorBase;  . Private Member Functions; void * getFirstEl () const;  Find the address of the first element. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Base. template<typename T > . using ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::Base = SmallVectorBase. private . Definition at line 207 of file RVec.hxx. ◆ const_iterator. template<typename T > . using ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::const_iterator = const T *. Definition at line 244 of file RVec.hxx. ◆ const_pointer. template<typename T > . using ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::const_pointer = const T *. Definition at line 252 of file RVec.hxx. ◆ const_reference. template<typename T > . using ROOT::Internal::VecOps::SmallV",MatchSource.WIKI,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1289,Availability,error,error,1289,"merical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some anal",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1317,Availability,toler,tolerance,1317,"merical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some anal",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1343,Availability,error,error,1343,"merical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some anal",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1375,Availability,toler,tolerance,1375,"merical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some anal",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3128,Availability,toler,tolerance,3128,"on is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  ge",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3392,Availability,toler,tolerance,3392," the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3637,Availability,error,error,3637,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4196,Availability,error,error,4196,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4336,Availability,toler,tolerance,4336,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4779,Availability,toler,tolerance,4779,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5451,Availability,toler,tolerance,5451,"  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5547,Availability,error,error,5547,"  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5821,Availability,error,error,5821,"  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5859,Availability,toler,tolerance,5859,"s inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6032,Availability,error,error,6032,"s inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6565,Availability,toler,tolerance,6565,"MaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function an",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6724,Availability,error,error,6724,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6756,Availability,toler,tolerance,6756,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6787,Availability,error,error,6787,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6819,Availability,toler,tolerance,6819,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6843,Availability,toler,tolerance,6843,"rance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegrat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:7626,Availability,toler,tolerance,7626,"s) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegratorMultiDim::~AdaptiveIntegratorMultiDim ; (; ). inlineoverride . destructor (no operations) ; Definition at line 113 of file AdaptiveIntegratorMultiDim.h. Member Function Documentation. ◆ DoIntegral(). double ROOT::Math::AdaptiveIntegratorMultiDim::DoIntegral ; (; const double * ; xmin, . const double * ; xmax, . bool ; absVal = false . ). protected . Definition at line 76 of file AdaptiveIntegratorMultiDim.cxx. ◆ Error(). double ROOT::Math::AdaptiveIntegratorMultiDim::Error ; (; ); const. inlineoverridevirtual . return integration error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 134 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [1/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . )",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:8402,Availability,error,error,8402," & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegratorMultiDim::~AdaptiveIntegratorMultiDim ; (; ). inlineoverride . destructor (no operations) ; Definition at line 113 of file AdaptiveIntegratorMultiDim.h. Member Function Documentation. ◆ DoIntegral(). double ROOT::Math::AdaptiveIntegratorMultiDim::DoIntegral ; (; const double * ; xmin, . const double * ; xmax, . bool ; absVal = false . ). protected . Definition at line 76 of file AdaptiveIntegratorMultiDim.cxx. ◆ Error(). double ROOT::Math::AdaptiveIntegratorMultiDim::Error ; (; ); const. inlineoverridevirtual . return integration error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 134 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [1/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMulti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:9822,Availability,error,error,9822,"IntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; D",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10267,Availability,toler,tolerance,10267,alculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::V,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:11513,Availability,toler,tolerance,11513," function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12273,Availability,error,error,12273,"rom ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12507,Availability,toler,tolerance,12507,"OOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function eval",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12835,Availability,error,error,12835,"ultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:13697,Availability,error,error,13697,on at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance ; Definition at line 187 of file AdaptiveIntegratorMultiDim.h. ◆ fResult. double ROOT::Math::AdaptiveIntegratorMultiDim::fResult. private . last integration result ; Definition at line 189 of file AdaptiveIntegratorMultiDim.h. ◆ fSize. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fSize. private . max size of working array (explode with dimension) ; Definition at line 185 of file AdaptiveIntegratorMultiDim.h. ◆ fStatus. int ROOT::Math::AdaptiveIntegratorMultiDim::fStatus. private . status of algorithm (error if not zero) ; Definition at line 193 of file AdaptiveIntegratorMultiDim.h. Libraries for ROOT::Math::AdaptiveIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h; math/mathcore/src/AdaptiveIntegratorMultiDi,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:13853,Availability,toler,tolerance,13853, Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance ; Definition at line 187 of file AdaptiveIntegratorMultiDim.h. ◆ fResult. double ROOT::Math::AdaptiveIntegratorMultiDim::fResult. private . last integration result ; Definition at line 189 of file AdaptiveIntegratorMultiDim.h. ◆ fSize. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fSize. private . max size of working array (explode with dimension) ; Definition at line 185 of file AdaptiveIntegratorMultiDim.h. ◆ fStatus. int ROOT::Math::AdaptiveIntegratorMultiDim::fStatus. private . status of algorithm (error if not zero) ; Definition at line 193 of file AdaptiveIntegratorMultiDim.h. Libraries for ROOT::Math::AdaptiveIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h; math/mathcore/src/AdaptiveIntegratorMultiDim.cxx. ROOTMathAdaptiveIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:14378,Availability,error,error,14378, Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance ; Definition at line 187 of file AdaptiveIntegratorMultiDim.h. ◆ fResult. double ROOT::Math::AdaptiveIntegratorMultiDim::fResult. private . last integration result ; Definition at line 189 of file AdaptiveIntegratorMultiDim.h. ◆ fSize. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fSize. private . max size of working array (explode with dimension) ; Definition at line 185 of file AdaptiveIntegratorMultiDim.h. ◆ fStatus. int ROOT::Math::AdaptiveIntegratorMultiDim::fStatus. private . status of algorithm (error if not zero) ; Definition at line 193 of file AdaptiveIntegratorMultiDim.h. Libraries for ROOT::Math::AdaptiveIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h; math/mathcore/src/AdaptiveIntegratorMultiDim.cxx. ROOTMathAdaptiveIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:437,Deployability,integrat,integration,437,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:572,Deployability,integrat,integration,572,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1919,Deployability,integrat,integration,1919,"o \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunctio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2100,Deployability,integrat,integration,2100,"+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2300,Deployability,integrat,integration,2300,"rance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2576,Deployability,integrat,integration,2576,"d.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2739,Deployability,integrat,integration,2739,"sult and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3625,Deployability,integrat,integration,3625,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4136,Deployability,integrat,integration,4136,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4258,Deployability,integrat,integration,4258,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4416,Deployability,integrat,integration,4416,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4901,Deployability,integrat,integration,4901,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5146,Deployability,integrat,integrator,5146,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5535,Deployability,integrat,integration,5535,"  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5896,Deployability,integrat,integration,5896,"s inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6684,Deployability,integrat,integration,6684,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:8390,Deployability,integrat,integration,8390," & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegratorMultiDim::~AdaptiveIntegratorMultiDim ; (; ). inlineoverride . destructor (no operations) ; Definition at line 113 of file AdaptiveIntegratorMultiDim.h. Member Function Documentation. ◆ DoIntegral(). double ROOT::Math::AdaptiveIntegratorMultiDim::DoIntegral ; (; const double * ; xmin, . const double * ; xmax, . bool ; absVal = false . ). protected . Definition at line 76 of file AdaptiveIntegratorMultiDim.cxx. ◆ Error(). double ROOT::Math::AdaptiveIntegratorMultiDim::Error ; (; ); const. inlineoverridevirtual . return integration error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 134 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [1/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMulti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:9584,Deployability,integrat,integration,9584,"double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunction",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10013,Deployability,integrat,integration,10013,). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Defin,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10521,Deployability,integrat,integration,10521,egration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:11933,Deployability,integrat,integration,11933,"T::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:11969,Deployability,integrat,integration,11969,"; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . De",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12823,Deployability,integrat,integration,12823,"ultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:14008,Deployability,integrat,integration,14008, Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance ; Definition at line 187 of file AdaptiveIntegratorMultiDim.h. ◆ fResult. double ROOT::Math::AdaptiveIntegratorMultiDim::fResult. private . last integration result ; Definition at line 189 of file AdaptiveIntegratorMultiDim.h. ◆ fSize. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fSize. private . max size of working array (explode with dimension) ; Definition at line 185 of file AdaptiveIntegratorMultiDim.h. ◆ fStatus. int ROOT::Math::AdaptiveIntegratorMultiDim::fStatus. private . status of algorithm (error if not zero) ; Definition at line 193 of file AdaptiveIntegratorMultiDim.h. Libraries for ROOT::Math::AdaptiveIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h; math/mathcore/src/AdaptiveIntegratorMultiDim.cxx. ROOTMathAdaptiveIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:417,Energy Efficiency,adapt,adaptive,417,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:539,Energy Efficiency,adapt,adaptive,539,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:678,Energy Efficiency,adapt,adapted,678,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2543,Energy Efficiency,adapt,adaptive,2543,"d.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2706,Energy Efficiency,adapt,adaptive,2706,"sult and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:437,Integrability,integrat,integration,437,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:572,Integrability,integrat,integration,572,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:724,Integrability,rout,routine,724,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1919,Integrability,integrat,integration,1919,"o \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunctio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2100,Integrability,integrat,integration,2100,"+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2167,Integrability,rout,routine,2167,"0minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maxim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2300,Integrability,integrat,integration,2300,"rance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2576,Integrability,integrat,integration,2576,"d.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2739,Integrability,integrat,integration,2739,"sult and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3625,Integrability,integrat,integration,3625,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4136,Integrability,integrat,integration,4136,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4258,Integrability,integrat,integration,4258,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4416,Integrability,integrat,integration,4416,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4472,Integrability,interface,interface,4472,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4901,Integrability,integrat,integration,4901,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5146,Integrability,integrat,integrator,5146,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5535,Integrability,integrat,integration,5535,"  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5896,Integrability,integrat,integration,5896,"s inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false);  . Private Attributes; double fAbsTol;  absolute tolerance ;  ; unsigned int fDim;  dimensionality of integrand ;  ; double fError;  integration error ;  ; const IMultiGenFunction * fFun;  ; unsigned int fMaxPts;  maximum number of function evaluation requested ;  ; unsigned int fMinPts;  minimum number of function evaluation requested ;  ; int fNEval;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6684,Integrability,integrat,integration,6684,"al;  number of function evaluation ;  ; double fRelError;  Relative error. ;  ; double fRelTol;  relative tolerance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:8390,Integrability,integrat,integration,8390," & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegratorMultiDim::~AdaptiveIntegratorMultiDim ; (; ). inlineoverride . destructor (no operations) ; Definition at line 113 of file AdaptiveIntegratorMultiDim.h. Member Function Documentation. ◆ DoIntegral(). double ROOT::Math::AdaptiveIntegratorMultiDim::DoIntegral ; (; const double * ; xmin, . const double * ; xmax, . bool ; absVal = false . ). protected . Definition at line 76 of file AdaptiveIntegratorMultiDim.cxx. ◆ Error(). double ROOT::Math::AdaptiveIntegratorMultiDim::Error ; (; ); const. inlineoverridevirtual . return integration error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 134 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [1/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMulti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:9584,Integrability,integrat,integration,9584,"double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunction",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10013,Integrability,integrat,integration,10013,). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Defin,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10521,Integrability,integrat,integration,10521,egration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10577,Integrability,interface,interface,10577,egration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:11933,Integrability,integrat,integration,11933,"T::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:11969,Integrability,integrat,integration,11969,"; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 70 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetSize(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 161 of file AdaptiveIntegratorMultiDim.h. ◆ Status(). int ROOT::Math::AdaptiveIntegratorMultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . De",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:12823,Integrability,integrat,integration,12823,"ultiDim::Status ; (; ); const. inlineoverridevirtual . return status of integration . status = 0 successful integration; status = 1 MAXPTS is too small for the specified accuracy EPS. The result contain the values obtainable for the specified value of MAXPTS.; status = 2 size is too small for the specified number MAXPTS of function evaluations.; status = 3 wrong dimension , N<2 or N > 15. Returned result and error are zero . Implements ROOT::Math::VirtualIntegrator.; Definition at line 149 of file AdaptiveIntegratorMultiDim.h. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fAbsTol. private . absolute tolerance ; Definition at line 186 of file AdaptiveIntegratorMultiDim.h. ◆ fDim. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fDim. private . dimensionality of integrand ; Definition at line 182 of file AdaptiveIntegratorMultiDim.h. ◆ fError. double ROOT::Math::AdaptiveIntegratorMultiDim::fError. private . integration error ; Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:14008,Integrability,integrat,integration,14008, Definition at line 190 of file AdaptiveIntegratorMultiDim.h. ◆ fFun. const IMultiGenFunction* ROOT::Math::AdaptiveIntegratorMultiDim::fFun. private . Definition at line 195 of file AdaptiveIntegratorMultiDim.h. ◆ fMaxPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMaxPts. private . maximum number of function evaluation requested ; Definition at line 184 of file AdaptiveIntegratorMultiDim.h. ◆ fMinPts. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fMinPts. private . minimum number of function evaluation requested ; Definition at line 183 of file AdaptiveIntegratorMultiDim.h. ◆ fNEval. int ROOT::Math::AdaptiveIntegratorMultiDim::fNEval. private . number of function evaluation ; Definition at line 192 of file AdaptiveIntegratorMultiDim.h. ◆ fRelError. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelError. private . Relative error. ; Definition at line 191 of file AdaptiveIntegratorMultiDim.h. ◆ fRelTol. double ROOT::Math::AdaptiveIntegratorMultiDim::fRelTol. private . relative tolerance ; Definition at line 187 of file AdaptiveIntegratorMultiDim.h. ◆ fResult. double ROOT::Math::AdaptiveIntegratorMultiDim::fResult. private . last integration result ; Definition at line 189 of file AdaptiveIntegratorMultiDim.h. ◆ fSize. unsigned int ROOT::Math::AdaptiveIntegratorMultiDim::fSize. private . max size of working array (explode with dimension) ; Definition at line 185 of file AdaptiveIntegratorMultiDim.h. ◆ fStatus. int ROOT::Math::AdaptiveIntegratorMultiDim::fStatus. private . status of algorithm (error if not zero) ; Definition at line 193 of file AdaptiveIntegratorMultiDim.h. Libraries for ROOT::Math::AdaptiveIntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/AdaptiveIntegratorMultiDim.h; math/mathcore/src/AdaptiveIntegratorMultiDim.cxx. ROOTMathAdaptiveIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:417,Modifiability,adapt,adaptive,417,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:539,Modifiability,adapt,adaptive,539,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:678,Modifiability,adapt,adapted,678,". ROOT: ROOT::Math::AdaptiveIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::AdaptiveIntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2543,Modifiability,adapt,adaptive,2543,"d.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2706,Modifiability,adapt,adaptive,2706,"sult and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:4943,Modifiability,inherit,inherited,4943,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:5187,Modifiability,inherit,inherited,5187,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1561,Performance,perform,performed,1561,"lgorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptiv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1666,Performance,perform,performed,1666,"pl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html:1536,Security,access,access,1536,"acementVector3D< Cartesian3D< Scalar > > AxisVector;  definition of vector axis ;  ; typedef double Scalar;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  Rotation operation on a cartesian vector. ;  . Public Member Functions;  AxisAngle ();  Default constructor (axis is z and angle is zero) ;  ; template<class AnyVector > ;  AxisAngle (const AnyVector &v, Scalar angle);  Construct from a non-zero vector (x,y,z) and an angle. ;  ; template<class OtherRotation > ; constexpr AxisAngle (const OtherRotation &r);  Construct from another supported rotation type (see gv_detail::convert ) ;  ; template<class IT > ;  AxisAngle (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of four Scalars, to be treated as the x, y, and z components of a unit axis vector, and the angle of rotation. ;  ; Scalar Angle () const;  access to rotation angle ;  ; AxisVector Axis () const;  access to rotation axis ;  ; template<class R > ; Scalar Distance (const R &r) const;  Distance between two rotations. ;  ; template<class AnyVector > ; void GetComponents (AnyVector &axis, Scalar &angle) const;  Set components into a non-zero vector (x,y,z) and an angle. ;  ; template<class IT > ; void GetComponents (IT begin) const;  Get the axis and then the angle into data specified by an iterator begin. ;  ; template<class IT > ; void GetComponents (IT begin, IT end) const;  Get the axis and then the angle into data specified by an iterator begin and another to the end of the desired data (4 past start). ;  ; AxisAngle Inverse () const;  Return inverse of an AxisAngle rotation. ;  ; void Invert ();  Invert an AxisAngle rotation in place. ;  ; bool operator!= (const AxisAngle &rhs) const;  ; template<class CoordSystem , class Tag > ; DisplacementVector3D< CoordSystem, Tag > operator() (const DisplacementVector3D< CoordSystem, Tag > &v) const;  Rotation operation on a displacement vector in any coo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html:1593,Security,access,access,1593,"acementVector3D< Cartesian3D< Scalar > > AxisVector;  definition of vector axis ;  ; typedef double Scalar;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  Rotation operation on a cartesian vector. ;  . Public Member Functions;  AxisAngle ();  Default constructor (axis is z and angle is zero) ;  ; template<class AnyVector > ;  AxisAngle (const AnyVector &v, Scalar angle);  Construct from a non-zero vector (x,y,z) and an angle. ;  ; template<class OtherRotation > ; constexpr AxisAngle (const OtherRotation &r);  Construct from another supported rotation type (see gv_detail::convert ) ;  ; template<class IT > ;  AxisAngle (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of four Scalars, to be treated as the x, y, and z components of a unit axis vector, and the angle of rotation. ;  ; Scalar Angle () const;  access to rotation angle ;  ; AxisVector Axis () const;  access to rotation axis ;  ; template<class R > ; Scalar Distance (const R &r) const;  Distance between two rotations. ;  ; template<class AnyVector > ; void GetComponents (AnyVector &axis, Scalar &angle) const;  Set components into a non-zero vector (x,y,z) and an angle. ;  ; template<class IT > ; void GetComponents (IT begin) const;  Get the axis and then the angle into data specified by an iterator begin. ;  ; template<class IT > ; void GetComponents (IT begin, IT end) const;  Get the axis and then the angle into data specified by an iterator begin and another to the end of the desired data (4 past start). ;  ; AxisAngle Inverse () const;  Return inverse of an AxisAngle rotation. ;  ; void Invert ();  Invert an AxisAngle rotation in place. ;  ; bool operator!= (const AxisAngle &rhs) const;  ; template<class CoordSystem , class Tag > ; DisplacementVector3D< CoordSystem, Tag > operator() (const DisplacementVector3D< CoordSystem, Tag > &v) const;  Rotation operation on a displacement vector in any coo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html:6894,Security,access,access,6894,"[3/4]. template<class IT > . ROOT::Math::AxisAngle::AxisAngle ; (; IT ; begin, . IT ; end . ). inline . Construct given a pair of pointers or iterators defining the beginning and end of an array of four Scalars, to be treated as the x, y, and z components of a unit axis vector, and the angle of rotation. ; Precondition: The first three components are assumed to represent the rotation axis vector and the 4-th the rotation angle. The angle is assumed to be in the range (-pi,pi]. The axis vector is automatically normalized to be a unit vector ; Definition at line 78 of file AxisAngle.h. ◆ AxisAngle() [4/4]. template<class OtherRotation > . constexpr ROOT::Math::AxisAngle::AxisAngle ; (; const OtherRotation & ; r). inlineexplicitconstexpr . Construct from another supported rotation type (see gv_detail::convert ) ; Definition at line 94 of file AxisAngle.h. Member Function Documentation. ◆ Angle(). Scalar ROOT::Math::AxisAngle::Angle ; (; ); const. inline . access to rotation angle ; Definition at line 183 of file AxisAngle.h. ◆ Axis(). AxisVector ROOT::Math::AxisAngle::Axis ; (; ); const. inline . access to rotation axis ; Definition at line 178 of file AxisAngle.h. ◆ Distance(). template<class R > . Scalar ROOT::Math::AxisAngle::Distance ; (; const R & ; r); const. inline . Distance between two rotations. ; Definition at line 288 of file AxisAngle.h. ◆ GetComponents() [1/3]. template<class AnyVector > . void ROOT::Math::AxisAngle::GetComponents ; (; AnyVector & ; axis, . Scalar & ; angle . ); const. inline . Set components into a non-zero vector (x,y,z) and an angle. ; The vector is intended to be a cartesian displacement vector but any vector class assignable from one will work. ; Definition at line 170 of file AxisAngle.h. ◆ GetComponents() [2/3]. template<class IT > . void ROOT::Math::AxisAngle::GetComponents ; (; IT ; begin); const. inline . Get the axis and then the angle into data specified by an iterator begin. ; Definition at line 145 of file AxisAngle.h. ◆ GetC",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html
https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html:7038,Security,access,access,7038,"erators defining the beginning and end of an array of four Scalars, to be treated as the x, y, and z components of a unit axis vector, and the angle of rotation. ; Precondition: The first three components are assumed to represent the rotation axis vector and the 4-th the rotation angle. The angle is assumed to be in the range (-pi,pi]. The axis vector is automatically normalized to be a unit vector ; Definition at line 78 of file AxisAngle.h. ◆ AxisAngle() [4/4]. template<class OtherRotation > . constexpr ROOT::Math::AxisAngle::AxisAngle ; (; const OtherRotation & ; r). inlineexplicitconstexpr . Construct from another supported rotation type (see gv_detail::convert ) ; Definition at line 94 of file AxisAngle.h. Member Function Documentation. ◆ Angle(). Scalar ROOT::Math::AxisAngle::Angle ; (; ); const. inline . access to rotation angle ; Definition at line 183 of file AxisAngle.h. ◆ Axis(). AxisVector ROOT::Math::AxisAngle::Axis ; (; ); const. inline . access to rotation axis ; Definition at line 178 of file AxisAngle.h. ◆ Distance(). template<class R > . Scalar ROOT::Math::AxisAngle::Distance ; (; const R & ; r); const. inline . Distance between two rotations. ; Definition at line 288 of file AxisAngle.h. ◆ GetComponents() [1/3]. template<class AnyVector > . void ROOT::Math::AxisAngle::GetComponents ; (; AnyVector & ; axis, . Scalar & ; angle . ); const. inline . Set components into a non-zero vector (x,y,z) and an angle. ; The vector is intended to be a cartesian displacement vector but any vector class assignable from one will work. ; Definition at line 170 of file AxisAngle.h. ◆ GetComponents() [2/3]. template<class IT > . void ROOT::Math::AxisAngle::GetComponents ; (; IT ; begin); const. inline . Get the axis and then the angle into data specified by an iterator begin. ; Definition at line 145 of file AxisAngle.h. ◆ GetComponents() [3/3]. template<class IT > . void ROOT::Math::AxisAngle::GetComponents ; (; IT ; begin, . IT ; end . ); const. inline . Get the axi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AxisAngle.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1148,Availability,toler,tolerance,1148,aster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegrator,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1397,Availability,toler,tolerance,1397,aster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegrator,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1725,Availability,toler,tolerance,1725,"t;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1928,Availability,toler,tolerance,1928,"t;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:3096,Availability,toler,tolerance,3096,"not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance().",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:4016,Availability,toler,tolerance,4016,". non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:4238,Availability,toler,tolerance,4238,"ed . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:4638,Availability,toler,tolerance,4638,"ns, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::BaseIntegratorOptions::fExtraOptions. protected . Definition at line 102 of file IntegratorOptions.h. ◆ fIntegType. int ROOT::Math::BaseIntegratorOptions::fIntegType. protected . Integrator type (value converted from enum) ; Definition at line 93 of file IntegratorOptions.h. ◆ fNCalls. unsigned int ROOT::Math::BaseIntegratorOptions::fNCalls. protected . (max) function calls ; Defi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:5162,Availability,toler,tolerance,5162,n-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::BaseIntegratorOptions::fExtraOptions. protected . Definition at line 102 of file IntegratorOptions.h. ◆ fIntegType. int ROOT::Math::BaseIntegratorOptions::fIntegType. protected . Integrator type (value converted from enum) ; Definition at line 93 of file IntegratorOptions.h. ◆ fNCalls. unsigned int ROOT::Math::BaseIntegratorOptions::fNCalls. protected . (max) function calls ; Definition at line 96 of file IntegratorOptions.h. ◆ fRelTolerance. double ROOT::Math::BaseIntegratorOptions::fRelTolerance. protected . relative tolerance ; Definition at line 98 of file IntegratorOptions.h. ◆ fWKSize. unsigned int ROOT::Math::BaseIntegratorOptions::fWKSize. protected . workspace size ; Definition at line 95 of file IntegratorOptions.h. Libraries for ROOT::Math::BaseIntegratorOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:5801,Availability,toler,tolerance,5801,xtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::BaseIntegratorOptions::fExtraOptions. protected . Definition at line 102 of file IntegratorOptions.h. ◆ fIntegType. int ROOT::Math::BaseIntegratorOptions::fIntegType. protected . Integrator type (value converted from enum) ; Definition at line 93 of file IntegratorOptions.h. ◆ fNCalls. unsigned int ROOT::Math::BaseIntegratorOptions::fNCalls. protected . (max) function calls ; Definition at line 96 of file IntegratorOptions.h. ◆ fRelTolerance. double ROOT::Math::BaseIntegratorOptions::fRelTolerance. protected . relative tolerance ; Definition at line 98 of file IntegratorOptions.h. ◆ fWKSize. unsigned int ROOT::Math::BaseIntegratorOptions::fWKSize. protected . workspace size ; Definition at line 95 of file IntegratorOptions.h. Libraries for ROOT::Math::BaseIntegratorOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathBaseIntegratorOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:432,Deployability,integrat,integration,432,. ROOT: ROOT::Math::BaseIntegratorOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:995,Deployability,integrat,integrator,995,aster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegrator,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:3598,Deployability,integrat,integrator,3598,"at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative toleranc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:432,Integrability,integrat,integration,432,. ROOT: ROOT::Math::BaseIntegratorOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:995,Integrability,integrat,integrator,995,aster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegrator,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:3598,Integrability,integrat,integrator,3598,"at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative toleranc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:764,Safety,avoid,avoid,764,aster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::BaseIntegratorOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. ; Definition at line 35 of file IntegratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegrator,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1612,Safety,avoid,avoid,1612,"ratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; cons",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:2354,Safety,avoid,avoid,2354,"void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:2414,Safety,avoid,avoid,2414,"void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:2831,Safety,avoid,avoid,2831,"t fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Def",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:4571,Availability,avail,available,4571,"plate<class FunctionType > . ROOT::Math::BasicFitMethodFunction< FunctionType >::~BasicFitMethodFunction ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 58 of file FitMethodFunction.h. Member Function Documentation. ◆ DataElement(). template<class FunctionType > . virtual double ROOT::Math::BasicFitMethodFunction< FunctionType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. pure virtual . method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ; Estimating also the gradient of the data element if the passed pointer is not null and the Hessian. The flag fullHessian is set when one needs to compute the full Hessian (not the approximated one) and should be used when the full second derivatives of the model functions are available ; Implemented in ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >, ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >, and ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >. ◆ G2(). template<class FunctionType > . virtual bool ROOT::Math::BasicFitMethodFunction< FunctionType >::G2 ; (; const double * ; , . double * ;  . ); const. inlinevirtual . Computes the Second derivatives. ; Return false if this is not supported ; Definition at line 104 of file FitMethodFunction.h. ◆ HasHessian(). template<class FunctionType > . virtual bool ROOT::Math::BasicFitMethodFunction< FunctionType >::HasHessian ; (; ); const. inlinevirtual . Reimplemented in ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >, ROOT::Fit::BasicFCN< DerivFunType, ROOT::Math::IParamMultiFunction, BinData >, and ROOT::Fit::BasicFCN< DerivFunType, ROOT::Math::IParamMultiFunction, UnBinData >.; Definition at line 76 of file FitMethodFunction.h. ◆ Hessian(). template<class FunctionType > . virtual bool R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:2284,Deployability,update,update,2284,", int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const =0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool HasHessian () const;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual Type_t Type () const;  return the type of method, override if needed ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Static Public Member Functions; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  . Private Attributes; unsigned int fNCalls;  ; unsigned int fNDim;  ; unsigned int fNPoints;  . #include <Math/FitMethodFunction.h>. Inheritance diagram for ROOT::Math::BasicFitMethodFunction< FunctionType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunction. template<class FunctionType > . typedef FunctionType::BaseFunc ROOT::Math::BasicFitMethodFunction< FunctionType >::BaseFunction. Definition at line 43 of file FitMethodFunction.h. Member Enumeration Documentation. ◆ Type_t. template<class FunctionType > . enum ROOT::Math::BasicFitMethodFunction::Type_t. enumeration specifying the possible fit method ty",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:7933,Deployability,update,update,7933," 63 of file FitMethodFunction.h. ◆ NPoints(). template<class FunctionType > . virtual unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::NPoints ; (; ); const. inlinevirtual . return the number of data points used in evaluating the function ; Definition at line 109 of file FitMethodFunction.h. ◆ ResetNCalls(). template<class FunctionType > . virtual void ROOT::Math::BasicFitMethodFunction< FunctionType >::ResetNCalls ; (; ). inlinevirtual . reset number of function calls ; Definition at line 129 of file FitMethodFunction.h. ◆ Type(). template<class FunctionType > . virtual Type_t ROOT::Math::BasicFitMethodFunction< FunctionType >::Type ; (; ); const. inlinevirtual . return the type of method, override if needed ; Reimplemented in ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >, ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >, and ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >.; Definition at line 114 of file FitMethodFunction.h. ◆ UpdateNCalls(). template<class FunctionType > . virtual void ROOT::Math::BasicFitMethodFunction< FunctionType >::UpdateNCalls ; (; ); const. inlinevirtual . update number of calls ; Definition at line 124 of file FitMethodFunction.h. Member Data Documentation. ◆ fNCalls. template<class FunctionType > . unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::fNCalls. mutableprivate . Definition at line 143 of file FitMethodFunction.h. ◆ fNDim. template<class FunctionType > . unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::fNDim. private . Definition at line 141 of file FitMethodFunction.h. ◆ fNPoints. template<class FunctionType > . unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::fNPoints. private . Definition at line 142 of file FitMethodFunction.h. math/mathcore/inc/Fit/Fitter.h; math/mathcore/inc/Math/FitMethodFunction.h. ROOTMathBasicFitMethodFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:686,Integrability,interface,interface,686,". ROOT: ROOT::Math::BasicFitMethodFunction< FunctionType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicFitMethodFunction< FunctionType > Class Template ReferenceabstractMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class FunctionType>; class ROOT::Math::BasicFitMethodFunction< FunctionType >FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) ; Definition at line 38 of file FitMethodFunction.h. Public Types; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t { kUndefined = 0; , kLeastSquare; , kLogLikelihood; , kPoissonLikelihood; };  enumeration specifying the possible fit method types More...;  . Public Member Functions;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const =0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool HasHessian () const;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:704,Integrability,interface,interface,704,". ROOT: ROOT::Math::BasicFitMethodFunction< FunctionType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicFitMethodFunction< FunctionType > Class Template ReferenceabstractMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class FunctionType>; class ROOT::Math::BasicFitMethodFunction< FunctionType >FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) ; Definition at line 38 of file FitMethodFunction.h. Public Types; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t { kUndefined = 0; , kLeastSquare; , kLogLikelihood; , kPoissonLikelihood; };  enumeration specifying the possible fit method types More...;  . Public Member Functions;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const =0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool HasHessian () const;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:6761,Integrability,interface,interface,6761,"rted ; Definition at line 81 of file FitMethodFunction.h. ◆ IsAGradFCN() [1/2]. template<class FunctionType > . static bool ROOT::Math::BasicFitMethodFunction< FunctionType >::IsAGradFCN ; (; ). inlinestatic . Static function to indicate if a function is supporting gradient. ; Definition at line 135 of file FitMethodFunction.h. ◆ IsAGradFCN() [2/2]. bool ROOT::Math::BasicFitMethodFunction< ROOT::Math::IMultiGradFunction >::IsAGradFCN ; (; ). inline . Definition at line 149 of file FitMethodFunction.h. ◆ NCalls(). template<class FunctionType > . virtual unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::NCalls ; (; ); const. inlinevirtual . return the total number of function calls (override if needed) ; Definition at line 119 of file FitMethodFunction.h. ◆ NDim(). template<class FunctionType > . unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::NDim ; (; ); const. inlineoverride . Number of dimension (parameters) . ; From IGenMultiFunction interface ; Definition at line 63 of file FitMethodFunction.h. ◆ NPoints(). template<class FunctionType > . virtual unsigned int ROOT::Math::BasicFitMethodFunction< FunctionType >::NPoints ; (; ); const. inlinevirtual . return the number of data points used in evaluating the function ; Definition at line 109 of file FitMethodFunction.h. ◆ ResetNCalls(). template<class FunctionType > . virtual void ROOT::Math::BasicFitMethodFunction< FunctionType >::ResetNCalls ; (; ). inlinevirtual . reset number of function calls ; Definition at line 129 of file FitMethodFunction.h. ◆ Type(). template<class FunctionType > . virtual Type_t ROOT::Math::BasicFitMethodFunction< FunctionType >::Type ; (; ); const. inlinevirtual . return the type of method, override if needed ; Reimplemented in ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >, ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >, and ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >.; Definition at line 114 of file FitMethodFunction.h. ◆ Up",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5258,Availability,error,errors,5258,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5730,Availability,error,error,5730,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5849,Availability,error,errors,5849,"lation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6433,Availability,error,error,6433,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6525,Availability,error,errors,6525,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6644,Availability,error,error,6644,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:7048,Availability,error,error,7048,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:7150,Availability,error,error,7150,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8390,Availability,error,error,8390,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8400,Availability,error,error,8400,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8955,Availability,error,errors,8955,"vel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:9868,Availability,toler,tolerance,9868,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:9967,Availability,error,error,9967,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:10446,Availability,toler,tolerance,10446,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:11494,Availability,error,errors,11494,"le Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/BasicMinimizer.h>. Inheritance diagram for ROOT::Math::BasicMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BasicMinimizer(). ROOT::Math::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ Crea",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2054,Deployability,release,release,2054, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8161,Deployability,configurat,configuration,8161,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:15526,Deployability,release,release,15526,"zer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 330 of file BasicMinimizer.cxx. ◆ NPar(). virtual unsigned int ROOT::Math::BasicMinimizer::NPar ; (; ); const. inlinevirtual . total number of parameter defined ; Definition at line 127 of file BasicMinimizer.h. ◆ ObjFunction(). const ROOT::Math::IMultiGenFunction * ROOT::Math::BasicMinimizer::ObjFunction ; (; ); const. inline . return pointer to used objective function ; Definition at line 130 of file BasicMinimizer.h. ◆ PrintResult(). void ROOT::Math::BasicMinimizer::PrintResult ; (; ); const. print result of minimization ; Definition at line 313 of file BasicMinimizer.cxx. ◆ ReleaseVariable(). bool ROOT::Math::BasicMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 189 of file BasicMinimizer.cxx. ◆ SetFinalValues(). void ROOT::Math::BasicMinimizer::SetFinalValues ; (; const double * ; x, . const MinimTransformFunction * ; func = nullptr . ). protected . Definition at line 300 of file BasicMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::BasicMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file BasicMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimize",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:994,Modifiability,variab,variable,994,"rotected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. ; . in case real minimizer implementations do not provide such functionality. This is an internal class and should not be used directly by the user ; Definition at line 54 of file BasicMinimizer.h. Public Member Functions;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1112,Modifiability,variab,variable,1112,"rotected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. ; . in case real minimizer implementations do not provide such functionality. This is an internal class and should not be used directly by the user ; Definition at line 54 of file BasicMinimizer.h. Public Member Functions;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1135,Modifiability,variab,variable,1135,"rotected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. ; . in case real minimizer implementations do not provide such functionality. This is an internal class and should not be used directly by the user ; Definition at line 54 of file BasicMinimizer.h. Public Member Functions;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1423,Modifiability,variab,variable,1423,"rotected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BasicMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. ; . in case real minimizer implementations do not provide such functionality. This is an internal class and should not be used directly by the user ; Definition at line 54 of file BasicMinimizer.h. Public Member Functions;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1709,Modifiability,variab,variables,1709, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2074,Modifiability,variab,variable,2074, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2175,Modifiability,variab,variable,2175, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2479,Modifiability,variab,variable,2479,"hod to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double uppe",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2672,Modifiability,variab,variable,2672," const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2865,Modifiability,variab,variable,2865," ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  ac",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3025,Modifiability,variab,variable,3025,"ned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is no",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3159,Modifiability,variab,variable,3159,"  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3288,Modifiability,variab,variable,3288,"rride;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Func",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3412,Modifiability,variab,variable,3412,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3541,Modifiability,variab,variable,3541,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3649,Modifiability,variab,variable,3649,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3746,Modifiability,variab,variables,3746,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3964,Modifiability,variab,variable,3964,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3981,Modifiability,variab,variable,3981,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4016,Modifiability,variab,variable,4016,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4117,Modifiability,variab,variables,4117,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4169,Modifiability,variab,variable,4169,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4299,Modifiability,inherit,inherited,4299,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4988,Modifiability,variab,variable,4988,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Ch",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5122,Modifiability,variab,variables,5122,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5149,Modifiability,variab,variable,5149,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5212,Modifiability,variab,variables,5212,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5992,Modifiability,variab,variable,5992,"lation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6261,Modifiability,variab,variable,6261,"e is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6308,Modifiability,variab,variables,6308,"e is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6443,Modifiability,variab,variable,6443,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6768,Modifiability,variab,variable,6768,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8161,Modifiability,config,configuration,8161,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8557,Modifiability,variab,variable,8557,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:10122,Modifiability,variab,variable,10122,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:10256,Modifiability,variab,variables,10256,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:10285,Modifiability,variab,variables,10285,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:11248,Modifiability,variab,variables,11248,"eInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/BasicMinimizer.h>. Inheritance diagram for ROOT::Math::BasicMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BasicMinimizer(). ROOT::Math::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definitio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:11315,Modifiability,inherit,inherited,11315,"le Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/BasicMinimizer.h>. Inheritance diagram for ROOT::Math::BasicMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BasicMinimizer(). ROOT::Math::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ Crea",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:12800,Modifiability,variab,variable,12800,"h::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ CreateTransformation(). MinimTransformFunction * ROOT::Math::BasicMinimizer::CreateTransformation ; (; std::vector< double > & ; startValues, . const ROOT::Math::IMultiGradFunction * ; func = nullptr . ). protected . Definition at line 265 of file BasicMinimizer.cxx. ◆ FixVariable(). bool ROOT::Math::BasicMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Defin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:13085,Modifiability,variab,variable,13085,"::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ CreateTransformation(). MinimTransformFunction * ROOT::Math::BasicMinimizer::CreateTransformation ; (; std::vector< double > & ; startValues, . const ROOT::Math::IMultiGradFunction * ; func = nullptr . ). protected . Definition at line 265 of file BasicMinimizer.cxx. ◆ FixVariable(). bool ROOT::Math::BasicMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:13108,Modifiability,variab,variable,13108,"::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ CreateTransformation(). MinimTransformFunction * ROOT::Math::BasicMinimizer::CreateTransformation ; (; std::vector< double > & ; startValues, . const ROOT::Math::IMultiGradFunction * ; func = nullptr . ). protected . Definition at line 265 of file BasicMinimizer.cxx. ◆ FixVariable(). bool ROOT::Math::BasicMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:13652,Modifiability,variab,variable,13652," file BasicMinimizer.cxx. ◆ FixVariable(). bool ROOT::Math::BasicMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMinimizer.; Definition at line 294 of file BasicMinimizer.cxx. ◆ MinValue(). double ROOT::Math::BasicMinimizer::MinValue ; (; ); const. inlineoverridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 115 of file BasicMinimizer.h. ◆ NDim(). unsigned int ROOT::Math::BasicMinimizer::NDim ; (; ); const. inlineoverridevirtual . number of dimensions ; Implements ROOT::Math::Minimizer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:13744,Modifiability,variab,variables,13744," unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file BasicMinimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::BasicMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMinimizer.; Definition at line 294 of file BasicMinimizer.cxx. ◆ MinValue(). double ROOT::Math::BasicMinimizer::MinValue ; (; ); const. inlineoverridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 115 of file BasicMinimizer.h. ◆ NDim(). unsigned int ROOT::Math::BasicMinimizer::NDim ; (; ); const. inlineoverridevirtual . number of dimensions ; Implements ROOT::Math::Minimizer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:14722,Modifiability,variab,variables,14722,"e not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMinimizer.; Definition at line 294 of file BasicMinimizer.cxx. ◆ MinValue(). double ROOT::Math::BasicMinimizer::MinValue ; (; ); const. inlineoverridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 115 of file BasicMinimizer.h. ◆ NDim(). unsigned int ROOT::Math::BasicMinimizer::NDim ; (; ); const. inlineoverridevirtual . number of dimensions ; Implements ROOT::Math::Minimizer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 330 of file BasicMinimizer.cxx. ◆ NPar(). virtual unsigned int ROOT::Math::BasicMinimizer::NPar ; (; ); const. inlinevirtual . total number of parameter defined ; Definition at line 127 of file BasicMinimizer.h. ◆ ObjFunction(). const ROOT::Math::IMultiGenFunction * ROOT::Math::BasicMinimizer::ObjFunction ; (; ); const. inline . return pointer to used objective function ; Definition at line 130 of file BasicMinimizer.h. ◆ PrintResult(). void ROOT::Math::BasicMinimizer::PrintResult ; (; ); const. print result of minimization ; Definition at line 313 of file BasicMinimizer.cxx. ◆ ReleaseVariable(). bool ROOT::Math::BasicMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 189 of file BasicMinimizer.cxx. ◆ SetFinalValues(). void ROOT::Math::BasicMinimizer::SetFinalValues ; (; const double * ; x, . const Minim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:15546,Modifiability,variab,variable,15546,"zer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 330 of file BasicMinimizer.cxx. ◆ NPar(). virtual unsigned int ROOT::Math::BasicMinimizer::NPar ; (; ); const. inlinevirtual . total number of parameter defined ; Definition at line 127 of file BasicMinimizer.h. ◆ ObjFunction(). const ROOT::Math::IMultiGenFunction * ROOT::Math::BasicMinimizer::ObjFunction ; (; ); const. inline . return pointer to used objective function ; Definition at line 130 of file BasicMinimizer.h. ◆ PrintResult(). void ROOT::Math::BasicMinimizer::PrintResult ; (; ); const. print result of minimization ; Definition at line 313 of file BasicMinimizer.cxx. ◆ ReleaseVariable(). bool ROOT::Math::BasicMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 189 of file BasicMinimizer.cxx. ◆ SetFinalValues(). void ROOT::Math::BasicMinimizer::SetFinalValues ; (; const double * ; x, . const MinimTransformFunction * ; func = nullptr . ). protected . Definition at line 300 of file BasicMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::BasicMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file BasicMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimize",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:16038,Modifiability,variab,variable,16038,"ltiGenFunction * ROOT::Math::BasicMinimizer::ObjFunction ; (; ); const. inline . return pointer to used objective function ; Definition at line 130 of file BasicMinimizer.h. ◆ PrintResult(). void ROOT::Math::BasicMinimizer::PrintResult ; (; ); const. print result of minimization ; Definition at line 313 of file BasicMinimizer.cxx. ◆ ReleaseVariable(). bool ROOT::Math::BasicMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 189 of file BasicMinimizer.cxx. ◆ SetFinalValues(). void ROOT::Math::BasicMinimizer::SetFinalValues ; (; const double * ; x, . const MinimTransformFunction * ; func = nullptr . ). protected . Definition at line 300 of file BasicMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::BasicMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file BasicMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file BasicMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . do",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:16755,Modifiability,variab,variable,16755,"llptr . ). protected . Definition at line 300 of file BasicMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::BasicMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file BasicMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file BasicMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 88 of file BasicMinimizer.cxx. ◆ SetMinValue(). void ROOT::Math::BasicMinimizer::SetMinValue ; (; double ; val). inlineprotected . Definition at line 152 of file BasicMinimizer.h. ◆ SetUpperLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:17130,Modifiability,variab,variable,17130,"Minimizer.cxx. ◆ SetFunction(). void ROOT::Math::BasicMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, and ROOT::Math::GSLNLSMinimizer.; Definition at line 240 of file BasicMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file BasicMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 88 of file BasicMinimizer.cxx. ◆ SetMinValue(). void ROOT::Math::BasicMinimizer::SetMinValue ; (; double ; val). inlineprotected . Definition at line 152 of file BasicMinimizer.h. ◆ SetUpperLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimizer.cxx. ◆ SetVariable(). bool ROOT::Math::BasicMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:17653,Modifiability,variab,variable,17653," . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file BasicMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 88 of file BasicMinimizer.cxx. ◆ SetMinValue(). void ROOT::Math::BasicMinimizer::SetMinValue ; (; double ; val). inlineprotected . Definition at line 152 of file BasicMinimizer.h. ◆ SetUpperLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimizer.cxx. ◆ SetVariable(). bool ROOT::Math::BasicMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:17978,Modifiability,variab,variable,17978,"ned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 88 of file BasicMinimizer.cxx. ◆ SetMinValue(). void ROOT::Math::BasicMinimizer::SetMinValue ; (; double ; val). inlineprotected . Definition at line 152 of file BasicMinimizer.h. ◆ SetUpperLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimizer.cxx. ◆ SetVariable(). bool ROOT::Math::BasicMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:18270,Modifiability,variab,variable,18270,"etMinValue(). void ROOT::Math::BasicMinimizer::SetMinValue ; (; double ; val). inlineprotected . Definition at line 152 of file BasicMinimizer.h. ◆ SetUpperLimitedVariable(). bool ROOT::Math::BasicMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimizer.cxx. ◆ SetVariable(). bool ROOT::Math::BasicMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue().",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:18566,Modifiability,variab,variable,18566,"le ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 97 of file BasicMinimizer.cxx. ◆ SetVariable(). bool ROOT::Math::BasicMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::Basi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:18855,Modifiability,variab,variable,18855,"(; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 63 of file BasicMinimizer.cxx. ◆ SetVariableLimits(). bool ROOT::Math::BasicMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). v",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:19151,Modifiability,variab,variable,19151,"signed int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 159 of file BasicMinimizer.cxx. ◆ SetVariableLowerLimit(). bool ROOT::Math::BasicMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:19421,Modifiability,variab,variable,19421,"r::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 147 of file BasicMinimizer.cxx. ◆ SetVariableStepSize(). bool ROOT::Math::BasicMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:19675,Modifiability,variab,variables,19675,"cMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file BasicMinimizer.cxx. ◆ SetVariableUpperLimit(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . r",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:20156,Modifiability,variab,variable,20156,"finition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:20173,Modifiability,variab,variable,20173,"finition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:20208,Modifiability,variab,variable,20208,"finition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:20461,Modifiability,variab,variables,20461,"cMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fMinVal. double ROOT::Math::BasicMinimizer::fMinVal. private . Definition at line 161 of file BasicMinimizer.h. ◆ fNames. std::vector<std::string> ROOT::Math::BasicMinimizer::fNames. private . Definition at line 164 of file BasicMinimizer.h. ◆ fObjFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::B",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:20513,Modifiability,variab,variable,20513,"cMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fMinVal. double ROOT::Math::BasicMinimizer::fMinVal. private . Definition at line 161 of file BasicMinimizer.h. ◆ fNames. std::vector<std::string> ROOT::Math::BasicMinimizer::fNames. private . Definition at line 164 of file BasicMinimizer.h. ◆ fObjFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::B",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:21982,Modifiability,variab,variables,21982,"mizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . map specifying the bound using as key the parameter index ; Definition at line 166 of file BasicMinimizer.h. ◆ fDim. unsigned int ROOT::Math::BasicMinimizer::fDim. private . Definition at line 157 of file BasicMinimizer.h. ◆ fMinVal. double ROOT::Math::BasicMinimizer::fMinVal. private . Definition at line 161 of file BasicMinimizer.h. ◆ fNames. std::vector<std::string> ROOT::Math::BasicMinimizer::fNames. private . Definition at line 164 of file BasicMinimizer.h. ◆ fObjFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::BasicMinimizer::fObjFunc. private . Definition at line 159 of file BasicMinimizer.h. ◆ fSteps. std::vector<double> ROOT::Math::BasicMinimizer::fSteps. private . Definition at line 163 of file BasicMinimizer.h. ◆ fValues. std::vector<double> ROOT::Math::BasicMinimizer::fValues. private . Definition at line 162 of file BasicMinimizer.h. ◆ fVarTypes. std::vector<ROOT::Math::EMinimVariableType> ROOT::Math::BasicMinimizer::fVarTypes. private . vector specifying the type of variables ; Definition at line 165 of file BasicMinimizer.h. Libraries for ROOT::Math::BasicMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/BasicMinimizer.h; math/mathcore/src/BasicMinimizer.cxx. ROOTMathBasicMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1490,Performance,perform,perform,1490, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:6995,Performance,perform,perform,6995,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:7129,Performance,perform,performed,7129,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:9950,Performance,perform,perform,9950,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:13956,Performance,perform,perform,13956,"gs ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; varObj . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 211 of file BasicMinimizer.cxx. ◆ GradObjFunction(). const ROOT::Math::IMultiGradFunction * ROOT::Math::BasicMinimizer::GradObjFunction ; (; ); const. return pointer to used gradient object function (NULL if gradient is not supported) ; Definition at line 325 of file BasicMinimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::BasicMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 206 of file BasicMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::BasicMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Reimplemented in ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, ROOT::Math::GSLSimAnMinimizer, and ROOT::Math::RMinimizer.; Definition at line 294 of file BasicMinimizer.cxx. ◆ MinValue(). double ROOT::Math::BasicMinimizer::MinValue ; (; ); const. inlineoverridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 115 of file BasicMinimizer.h. ◆ NDim(). unsigned int ROOT::Math::BasicMinimizer::NDim ; (; ); const. inlineoverridevirtual . number of dimensions ; Implements ROOT::Math::Minimizer.; Definition at line 121 of file BasicMinimizer.h. ◆ NFree(). unsigned int ROOT::Math::BasicMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 330 of file BasicMinimizer.cxx. ◆ NPar(). virtual unsigned int ROOT::Math::BasicMinimizer::NPar ; (; ); const. inlinevirtual . total number of parameter ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:3868,Security,access,accessor,3868,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:7156,Security,validat,validation,7156,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:11511,Security,validat,validated,11511,"le Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/BasicMinimizer.h>. Inheritance diagram for ROOT::Math::BasicMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BasicMinimizer(). ROOT::Math::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ Crea",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:19951,Security,access,accessor,19951,"(). bool ROOT::Math::BasicMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an already existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 153 of file BasicMinimizer.cxx. ◆ SetVariableValue(). bool ROOT::Math::BasicMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 125 of file BasicMinimizer.cxx. ◆ SetVariableValues(). bool ROOT::Math::BasicMinimizer::SetVariableValues ; (; const double * ; x). overridevirtual . set the values of all existing variables (array must be dimensioned to the size of existing parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 133 of file BasicMinimizer.cxx. ◆ StepSizes(). virtual const double * ROOT::Math::BasicMinimizer::StepSizes ; (; ); const. inlinevirtual . accessor methods ; Definition at line 140 of file BasicMinimizer.h. ◆ VariableIndex(). int ROOT::Math::BasicMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 232 of file BasicMinimizer.cxx. ◆ VariableName(). std::string ROOT::Math::BasicMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 227 of file BasicMinimizer.cxx. ◆ X(). const double * ROOT::Math::BasicMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 118 of file BasicMinimizer.h. Member Data Documentation. ◆ fBounds. std::map< unsigned int, std::pair<double, double> > ROOT::Math::BasicMinimizer::fBounds. private . ma",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Boost.html:432,Modifiability,variab,variable,432,". ROOT: ROOT::Math::Boost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Boost Class ReferenceMath » Physics Vectors. ; Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. ; A variable names bgamma appears in several places in this file.; See also BoostX, BoostY and BoostZ for classes representing specialized Lorentz boosts. Also, the 3-D rotation classes can be considered to be special Lorentz transformations which do not mix space and time components.; See alsoOverview of the physics vector library; A few words of elaboration are needed to make its meaning clear. On page 69 of Misner, Thorne and Wheeler, (Exercise 2.7) the elements of the matrix for a general Lorentz boost are given as. \[ \Lambda^{j'}_k = \Lambda^{k'}_j; = (\gamma - 1) n^j n^k + \delta^{jk} \]. where the n^i are unit vectors in the direction of the three spatial axes. Using the definitions, \( n^i = \beta_i/\beta \) , then, for example,. \[ \Lambda_{xy} = (\gamma - 1) n_x n_y; = (\gamma - 1) \beta_x \beta_y/\beta^2 \]. By definition, ; \[ \gamma^2 = 1/(1 - \beta^2) \]. so that ; \[ \gamma^2 \beta^2 = \gamma^2 - 1 \]. or ; \[ \beta^2 = (\gamma^2 - 1)/\gamma^2 \]. If we insert this into the expression for \( \Lambda_{xy} \), we get. \[ \Lambda_{xy} = (\gamma - 1) \gamma^2/(\gamma^2 - 1) \beta_x \beta_y \]. or, finally. \[ \Lambda_{xy} = \gamma^2/(\gamma+1) \beta_x \beta_y \]. The expression \( \gamma^2/(\gamma+1) \) is what we call bgamma in the code below. ; Definition at line 47 of file Boost.h. Public Types; enum  EBoostMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kXT = 3; , ;   kYY = 4; , kYZ = 5; , kYT = 6; , kZZ = 7; , ;   kZT = 8; , kTT = 9. };  ; enum  ELorentzRotationMatrixIndex { ;   kLXX = 0; , kLXY = 1; , kLXZ = 2; , kLXT = 3; , ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Boost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Boost.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Boost.html:821,Usability,clear,clear,821,". ROOT: ROOT::Math::Boost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Boost Class ReferenceMath » Physics Vectors. ; Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. ; A variable names bgamma appears in several places in this file.; See also BoostX, BoostY and BoostZ for classes representing specialized Lorentz boosts. Also, the 3-D rotation classes can be considered to be special Lorentz transformations which do not mix space and time components.; See alsoOverview of the physics vector library; A few words of elaboration are needed to make its meaning clear. On page 69 of Misner, Thorne and Wheeler, (Exercise 2.7) the elements of the matrix for a general Lorentz boost are given as. \[ \Lambda^{j'}_k = \Lambda^{k'}_j; = (\gamma - 1) n^j n^k + \delta^{jk} \]. where the n^i are unit vectors in the direction of the three spatial axes. Using the definitions, \( n^i = \beta_i/\beta \) , then, for example,. \[ \Lambda_{xy} = (\gamma - 1) n_x n_y; = (\gamma - 1) \beta_x \beta_y/\beta^2 \]. By definition, ; \[ \gamma^2 = 1/(1 - \beta^2) \]. so that ; \[ \gamma^2 \beta^2 = \gamma^2 - 1 \]. or ; \[ \beta^2 = (\gamma^2 - 1)/\gamma^2 \]. If we insert this into the expression for \( \Lambda_{xy} \), we get. \[ \Lambda_{xy} = (\gamma - 1) \gamma^2/(\gamma^2 - 1) \beta_x \beta_y \]. or, finally. \[ \Lambda_{xy} = \gamma^2/(\gamma+1) \beta_x \beta_y \]. The expression \( \gamma^2/(\gamma+1) \) is what we call bgamma in the code below. ; Definition at line 47 of file Boost.h. Public Types; enum  EBoostMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kXT = 3; , ;   kYY = 4; , kYZ = 5; , kYT = 6; , kZZ = 7; , ;   kZT = 8; , kTT = 9. };  ; enum  ELorentzRotationMatrixIndex { ;   kLXX = 0; , kLXY = 1; , kLXZ = 2; , kLXT = 3; , ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Boost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Boost.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:1450,Availability,error,error,1450,"zation. ; It will use the Brent Method for function minimization in a given interval. First, a grid search is used to bracket the minimum value with the a step size = (xmax-xmin)/npx. The step size can be controlled via the SetNpx() function. A default value of npx = 100 is used. The default value con be changed using the static method SetDefaultNpx. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval. If the Brent method fails to converge the bracketing is repeated on the latest best estimate of the interval. The procedure is repeated with a maximum value (default =10) which can be set for all BrentRootFinder classes with the method SetDefaultNSearch; This class is implemented from TF1::GetMinimum.; To use the class, three steps have to be taken:; Create the class.; Set a function within an interval to look for the minimum.; Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. ; Definition at line 62 of file BrentMinimizer1D.h. Public Member Functions;  BrentMinimizer1D ();  Default Constructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol=1.E-8, double relTol=1.E-10) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ;  ; const char * Name () const override;  Return name of minimi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:2319,Availability,toler,tolerance,2319,"he class, three steps have to be taken:; Create the class.; Set a function within an interval to look for the minimum.; Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. ; Definition at line 62 of file BrentMinimizer1D.h. Public Member Functions;  BrentMinimizer1D ();  Default Constructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol=1.E-8, double relTol=1.E-10) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ;  ; const char * Name () const override;  Return name of minimization algorithm (""BrentMinimizer1D"") ;  ; void SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup);  Sets function to be minimized. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; int Status () const override;  Returns status of last estimate. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:5986,Availability,toler,tolerance,5986,"BrentMinimizer1D.cxx. ◆ FValMinimum(). double ROOT::Math::BrentMinimizer1D::FValMinimum ; (; ); const. overridevirtual . Return function value at current estimate of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 67 of file BrentMinimizer1D.cxx. ◆ FValUpper(). double ROOT::Math::BrentMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 73 of file BrentMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::BrentMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 102 of file BrentMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::BrentMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol = 1.E-8, . double ; relTol = 1.E-10 . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ; Return true if iterations converged successfully @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position (default 1.E-8) @param absTol desired relative error in the minimum position (default = 1.E-10) ; Implements ROOT::Math::IMinimizer1D.; Definition at line 76 of file BrentMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::BrentMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm (""BrentMinimizer1D"") ; Implements ROOT::Math::IMinimizer1D.; Definition at line 124 of file BrentMinimizer1D.cxx. ◆ SetDefaultNpx(). void ROOT::Math::BrentMinimizer1D::SetDefaultNpx ; (; int ; npx). static . set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ; Definition at line 43 of file BrentMinimizer1D.cxx. ◆ SetDefaultNSearch(). void ROOT::Math::BrentMinimizer1D::SetDefaultNSearch ; (; int ; n)",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:6170,Availability,error,error,6170,"Minimizer1D.; Definition at line 67 of file BrentMinimizer1D.cxx. ◆ FValUpper(). double ROOT::Math::BrentMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 73 of file BrentMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::BrentMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 102 of file BrentMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::BrentMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol = 1.E-8, . double ; relTol = 1.E-10 . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ; Return true if iterations converged successfully @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position (default 1.E-8) @param absTol desired relative error in the minimum position (default = 1.E-10) ; Implements ROOT::Math::IMinimizer1D.; Definition at line 76 of file BrentMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::BrentMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm (""BrentMinimizer1D"") ; Implements ROOT::Math::IMinimizer1D.; Definition at line 124 of file BrentMinimizer1D.cxx. ◆ SetDefaultNpx(). void ROOT::Math::BrentMinimizer1D::SetDefaultNpx ; (; int ; npx). static . set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ; Definition at line 43 of file BrentMinimizer1D.cxx. ◆ SetDefaultNSearch(). void ROOT::Math::BrentMinimizer1D::SetDefaultNSearch ; (; int ; n). static . set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ; Definition at line 45 of file BrentMinimizer1D.cxx. ◆ SetFunction(). void ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:6247,Availability,error,error,6247,"r(). double ROOT::Math::BrentMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 73 of file BrentMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::BrentMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 102 of file BrentMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::BrentMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol = 1.E-8, . double ; relTol = 1.E-10 . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ; Return true if iterations converged successfully @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position (default 1.E-8) @param absTol desired relative error in the minimum position (default = 1.E-10) ; Implements ROOT::Math::IMinimizer1D.; Definition at line 76 of file BrentMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::BrentMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm (""BrentMinimizer1D"") ; Implements ROOT::Math::IMinimizer1D.; Definition at line 124 of file BrentMinimizer1D.cxx. ◆ SetDefaultNpx(). void ROOT::Math::BrentMinimizer1D::SetDefaultNpx ; (; int ; npx). static . set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ; Definition at line 43 of file BrentMinimizer1D.cxx. ◆ SetDefaultNSearch(). void ROOT::Math::BrentMinimizer1D::SetDefaultNSearch ; (; int ; n). static . set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ; Definition at line 45 of file BrentMinimizer1D.cxx. ◆ SetFunction(). void ROOT::Math::BrentMinimizer1D::SetFunction ; (; const ROOT::Math::IGenFunction & ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:4060,Modifiability,inherit,inherited,4060," const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket minimum with grid (def is 100) ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  ; double fXMinimum;  Position of the estimated minimum. ;  . Additional Inherited Members;  Private Member Functions inherited from ROOT::Math::IMinimizer1D;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  . #include <Math/BrentMinimizer1D.h>. Inheritance diagram for ROOT::Math::BrentMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::BrentMinimizer1D ; (; ). Default Constructor. ; Definition at line 33 of file BrentMinimizer1D.cxx. ◆ ~BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::~BrentMinimizer1D ; (; ). inlineoverride . Default Destructor. ; Definition at line 70 of file BrentMinimizer1D.h. Member Function Documentation. ◆ FValLower(). double ROOT::Math::BrentMinimizer1D::FValLower ; (; ); const. overridevirtual . Return function value at current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 70 of file BrentMinimizer1D.cxx. ◆ FValMinimum(). double ROOT::Math::BrentMinimizer1D::FValMinimum ; (; ); const. overr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:413,Performance,perform,performing,413,". ROOT: ROOT::Math::BrentMinimizer1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::BrentMinimizer1D Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; User class for performing function minimization. ; It will use the Brent Method for function minimization in a given interval. First, a grid search is used to bracket the minimum value with the a step size = (xmax-xmin)/npx. The step size can be controlled via the SetNpx() function. A default value of npx = 100 is used. The default value con be changed using the static method SetDefaultNpx. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval. If the Brent method fails to converge the bracketing is repeated on the latest best estimate of the interval. The procedure is repeated with a maximum value (default =10) which can be set for all BrentRootFinder classes with the method SetDefaultNSearch; This class is implemented from TF1::GetMinimum.; To use the class, three steps have to be taken:; Create the class.; Set a function within an interval to look for the minimum.; Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. ; Definition at line 62 of file BrentMinimizer1D.h. Public Member Functions;  BrentMinimizer1D ();  Default Constructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:1501,Performance,perform,performed,1501,"n in a given interval. First, a grid search is used to bracket the minimum value with the a step size = (xmax-xmin)/npx. The step size can be controlled via the SetNpx() function. A default value of npx = 100 is used. The default value con be changed using the static method SetDefaultNpx. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval. If the Brent method fails to converge the bracketing is repeated on the latest best estimate of the interval. The procedure is repeated with a maximum value (default =10) which can be set for all BrentRootFinder classes with the method SetDefaultNSearch; This class is implemented from TF1::GetMinimum.; To use the class, three steps have to be taken:; Create the class.; Set a function within an interval to look for the minimum.; Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. ; Definition at line 62 of file BrentMinimizer1D.h. Public Member Functions;  BrentMinimizer1D ();  Default Constructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol=1.E-8, double relTol=1.E-10) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ;  ; const char * Name () const override;  Return name of minimization algorithm (""BrentMinimizer1D"") ;  ; void SetFunction (co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:2633,Testability,log,log,2633,"onstructor. ;  ;  ~BrentMinimizer1D () override;  Default Destructor. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol=1.E-8, double relTol=1.E-10) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ;  ; const char * Name () const override;  Return name of minimization algorithm (""BrentMinimizer1D"") ;  ; void SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup);  Sets function to be minimized. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; int Status () const override;  Returns status of last estimate. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Numbe",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:3617,Testability,log,log,3617," log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; int Status () const override;  Returns status of last estimate. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket minimum with grid (def is 100) ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  ; double fXMinimum;  Position of the estimated minimum. ;  . Additional Inherited Members;  Private Member Functions inherited from ROOT::Math::IMinimizer1D;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  . #include <Math/BrentMinimizer1D.h>. Inheritance diagram for ROOT::Math::BrentMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::BrentMinimizer1D ; (; ). Default Constructor. ; Definition at line 33 of file BrentMinimizer1D.cxx. ◆ ~BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::~BrentMinimizer1D ; (; ). inlineoverride . Defaul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:7603,Testability,log,log,7603,"tDefaultNpx(). void ROOT::Math::BrentMinimizer1D::SetDefaultNpx ; (; int ; npx). static . set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ; Definition at line 43 of file BrentMinimizer1D.cxx. ◆ SetDefaultNSearch(). void ROOT::Math::BrentMinimizer1D::SetDefaultNSearch ; (; int ; n). static . set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ; Definition at line 45 of file BrentMinimizer1D.cxx. ◆ SetFunction(). void ROOT::Math::BrentMinimizer1D::SetFunction ; (; const ROOT::Math::IGenFunction & ; f, . double ; xlow, . double ; xup . ). Sets function to be minimized. ; @param f Function to be minimized. @param xlow Lower bound of the search interval. @param xup Upper bound of the search interval. ; Definition at line 48 of file BrentMinimizer1D.cxx. ◆ SetLogScan(). void ROOT::Math::BrentMinimizer1D::SetLogScan ; (; bool ; on). inline . Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ; Definition at line 122 of file BrentMinimizer1D.h. ◆ SetNpx(). void ROOT::Math::BrentMinimizer1D::SetNpx ; (; int ; npx). inline . Set the number of point used to bracket root using a grid. ; Definition at line 116 of file BrentMinimizer1D.h. ◆ Status(). int ROOT::Math::BrentMinimizer1D::Status ; (; ); const. inlineoverridevirtual . Returns status of last estimate. ; If = 0 is OK ; Implements ROOT::Math::IMinimizer1D.; Definition at line 126 of file BrentMinimizer1D.h. ◆ XLower(). double ROOT::Math::BrentMinimizer1D::XLower ; (; ); const. inlineoverridevirtual . Return current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 78 of file BrentMinimizer1D.h. ◆ XMinimum(). double ROOT::Math::BrentMinimizer1D::XMinimum ; (; ); const. inlineoverridevirtual . Return current estimate of the position of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 75 of file BrentMinimizer1D.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:9163,Testability,log,log,9163,th::BrentMinimizer1D::XLower ; (; ); const. inlineoverridevirtual . Return current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 78 of file BrentMinimizer1D.h. ◆ XMinimum(). double ROOT::Math::BrentMinimizer1D::XMinimum ; (; ); const. inlineoverridevirtual . Return current estimate of the position of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 75 of file BrentMinimizer1D.h. ◆ XUpper(). double ROOT::Math::BrentMinimizer1D::XUpper ; (; ); const. inlineoverridevirtual . Return current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 81 of file BrentMinimizer1D.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::BrentMinimizer1D::fFunction. private . Pointer to the function. ; Definition at line 142 of file BrentMinimizer1D.h. ◆ fLogScan. bool ROOT::Math::BrentMinimizer1D::fLogScan. private . flag to control usage of a log scan ; Definition at line 143 of file BrentMinimizer1D.h. ◆ fNIter. int ROOT::Math::BrentMinimizer1D::fNIter. private . Number of iterations needed for the last estimation. ; Definition at line 144 of file BrentMinimizer1D.h. ◆ fNpx. int ROOT::Math::BrentMinimizer1D::fNpx. private . Number of points to bracket minimum with grid (def is 100) ; Definition at line 145 of file BrentMinimizer1D.h. ◆ fStatus. int ROOT::Math::BrentMinimizer1D::fStatus. private . Status of code of the last estimate. ; Definition at line 146 of file BrentMinimizer1D.h. ◆ fXMax. double ROOT::Math::BrentMinimizer1D::fXMax. private . Upper bound of the search interval. ; Definition at line 148 of file BrentMinimizer1D.h. ◆ fXMin. double ROOT::Math::BrentMinimizer1D::fXMin. private . Lower bound of the search interval. ; Definition at line 147 of file BrentMinimizer1D.h. ◆ fXMinimum. double ROOT::Math::BrentMinimizer1D::fXMinimum. private . Position of the estimated minimum. ; Definition at line 149 of file BrentMinimizer1D.h.,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:3005,Availability,error,error,3005,"look for the root. ;  ; bool SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Set function to solve and the interval in where to look for the root. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; int Status () const override;  Returns status of last estimate. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket root with initial grid (def is 100) ;  ; double fRoot;  Current estimation of the function root. ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  . #include <Math/BrentRootFinder.h>. Inheritance diagram fo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:8098,Availability,error,error,8098,"on). inline . Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ; Definition at line 95 of file BrentRootFinder.h. ◆ SetNpx(). void ROOT::Math::BrentRootFinder::SetNpx ; (; int ; npx). inline . Set the number of point used to bracket root using a grid. ; Definition at line 89 of file BrentRootFinder.h. ◆ Solve(). bool ROOT::Math::BrentRootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). overridevirtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval.; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 66 of file BrentRootFinder.cxx. ◆ Status(). int ROOT::Math::BrentRootFinder::Status ; (; ); const. inlineoverridevirtual . Returns status of last estimate. ; If = 0 is OK ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 101 of file BrentRootFinder.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::BrentRootFinder::fFunction. private . Pointer to the function. ; Definition at line 124 of file BrentRootFinder.h. ◆ fLogScan. bool ROOT::Math::BrentRootFinder::fLogScan. private . flag to control usage of a log scan ; Definition at line 125 of file BrentRootFinder.h. ◆ fNIter. int ROOT::Math::BrentRootFinder::fNIter. private . Number of iterations needed for the last estimation. ; Definition at line 126 of file BrentRootFinder.h. ◆ fNpx. int ROOT::Math::BrentRootFinder::fNpx. private . Number of po",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:8160,Availability,error,error,8160,") will work only if xlow > 0. ; Definition at line 95 of file BrentRootFinder.h. ◆ SetNpx(). void ROOT::Math::BrentRootFinder::SetNpx ; (; int ; npx). inline . Set the number of point used to bracket root using a grid. ; Definition at line 89 of file BrentRootFinder.h. ◆ Solve(). bool ROOT::Math::BrentRootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). overridevirtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval.; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 66 of file BrentRootFinder.cxx. ◆ Status(). int ROOT::Math::BrentRootFinder::Status ; (; ); const. inlineoverridevirtual . Returns status of last estimate. ; If = 0 is OK ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 101 of file BrentRootFinder.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::BrentRootFinder::fFunction. private . Pointer to the function. ; Definition at line 124 of file BrentRootFinder.h. ◆ fLogScan. bool ROOT::Math::BrentRootFinder::fLogScan. private . flag to control usage of a log scan ; Definition at line 125 of file BrentRootFinder.h. ◆ fNIter. int ROOT::Math::BrentRootFinder::fNIter. private . Number of iterations needed for the last estimation. ; Definition at line 126 of file BrentRootFinder.h. ◆ fNpx. int ROOT::Math::BrentRootFinder::fNpx. private . Number of points to bracket root with initial grid (def is 100) ; Definiti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:2724,Modifiability,inherit,inherited,2724,"inder""). ;  ; double Root () const override;  Returns root value. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Set function to solve and the interval in where to look for the root. ;  ; bool SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Set function to solve and the interval in where to look for the root. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; int Status () const override;  Returns status of last estimate. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket root with initial grid (def is 100) ;  ; double fRoot;  Current estimation of the function root. ;  ; int fStatus;  Status of co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:2301,Testability,log,log,2301,"he method SetDefaultNSearch; This class is implemented from TF1::GetX() method. ; Definition at line 51 of file BrentRootFinder.h. Public Member Functions;  BrentRootFinder ();  Default Constructor. ;  ;  ~BrentRootFinder () override;  Default Destructor. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; const char * Name () const override;  Return name of root finder algorithm (""BrentRootFinder""). ;  ; double Root () const override;  Returns root value. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Set function to solve and the interval in where to look for the root. ;  ; bool SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Set function to solve and the interval in where to look for the root. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; int Status () const override;  Returns status of last estimate. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination wit",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:3502,Testability,log,log,3502,"uble relTol=1E-10) override;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; int Status () const override;  Returns status of last estimate. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket root with initial grid (def is 100) ;  ; double fRoot;  Current estimation of the function root. ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  . #include <Math/BrentRootFinder.h>. Inheritance diagram for ROOT::Math::BrentRootFinder:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BrentRootFinder(). ROOT::Math::BrentRootFinder::BrentRootFinder ; (; ). Default Constructor. ; Definition at line 28 of file BrentRootFinder.cxx. ◆ ~BrentRootFinder(). ROOT::Math::BrentRootFinder::~BrentRootFinder ; (; ). inlineoverride . Default Destructor. ; Definition at line 60 of file BrentRootFinder.h. Member Function Documentation. ◆ Iterations(). int ROOT::Math::BrentRootFinder::Iter",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:7117,Testability,log,log,7117," of file IRootFinderMethod.h. ◆ SetFunction() [2/3]. bool ROOT::Math::BrentRootFinder::SetFunction ; (; const ROOT::Math::IGenFunction & ; , . double ; , . double ;  . ). overridevirtual . Sets the function for the rest of the algorithms. ; The parameters set the interval where the root has to be calculated. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 42 of file BrentRootFinder.cxx. ◆ SetFunction() [3/3]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGradFunction & ; , . double ;  . ). inlinevirtual . Set function to solve and the interval in where to look for the root. ; @param f Function to be minimized. @param xlow Lower bound of the search interval. @param xup Upper bound of the search interval. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 45 of file IRootFinderMethod.h. ◆ SetLogScan(). void ROOT::Math::BrentRootFinder::SetLogScan ; (; bool ; on). inline . Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ; Definition at line 95 of file BrentRootFinder.h. ◆ SetNpx(). void ROOT::Math::BrentRootFinder::SetNpx ; (; int ; npx). inline . Set the number of point used to bracket root using a grid. ; Definition at line 89 of file BrentRootFinder.h. ◆ Solve(). bool ROOT::Math::BrentRootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). overridevirtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval.; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desire",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:8801,Testability,log,log,8801,"px() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval.; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 66 of file BrentRootFinder.cxx. ◆ Status(). int ROOT::Math::BrentRootFinder::Status ; (; ); const. inlineoverridevirtual . Returns status of last estimate. ; If = 0 is OK ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 101 of file BrentRootFinder.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::BrentRootFinder::fFunction. private . Pointer to the function. ; Definition at line 124 of file BrentRootFinder.h. ◆ fLogScan. bool ROOT::Math::BrentRootFinder::fLogScan. private . flag to control usage of a log scan ; Definition at line 125 of file BrentRootFinder.h. ◆ fNIter. int ROOT::Math::BrentRootFinder::fNIter. private . Number of iterations needed for the last estimation. ; Definition at line 126 of file BrentRootFinder.h. ◆ fNpx. int ROOT::Math::BrentRootFinder::fNpx. private . Number of points to bracket root with initial grid (def is 100) ; Definition at line 127 of file BrentRootFinder.h. ◆ fRoot. double ROOT::Math::BrentRootFinder::fRoot. private . Current estimation of the function root. ; Definition at line 131 of file BrentRootFinder.h. ◆ fStatus. int ROOT::Math::BrentRootFinder::fStatus. private . Status of code of the last estimate. ; Definition at line 128 of file BrentRootFinder.h. ◆ fXMax. double ROOT::Math::BrentRootFinder::fXMax. private . Upper bound of the search interval. ; Definition at line 130 of file BrentRootFinder.h. ◆ fXMin. double ROOT::Math::BrentRootFinder::fXMin. private . Lower bound of the search interval. ; Definition at line 129 of file BrentRootFinder.h. Librarie",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:1590,Availability,error,error,1590,"defined range [a,b] using Chebyshev polynomials. ; It uses the algorithm from GSL; This class does not support copying ; Definition at line 71 of file ChebyshevApprox.h. Public Member Functions;  ChebyshevApprox (ChebyshevApprox &&)=delete;  ;  ChebyshevApprox (const ChebyshevApprox &)=delete;  ;  ChebyshevApprox (const ROOT::Math::IGenFunction &f, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on functions of type IGenFunction. ;  ;  ChebyshevApprox (GSLFuncPointer f, void *p, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on free functions with gsl_function type signature. ;  ; virtual ~ChebyshevApprox ();  ; ChebyshevApprox * Deriv ();  Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ;  ; std::pair< double, double > EvalErr (double x) const;  Evaluate the series at a given point x estimating both the series result and its absolute error. ;  ; std::pair< double, double > EvalErr (double x, size_t n) const;  evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ;  ; ChebyshevApprox * Integral ();  Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ;  ; double operator() (double x) const;  Evaluate the series at a given point x. ;  ; double operator() (double x, size_t n) const;  Evaluate the series at a given point, to (at most) the given order n. ;  ; ChebyshevApprox & operator= (ChebyshevApprox &&)=delete;  ; ChebyshevApprox & operator= (const ChebyshevApprox &)=delete;  . Protected Member Functions; void Initialize (GSLFuncPointer f, void *params, double a, double b);  Initialize series passing function and range. ;  . Private Member Functions;  ChebyshevApprox (size_t n);  construct a Chebyshev series or order n T",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:1779,Availability,error,error,1779,"lic Member Functions;  ChebyshevApprox (ChebyshevApprox &&)=delete;  ;  ChebyshevApprox (const ChebyshevApprox &)=delete;  ;  ChebyshevApprox (const ROOT::Math::IGenFunction &f, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on functions of type IGenFunction. ;  ;  ChebyshevApprox (GSLFuncPointer f, void *p, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on free functions with gsl_function type signature. ;  ; virtual ~ChebyshevApprox ();  ; ChebyshevApprox * Deriv ();  Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ;  ; std::pair< double, double > EvalErr (double x) const;  Evaluate the series at a given point x estimating both the series result and its absolute error. ;  ; std::pair< double, double > EvalErr (double x, size_t n) const;  evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ;  ; ChebyshevApprox * Integral ();  Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ;  ; double operator() (double x) const;  Evaluate the series at a given point x. ;  ; double operator() (double x, size_t n) const;  Evaluate the series at a given point, to (at most) the given order n. ;  ; ChebyshevApprox & operator= (ChebyshevApprox &&)=delete;  ; ChebyshevApprox & operator= (const ChebyshevApprox &)=delete;  . Protected Member Functions; void Initialize (GSLFuncPointer f, void *params, double a, double b);  Initialize series passing function and range. ;  . Private Member Functions;  ChebyshevApprox (size_t n);  construct a Chebyshev series or order n The series must be initialized from a function ;  . Private Attributes; GSLFunctionWrapper * fFunction;  ; size_t fOrder;  ; GSLChebSeries * fSeries;  . #include <Math/Chebys",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:4571,Availability,error,error,4571,"Definition at line 68 of file ChebyshevApprox.cxx. ◆ ChebyshevApprox() [3/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; size_t ; n). private . construct a Chebyshev series or order n The series must be initialized from a function ; Definition at line 75 of file ChebyshevApprox.cxx. ◆ ChebyshevApprox() [4/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; const ChebyshevApprox & ; ). delete . ◆ ChebyshevApprox() [5/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; ChebyshevApprox && ; ). delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:4584,Availability,error,error,4584,"th::ChebyshevApprox::ChebyshevApprox ; (; size_t ; n). private . construct a Chebyshev series or order n The series must be initialized from a function ; Definition at line 75 of file ChebyshevApprox.cxx. ◆ ChebyshevApprox() [4/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; const ChebyshevApprox & ; ). delete . ◆ ChebyshevApprox() [5/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; ChebyshevApprox && ; ). delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:4681,Availability,error,error,4681,"v series or order n The series must be initialized from a function ; Definition at line 75 of file ChebyshevApprox.cxx. ◆ ChebyshevApprox() [4/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; const ChebyshevApprox & ; ). delete . ◆ ChebyshevApprox() [5/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; ChebyshevApprox && ; ). delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer mu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:4991,Availability,error,error,4991,"hebyshevApprox() [5/5]. ROOT::Math::ChebyshevApprox::ChebyshevApprox ; (; ChebyshevApprox && ; ). delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:5004,Availability,error,error,5004," delete . Member Function Documentation. ◆ Deriv(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator(",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:5101,Availability,error,error,5101,"byshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x, . size_t ; n . ); const. Evaluate the series at a given point, to (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:5638,Deployability,integrat,integration,5638,"series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x, . size_t ; n . ); const. Evaluate the series at a given point, to (at most) the given order n. ; Definition at line 108 of file ChebyshevApprox.cxx. ◆ operator=() [1/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; ChebyshevApprox && ; ). delete . ◆ operator=() [2/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; const ChebyshevApprox & ; ). delete . Member Data Documentation. ◆ fFunction. GSLFunctionWrapper* ROOT::Math::ChebyshevApprox::fFunction. private . Definition at line 161 of file ChebyshevApprox.h. ◆ fOrder. size_t ROOT::Math::ChebyshevApprox:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:5638,Integrability,integrat,integration,5638,"series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x, . size_t ; n . ); const. Evaluate the series at a given point, to (at most) the given order n. ; Definition at line 108 of file ChebyshevApprox.cxx. ◆ operator=() [1/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; ChebyshevApprox && ; ). delete . ◆ operator=() [2/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; const ChebyshevApprox & ; ). delete . Member Data Documentation. ◆ fFunction. GSLFunctionWrapper* ROOT::Math::ChebyshevApprox::fFunction. private . Definition at line 161 of file ChebyshevApprox.h. ◆ fOrder. size_t ROOT::Math::ChebyshevApprox:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:530,Integrability,rout,routines,530,". ROOT: ROOT::Math::CholeskyDecomp< F, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::CholeskyDecomp< F, N > Class Template Reference. ; template<class F, unsigned N>; class ROOT::Math::CholeskyDecomp< F, N >class to compute the Cholesky decomposition of a matrix ; class to compute the Cholesky decomposition of a symmetric positive definite matrix; provides routines to check if the decomposition succeeded (i.e. if matrix is positive definite and non-singular), to solve a linear system for the given matrix and to obtain its inverse; the actual functionality is implemented in templated helper classes which have specializations for dimensions N = 1 to 6 to achieve a gain in speed for common matrix sizes; usage example: // let m be a symmetric positive definite SMatrix (use type float; // for internal computations, matrix size is 4x4); CholeskyDecomp<float, 4> decomp(m);; // check if the decomposition succeeded; if (!decomp) {; std::cerr << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:77; mTMarker mDefinition textangle.C:8. Definition at line 76 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecomp (const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecomp (G *m);  perform a Cholesky decomposition ;  ; template<typename G > ; bool getL (G *m) const;  obtain the decomposed matrix L ;  ; template<class M > ; bool getL (M &m) const;  obtain the decomposed matrix L ;  ; template<typename G > ; bool getLi (G *m) const;  ob",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:1657,Performance,perform,perform,1657,"ecomposition succeeded; if (!decomp) {; std::cerr << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:77; mTMarker mDefinition textangle.C:8. Definition at line 76 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecomp (const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecomp (G *m);  perform a Cholesky decomposition ;  ; template<typename G > ; bool getL (G *m) const;  obtain the decomposed matrix L ;  ; template<class M > ; bool getL (M &m) const;  obtain the decomposed matrix L ;  ; template<typename G > ; bool getLi (G *m) const;  obtain the inverse of the decomposed matrix L ;  ; template<class M > ; bool getLi (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F fL [N *(N+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses wi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:1744,Performance,perform,perform,1744,"ecomposition succeeded; if (!decomp) {; std::cerr << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:77; mTMarker mDefinition textangle.C:8. Definition at line 76 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecomp (const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecomp (G *m);  perform a Cholesky decomposition ;  ; template<typename G > ; bool getL (G *m) const;  obtain the decomposed matrix L ;  ; template<class M > ; bool getL (M &m) const;  obtain the decomposed matrix L ;  ; template<typename G > ; bool getLi (G *m) const;  obtain the inverse of the decomposed matrix L ;  ; template<class M > ; bool getLi (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F fL [N *(N+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses wi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:2924,Performance,perform,perform,2924,"i (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F fL [N *(N+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 94 of file CholeskyDecomp.h. ◆ CholeskyDecomp() [2/2]. template<class F , unsigned N> . template<typename G > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; G * ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 112 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F , unsigned N> . template<typename G > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:2959,Performance,perform,perform,2959,"i (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F fL [N *(N+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 94 of file CholeskyDecomp.h. ◆ CholeskyDecomp() [2/2]. template<class F , unsigned N> . template<typename G > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; G * ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 112 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F , unsigned N> . template<typename G > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:3399,Performance,perform,perform,3399,"+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 94 of file CholeskyDecomp.h. ◆ CholeskyDecomp() [2/2]. template<class F , unsigned N> . template<typename G > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; G * ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 112 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F , unsigned N> . template<typename G > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 208 of file CholeskyDecomp.h. ◆ getL() [2/2]. template<class F , unsigned N> . template<class M > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; M & ; m); const. inline . obtain the decomposed matrix L ; This is the method to use with a plain array.; Returnsif the decomposition was successful ; Definition at line 183 of file CholeskyDecomp.h. ◆ getLi() [1/2]. template<class F ,",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:3434,Performance,perform,perform,3434,"+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 94 of file CholeskyDecomp.h. ◆ CholeskyDecomp() [2/2]. template<class F , unsigned N> . template<typename G > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; G * ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 112 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F , unsigned N> . template<typename G > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 208 of file CholeskyDecomp.h. ◆ getL() [2/2]. template<class F , unsigned N> . template<class M > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; M & ; m); const. inline . obtain the decomposed matrix L ; This is the method to use with a plain array.; Returnsif the decomposition was successful ; Definition at line 183 of file CholeskyDecomp.h. ◆ getLi() [1/2]. template<class F ,",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html:3171,Security,access,access,3171,"i (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F fL [N *(N+1)/2];  lower triangular matrix L ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecomp() [1/2]. template<class F , unsigned N> . template<class M > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; const M & ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 94 of file CholeskyDecomp.h. ◆ CholeskyDecomp() [2/2]. template<class F , unsigned N> . template<typename G > . ROOT::Math::CholeskyDecomp< F, N >::CholeskyDecomp ; (; G * ; m). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 112 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F , unsigned N> . template<typename G > . bool ROOT::Math::CholeskyDecomp< F, N >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecomp.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:595,Integrability,rout,routines,595,". ROOT: ROOT::Math::CholeskyDecompGenDim< F > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::CholeskyDecompGenDim< F > Class Template Reference. ; template<class F>; class ROOT::Math::CholeskyDecompGenDim< F >class to compute the Cholesky decomposition of a matrix ; class to compute the Cholesky decomposition of a symmetric positive definite matrix when the dimensionality of the problem is not known at compile time; provides routines to check if the decomposition succeeded (i.e. if matrix is positive definite and non-singular), to solve a linear system for the given matrix and to obtain its inverse; the actual functionality is implemented in templated helper classes which have specializations for dimensions N = 1 to 6 to achieve a gain in speed for common matrix sizes; usage example: // let m be a symmetric positive definite SMatrix (use type float; // for internal computations, matrix size is 4x4); CholeskyDecompGenDim<float> decomp(4, m);; // check if the decomposition succeeded; if (!decomp) {; std::cerr << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompGenDimclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:311; mTMarker mDefinition textangle.C:8. Definition at line 310 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecompGenDim (unsigned N, const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecompGenDim (unsigned N, G *m);  perform a Cholesky decomposition ;  ;  ~CholeskyDecompGenDim ();  destructor ;  ; template<typename G > ; bool getL (G *m) const;  obtain the ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:1754,Performance,perform,perform,1754,"r << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompGenDimclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:311; mTMarker mDefinition textangle.C:8. Definition at line 310 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecompGenDim (unsigned N, const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecompGenDim (unsigned N, G *m);  perform a Cholesky decomposition ;  ;  ~CholeskyDecompGenDim ();  destructor ;  ; template<typename G > ; bool getL (G *m) const;  obtain the decomposed matrix L ;  ; template<class M > ; bool getL (M &m) const;  obtain the decomposed matrix L ;  ; template<typename G > ; bool getLi (G *m) const;  obtain the inverse of the decomposed matrix L ;  ; template<class M > ; bool getLi (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decompositi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:1859,Performance,perform,perform,1859,"r << ""decomposition failed!"" << std::endl;; } else {; // let rhs be a vector; we seek a vector x such that m * x = rhs; decomp.Solve(rhs);; // rhs now contains the solution we are looking for; ; // obtain the inverse of m, put it into m itself; decomp.Invert(m);; }; ROOT::Math::CholeskyDecompGenDimclass to compute the Cholesky decomposition of a matrixDefinition CholeskyDecomp.h:311; mTMarker mDefinition textangle.C:8. Definition at line 310 of file CholeskyDecomp.h. Public Member Functions; template<class M > ;  CholeskyDecompGenDim (unsigned N, const M &m);  perform a Cholesky decomposition ;  ; template<typename G > ;  CholeskyDecompGenDim (unsigned N, G *m);  perform a Cholesky decomposition ;  ;  ~CholeskyDecompGenDim ();  destructor ;  ; template<typename G > ; bool getL (G *m) const;  obtain the decomposed matrix L ;  ; template<class M > ; bool getL (M &m) const;  obtain the decomposed matrix L ;  ; template<typename G > ; bool getLi (G *m) const;  obtain the inverse of the decomposed matrix L ;  ; template<class M > ; bool getLi (M &m) const;  obtain the inverse of the decomposed matrix L ;  ; template<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decompositi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3158,Performance,perform,perform,3158,"<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3193,Performance,perform,perform,3193,"<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3656,Performance,perform,perform,3656,"fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename G > . bool ROOT::Math::CholeskyDecompGenDim< F >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 448 of file CholeskyDecomp.h. ◆ getL() [2/2]. template<class F > . template<class M > . bool ROOT::Math::CholeskyDecompGenDim< F >::getL ; (; M & ; m); const. inline . obtain the decomposed matrix L ; This i",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3691,Performance,perform,perform,3691,"fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename G > . bool ROOT::Math::CholeskyDecompGenDim< F >::getL ; (; G * ; m); const. inline . obtain the decomposed matrix L ; Returnsif the decomposition was successful; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 448 of file CholeskyDecomp.h. ◆ getL() [2/2]. template<class F > . template<class M > . bool ROOT::Math::CholeskyDecompGenDim< F >::getL ; (; M & ; m); const. inline . obtain the decomposed matrix L ; This i",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3405,Security,access,access,3405,"<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html:2090,Testability,test,test,2090," and phi Phi is restricted to be in the range [-PI,PI); See alsoOverview of the physics vector library ; Definition at line 48 of file CylindricalEta3D.h. Public Types; typedef T Scalar;  . Public Member Functions;  CylindricalEta3D ();  Default constructor with rho=eta=phi=0. ;  ; template<class CoordSystem > ;  CylindricalEta3D (const CoordSystem &v);  Construct from any Vector or coordinate system implementing Rho(), Eta() and Phi() ;  ;  CylindricalEta3D (const CylindricalEta3D &v);  copy constructor ;  ;  CylindricalEta3D (Scalar rho, Scalar eta, Scalar phi);  Construct from rho eta and phi values. ;  ; T Eta () const;  ; void GetCoordinates (Scalar &rho, Scalar &eta, Scalar &phi) const;  get internal data into 3 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 3 Scalar numbers ;  ; T Mag2 () const;  ; void Negate ();  negate the vector ;  ; bool operator!= (const CylindricalEta3D &rhs) const;  ; template<class CoordSystem > ; CylindricalEta3D & operator= (const CoordSystem &c);  generic assignment operator from any coordinate system ;  ; CylindricalEta3D & operator= (const CylindricalEta3D &v);  assignment operator ;  ; bool operator== (const CylindricalEta3D &rhs) const;  Exact component-by-component equality Note: Peculiar representations of the zero vector such as (0,1,0) will not test as equal to one another. ;  ; T Perp2 () const;  ; T Phi () const;  ; T R () const;  ; T Rho () const;  ; void Scale (T a);  scale by a scalar quantity a – for cylindrical eta coords, as long as a >= 0, only rho changes! ;  ; void SetCoordinates (const Scalar src[]);  Set internal data based on an array of 3 Scalar numbers. ;  ; void SetCoordinates (Scalar rho, Scalar eta, Scalar phi);  Set internal data based on 3 Scalar numbers. ;  ; void SetEta (T eta);  set the eta coordinate value keeping rho and phi constant ;  ; void SetPhi (T phi);  set the phi coordinate value keeping rho and eta constant ;  ; void SetRho (T rho);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html:6471,Testability,test,test,6471," negate the vector ; Definition at line 216 of file CylindricalEta3D.h. ◆ operator!=(). template<class T > . bool ROOT::Math::CylindricalEta3D< T >::operator!= ; (; const CylindricalEta3D< T > & ; rhs); const. inline . Definition at line 241 of file CylindricalEta3D.h. ◆ operator=() [1/2]. template<class T > . template<class CoordSystem > . CylindricalEta3D & ROOT::Math::CylindricalEta3D< T >::operator= ; (; const CoordSystem & ; c). inline . generic assignment operator from any coordinate system ; Definition at line 226 of file CylindricalEta3D.h. ◆ operator=() [2/2]. template<class T > . CylindricalEta3D & ROOT::Math::CylindricalEta3D< T >::operator= ; (; const CylindricalEta3D< T > & ; v). inline . assignment operator ; Definition at line 96 of file CylindricalEta3D.h. ◆ operator==(). template<class T > . bool ROOT::Math::CylindricalEta3D< T >::operator== ; (; const CylindricalEta3D< T > & ; rhs); const. inline . Exact component-by-component equality Note: Peculiar representations of the zero vector such as (0,1,0) will not test as equal to one another. ; Definition at line 238 of file CylindricalEta3D.h. ◆ Perp2(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Perp2 ; (; ); const. inline . Definition at line 159 of file CylindricalEta3D.h. ◆ Phi(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Phi ; (; ); const. inline . Definition at line 140 of file CylindricalEta3D.h. ◆ pi(). template<class T > . static Scalar ROOT::Math::CylindricalEta3D< T >::pi ; (; ). inlinestaticprivate . Definition at line 128 of file CylindricalEta3D.h. ◆ R(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::R ; (; ); const. inline . Definition at line 148 of file CylindricalEta3D.h. ◆ Restrict(). template<class T > . void ROOT::Math::CylindricalEta3D< T >::Restrict ; (; ). inlineprivate . Definition at line 129 of file CylindricalEta3D.h. ◆ Rho(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Rho ; (; ); const. inline . Definition at line 13",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:3601,Performance,perform,performed,3601,"alue to be returned for points outside the region ;  ; double XMax () const;  ; double XMin () const;  ; double YMax () const;  ; double YMin () const;  ; double ZOuterValue () const;  return the user defined Z-outer value ;  . Protected Member Functions; unsigned int Cell (unsigned int x, unsigned int y) const;  ; int CellX (double x) const;  ; int CellY (double y) const;  . Protected Attributes; std::set< unsigned int > fCells [(fNCells+1) *(fNCells+1)];  ! grid cells with containing triangles ;  ; bool fInit;  ! True if FindAllTriangles() has been performed ;  ; int fNdt;  ! Number of Delaunay triangles found ;  ; int fNpoints;  ! Number of data points ;  ; double fOffsetX;  ! Normalization offset X ;  ; double fOffsetY;  ! Normalization offset Y ;  ; double fScaleFactorX;  ! Normalization factor X ;  ; double fScaleFactorY;  ! Normalization factor Y ;  ; Triangles fTriangles;  ! Triangles of Triangulation ;  ; const double * fX;  ! Pointer to X array (managed externally) ;  ; double fXCellStep;  ! inverse denominator to calculate X cell = fNCells / (fXNmax - fXNmin) ;  ; std::vector< double > fXN;  ! normalized X ;  ; double fXNmax;  ! Maximum value of fXN ;  ; double fXNmin;  ! Minimum value of fXN ;  ; const double * fY;  ! Pointer to Y array ;  ; double fYCellStep;  ! inverse denominator to calculate X cell = fNCells / (fYNmax - fYNmin) ;  ; std::vector< double > fYN;  ! normalized Y ;  ; double fYNmax;  ! Maximum value of fYN ;  ; double fYNmin;  ! Minimum value of fYN ;  ; const double * fZ;  ! Pointer to Z array ;  ; double fZout;  ! Height for points lying outside the convex hull ;  . Static Protected Attributes; static const int fNCells = 25;  ! number of cells to divide the normalized space ;  . Private Member Functions;  Delaunay2D (const Delaunay2D &);  ; void DoFindTriangles ();  internal function to find the triangle use Triangle or CGAL if flag is set ;  ; double DoInterpolateNormalized (double x, double y);  internal method to compute the interpol",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:10332,Performance,perform,performed,10332,egion ; Definition at line 155 of file Delaunay2D.h. ◆ XMax(). double ROOT::Math::Delaunay2D::XMax ; (; ); const. inline . Definition at line 150 of file Delaunay2D.h. ◆ XMin(). double ROOT::Math::Delaunay2D::XMin ; (; ); const. inline . Definition at line 149 of file Delaunay2D.h. ◆ YMax(). double ROOT::Math::Delaunay2D::YMax ; (; ); const. inline . Definition at line 152 of file Delaunay2D.h. ◆ YMin(). double ROOT::Math::Delaunay2D::YMin ; (; ); const. inline . Definition at line 151 of file Delaunay2D.h. ◆ ZOuterValue(). double ROOT::Math::Delaunay2D::ZOuterValue ; (; ); const. inline . return the user defined Z-outer value ; Definition at line 158 of file Delaunay2D.h. Member Data Documentation. ◆ fCells. std::set<unsigned int> ROOT::Math::Delaunay2D::fCells[(fNCells+1) *(fNCells+1)]. protected . ! grid cells with containing triangles ; Definition at line 229 of file Delaunay2D.h. ◆ fInit. bool ROOT::Math::Delaunay2D::fInit. protected . ! True if FindAllTriangles() has been performed ; Definition at line 214 of file Delaunay2D.h. ◆ fNCells. const int ROOT::Math::Delaunay2D::fNCells = 25. staticprotected . ! number of cells to divide the normalized space ; Definition at line 226 of file Delaunay2D.h. ◆ fNdt. int ROOT::Math::Delaunay2D::fNdt. protected . ! Number of Delaunay triangles found ; Definition at line 194 of file Delaunay2D.h. ◆ fNpoints. int ROOT::Math::Delaunay2D::fNpoints. protected . ! Number of data points ; Definition at line 195 of file Delaunay2D.h. ◆ fOffsetX. double ROOT::Math::Delaunay2D::fOffsetX. protected . ! Normalization offset X ; Definition at line 206 of file Delaunay2D.h. ◆ fOffsetY. double ROOT::Math::Delaunay2D::fOffsetY. protected . ! Normalization offset Y ; Definition at line 207 of file Delaunay2D.h. ◆ fScaleFactorX. double ROOT::Math::Delaunay2D::fScaleFactorX. protected . ! Normalization factor X ; Definition at line 209 of file Delaunay2D.h. ◆ fScaleFactorY. double ROOT::Math::Delaunay2D::fScaleFactorY. protected . ! Normaliza,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:664,Testability,test,test,664,". ROOT: ROOT::Math::Delaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::Delaunay2D Class ReferenceMath » MathCore. ; Class to generate a Delaunay triangulation of a 2D set of points. ; Algorithm based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; After having found the triangles using the above library, barycentric coordinates are used to test whether a point is inside a triangle (inTriangle test) and for interpolation. All this below is implemented in the DoInterpolateNormalized function.; Given triangle ABC and point P, P can be expressed by; P.x = la * A.x + lb * B.x + lc * C.x P.y = la * A.y + lb * B.y + lc * C.y; with lc = 1 - la - lb; P.x = la * A.x + lb * B.x + (1-la-lb) * C.x P.y = la * A.y + lb * B.y + (1-la-lb) * C.y; Rearranging yields; la * (A.x - C.x) + lb * (B.x - C.x) = P.x - C.x la * (A.y - C.y) + lb * (B.y - C.y) = P.y - C.y; Thus; la = ( (B.y - C.y)*(P.x - C.x) + (C.x - B.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lb = ( (C.y - A.y)*(P.x - C.x) + (A.x - C.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lc = 1 - la - lb; We save the inverse denominator to speedup computation; invDenom = 1 / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); P is in triangle (including edges if; 0 <= [la, lb, lc] <= 1; The interpolation of P.z is; P.z = la * A.z + lb * B.z + lc * C.z; To speed up localisation of points (to see to which triangle belong) a grid is laid over the internal coordinate space. A reference to triangle ABC is added to all grid cells that include ABC's bounding box. The size of the grid is defined to be 25x25; Optionally (if the compiler macro HAS_GCAL is defined ) the t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:718,Testability,test,test,718,". ROOT: ROOT::Math::Delaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::Delaunay2D Class ReferenceMath » MathCore. ; Class to generate a Delaunay triangulation of a 2D set of points. ; Algorithm based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; After having found the triangles using the above library, barycentric coordinates are used to test whether a point is inside a triangle (inTriangle test) and for interpolation. All this below is implemented in the DoInterpolateNormalized function.; Given triangle ABC and point P, P can be expressed by; P.x = la * A.x + lb * B.x + lc * C.x P.y = la * A.y + lb * B.y + lc * C.y; with lc = 1 - la - lb; P.x = la * A.x + lb * B.x + (1-la-lb) * C.x P.y = la * A.y + lb * B.y + (1-la-lb) * C.y; Rearranging yields; la * (A.x - C.x) + lb * (B.x - C.x) = P.x - C.x la * (A.y - C.y) + lb * (B.y - C.y) = P.y - C.y; Thus; la = ( (B.y - C.y)*(P.x - C.x) + (C.x - B.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lb = ( (C.y - A.y)*(P.x - C.x) + (A.x - C.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lc = 1 - la - lb; We save the inverse denominator to speedup computation; invDenom = 1 / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); P is in triangle (including edges if; 0 <= [la, lb, lc] <= 1; The interpolation of P.z is; P.z = la * A.z + lb * B.z + lc * C.z; To speed up localisation of points (to see to which triangle belong) a grid is laid over the internal coordinate space. A reference to triangle ABC is added to all grid cells that include ABC's bounding box. The size of the grid is defined to be 25x25; Optionally (if the compiler macro HAS_GCAL is defined ) the t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2404,Availability,error,error,2404," using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2600,Availability,error,error,2600," using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:5614,Availability,error,error,5614,"tor.cxx. ◆ Derivator() [2/4]. ROOT::Math::Derivator::Derivator ; (; const IGenFunction & ; f). explicit . Construct using a ROOT::Math::IGenFunction interface. ; Definition at line 51 of file Derivator.cxx. ◆ Derivator() [3/4]. ROOT::Math::Derivator::Derivator ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). explicit . Construct using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 58 of file Derivator.cxx. ◆ ~Derivator(). ROOT::Math::Derivator::~Derivator ; (; ). virtual . destructor ; Definition at line 66 of file Derivator.cxx. ◆ Derivator() [4/4]. ROOT::Math::Derivator::Derivator ; (; const Derivator & ; ). private . Definition at line 72 of file Derivator.cxx. Member Function Documentation. ◆ Error(). double ROOT::Math::Derivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 110 of file Derivator.cxx. ◆ Eval() [2/5]. double ROOT::Math::Derivator::Eval ; (; const IMultiGenFunction & ; f, . const double * ; x, . unsigned int ; icoord = 0, . double ; h = 1E-8 . ). static . Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ; Definition at line 126 of file Derivator.cxx. ◆ Eval() [3/5]. double ROOT::Math::Derivator::Eval ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:10626,Availability,error,error,10626,"e 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 88 of file Derivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::Derivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 84 of file Derivator.cxx. ◆ Status(). int ROOT::Math::Derivator::Status ; (; ); const. return the error status of the last derivative calculation ; Definition at line 156 of file Derivator.cxx. Member Data Documentation. ◆ fDerivator. GSLDerivator* ROOT::Math::Derivator::fDerivator. mutableprivate . Definition at line 232 of file Derivator.h. Libraries for ROOT::Math::Derivator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Derivator.h; math/mathmore/src/Derivator.cxx. ROOTMathDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1396,Energy Efficiency,adapt,adaptive,1396,"; Class for computing numerical derivative of a function. ; Presently this class is implemented only using the numerical derivatives algorithms provided by GSL using the implementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1569,Energy Efficiency,adapt,adaptive,1569,"lementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1741,Energy Efficiency,adapt,adaptive,1741,"(double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2934,Energy Efficiency,adapt,adaptive,2934,"for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:3146,Energy Efficiency,adapt,adaptive,3146,"Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ;  ; static double Eval (IParamMultiFunction &f, const double *x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:3359,Energy Efficiency,adapt,adaptive,3359,"ot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ;  ; static double Eval (IParamMultiFunction &f, const double *x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ;  . #include <Math/Derivator.h>; Member Typedef Documentation. ◆ GSLFuncPointer. typedef double(* ROOT::Math::Derivator::GSLFuncPointer) (double, void *). signa",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:5965,Energy Efficiency,adapt,adaptive,5965,"using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 58 of file Derivator.cxx. ◆ ~Derivator(). ROOT::Math::Derivator::~Derivator ; (; ). virtual . destructor ; Definition at line 66 of file Derivator.cxx. ◆ Derivator() [4/4]. ROOT::Math::Derivator::Derivator ; (; const Derivator & ; ). private . Definition at line 72 of file Derivator.cxx. Member Function Documentation. ◆ Error(). double ROOT::Math::Derivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 110 of file Derivator.cxx. ◆ Eval() [2/5]. double ROOT::Math::Derivator::Eval ; (; const IMultiGenFunction & ; f, . const double * ; x, . unsigned int ; icoord = 0, . double ; h = 1E-8 . ). static . Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ; Definition at line 126 of file Derivator.cxx. ◆ Eval() [3/5]. double ROOT::Math::Derivator::Eval ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:6629,Energy Efficiency,adapt,adaptive,6629,"alculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 110 of file Derivator.cxx. ◆ Eval() [2/5]. double ROOT::Math::Derivator::Eval ; (; const IMultiGenFunction & ; f, . const double * ; x, . unsigned int ; icoord = 0, . double ; h = 1E-8 . ). static . Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ; Definition at line 126 of file Derivator.cxx. ◆ Eval() [3/5]. double ROOT::Math::Derivator::Eval ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:7694,Energy Efficiency,adapt,adaptive,7694,"; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical deriv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8044,Energy Efficiency,adapt,adaptive,8044,"r. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8439,Energy Efficiency,adapt,adaptive,8439,"efinition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8715,Energy Efficiency,adapt,adaptive,8715,"ference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:9036,Energy Efficiency,adapt,adaptive,9036,"oint x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for eva",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:9386,Energy Efficiency,adapt,adaptive,9386,"cal derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 88 of file Derivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::Derivator::SetFunction ; (; const IGenFunction & ; f)",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1115,Integrability,interface,interface,1115,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::Derivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function. ; Presently this class is implemented only using the numerical derivatives algorithms provided by GSL using the implementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:4786,Integrability,interface,interface,4786,"ith respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ;  ; static double Eval (IParamMultiFunction &f, const double *x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ;  . #include <Math/Derivator.h>; Member Typedef Documentation. ◆ GSLFuncPointer. typedef double(* ROOT::Math::Derivator::GSLFuncPointer) (double, void *). signature for function pointers used by GSL ; Definition at line 68 of file Derivator.h. Constructor & Destructor Documentation. ◆ Derivator() [1/4]. ROOT::Math::Derivator::Derivator ; (; ). Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ; Definition at line 47 of file Derivator.cxx. ◆ Derivator() [2/4]. ROOT::Math::Derivator::Derivator ; (; const IGenFunction & ; f). explicit . Construct using a ROOT::Math::IGenFunction interface. ; Definition at line 51 of file Derivator.cxx. ◆ Derivator() [3/4]. ROOT::Math::Derivator::Derivator ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). explicit . Construct using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 58 of file Derivator.cxx. ◆ ~Derivator(). ROOT::Math::Derivator::~Derivator ; (; ). virtual . destructor ; Definition at line 66 of file Derivator.cxx. ◆ Derivator() [4/4]. ROOT::Math::Derivator::Derivator ; (; const Derivator & ; ). private . Definition at line 72 of file Derivator.cxx. Member Function Documentation. ◆ Error(). double ROOT::Math::Derivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1396,Modifiability,adapt,adaptive,1396,"; Class for computing numerical derivative of a function. ; Presently this class is implemented only using the numerical derivatives algorithms provided by GSL using the implementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1569,Modifiability,adapt,adaptive,1569,"lementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1741,Modifiability,adapt,adaptive,1741,"(double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2934,Modifiability,adapt,adaptive,2934,"for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:3146,Modifiability,adapt,adaptive,3146,"Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ;  ; static double Eval (IParamMultiFunction &f, const double *x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:3359,Modifiability,adapt,adaptive,3359,"ot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ;  ; static double Eval (IParamMultiFunction &f, const double *x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ;  . #include <Math/Derivator.h>; Member Typedef Documentation. ◆ GSLFuncPointer. typedef double(* ROOT::Math::Derivator::GSLFuncPointer) (double, void *). signa",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:5965,Modifiability,adapt,adaptive,5965,"using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 58 of file Derivator.cxx. ◆ ~Derivator(). ROOT::Math::Derivator::~Derivator ; (; ). virtual . destructor ; Definition at line 66 of file Derivator.cxx. ◆ Derivator() [4/4]. ROOT::Math::Derivator::Derivator ; (; const Derivator & ; ). private . Definition at line 72 of file Derivator.cxx. Member Function Documentation. ◆ Error(). double ROOT::Math::Derivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 110 of file Derivator.cxx. ◆ Eval() [2/5]. double ROOT::Math::Derivator::Eval ; (; const IMultiGenFunction & ; f, . const double * ; x, . unsigned int ; icoord = 0, . double ; h = 1E-8 . ). static . Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ; Definition at line 126 of file Derivator.cxx. ◆ Eval() [3/5]. double ROOT::Math::Derivator::Eval ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:6629,Modifiability,adapt,adaptive,6629,"alculation ; Definition at line 154 of file Derivator.cxx. ◆ Eval() [1/5]. double ROOT::Math::Derivator::Eval ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 110 of file Derivator.cxx. ◆ Eval() [2/5]. double ROOT::Math::Derivator::Eval ; (; const IMultiGenFunction & ; f, . const double * ; x, . unsigned int ; icoord = 0, . double ; h = 1E-8 . ). static . Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ; Definition at line 126 of file Derivator.cxx. ◆ Eval() [3/5]. double ROOT::Math::Derivator::Eval ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative of a function f at a point x. ; It uses Derivator::EvalCentral to compute the derivative using an adaptive central difference algorithm with a step size h ; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:7694,Modifiability,adapt,adaptive,7694,"; Definition at line 93 of file Derivator.cxx. ◆ Eval() [4/5]. double ROOT::Math::Derivator::Eval ; (; IParamFunction & ; f, . double ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical deriv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8044,Modifiability,adapt,adaptive,8044,"r. ; Definition at line 134 of file Derivator.cxx. ◆ Eval() [5/5]. double ROOT::Math::Derivator::Eval ; (; IParamMultiFunction & ; f, . const double * ; x, . const double * ; p, . unsigned int ; ipar = 0, . double ; h = 1E-8 . ). static . Evaluate the derivative with respect a parameter for a multi-dim parameteric function at the point ( x[],p[]) with respect the parameter p_ipar. ; Definition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8439,Modifiability,adapt,adaptive,8439,"efinition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8715,Modifiability,adapt,adaptive,8715,"ference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:9036,Modifiability,adapt,adaptive,9036,"oint x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for eva",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:9386,Modifiability,adapt,adaptive,9386,"cal derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 88 of file Derivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::Derivator::SetFunction ; (; const IGenFunction & ; f)",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html:4360,Energy Efficiency,efficient,efficient,4360,"cementVector2D & operator+= (const DisplacementVector2D< OtherCoords, Tag > &v);  Self Addition with a displacement vector. ;  ; DisplacementVector2D operator- () const;  Negative of the vector. ;  ; template<class OtherCoords > ; DisplacementVector2D & operator-= (const DisplacementVector2D< OtherCoords, Tag > &v);  Self Difference with a displacement vector. ;  ; DisplacementVector2D operator/ (Scalar a) const;  Division of a vector with a real number. ;  ; DisplacementVector2D & operator/= (Scalar a);  divide this vector by a scalar quantity ;  ; template<class OtherCoords > ; DisplacementVector2D & operator= (const DisplacementVector2D< OtherCoords, Tag > &v);  Assignment operator from a displacement vector of arbitrary type. ;  ; template<class ForeignVector > ; DisplacementVector2D & operator= (const ForeignVector &v);  Assignment from a foreign 2D vector type, for example, Hep2Vector Precondition: v must implement methods x() and y() ;  ; template<class OtherCoords > ; DisplacementVector2D & operator= (const PositionVector2D< OtherCoords, Tag > &rhs);  Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ;  ; bool operator== (const DisplacementVector2D &rhs) const;  Exact equality. ;  ; Scalar Phi () const;  Polar phi, converting if necessary from internal coordinate system. ;  ; Scalar phi () const;  ; Scalar R () const;  Polar R, converting if necessary from internal coordinate system. ;  ; Scalar r () const;  ; void Rotate (Scalar angle);  Rotate by an angle. ;  ; DisplacementVector2D< CoordSystem, Tag > & SetCoordinates (Scalar a, Scalar b);  Set internal data based on 2 Scalar numbers. ;  ; DisplacementVector2D< CoordSystem, Tag > & SetPhi (Scalar ang);  Change Phi - Polar2D coordinates. ;  ; DisplacementVector2D< CoordSystem, Tag > & SetR (Scalar a);  Change R - Polar2D coordinates only. ;  ; DisplacementVector2D< CoordSystem, Tag > & SetX (Scalar a);  Change X - Cartesian2D coordinates only. ;  ; Di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html:19141,Energy Efficiency,efficient,efficient,19141,"temTag> . template<class ForeignVector > . DisplacementVector2D & ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::operator= ; (; const ForeignVector & ; v). inline . Assignment from a foreign 2D vector type, for example, Hep2Vector Precondition: v must implement methods x() and y() ; Definition at line 141 of file DisplacementVector2D.h. ◆ operator=() [4/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . DisplacementVector2D & ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::operator= ; (; const PositionVector2D< OtherCoords, OtherTag > & ; ). private . ◆ operator=() [5/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . DisplacementVector2D & ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::operator= ; (; const PositionVector2D< OtherCoords, Tag > & ; rhs). inline . Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ; Definition at line 129 of file DisplacementVector2D.h. ◆ operator==(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . bool ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::operator== ; (; const DisplacementVector2D< CoordSystem, Tag > & ; rhs); const. inline . Exact equality. ; Definition at line 189 of file DisplacementVector2D.h. ◆ Phi(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Phi ; (; ); const. inline . Polar phi, converting if necessary from internal coordinate system. ; Definition at line 223 of file DisplacementVector2D.h. ◆ phi(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::phi ; (; ); const. inline . Definition at line 387 of file DisplacementVector2D.h. ◆ R(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html:12451,Performance,perform,perform,12451,"ector2D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dimension(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . unsigned int ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dimension ; (; ); const. inline . Dimension. ; Definition at line 201 of file DisplacementVector2D.h. ◆ Dot() [1/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const DisplacementVector2D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dot() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const DisplacementVector2D< OtherCoords, Tag > & ; v); const. inline . Return the scalar (dot) product of two displacement vectors. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 289 of file DisplacementVector2D.h. ◆ Dot() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const OtherVector & ; v); const. inline . Return the scalar (dot) product of two vectors. ; It is possible to perform the product for any classes implementing x() and y() member functions ; Definition at line 298 of file DisplacementVector2D.h. ◆ GetCoordinates(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . void ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b . ); const. inline . get internal data into 2 Scalar numbers. ; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector ; Definition at line 170 of file DisplacementVector2D.h. ◆ Mag2(). template<class CoordSystem , class Tag = DefaultCoordinateSystem",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html:12911,Performance,perform,perform,12911,"Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const DisplacementVector2D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dot() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const DisplacementVector2D< OtherCoords, Tag > & ; v); const. inline . Return the scalar (dot) product of two displacement vectors. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 289 of file DisplacementVector2D.h. ◆ Dot() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Dot ; (; const OtherVector & ; v); const. inline . Return the scalar (dot) product of two vectors. ; It is possible to perform the product for any classes implementing x() and y() member functions ; Definition at line 298 of file DisplacementVector2D.h. ◆ GetCoordinates(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . void ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b . ); const. inline . get internal data into 2 Scalar numbers. ; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector ; Definition at line 170 of file DisplacementVector2D.h. ◆ Mag2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Mag2 ; (; ); const. inline . Magnitute squared ( r^2 in spherical coordinate) ; Definition at line 231 of file DisplacementVector2D.h. ◆ mag2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::mag2 ; (; ); const. inline . Definition at line 388 of file DisplacementVector2D.h. ◆ operator!=(). t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:5304,Energy Efficiency,efficient,efficient,5304,"entVector3D & operator+= (const DisplacementVector3D< OtherCoords, Tag > &v);  Self Addition with a displacement vector. ;  ; DisplacementVector3D operator- () const;  Negative of the vector. ;  ; template<class OtherCoords > ; DisplacementVector3D & operator-= (const DisplacementVector3D< OtherCoords, Tag > &v);  Self Difference with a displacement vector. ;  ; DisplacementVector3D operator/ (Scalar a) const;  Division of a vector with a real number. ;  ; DisplacementVector3D & operator/= (Scalar a);  divide this vector by a scalar quantity ;  ; template<class OtherCoords > ; DisplacementVector3D & operator= (const DisplacementVector3D< OtherCoords, Tag > &v);  Assignment operator from a displacement vector of arbitrary type. ;  ; template<class ForeignVector > ; DisplacementVector3D & operator= (const ForeignVector &v);  Assignment from a foreign 3D vector type, for example, Hep3Vector Precondition: v must implement methods x(), y() and z() ;  ; template<class OtherCoords > ; DisplacementVector3D & operator= (const PositionVector3D< OtherCoords, Tag > &rhs);  Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ;  ; bool operator== (const DisplacementVector3D &rhs) const;  Exact equality. ;  ; Scalar Perp2 () const;  Transverse component squared (rho^2 in cylindrical coordinates. ;  ; Scalar perp2 () const;  ; Scalar Phi () const;  Polar phi, converting if necessary from internal coordinate system. ;  ; Scalar phi () const;  ; Scalar R () const;  Polar R, converting if necessary from internal coordinate system. ;  ; Scalar r () const;  ; Scalar Rho () const;  Cylindrical transverse component rho. ;  ; Scalar rho () const;  ; DisplacementVector3D< CoordSystem, Tag > & SetCoordinates (const Scalar src[]);  Set internal data based on a C-style array of 3 Scalar numbers. ;  ; template<class IT > ; DisplacementVector3D< CoordSystem, Tag > & SetCoordinates (IT begin, IT end);  Set internal data based on 3 Scalars at",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:24256,Energy Efficiency,efficient,efficient,24256,"g> . template<class ForeignVector > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const ForeignVector & ; v). inline . Assignment from a foreign 3D vector type, for example, Hep3Vector Precondition: v must implement methods x(), y() and z() ; Definition at line 155 of file DisplacementVector3D.h. ◆ operator=() [4/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const PositionVector3D< OtherCoords, OtherTag > & ; ). private . ◆ operator=() [5/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const PositionVector3D< OtherCoords, Tag > & ; rhs). inline . Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ; Definition at line 143 of file DisplacementVector3D.h. ◆ operator==(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . bool ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator== ; (; const DisplacementVector3D< CoordSystem, Tag > & ; rhs); const. inline . Exact equality. ; Definition at line 261 of file DisplacementVector3D.h. ◆ Perp2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Perp2 ; (; ); const. inline . Transverse component squared (rho^2 in cylindrical coordinates. ; Definition at line 328 of file DisplacementVector3D.h. ◆ perp2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::perp2 ; (; ); const. inline . Definition at line 529 of file DisplacementVector3D.h. ◆ Phi(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:14531,Performance,perform,perform,14531,"tCoordinateSystemTag> . CoordSystem ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Coordinates ; (; ); const. inline . Retrieve a copy of the coordinates object. ; Definition at line 182 of file DisplacementVector3D.h. ◆ Cross() [1/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . DisplacementVector3D ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Cross ; (; const DisplacementVector3D< OtherCoords, OtherTag > & ; ); const. private . ◆ Cross() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . DisplacementVector3D ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Cross ; (; const DisplacementVector3D< OtherCoords, Tag > & ; v); const. inline . Return vector (cross) product of two displacement vectors, as a vector in the coordinate system of this class. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 423 of file DisplacementVector3D.h. ◆ Cross() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . DisplacementVector3D ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Cross ; (; const OtherVector & ; v); const. inline . Return vector (cross) product of two vectors, as a vector in the coordinate system of this class. ; It is possible to perform the product for any classes implementing X(), Y() and Z() member functions ; Definition at line 437 of file DisplacementVector3D.h. ◆ Dimension(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . unsigned int ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dimension ; (; ); const. inline . Dimension. ; Definition at line 273 of file DisplacementVector3D.h. ◆ Dot() [1/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . Scalar ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:15059,Performance,perform,perform,15059,"vate . ◆ Cross() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . DisplacementVector3D ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Cross ; (; const DisplacementVector3D< OtherCoords, Tag > & ; v); const. inline . Return vector (cross) product of two displacement vectors, as a vector in the coordinate system of this class. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 423 of file DisplacementVector3D.h. ◆ Cross() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . DisplacementVector3D ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Cross ; (; const OtherVector & ; v); const. inline . Return vector (cross) product of two vectors, as a vector in the coordinate system of this class. ; It is possible to perform the product for any classes implementing X(), Y() and Z() member functions ; Definition at line 437 of file DisplacementVector3D.h. ◆ Dimension(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . unsigned int ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dimension ; (; ); const. inline . Dimension. ; Definition at line 273 of file DisplacementVector3D.h. ◆ Dot() [1/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dot() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, Tag > & ; v); const. inline . Return the scalar (dot) product of two displacement vectors. ; It is possible to perform the product for any type of vector c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:16073,Performance,perform,perform,16073,"; Definition at line 437 of file DisplacementVector3D.h. ◆ Dimension(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . unsigned int ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dimension ; (; ); const. inline . Dimension. ; Definition at line 273 of file DisplacementVector3D.h. ◆ Dot() [1/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dot() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, Tag > & ; v); const. inline . Return the scalar (dot) product of two displacement vectors. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 403 of file DisplacementVector3D.h. ◆ Dot() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const OtherVector & ; v); const. inline . Return the scalar (dot) product of two vectors. ; It is possible to perform the product for any classes implementing x(), y() and z() member functions ; Definition at line 412 of file DisplacementVector3D.h. ◆ Eta(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Eta ; (; ); const. inline . Polar eta, converting if necessary from internal coordinate system. ; Definition at line 311 of file DisplacementVector3D.h. ◆ eta(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::eta ; (; ); const. inline . Definit",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:16533,Performance,perform,perform,16533,"lar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, OtherTag > & ; ); const. private . ◆ Dot() [2/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const DisplacementVector3D< OtherCoords, Tag > & ; v); const. inline . Return the scalar (dot) product of two displacement vectors. ; It is possible to perform the product for any type of vector coordinates, but they must have the same coordinate system tag ; Definition at line 403 of file DisplacementVector3D.h. ◆ Dot() [3/3]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherVector > . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Dot ; (; const OtherVector & ; v); const. inline . Return the scalar (dot) product of two vectors. ; It is possible to perform the product for any classes implementing x(), y() and z() member functions ; Definition at line 412 of file DisplacementVector3D.h. ◆ Eta(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Eta ; (; ); const. inline . Polar eta, converting if necessary from internal coordinate system. ; Definition at line 311 of file DisplacementVector3D.h. ◆ eta(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::eta ; (; ); const. inline . Definition at line 526 of file DisplacementVector3D.h. ◆ GetCoordinates() [1/4]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class IT > . void ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::GetCoordinates ; (; IT ; begin); const. inline . get internal data into 3 Scalars starting at *begin ; Definition at line 236 of file DisplacementVector3D.h. ◆ GetCoordinates() [2/4]. template<class CoordSystem , class Tag",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:2280,Availability,error,error,2280,"ven data set object. ;  ; virtual TRandom * GetRandom ();  Get the random engine used by the sampler. ;  ; bool HasParentPdf () const;  Check if there is a parent distribution defined. ;  ; virtual bool Init (const char *="""");  Initialize the sampling generator with the given algorithm. ;  ; virtual bool Init (const DistSamplerOptions &opt);  Initialize the generators with the given DistSamplerOption object. ;  ; unsigned int NDim () const;  return the dimension of the parent distribution (and the data) ;  ; const ROOT::Math::IMultiGenFunction & ParentPdf () const;  Get the parent distribution function (must be called after setting the function). ;  ; const double * Sample ();  Sample one event and return an array x with sample coordinates values. ;  ; virtual bool Sample (double *x)=0;  Sample one event in multi-dimension by filling the given array. ;  ; virtual double Sample1D ();  Sample one event in one dimension. ;  ; virtual bool SampleBin (double prob, double &value, double *error=nullptr);  Sample one bin given an estimate of the pdf in the bin. ;  ; virtual bool SampleBins (unsigned int n, const double *prob, double *values, double *errors=nullptr);  Sample a set of bins given a vector of probabilities Typically multinomial statistics will be used and the sum of the probabilities will be equal to the total number of events to be generated For sampling the bins independently, SampleBin should be used. ;  ; virtual void SetArea (double);  Set the normalization area of distribution. ;  ; virtual void SetCdf (const ROOT::Math::IGenFunction &);  Set usage of Cumulative of PDF. ;  ; virtual void SetDPdf (const ROOT::Math::IGenFunction &);  Set usage of Derivative of PDF. ;  ; virtual void SetFunction (const ROOT::Math::IGenFunction &func);  set the parent function distribution to use for random sampling (one dim case) ;  ; virtual void SetFunction (const ROOT::Math::IMultiGenFunction &func);  set the parent function distribution to use for random sampling (multi-",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:2443,Availability,error,errors,2443,"g generator with the given algorithm. ;  ; virtual bool Init (const DistSamplerOptions &opt);  Initialize the generators with the given DistSamplerOption object. ;  ; unsigned int NDim () const;  return the dimension of the parent distribution (and the data) ;  ; const ROOT::Math::IMultiGenFunction & ParentPdf () const;  Get the parent distribution function (must be called after setting the function). ;  ; const double * Sample ();  Sample one event and return an array x with sample coordinates values. ;  ; virtual bool Sample (double *x)=0;  Sample one event in multi-dimension by filling the given array. ;  ; virtual double Sample1D ();  Sample one event in one dimension. ;  ; virtual bool SampleBin (double prob, double &value, double *error=nullptr);  Sample one bin given an estimate of the pdf in the bin. ;  ; virtual bool SampleBins (unsigned int n, const double *prob, double *values, double *errors=nullptr);  Sample a set of bins given a vector of probabilities Typically multinomial statistics will be used and the sum of the probabilities will be equal to the total number of events to be generated For sampling the bins independently, SampleBin should be used. ;  ; virtual void SetArea (double);  Set the normalization area of distribution. ;  ; virtual void SetCdf (const ROOT::Math::IGenFunction &);  Set usage of Cumulative of PDF. ;  ; virtual void SetDPdf (const ROOT::Math::IGenFunction &);  Set usage of Derivative of PDF. ;  ; virtual void SetFunction (const ROOT::Math::IGenFunction &func);  set the parent function distribution to use for random sampling (one dim case) ;  ; virtual void SetFunction (const ROOT::Math::IMultiGenFunction &func);  set the parent function distribution to use for random sampling (multi-dim case) ;  ; template<class Function > ; void SetFunction (Function &func, unsigned int dim);  set the parent function distribution to use for sampling (generic case) ;  ; virtual void SetMode (const std::vector< double > &);  Set the mode of the di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:11011,Availability,error,error,11011,"df . Must be called after setting the function ; Definition at line 276 of file DistSampler.h. ◆ Sample() [1/2]. const double * ROOT::Math::DistSampler::Sample ; (; ). inline . Sample one event and return an array x with sample coordinates values. ; Definition at line 193 of file DistSampler.h. ◆ Sample() [2/2]. virtual bool ROOT::Math::DistSampler::Sample ; (; double * ; x). pure virtual . Sample one event in multi-dimension by filling the given array. ; Return false if the sampling failed. Abstract method to be re-implemented by the derived classes ; Implemented in TFoamSampler, and TUnuranSampler. ◆ Sample1D(). virtual double ROOT::Math::DistSampler::Sample1D ; (; ). inlinevirtual . Sample one event in one dimension. ; Specialized implementation could be provided by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 184 of file DistSampler.h. ◆ SampleBin(). virtual bool ROOT::Math::DistSampler::SampleBin ; (; double ; prob, . double & ; value, . double * ; error = nullptr . ). inlinevirtual . Sample one bin given an estimate of the pdf in the bin. ; (this can be function value at the center or its integral in the bin divided by the bin width) By default do not do random sample, just return the function values Typically Poisson statistics will be used ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 212 of file DistSampler.h. ◆ SampleBins(). virtual bool ROOT::Math::DistSampler::SampleBins ; (; unsigned int ; n, . const double * ; prob, . double * ; values, . double * ; errors = nullptr . ). inlinevirtual . Sample a set of bins given a vector of probabilities Typically multinomial statistics will be used and the sum of the probabilities will be equal to the total number of events to be generated For sampling the bins independently, SampleBin should be used. ; Definition at line 223 of file DistSampler.h. ◆ SetArea(). virtual void ROOT::Math::DistSampler::SetArea ; (; double ; ). inlinevirtual . Set the normalization a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:11558,Availability,error,errors,11558," classes ; Implemented in TFoamSampler, and TUnuranSampler. ◆ Sample1D(). virtual double ROOT::Math::DistSampler::Sample1D ; (; ). inlinevirtual . Sample one event in one dimension. ; Specialized implementation could be provided by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 184 of file DistSampler.h. ◆ SampleBin(). virtual bool ROOT::Math::DistSampler::SampleBin ; (; double ; prob, . double & ; value, . double * ; error = nullptr . ). inlinevirtual . Sample one bin given an estimate of the pdf in the bin. ; (this can be function value at the center or its integral in the bin divided by the bin width) By default do not do random sample, just return the function values Typically Poisson statistics will be used ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 212 of file DistSampler.h. ◆ SampleBins(). virtual bool ROOT::Math::DistSampler::SampleBins ; (; unsigned int ; n, . const double * ; prob, . double * ; values, . double * ; errors = nullptr . ). inlinevirtual . Sample a set of bins given a vector of probabilities Typically multinomial statistics will be used and the sum of the probabilities will be equal to the total number of events to be generated For sampling the bins independently, SampleBin should be used. ; Definition at line 223 of file DistSampler.h. ◆ SetArea(). virtual void ROOT::Math::DistSampler::SetArea ; (; double ; ). inlinevirtual . Set the normalization area of distribution. ; Implemented by derived classes if needed ; Reimplemented in TUnuranSampler.; Definition at line 158 of file DistSampler.h. ◆ SetCdf(). virtual void ROOT::Math::DistSampler::SetCdf ; (; const ROOT::Math::IGenFunction & ; ). inlinevirtual . Set usage of Cumulative of PDF. ; Can be implemented by derived class ; Reimplemented in TUnuranSampler.; Definition at line 170 of file DistSampler.h. ◆ SetDPdf(). virtual void ROOT::Math::DistSampler::SetDPdf ; (; const ROOT::Math::IGenFunction & ; ). inlinevirtual . Set usage of De",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:751,Modifiability,extend,extend,751,". ROOT: ROOT::Math::DistSampler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::DistSampler Class ReferenceabstractMath » MathCore » Interface classes for Random number generation. ; Interface class for generic sampling of a distribution, i.e. ; generating random numbers according to arbitrary distributions ; Definition at line 57 of file DistSampler.h. Public Member Functions;  DistSampler ();  default constructor ;  ; virtual ~DistSampler ();  virtual destructor ;  ; virtual bool Generate (unsigned int nevt, const int *nbins, ROOT::Fit::BinData &data, bool extend=true, bool expErr=true);  Generate a binned data set. ;  ; virtual bool Generate (unsigned int nevt, double *data, bool eventRow=false);  Generate a vector of events by filling the passed data vector. ;  ; bool Generate (unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData &data, bool extend=true, bool expErr=true);  Same as before but passing the range in case of 1 dim data. ;  ; virtual bool Generate (unsigned int nevt, ROOT::Fit::UnBinData &data);  Generate a un-binned data set by filling the given data set object. ;  ; virtual TRandom * GetRandom ();  Get the random engine used by the sampler. ;  ; bool HasParentPdf () const;  Check if there is a parent distribution defined. ;  ; virtual bool Init (const char *="""");  Initialize the sampling generator with the given algorithm. ;  ; virtual bool Init (const DistSamplerOptions &opt);  Initialize the generators with the given DistSamplerOption object. ;  ; unsigned int NDim () const;  return the dimension of the parent distribution (and the data) ;  ; const ROOT::Math::IMultiGenFunction & ParentPdf () const;  Get the parent distribution function (must be called after setting the function). ;  ; const double * Sample ();  Sample one event and return an ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:1066,Modifiability,extend,extend,1066," . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::DistSampler Class ReferenceabstractMath » MathCore » Interface classes for Random number generation. ; Interface class for generic sampling of a distribution, i.e. ; generating random numbers according to arbitrary distributions ; Definition at line 57 of file DistSampler.h. Public Member Functions;  DistSampler ();  default constructor ;  ; virtual ~DistSampler ();  virtual destructor ;  ; virtual bool Generate (unsigned int nevt, const int *nbins, ROOT::Fit::BinData &data, bool extend=true, bool expErr=true);  Generate a binned data set. ;  ; virtual bool Generate (unsigned int nevt, double *data, bool eventRow=false);  Generate a vector of events by filling the passed data vector. ;  ; bool Generate (unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData &data, bool extend=true, bool expErr=true);  Same as before but passing the range in case of 1 dim data. ;  ; virtual bool Generate (unsigned int nevt, ROOT::Fit::UnBinData &data);  Generate a un-binned data set by filling the given data set object. ;  ; virtual TRandom * GetRandom ();  Get the random engine used by the sampler. ;  ; bool HasParentPdf () const;  Check if there is a parent distribution defined. ;  ; virtual bool Init (const char *="""");  Initialize the sampling generator with the given algorithm. ;  ; virtual bool Init (const DistSamplerOptions &opt);  Initialize the generators with the given DistSamplerOption object. ;  ; unsigned int NDim () const;  return the dimension of the parent distribution (and the data) ;  ; const ROOT::Math::IMultiGenFunction & ParentPdf () const;  Get the parent distribution function (must be called after setting the function). ;  ; const double * Sample ();  Sample one event and return an array x with sample coordinates values. ;  ; virtual bool",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:6011,Modifiability,extend,extend,6011,"tance diagram for ROOT::Math::DistSampler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ DistSampler(). ROOT::Math::DistSampler::DistSampler ; (; ). inline . default constructor ; Definition at line 62 of file DistSampler.h. ◆ ~DistSampler(). ROOT::Math::DistSampler::~DistSampler ; (; ). virtual . virtual destructor ; Definition at line 29 of file DistSampler.cxx. Member Function Documentation. ◆ DoSetDimension(). void ROOT::Math::DistSampler::DoSetDimension ; (; unsigned int ; ndim). protectedvirtual . Definition at line 78 of file DistSampler.cxx. ◆ DoSetFunction(). void ROOT::Math::DistSampler::DoSetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func, . bool ; copy . ). protectedvirtual . Definition at line 63 of file DistSampler.cxx. ◆ Generate() [1/4]. bool ROOT::Math::DistSampler::Generate ; (; unsigned int ; nevt, . const int * ; nbins, . ROOT::Fit::BinData & ; data, . bool ; extend = true, . bool ; expErr = true . ). virtual . Generate a binned data set. ; A range must have been set before (otherwise inf is returned) and the bins are equidistant in the previously defined range bin center values must be present in given data set If the sampler is implemented by a random one, the entries will be binned according to the Poisson distribution It is assumed the distribution is normalized, otherwise the nevt must be scaled accordingly. The expected value/bin nexp = f(x_i) * binArea/ nevt Extend control if use a fixed (i.e. multinomial statistics) or floating total number of events ; Definition at line 135 of file DistSampler.cxx. ◆ Generate() [2/4]. bool ROOT::Math::DistSampler::Generate ; (; unsigned int ; nevt, . double * ; data, . bool ; eventRow = false . ). virtual . Generate a vector of events by filling the passed data vector. ; The flag eventRow indicates how the events are arranged in the multi-dim case. The can be arranged in rows or in columns. With eventR",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:7382,Modifiability,extend,extend,7382," assumed the distribution is normalized, otherwise the nevt must be scaled accordingly. The expected value/bin nexp = f(x_i) * binArea/ nevt Extend control if use a fixed (i.e. multinomial statistics) or floating total number of events ; Definition at line 135 of file DistSampler.cxx. ◆ Generate() [2/4]. bool ROOT::Math::DistSampler::Generate ; (; unsigned int ; nevt, . double * ; data, . bool ; eventRow = false . ). virtual . Generate a vector of events by filling the passed data vector. ; The flag eventRow indicates how the events are arranged in the multi-dim case. The can be arranged in rows or in columns. With eventRow=false events are the columns in data: {x1,x2,.....,xn},{y1,....yn} With eventRow=true events are rows in data: {x1,y1},{x2,y2},.....{xn,yn} ; Definition at line 115 of file DistSampler.cxx. ◆ Generate() [3/4]. bool ROOT::Math::DistSampler::Generate ; (; unsigned int ; nevt, . int ; nbins, . double ; xmin, . double ; xmax, . ROOT::Fit::BinData & ; data, . bool ; extend = true, . bool ; expErr = true . ). inline . Same as before but passing the range in case of 1 dim data. ; Definition at line 260 of file DistSampler.h. ◆ Generate() [4/4]. bool ROOT::Math::DistSampler::Generate ; (; unsigned int ; nevt, . ROOT::Fit::UnBinData & ; data . ). virtual . Generate a un-binned data set by filling the given data set object. ; If the data set object is not empty, the new generated data will be appended to the existing one. ; Definition at line 99 of file DistSampler.cxx. ◆ GetRandom(). virtual TRandom * ROOT::Math::DistSampler::GetRandom ; (; ). inlinevirtual . Get the random engine used by the sampler. ; To be implemented by the derived classes who needs it Returns zero by default ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 132 of file DistSampler.h. ◆ HasParentPdf(). bool ROOT::Math::DistSampler::HasParentPdf ; (; ); const. inline . Check if there is a parent distribution defined. ; Definition at line 178 of file DistSampler.h",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:4765,Performance,cache,cached,4765,"e (const ROOT::Fit::DataRange &range);  Set the range using the ROOT::Fit::DataRange class. ;  ; void SetRange (const std::vector< double > &xmin, const std::vector< double > &xmax);  Set the range for all dimensions (use std::vector) ;  ; void SetRange (double xmin, double xmax, int icoord=0);  Set the range in a given dimension. ;  ; virtual void SetSeed (unsigned int);  Set the random seed for the TRandom instances used by the sampler classes. ;  ; virtual void SetUseLogPdf (bool=true);  Use the log of the provided pdf. ;  . Protected Member Functions; virtual void DoSetDimension (unsigned int ndim);  ; virtual void DoSetFunction (const ROOT::Math::IMultiGenFunction &func, bool copy);  ; bool IsInitialized ();  ; const ROOT::Fit::DataRange & PdfRange () const;  return the data range of the Pdf . Must be called after setting the function ;  . Private Attributes; std::vector< double > fData;  ! internal array used to cached the sample data ;  ; const ROOT::Math::IMultiGenFunction * fFunc;  internal function (ND) ;  ; bool fOwnFunc;  flag to indicate if the function is owned ;  ; ROOT::Fit::DataRange * fRange;  data range ;  . #include <Math/DistSampler.h>. Inheritance diagram for ROOT::Math::DistSampler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ DistSampler(). ROOT::Math::DistSampler::DistSampler ; (; ). inline . default constructor ; Definition at line 62 of file DistSampler.h. ◆ ~DistSampler(). ROOT::Math::DistSampler::~DistSampler ; (; ). virtual . virtual destructor ; Definition at line 29 of file DistSampler.cxx. Member Function Documentation. ◆ DoSetDimension(). void ROOT::Math::DistSampler::DoSetDimension ; (; unsigned int ; ndim). protectedvirtual . Definition at line 78 of file DistSampler.cxx. ◆ DoSetFunction(). void ROOT::Math::DistSampler::DoSetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func, . bool ; copy . ). protectedvirtual . Definition at lin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:16056,Performance,cache,cached,16056,":Math::DistSampler::SetRange ; (; const std::vector< double > & ; xmin, . const std::vector< double > & ; xmax . ). inline . Set the range for all dimensions (use std::vector) ; Definition at line 140 of file DistSampler.h. ◆ SetRange() [4/4]. void ROOT::Math::DistSampler::SetRange ; (; double ; xmin, . double ; xmax, . int ; icoord = 0 . ). Set the range in a given dimension. ; Definition at line 40 of file DistSampler.cxx. ◆ SetSeed(). virtual void ROOT::Math::DistSampler::SetSeed ; (; unsigned int ; ). inlinevirtual . Set the random seed for the TRandom instances used by the sampler classes. ; To be implemented by the derived classes who provides random sampling ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 125 of file DistSampler.h. ◆ SetUseLogPdf(). virtual void ROOT::Math::DistSampler::SetUseLogPdf ; (; bool ; = true). inlinevirtual . Use the log of the provided pdf. ; Implemented by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 162 of file DistSampler.h. Member Data Documentation. ◆ fData. std::vector<double> ROOT::Math::DistSampler::fData. mutableprivate . ! internal array used to cached the sample data ; Definition at line 286 of file DistSampler.h. ◆ fFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::DistSampler::fFunc. private . internal function (ND) ; Definition at line 288 of file DistSampler.h. ◆ fOwnFunc. bool ROOT::Math::DistSampler::fOwnFunc. private . flag to indicate if the function is owned ; Definition at line 285 of file DistSampler.h. ◆ fRange. ROOT::Fit::DataRange* ROOT::Math::DistSampler::fRange. private . data range ; Definition at line 287 of file DistSampler.h. Libraries for ROOT::Math::DistSampler:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/DistSampler.h; math/mathcore/src/DistSampler.cxx. ROOTMathDistSampler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:4337,Testability,log,log,4337,"> ; void SetFunction (Function &func, unsigned int dim);  set the parent function distribution to use for sampling (generic case) ;  ; virtual void SetMode (const std::vector< double > &);  Set the mode of the distribution (Multi-dim case). ;  ; virtual void SetMode (double);  Set the mode of the distribution (1D case). ;  ; virtual void SetRandom (TRandom *);  Set the random engine to be used. ;  ; void SetRange (const double *xmin, const double *xmax);  Set the range for all dimensions. ;  ; void SetRange (const ROOT::Fit::DataRange &range);  Set the range using the ROOT::Fit::DataRange class. ;  ; void SetRange (const std::vector< double > &xmin, const std::vector< double > &xmax);  Set the range for all dimensions (use std::vector) ;  ; void SetRange (double xmin, double xmax, int icoord=0);  Set the range in a given dimension. ;  ; virtual void SetSeed (unsigned int);  Set the random seed for the TRandom instances used by the sampler classes. ;  ; virtual void SetUseLogPdf (bool=true);  Use the log of the provided pdf. ;  . Protected Member Functions; virtual void DoSetDimension (unsigned int ndim);  ; virtual void DoSetFunction (const ROOT::Math::IMultiGenFunction &func, bool copy);  ; bool IsInitialized ();  ; const ROOT::Fit::DataRange & PdfRange () const;  return the data range of the Pdf . Must be called after setting the function ;  . Private Attributes; std::vector< double > fData;  ! internal array used to cached the sample data ;  ; const ROOT::Math::IMultiGenFunction * fFunc;  internal function (ND) ;  ; bool fOwnFunc;  flag to indicate if the function is owned ;  ; ROOT::Fit::DataRange * fRange;  data range ;  . #include <Math/DistSampler.h>. Inheritance diagram for ROOT::Math::DistSampler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ DistSampler(). ROOT::Math::DistSampler::DistSampler ; (; ). inline . default constructor ; Definition at line 62 of file Dist",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:15782,Testability,log,log,15782,"OT::Fit::DataRange class. ; Definition at line 58 of file DistSampler.cxx. ◆ SetRange() [3/4]. void ROOT::Math::DistSampler::SetRange ; (; const std::vector< double > & ; xmin, . const std::vector< double > & ; xmax . ). inline . Set the range for all dimensions (use std::vector) ; Definition at line 140 of file DistSampler.h. ◆ SetRange() [4/4]. void ROOT::Math::DistSampler::SetRange ; (; double ; xmin, . double ; xmax, . int ; icoord = 0 . ). Set the range in a given dimension. ; Definition at line 40 of file DistSampler.cxx. ◆ SetSeed(). virtual void ROOT::Math::DistSampler::SetSeed ; (; unsigned int ; ). inlinevirtual . Set the random seed for the TRandom instances used by the sampler classes. ; To be implemented by the derived classes who provides random sampling ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 125 of file DistSampler.h. ◆ SetUseLogPdf(). virtual void ROOT::Math::DistSampler::SetUseLogPdf ; (; bool ; = true). inlinevirtual . Use the log of the provided pdf. ; Implemented by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 162 of file DistSampler.h. Member Data Documentation. ◆ fData. std::vector<double> ROOT::Math::DistSampler::fData. mutableprivate . ! internal array used to cached the sample data ; Definition at line 286 of file DistSampler.h. ◆ fFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::DistSampler::fFunc. private . internal function (ND) ; Definition at line 288 of file DistSampler.h. ◆ fOwnFunc. bool ROOT::Math::DistSampler::fOwnFunc. private . flag to indicate if the function is owned ; Definition at line 285 of file DistSampler.h. ◆ fRange. ROOT::Fit::DataRange* ROOT::Math::DistSampler::fRange. private . data range ; Definition at line 287 of file DistSampler.h. Libraries for ROOT::Math::DistSampler:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/DistSampler.h; math/mathcore/src/DistSampler.cxx. ROOTMathDistSampler. ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html:961,Usability,simpl,simplify,961,". ROOT: ROOT::Math::Expr< ExprType, T, D, D2, R1 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Expr< ExprType, T, D, D2, R1 > Class Template Reference. ; template<class ExprType, class T, unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>>; class ROOT::Math::Expr< ExprType, T, D, D2, R1 >; Definition at line 138 of file Expression.h. Public Types; enum  { kRows = D; , kCols = D2; };  ; typedef T value_type;  . Public Member Functions;  Expr (const ExprType &rhs);  ;  ~Expr ();  ; T apply (unsigned int i) const;  ; bool IsInUse (const T *p) const;  function to determine if any use operand is being used (has same memory address) ;  ; T operator() (unsigned int i, unsigned j) const;  ; std::ostream & print (std::ostream &os) const;  used by operator<<() simplify to use apply(i,j) ;  . Private Attributes; ExprType rhs_;  . #include <Math/Expression.h>; Member Typedef Documentation. ◆ value_type. template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . typedef T ROOT::Math::Expr< ExprType, T, D, D2, R1 >::value_type. Definition at line 140 of file Expression.h. Member Enumeration Documentation. ◆ anonymous enum. template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . anonymous enum. EnumeratorkRows ; kCols . Definition at line 174 of file Expression.h. Constructor & Destructor Documentation. ◆ Expr(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ROOT::Math::Expr< ExprType, T, D, D2, R1 >::Expr ; (; const ExprType & ; rhs). inline . Definition at line 143 of file Expression.h. ◆ ~Expr(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ROOT::Math::Expr< ExprType, T, D",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Expr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html:3232,Usability,simpl,simplify,3232,"2>> . ROOT::Math::Expr< ExprType, T, D, D2, R1 >::Expr ; (; const ExprType & ; rhs). inline . Definition at line 143 of file Expression.h. ◆ ~Expr(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ROOT::Math::Expr< ExprType, T, D, D2, R1 >::~Expr ; (; ). inline . Definition at line 147 of file Expression.h. Member Function Documentation. ◆ apply(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . T ROOT::Math::Expr< ExprType, T, D, D2, R1 >::apply ; (; unsigned int ; i); const. inline . Definition at line 150 of file Expression.h. ◆ IsInUse(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . bool ROOT::Math::Expr< ExprType, T, D, D2, R1 >::IsInUse ; (; const T * ; p); const. inline . function to determine if any use operand is being used (has same memory address) ; Definition at line 161 of file Expression.h. ◆ operator()(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . T ROOT::Math::Expr< ExprType, T, D, D2, R1 >::operator() ; (; unsigned int ; i, . unsigned ; j . ); const. inline . Definition at line 153 of file Expression.h. ◆ print(). template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . std::ostream & ROOT::Math::Expr< ExprType, T, D, D2, R1 >::print ; (; std::ostream & ; os); const. inline . used by operator<<() simplify to use apply(i,j) ; Definition at line 184 of file Expression.h. Member Data Documentation. ◆ rhs_. template<class ExprType , class T , unsigned int D, unsigned int D2 = 1, class R1 = MatRepStd<T,D,D2>> . ExprType ROOT::Math::Expr< ExprType, T, D, D2, R1 >::rhs_. private . Definition at line 203 of file Expression.h. math/smatrix/inc/Math/Expression.h. ROOTMathExpr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Expr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Expr.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html:1170,Availability,avail,available,1170,". ROOT: ROOT::Math::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Factory Class Reference. ; Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. ; Definition at line 31 of file Factory.h. Static Public Member Functions; static ROOT::Math::DistSampler * CreateDistSampler (const std::string &samplerType="""");  static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ;  ; static ROOT::Math::Minimizer * CreateMinimizer (const std::string &minimizerType="""", const std::string &algoType="""");  static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use default values defined in ROOT::Math::MinimizerOptions See also there for the possible options and algorithms available ;  . #include <Math/Factory.h>; Member Function Documentation. ◆ CreateDistSampler(). ROOT::Math::DistSampler * Factory::CreateDistSampler ; (; const std::string & ; samplerType = """"). static . static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ; Definition at line 167 of file Factory.cxx. ◆ CreateMinimizer(). ROOT::Math::Minimizer * Factory::CreateMinimizer ; (; const std::string & ; minimizerType = """", . const std::string & ; algoType = """" . ). static . static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html:2112,Availability,avail,available,2112,"tions; static ROOT::Math::DistSampler * CreateDistSampler (const std::string &samplerType="""");  static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ;  ; static ROOT::Math::Minimizer * CreateMinimizer (const std::string &minimizerType="""", const std::string &algoType="""");  static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use default values defined in ROOT::Math::MinimizerOptions See also there for the possible options and algorithms available ;  . #include <Math/Factory.h>; Member Function Documentation. ◆ CreateDistSampler(). ROOT::Math::DistSampler * Factory::CreateDistSampler ; (; const std::string & ; samplerType = """"). static . static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ; Definition at line 167 of file Factory.cxx. ◆ CreateMinimizer(). ROOT::Math::Minimizer * Factory::CreateMinimizer ; (; const std::string & ; minimizerType = """", . const std::string & ; algoType = """" . ). static . static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use default values defined in ROOT::Math::MinimizerOptions See also there for the possible options and algorithms available ; Definition at line 63 of file Factory.cxx. The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Factory.h; math/mathcore/src/Factory.cxx. ROOTMathFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html:297,Integrability,interface,interfaces,297,". ROOT: ROOT::Math::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Factory Class Reference. ; Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. ; Definition at line 31 of file Factory.h. Static Public Member Functions; static ROOT::Math::DistSampler * CreateDistSampler (const std::string &samplerType="""");  static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ;  ; static ROOT::Math::Minimizer * CreateMinimizer (const std::string &minimizerType="""", const std::string &algoType="""");  static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use default values defined in ROOT::Math::MinimizerOptions See also there for the possible options and algorithms available ;  . #include <Math/Factory.h>; Member Function Documentation. ◆ CreateDistSampler(). ROOT::Math::DistSampler * Factory::CreateDistSampler ; (; const std::string & ; samplerType = """"). static . static method to create the distribution sampler class given a string specifying the type Supported sampler types are: Unuran, Foam If no name is given use default values defined in DistSamplerOptions ; Definition at line 167 of file Factory.cxx. ◆ CreateMinimizer(). ROOT::Math::Minimizer * Factory::CreateMinimizer ; (; const std::string & ; minimizerType = """", . const std::string & ; algoType = """" . ). static . static method to create the corresponding Minimizer given the string Supported Minimizers types are: Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic If no name is given use",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Factory.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:432,Integrability,wrap,wrap,432,". ROOT: ROOT::Math::Functor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Documentation for class Functor class. ; It is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: . any C++ callable object implementation double operator()( const double * ) . a free C function of type double ()(const double * ) . an std::function of type std::function<double (double const *)> . a member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . The function dimension is required when constructing the functor. ; Definition at line 47 of file Functor.h. Public Member Functions;  Functor ();  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor (const PtrObj &p, MemFn memFn, unsigned int dim);  Construct from a pointer to member function (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Mu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:516,Integrability,wrap,wrap,516,". ROOT: ROOT::Math::Functor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Documentation for class Functor class. ; It is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: . any C++ callable object implementation double operator()( const double * ) . a free C function of type double ()(const double * ) . an std::function of type std::function<double (double const *)> . a member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . The function dimension is required when constructing the functor. ; Definition at line 47 of file Functor.h. Public Member Functions;  Functor ();  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor (const PtrObj &p, MemFn memFn, unsigned int dim);  Construct from a pointer to member function (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Mu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:1640,Modifiability,inherit,inherited,1640,"> . a member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . The function dimension is required when constructing the functor. ; Definition at line 47 of file Functor.h. Public Member Functions;  Functor ();  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor (const PtrObj &p, MemFn memFn, unsigned int dim);  Construct from a pointer to member function (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Must be implemented by derived classes. ;  . Private Attributes; unsigned int fDim;  ; std::function< double(double const *)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; typedef double BackendType;  ; typedef IBaseFunctionMultiDimTempl< double > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Functor() [1/3]. ROOT::Math::Functor::Functor ; (; ). inline . Default constructor. ; Definition at line 52 of file Functor.h. ◆ Functor() [2/3]. template<class PtrObj , typename MemFn > . ROOT::Mat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:2179,Modifiability,inherit,inherited,2179,"tion (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Must be implemented by derived classes. ;  . Private Attributes; unsigned int fDim;  ; std::function< double(double const *)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; typedef double BackendType;  ; typedef IBaseFunctionMultiDimTempl< double > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Functor() [1/3]. ROOT::Math::Functor::Functor ; (; ). inline . Default constructor. ; Definition at line 52 of file Functor.h. ◆ Functor() [2/3]. template<class PtrObj , typename MemFn > . ROOT::Math::Functor::Functor ; (; const PtrObj & ; p, . MemFn ; memFn, . unsigned int ; dim . ). inline . Construct from a pointer to member function (multi-dim type). ; Definition at line 56 of file Functor.h. ◆ Functor() [3/3]. ROOT::Math::Functor::Functor ; (; std::function< double(double const *)> const & ; f, . unsigned int ; dim . ). inline . Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ; Definition at line ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:447,Usability,simpl,simple,447,". ROOT: ROOT::Math::Functor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Documentation for class Functor class. ; It is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: . any C++ callable object implementation double operator()( const double * ) . a free C function of type double ()(const double * ) . an std::function of type std::function<double (double const *)> . a member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . The function dimension is required when constructing the functor. ; Definition at line 47 of file Functor.h. Public Member Functions;  Functor ();  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor (const PtrObj &p, MemFn memFn, unsigned int dim);  Construct from a pointer to member function (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Mu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:444,Integrability,wrap,wrap,444,". ROOT: ROOT::Math::Functor1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor1D Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Functor1D class for one-dimensional functions. ; It is used to wrap in a very simple and convenient way: . any C++ callable object implementation double operator()( double ) . a free C function of type double ()(double ) . a member function with the correct signature like Foo::Eval(double ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . Definition at line 95 of file Functor.h. Public Member Functions;  Functor1D ()=default;  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor1D (const PtrObj &p, MemFn memFn);  ;  Functor1D (std::function< double(double)> const &f);  Construct from a callable object with the right signature implementing double operator() (double x). ;  ; Functor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safa",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:1219,Modifiability,inherit,inherited,1219,"tion Classes and Interfaces » Generic Function Evaluation Interfaces. ; Functor1D class for one-dimensional functions. ; It is used to wrap in a very simple and convenient way: . any C++ callable object implementation double operator()( double ) . a free C function of type double ()(double ) . a member function with the correct signature like Foo::Eval(double ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . Definition at line 95 of file Functor.h. Public Member Functions;  Functor1D ()=default;  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor1D (const PtrObj &p, MemFn memFn);  ;  Functor1D (std::function< double(double)> const &f);  Construct from a callable object with the right signature implementing double operator() (double x). ;  ; Functor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Functor1D() [1/3]. ROOT::Math::Functor1D::Functor1D ; (; ). default . Default constructor. . ◆ Functor1D() [2/3]. ROOT::Math::Functor1D::Functor1D ; (; std::function< double(double)> const & ; f). inline . Construct from a callable o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:1774,Modifiability,inherit,inherited,1774,"e Functor.h. Public Member Functions;  Functor1D ()=default;  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor1D (const PtrObj &p, MemFn memFn);  ;  Functor1D (std::function< double(double)> const &f);  Construct from a callable object with the right signature implementing double operator() (double x). ;  ; Functor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Functor1D() [1/3]. ROOT::Math::Functor1D::Functor1D ; (; ). default . Default constructor. . ◆ Functor1D() [2/3]. ROOT::Math::Functor1D::Functor1D ; (; std::function< double(double)> const & ; f). inline . Construct from a callable object with the right signature implementing double operator() (double x). ; Definition at line 104 of file Functor.h. ◆ Functor1D() [3/3]. template<class PtrObj , typename MemFn > . ROOT::Math::Functor1D::Functor1D ; (; const PtrObj & ; p, . MemFn ; memFn . ). inline . Definition at line 108 of file Functor.h. Member Function Documentation. ◆ Clone(). Functor1D * ROOT::Math::Functor1D::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class will implement",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:459,Usability,simpl,simple,459,". ROOT: ROOT::Math::Functor1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor1D Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Functor1D class for one-dimensional functions. ; It is used to wrap in a very simple and convenient way: . any C++ callable object implementation double operator()( double ) . a free C function of type double ()(double ) . a member function with the correct signature like Foo::Eval(double ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . Definition at line 95 of file Functor.h. Public Member Functions;  Functor1D ()=default;  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor1D (const PtrObj &p, MemFn memFn);  ;  Functor1D (std::function< double(double)> const &f);  Construct from a callable object with the right signature implementing double operator() (double x). ;  ; Functor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safa",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2166,Availability,toler,tolerance,2166,"e;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastRe",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2947,Availability,error,error,2947,"  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::GaussIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GaussIntegrator(). ROOT::Math::GaussIntegrator::~GaussIntegrator ; (; ). override . Destructor. ; Definition at line 44 of file GaussIntegrator.cxx. ◆ GaussIntegrator(). ROOT::Math::G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2985,Availability,error,error,2985,"ction must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::GaussIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GaussIntegrator(). ROOT::Math::GaussIntegrator::~GaussIntegrator ; (; ). override . Destructor. ; Definition at line 44 of file GaussIntegrator.cxx. ◆ GaussIntegrator(). ROOT::Math::GaussIntegrator::GaussIntegrator ; (; double ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:4043,Availability,toler,tolerance,4043,"ion. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::GaussIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GaussIntegrator(). ROOT::Math::GaussIntegrator::~GaussIntegrator ; (; ). override . Destructor. ; Definition at line 44 of file GaussIntegrator.cxx. ◆ GaussIntegrator(). ROOT::Math::GaussIntegrator::GaussIntegrator ; (; double ; absTol = -1, . double ; relTol = -1 . ). Default Constructor. ; If the tolerance are not given, use default values specified in ROOT::Math::IntegratorOneDimOptions ; Definition at line 25 of file GaussIntegrator.cxx. Member Function Documentation. ◆ AbsValue(). void ROOT::Math::GaussIntegrator::AbsValue ; (; bool ; flag). Static function: set the fgAbsValue flag. ; By default TF1::Integral uses the original function value to compute the integral However, TF1::Moment, CentralMoment require to compute the integral using the absolute value of the function. ; Definition at line 49 of file GaussIntegrator.cxx. ◆ DoIntegral(). double ROOT::Math::GaussIntegrator::DoIntegral ; (; double ; a, . double ; b, . const IGenFunction * ; func . ). privatevirtual . Integration surrogate method. ; Return integral of passed function in interval [a,b] Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use an improved algorithm ; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 71 of file GaussIntegrator.cxx. ◆ Error(). double ROOT::Math::GaussIntegrator::Error ; (; ); const. over",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7292,Availability,error,error,7292,"n between a and b. ; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig converted to C++ by Rene Brun; This function computes, to an attempted specified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cann",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7404,Availability,error,error,7404,"ecified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not requ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7484,Availability,error,error,7484,"ecified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not requ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7658,Availability,error,error,7658,"\[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7720,Availability,error,error,7720,"\[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7778,Availability,error,error,7778,"\[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:8114,Availability,error,error,8114,"i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:11616,Availability,toler,tolerance,11616,he result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 22,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:12445,Availability,error,error,12445,or::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result from the last estimation. ; Definition at line 225 of file GaussIntegrator.h. ◆ fUsedOnce. bool ROOT::Math::GaussIntegrator::fUsedOnce. protected . Bool value to check if the function was at least called once. ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:12581,Availability,error,error,12581,erived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result from the last estimation. ; Definition at line 225 of file GaussIntegrator.h. ◆ fUsedOnce. bool ROOT::Math::GaussIntegrator::fUsedOnce. protected . Bool value to check if the function was at least called once. ; Definition at line 224 of file GaussIntegrator.h. Libraries for ROOT::Math::GaussIntegrator:. [legend]; The documentation for this cla,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:451,Deployability,integrat,integration,451,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:508,Deployability,integrat,integration,508,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:1685,Deployability,integrat,integration,1685,"le absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:1931,Deployability,integrat,integration,1931,"lute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2330,Deployability,integrat,integration,2330,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2592,Deployability,integrat,integrator,2592,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2840,Deployability,integrat,integrator,2840,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:9312,Deployability,integrat,integration,9312,"see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{B}_{-\infty} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:9960,Deployability,integrat,integration,9960,"lLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{B}_{-\infty} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:10343,Deployability,integrat,integration,10343,"to [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:11171,Deployability,integrat,integration,11171,ns(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:12209,Deployability,integrat,integration,12209, inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:451,Integrability,integrat,integration,451,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:508,Integrability,integrat,integration,508,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:1685,Integrability,integrat,integration,1685,"le absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:1931,Integrability,integrat,integration,1931,"lute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2330,Integrability,integrat,integration,2330,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2592,Integrability,integrat,integrator,2592,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2840,Integrability,integrat,integrator,2840,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:6340,Integrability,rout,routine,6340,"al of function on an infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{-\infty} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 56 of file GaussIntegrator.cxx. ◆ Integral() [2/3]. double ROOT::Math::GaussIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GaussIntegrator.cxx. ◆ Integral() [3/3]. double ROOT::Math::GaussIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . Returns Integral of function between a and b. ; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig converted to C++ by Rene Brun; This function computes, to an attempted specified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relati",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:8075,Integrability,rout,routine,8075,"i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:8120,Integrability,message,message,8120,"i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:9312,Integrability,integrat,integration,9312,"see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not required. The subprogram may therefore be used when these values are undefined ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 52 of file GaussIntegrator.cxx. ◆ IntegralCauchy(). double ROOT::Math::GaussIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 197 of file GaussIntegrator.cxx. ◆ IntegralLow(). double ROOT::Math::GaussIntegrator::IntegralLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{B}_{-\infty} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:9960,Integrability,integrat,integration,9960,"lLow ; (; double ; b). overridevirtual . Returns Integral of function on a lower semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{B}_{-\infty} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:10343,Integrability,integrat,integration,10343,"to [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 66 of file GaussIntegrator.cxx. ◆ IntegralUp(). double ROOT::Math::GaussIntegrator::IntegralUp ; (; double ; a). overridevirtual . Returns Integral of function on an upper semi-infinite interval. ; This function computes, to an attempted specified accuracy, the value of the integral: ; \[; I = \int^{\infty}_{A} f(x)dx; \]. Usage: In any arithmetic expression, this function has the approximate value of the integral I.; A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 61 of file GaussIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:11171,Integrability,integrat,integration,11171,ns(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 210 of file GaussIntegrator.cxx. ◆ Result(). double ROOT::Math::GaussIntegrator::Result ; (; ); const. overridevirtual . Returns the result of the last Integral calculation. ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 166 of file GaussIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussIntegrator::SetAbsTolerance ; (; double ; eps). inlineoverridevirtual . This method is not implemented. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 68 of file GaussIntegrator.h. ◆ SetFunction(). void ROOT::Math::GaussIntegrator::SetFunction ; (; const IGenFunction & ; function). overridevirtual . Set integration function (flag control if function must be copied inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:12209,Integrability,integrat,integration,12209, inside). ; @param f Function to be used in the calculations. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GaussIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2395,Modifiability,inherit,inherited,2395,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2633,Modifiability,inherit,inherited,2633,"terval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:431,Performance,perform,performing,431,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1638,Availability,toler,tolerance,1638,"e 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3710,Availability,error,error,3710,"Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3748,Availability,error,error,3748,"ouble Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4997,Availability,error,error,4997,"unction was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 98 of file GaussLegendreIntegrator.c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:8249,Availability,toler,tolerance,8249,aussLegendreIntegrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussLegendreIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 157 of file GaussLegendreIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetAbsTolerance ; (; double ; ). overridevirtual . This method is not implemented. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 93 of file GaussLegendreIntegrator.cxx. ◆ SetNumberPoints(). void ROOT::Math::GaussLegendreIntegrator::SetNumberPoints ; (; int ; num). Set the number of points used in the calculation of the integral. ; Definition at line 43 of file GaussLegendreIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussLegendreIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 167 of file GaussLegendreIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetRelTolerance ; (; double ; eps). overridevirtual . Set the desired relative Error. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 86 of file GaussLegendreIntegrator.cxx. Member Data Documentation. ◆ fNum. int ROOT::Math::GaussLegendreIntegrator::fNum. protected . Number of points used in the estimation of the integral. ; Definition at line 113 of file GaussLegendreIntegrator.h. ◆ fW. double* ROOT::Math::GaussLegendreIntegrator::fW. protected . Weights of the points used. ; Definition at line 115 of file GaussLegendreIntegrator.h. ◆ fX. double* ROOT::Math::GaussLegendreIntegrator::fX. protected . Abscisa of the points used. ; Definition at line 114 of file GaussLegendreIntegrator.h. Libraries for ROOT::Math::GaussLegendreIntegrator:. [legend]; The documentation for ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:436,Deployability,integrat,integration,436,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:502,Deployability,integrat,integration,502,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1280,Deployability,integrat,integration,1280,"ttributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:2881,Deployability,integrat,integration,2881," ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; doubl",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3018,Deployability,integrat,integration,3018,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3280,Deployability,integrat,integrator,3280,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4956,Deployability,integrat,integration,4956," ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Def",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:7420,Deployability,integrat,integration,7420,"ints(). int ROOT::Math::GaussLegendreIntegrator::GetNumberPoints ; (; ); const. inline . Definition at line 68 of file GaussLegendreIntegrator.h. ◆ GetWeightVectors(). void ROOT::Math::GaussLegendreIntegrator::GetWeightVectors ; (; double * ; x, . double * ; w . ); const. Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1} ; Definition at line 51 of file GaussLegendreIntegrator.cxx. ◆ NEval(). int ROOT::Math::GaussLegendreIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral This is equivalent to the number of points ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 74 of file GaussLegendreIntegrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussLegendreIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 157 of file GaussLegendreIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetAbsTolerance ; (; double ; ). overridevirtual . This method is not implemented. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 93 of file GaussLegendreIntegrator.cxx. ◆ SetNumberPoints(). void ROOT::Math::GaussLegendreIntegrator::SetNumberPoints ; (; int ; num). Set the number of points used in the calculation of the integral. ; Definition at line 43 of file GaussLegendreIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussLegendreIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 167 of file GaussLegendreIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussLegendreIntegrato",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:436,Integrability,integrat,integration,436,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:502,Integrability,integrat,integration,502,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1280,Integrability,integrat,integration,1280,"ttributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:2881,Integrability,integrat,integration,2881," ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; doubl",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3018,Integrability,integrat,integration,3018,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3280,Integrability,integrat,integrator,3280,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4114,Integrability,interface,interface,4114,"atorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4956,Integrability,integrat,integration,4956," ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Def",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:5439,Integrability,interface,interface,5439," ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 98 of file GaussLegendreIntegrator.cxx. ◆ DoIntegral(). double ROOT::Math::GaussLegendreIntegrator::DoIntegral ; (; double ; a, . double ; b, . const IGenFunction * ; func . ). overrideprivatevirtual . Integration surrogate method. ; Return integral of passed function in interval [a,b] Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 60 of file GaussLegendreIntegrator.cxx. ◆ GetNumberPoints(). int ROOT::Math::GaussLegendreIntegrator::GetNumberPoints ; (; ); const. inline . Definition at lin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:5535,Integrability,rout,routine,5535," ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 98 of file GaussLegendreIntegrator.cxx. ◆ DoIntegral(). double ROOT::Math::GaussLegendreIntegrator::DoIntegral ; (; double ; a, . double ; b, . const IGenFunction * ; func . ). overrideprivatevirtual . Integration surrogate method. ; Return integral of passed function in interval [a,b] Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 60 of file GaussLegendreIntegrator.cxx. ◆ GetNumberPoints(). int ROOT::Math::GaussLegendreIntegrator::GetNumberPoints ; (; ); const. inline . Definition at lin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:7420,Integrability,integrat,integration,7420,"ints(). int ROOT::Math::GaussLegendreIntegrator::GetNumberPoints ; (; ); const. inline . Definition at line 68 of file GaussLegendreIntegrator.h. ◆ GetWeightVectors(). void ROOT::Math::GaussLegendreIntegrator::GetWeightVectors ; (; double * ; x, . double * ; w . ); const. Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1} ; Definition at line 51 of file GaussLegendreIntegrator.cxx. ◆ NEval(). int ROOT::Math::GaussLegendreIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral This is equivalent to the number of points ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 74 of file GaussLegendreIntegrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussLegendreIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 157 of file GaussLegendreIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetAbsTolerance ; (; double ; ). overridevirtual . This method is not implemented. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 93 of file GaussLegendreIntegrator.cxx. ◆ SetNumberPoints(). void ROOT::Math::GaussLegendreIntegrator::SetNumberPoints ; (; int ; num). Set the number of points used in the calculation of the integral. ; Definition at line 43 of file GaussLegendreIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussLegendreIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 167 of file GaussLegendreIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussLegendreIntegrato",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1762,Modifiability,inherit,inherited,1762,"verride;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3083,Modifiability,inherit,inherited,3083,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3321,Modifiability,inherit,inherited,3321,"n infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3640,Modifiability,inherit,inherited,3640,"Returns Integral of function on an upper semi-infinite interval. ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4342,Modifiability,inherit,inherited,4342,"~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGauss",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:416,Performance,perform,performing,416,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:4098,Safety,unsafe,unsafe,4098,"atorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreInte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:5423,Safety,unsafe,unsafe,5423," ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::GaussLegendreIntegrator ; (; int ; num = 10, . double ; eps = 1e-12 . ). Basic constructor of GaussLegendreIntegrator. ; @param num Number of desired points to calculate the integration. @param eps Desired relative error. ; Definition at line 23 of file GaussLegendreIntegrator.cxx. ◆ ~GaussLegendreIntegrator(). ROOT::Math::GaussLegendreIntegrator::~GaussLegendreIntegrator ; (; ). override . Default Destructor. ; Definition at line 34 of file GaussLegendreIntegrator.cxx. Member Function Documentation. ◆ CalcGaussLegendreSamplingPoints(). void ROOT::Math::GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints ; (; ). private . Type: unsafe but fast interface filling the arrays x and w (static method) ; Given the number of sampling points this routine fills the arrays x and w of length num, containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula.; Gauss-Legendre: W(x)=1 -1<x<1 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; num is the number of sampling points (>0) x and w are arrays of size num eps is the relative precision; If num<=0 or eps<=0 no action is done.; Reference: Numerical Recipes in C, Second Edition ; Definition at line 98 of file GaussLegendreIntegrator.cxx. ◆ DoIntegral(). double ROOT::Math::GaussLegendreIntegrator::DoIntegral ; (; double ; a, . double ; b, . const IGenFunction * ; func . ). overrideprivatevirtual . Integration surrogate method. ; Return integral of passed function in interval [a,b] Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 60 of file GaussLegendreIntegrator.cxx. ◆ GetNumberPoints(). int ROOT::Math::GaussLegendreIntegrator::GetNumberPoints ; (; ); const. inline . Definition at lin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html:1436,Modifiability,inherit,inherited,1436,"e () const override;  generic methods for retrieving options ;  ; std::vector< std::string > GetAllIntKeys ();  ; std::vector< std::string > GetAllNamedKeys ();  ; std::vector< std::string > GetAllRealKeys ();  ; bool GetIntValue (const char *name, int &val) const override;  ; bool GetNamedValue (const char *name, std::string &val) const override;  ; bool GetRealValue (const char *name, double &val) const override;  ; void Print (std::ostream &os=std::cout) const override;  print options ;  ; void SetIntValue (const char *name, int val) override;  ; void SetNamedValue (const char *name, const char *val) override;  ; void SetRealValue (const char *name, double val) override;  Method that needs to be re-implemented by the derived classes. ;  ;  Public Member Functions inherited from ROOT::Math::IOptions;  IOptions ();  ; virtual ~IOptions ();  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; double RValue (const char *name) const;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Static Public Member Functions; static IOptions & Default (const char *algoname);  ; static IOptions * FindDefault (const char *algoname);  ; static void PrintAllDefault (std::ostream &os=std::cout);  print all the default options ;  . Static Private Member Functions; template<class M > ; static const M::mapped_type * FindValue (const std::string &name, const M &opts);  ; template<class M > ; static void InsertValue (const std::string &name, M &opts, const typename M::mapped_type &value);  ; template<class M > ; static void Print (const M &opts, std::ostream &os);  . Private Attributes; std::map< std::string, int > fIntOpts;  map of the integer options ;  ; std::map< std::string, std::string > fNamOpts;  map of the named options ;  ; s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:957,Availability,error,errors,957,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:1151,Availability,error,errors,1151,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2105,Availability,error,error,2105,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2115,Availability,error,error,2115,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:3991,Availability,error,error,3991,"t std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4696,Availability,error,error,4696,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4788,Availability,error,errors,4788,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4907,Availability,error,error,4907,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5489,Availability,error,error,5489,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5698,Availability,error,error,5698," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:7197,Availability,error,errors,7197,"nce to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8308,Availability,toler,tolerance,8308,">);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8605,Availability,error,error,8605,">);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9878,Availability,toler,tolerance,9878,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10736,Availability,error,errors,10736,"ng variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GeneticMinimizer.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11896,Availability,error,errors,11896,"r.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:12383,Availability,error,errors,12383,"rridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file GeneticMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GeneticMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 252 of file GeneticMinimizer.cxx. ◆ MinimizerParameters(). const GeneticMinimizerParameters & ROOT::Math::GeneticMinimizer::MinimizerParameters ; (; ); const. inline . Definition at line 96 of file GeneticMinimizer.h. ◆ MinValue(). double ROOT::Math::GeneticMinimizer::MinValue ; (; ); co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:14818,Availability,error,error,14818,"izer::NDim ; (; ); const. overridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 348 of file GeneticMinimizer.cxx. ◆ NFree(). unsigned int ROOT::Math::GeneticMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 355 of file GeneticMinimizer.cxx. ◆ Options(). ROOT::Math::MinimizerOptions ROOT::Math::GeneticMinimizer::Options ; (; ); const. overridevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 185 of file GeneticMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GeneticMinimizer::ProvidesError ; (; ); const. overridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 165 of file GeneticMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::GeneticMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file GeneticMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::GeneticMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as def",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:14828,Availability,error,error,14828,"izer::NDim ; (; ); const. overridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 348 of file GeneticMinimizer.cxx. ◆ NFree(). unsigned int ROOT::Math::GeneticMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 355 of file GeneticMinimizer.cxx. ◆ Options(). ROOT::Math::MinimizerOptions ROOT::Math::GeneticMinimizer::Options ; (; ); const. overridevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 185 of file GeneticMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GeneticMinimizer::ProvidesError ; (; ); const. overridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 165 of file GeneticMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::GeneticMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file GeneticMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::GeneticMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as def",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:6403,Deployability,configurat,configuration,6403,"ives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:6626,Deployability,release,release,6626,"ives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:821,Modifiability,variab,variables,821,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:848,Modifiability,variab,variable,848,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:911,Modifiability,variab,variables,911,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:1673,Modifiability,variab,variables,1673,"nsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const Genetic",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:1767,Modifiability,variab,variables,1767,"nsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const Genetic",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2239,Modifiability,variab,variable,2239,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2531,Modifiability,variab,variable,2531,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2617,Modifiability,variab,variable,2617,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:2914,Modifiability,variab,variable,2914,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:3037,Modifiability,inherit,inherited,3037,"ion value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int ivar, const std::string &name, double val) override;  set a new fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int, const std::string &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour w",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:3640,Modifiability,variab,variable,3640,"ng &, double, double, double, double) override;  set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ;  ; virtual void SetOptions (const ROOT::Math::MinimizerOptions &opt);  ; void SetParameters (const GeneticMinimizerParameters &params);  ; void SetRandomSeed (int seed);  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set a new free variable ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of th",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4125,Modifiability,variab,variable,4125,"r (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4255,Modifiability,variab,variable,4255,"r (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4524,Modifiability,variab,variable,4524," the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4571,Modifiability,variab,variables,4571," the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:4706,Modifiability,variab,variable,4706,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5038,Modifiability,variab,variable,5038,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5061,Modifiability,variab,variable,5061,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5209,Modifiability,variab,variable,5209,"s typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5590,Modifiability,variab,variable,5590,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:6403,Modifiability,config,configuration,6403,"ives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:6646,Modifiability,variab,variable,6646,"ives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:6799,Modifiability,variab,variable,6799,"ives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:7628,Modifiability,variab,variable,7628,"nce to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8468,Modifiability,variab,variable,8468,">);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8760,Modifiability,variab,variable,8760,"tions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8893,Modifiability,variab,variable,8893,"tions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9021,Modifiability,variab,variable,9021,"tions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9155,Modifiability,variab,variables,9155,"tions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9184,Modifiability,variab,variables,9184,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9328,Modifiability,variab,variable,9328,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9456,Modifiability,variab,variable,9456,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9573,Modifiability,variab,variable,9573,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9669,Modifiability,variab,variables,9669,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9966,Modifiability,variab,variable,9966,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:9983,Modifiability,variab,variable,9983,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10018,Modifiability,variab,variable,10018,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10118,Modifiability,variab,variables,10118,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10170,Modifiability,variab,variable,10170,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10212,Modifiability,variab,variable,10212,"t, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigned int ivar, double upper);  set the upper-limit of an already existing variable ;  ; virtual bool SetVariableValue (unsigned int ivar, double value);  set the value of an already existing variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10557,Modifiability,inherit,inherited,10557,"ng variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GeneticMinimizer.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
