id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.3.2/external-1.html:7768,Availability,checkpoint,checkpoint,7768,"o.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is i",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:7982,Availability,avail,available,7982,"les.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:9257,Availability,checkpoint,checkpoint,9257," your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threa",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:11636,Availability,avail,available,11636,"ded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generat",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:13724,Availability,echo,echo,13724,"rement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the i",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14138,Availability,echo,echo,14138,"n method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creat",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14513,Availability,error,error,14513,"; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; s",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:15150,Availability,echo,echo,15150,"on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:16416,Availability,echo,echo,16416,"_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-line options and usage information. -i <filename>, --input <filename>¶; Input file name. Default: input.dat. -k, --skip-preprocessor¶; Skips input preprocessing. Expert mode. -l",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:19500,Availability,down,down,19500,"e PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:21538,Availability,avail,available,21538,"les to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 20",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:852,Deployability,install,install,852,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:911,Deployability,install,install,911,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1224,Deployability,configurat,configuration,1224,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1268,Deployability,install,install,1268,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1449,Deployability,configurat,configuration,1449,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1534,Deployability,install,installed,1534,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1812,Deployability,install,installation,1812,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2917,Deployability,update,update,2917,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3062,Deployability,install,installation,3062,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3214,Deployability,install,install,3214,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3255,Deployability,install,installer,3255,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3288,Deployability,install,install,3288,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3329,Deployability,install,installer,3329,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3361,Deployability,install,install,3361,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3426,Deployability,update,update,3426,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3551,Deployability,install,installer,3551,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3772,Deployability,configurat,configuration,3772," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3805,Deployability,install,installation,3805," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14039,Deployability,install,install,14039,"nts_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:16241,Deployability,install,install,16241,"atch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-lin",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:22512,Deployability,update,updated,22512," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:7996,Energy Efficiency,energy,energy,7996,"les.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:10150,Energy Efficiency,efficient,efficiently,10150,"); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:12394,Energy Efficiency,energy,energy,12394,"t variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Be",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:959,Integrability,depend,dependencies,959,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1070,Integrability,depend,dependencies,1070,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:4464,Integrability,depend,depending,4464,"How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:5871,Integrability,rout,routines,5871," in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_rete",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:10769,Integrability,rout,routines,10769,"ds in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input;",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14280,Integrability,depend,depend,14280,"ample of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3;",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14519,Integrability,message,message,14519,"; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; s",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:18930,Integrability,interface,interfaced,18930,". Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; us",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:19991,Integrability,interface,interfaced,19991,"referred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to im",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:21855,Integrability,depend,dependencies,21855," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:802,Modifiability,config,configure,802,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1091,Modifiability,config,configure,1091,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1224,Modifiability,config,configuration,1224,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1449,Modifiability,config,configuration,1449,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1674,Modifiability,config,configure,1674,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:1934,Modifiability,config,configure,1934,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2197,Modifiability,config,configure,2197,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2236,Modifiability,config,configure,2236,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2405,Modifiability,config,configure,2405,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2453,Modifiability,config,configure,2453,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3772,Modifiability,config,configuration,3772," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:4642,Modifiability,variab,variable,4642,"tion of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent comput",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:6190,Modifiability,variab,variable,6190,"/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calcu",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:8677,Modifiability,variab,variable,8677,"; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands i",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:9075,Modifiability,variab,variable,9075,"t files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 insta",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:11065,Modifiability,variab,variables,11065,"d; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example inpu",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:11345,Modifiability,variab,variables,11345,"MP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_t",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:11838,Modifiability,variab,variables,11838,"library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This require",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:13063,Modifiability,variab,variable,13063,"3; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:13198,Modifiability,variab,variables,13198,"3; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:13311,Modifiability,variab,variables,13311,"f; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. T",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:14843,Modifiability,variab,variable,14843,"ATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set wi",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:15328,Modifiability,variab,variables,15328,"-l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`)",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:15768,Modifiability,plugin,plugins,15768,"e memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “o",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:15887,Modifiability,variab,variable,15887," node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:18472,Modifiability,variab,variables,18472,"rides the value of; PSIDATADIR and specifies the path to the Psi data; library (ends in share/psi4). -m, --messy¶; Leave temporary files after the run is completed. -n <threads>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:18804,Modifiability,variab,variable,18804,"o redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:19037,Modifiability,variab,variable,19037,"me with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interface",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:19977,Modifiability,plugin,plugins,19977,"referred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to im",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:20588,Modifiability,plugin,plugins,20588,"ommands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.pat",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:21034,Modifiability,plugin,plugins,21034,"RCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to de",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:21139,Modifiability,variab,variable,21139,".; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to direct",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:21993,Modifiability,variab,variable,21993," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2903,Performance,queue,queue,2903,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:6130,Performance,queue,queue,6130,"/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calcu",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:9647,Performance,perform,performing,9647,"conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or o",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:9839,Performance,load,loaded,9839,"; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MK",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:13251,Performance,queue,queueing,13251,"f; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. T",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:7164,Safety,safe,safe,7164,"nning through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:9981,Security,access,accessible,9981,"et_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished ",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:11872,Security,access,accessed,11872,"e that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; th",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:17090,Security,access,accessed,17090,"ads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-line options and usage information. -i <filename>, --input <filename>¶; Input file name. Default: input.dat. -k, --skip-preprocessor¶; Skips input preprocessing. Expert mode. -l <name>, --psidatadir <name>¶; Mainly for use by developers, this overrides the value of; PSIDATADIR and specifies the path to the Psi data; library (ends in share/psi4). -m, --messy¶; Leave temporary files after the run is completed. -n <threads>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:18623,Security,access,access,18623,"nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc fi",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:18723,Security,access,access,18723,", --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Win",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:901,Testability,test,test,901,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:2973,Testability,test,tests,2973,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3003,Testability,test,tests,3003,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3027,Testability,test,testing,3027,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3050,Testability,test,test,3050,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:3116,Testability,log,logo,3116,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external-1.html:6894,Usability,guid,guide,6894,"manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']).",MatchSource.WIKI,psi4manual/1.3.2/external-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html
https://psicode.org/psi4manual/1.3.2/external.html:1250,Availability,avail,available,1250,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1349,Availability,error,error,1349,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2646,Availability,error,errors,2646,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3035,Availability,error,errors,3035,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3266,Availability,down,download,3266,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:4172,Availability,down,down,4172,"the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:5560,Availability,checkpoint,checkpoint,5560,"e of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, fil",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:5883,Availability,avail,available,5883," in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_rete",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:6497,Availability,checkpoint,checkpoint,6497,"of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:7768,Availability,checkpoint,checkpoint,7768,"o.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is i",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:7982,Availability,avail,available,7982,"les.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:9257,Availability,checkpoint,checkpoint,9257," your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threa",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:11636,Availability,avail,available,11636,"ded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generat",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:13724,Availability,echo,echo,13724,"rement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the i",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14138,Availability,echo,echo,14138,"n method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creat",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14513,Availability,error,error,14513,"; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; s",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:15150,Availability,echo,echo,15150,"on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:16416,Availability,echo,echo,16416,"_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-line options and usage information. -i <filename>, --input <filename>¶; Input file name. Default: input.dat. -k, --skip-preprocessor¶; Skips input preprocessing. Expert mode. -l",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:19500,Availability,down,down,19500,"e PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:21538,Availability,avail,available,21538,"les to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 20",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:852,Deployability,install,install,852,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:911,Deployability,install,install,911,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1224,Deployability,configurat,configuration,1224,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1268,Deployability,install,install,1268,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1449,Deployability,configurat,configuration,1449,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1534,Deployability,install,installed,1534,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1812,Deployability,install,installation,1812,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2917,Deployability,update,update,2917,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3062,Deployability,install,installation,3062,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3214,Deployability,install,install,3214,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3255,Deployability,install,installer,3255,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3288,Deployability,install,install,3288,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3329,Deployability,install,installer,3329,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3361,Deployability,install,install,3361,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3426,Deployability,update,update,3426,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3551,Deployability,install,installer,3551,"si4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk dri",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3772,Deployability,configurat,configuration,3772," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3805,Deployability,install,installation,3805," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14039,Deployability,install,install,14039,"nts_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:16241,Deployability,install,install,16241,"atch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-lin",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:22512,Deployability,update,updated,22512," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:7996,Energy Efficiency,energy,energy,7996,"les.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:10150,Energy Efficiency,efficient,efficiently,10150,"); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:12394,Energy Efficiency,energy,energy,12394,"t variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Be",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:959,Integrability,depend,dependencies,959,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1070,Integrability,depend,dependencies,1070,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:4464,Integrability,depend,depending,4464,"How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:5871,Integrability,rout,routines,5871," in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_rete",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:10769,Integrability,rout,routines,10769,"ds in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input;",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14280,Integrability,depend,depend,14280,"ample of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3;",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14519,Integrability,message,message,14519,"; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; s",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:18930,Integrability,interface,interfaced,18930,". Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; us",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:19991,Integrability,interface,interfaced,19991,"referred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to im",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:21855,Integrability,depend,dependencies,21855," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:802,Modifiability,config,configure,802,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1091,Modifiability,config,configure,1091,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1224,Modifiability,config,configuration,1224,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1449,Modifiability,config,configuration,1449,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1674,Modifiability,config,configure,1674,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:1934,Modifiability,config,configure,1934,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2197,Modifiability,config,configure,2197,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2236,Modifiability,config,configure,2236,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2405,Modifiability,config,configure,2405,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2453,Modifiability,config,configure,2453,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3772,Modifiability,config,configuration,3772," to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:4642,Modifiability,variab,variable,4642,"tion of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent comput",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:6190,Modifiability,variab,variable,6190,"/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calcu",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:8677,Modifiability,variab,variable,8677,"; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands i",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:9075,Modifiability,variab,variable,9075,"t files being deleted at the end of the run:; 1psi4 -m. ~/.psi4rc File¶. Caution; It is very easy to forget about the ~/.psi4rc file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; ~/.psi4rc contents count as part of your input file (invoked after; e.g. from psi4 import * and before your Psithon–>Python parsed; input commands), so these settings take priority over command-line; arguments to the psi4 executable.; Please use the ~/.psi4rc file conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 insta",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:11065,Modifiability,variab,variables,11065,"d; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example inpu",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:11345,Modifiability,variab,variables,11345,"MP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_t",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:11838,Modifiability,variab,variables,11838,"library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This require",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:13063,Modifiability,variab,variable,13063,"3; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:13198,Modifiability,variab,variables,13198,"3; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:13311,Modifiability,variab,variables,13311,"f; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. T",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:14843,Modifiability,variab,variable,14843,"ATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set wi",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:15328,Modifiability,variab,variables,15328,"-l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`)",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:15768,Modifiability,plugin,plugins,15768,"e memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “o",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:15887,Modifiability,variab,variable,15887," node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. PSIDATADIR does not need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; PSIPATH is needed only if you are using external modules or; plugins in PSI4 and should point to the directories where they can be found. In the; present example, we make sure the variable is set with if ! ( $?PSIPATH ) setenv PSIPATH """"; before adding more paths to it. Finally, PSI_SCRATCH should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:18472,Modifiability,variab,variables,18472,"rides the value of; PSIDATADIR and specifies the path to the Psi data; library (ends in share/psi4). -m, --messy¶; Leave temporary files after the run is completed. -n <threads>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:18804,Modifiability,variab,variable,18804,"o redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:19037,Modifiability,variab,variable,19037,"me with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interface",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:19977,Modifiability,plugin,plugins,19977,"referred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to im",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:20588,Modifiability,plugin,plugins,20588,"ommands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.pat",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:21034,Modifiability,plugin,plugins,21034,"RCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to de",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:21139,Modifiability,variab,variable,21139,".; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to direct",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:21993,Modifiability,variab,variable,21993," plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; 1sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; 1; 2sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2903,Performance,queue,queue,2903,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:6130,Performance,queue,queue,6130,"/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calcu",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:9647,Performance,perform,performing,9647,"conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or o",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:9839,Performance,load,loaded,9839,"; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MK",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:13251,Performance,queue,queueing,13251,"f; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; 1set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. T",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:7164,Safety,safe,safe,7164,"nning through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the restart_file options is only available for energy procedures as of now.; Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:9981,Security,access,accessible,9981,"et_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished ",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:11872,Security,access,accessed,11872,"e that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input; For more explicit control, the Process::environment class in PSI4 can; override the number of threads set by environment variables. This functionality; is accessed via the psi4.set_num_threads() function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a PSI4 input file. An example input for this feature is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17# A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. set scf {; basis cc-pvdz; scf_type df; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1,5):; set_num_threads(nthread); energy('scf'). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; th",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:17090,Security,access,accessed,17090,"ads for OpenMP parallelization; and threaded BLAS (see section Threading), we set -n4 below.; The next step is then to actually run the computation:; 1/psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:; 1; 2; 3; 4foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. Command Line Options¶; PSI4 can be invoked with no command line arguments, as it takes as input; by default the file “input.dat” and directs output by default to “output.dat”.; The set of three commands below are completely equivalent, while the fourth is,; perhaps, the most common usage.; 1; 2; 3; 4; 5>>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to PSI4 can be accessed through psi4 --help. -a, --append¶; Append results to output file. Default: Truncate first. -h, --help¶; Display the command-line options and usage information. -i <filename>, --input <filename>¶; Input file name. Default: input.dat. -k, --skip-preprocessor¶; Skips input preprocessing. Expert mode. -l <name>, --psidatadir <name>¶; Mainly for use by developers, this overrides the value of; PSIDATADIR and specifies the path to the Psi data; library (ends in share/psi4). -m, --messy¶; Leave temporary files after the run is completed. -n <threads>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:18623,Security,access,access,18623,"nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS). -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc fi",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:18723,Security,access,access,18723,", --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with any; any “.in” or “.dat” extension replaced by “.out”. -p <prefix>, --prefix <prefix>¶; Prefix for psi files. Default: psi. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; 1; 2>>> psi4 --version; 0.4.262. Environment Variables¶; These environment variables will influence PSI4’s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring PSI4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Win",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:901,Testability,test,test,901,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:2973,Testability,test,tests,2973,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3003,Testability,test,tests,3003,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3027,Testability,test,testing,3027,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3050,Testability,test,test,3050,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:3116,Testability,log,logo,3116,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/external.html:6894,Usability,guid,guide,6894,"manager to send all files to; another location, say /scratch/user, add the following command to your input; file:; 1psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. This also means that if the user wants PSI4 to use; information from a previous file, like molecular orbitals, he needs to provide the; name of the file. This can be done through the restart_file option; 1energy('scf',restart_file='./psi.PID.name.filenumber'). where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in content. Only the filenumber; is necessary for the driver to appropriately rename the file for the next PSI4; job, and if none is found it defaults to 32, a checkpoint file. If two or more files; are to be read, they need to be provided as a Python list; 1energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']).",MatchSource.WIKI,psi4manual/1.3.2/external.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:363,Availability,checkpoint,checkpoint,363,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:1389,Deployability,update,updated,1389,"int (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Cap",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:2424,Deployability,update,updated,2424,"mation, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:766,Energy Efficiency,energy,energy,766,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:846,Energy Efficiency,energy,energy,846,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:1075,Energy Efficiency,energy,energy,1075," PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DF",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:1163,Energy Efficiency,energy,energy,1163," PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DF",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:2173,Energy Efficiency,energy,energy,2173,"mation, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:398,Integrability,interoperab,interoperability,398,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:618,Performance,optimiz,optimization,618,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk-1.html:727,Usability,simpl,simply,727,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk-1.html
https://psicode.org/psi4manual/1.3.2/fchk.html:363,Availability,checkpoint,checkpoint,363,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:1389,Deployability,update,updated,1389,"int (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Cap",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:2424,Deployability,update,updated,2424,"mation, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:766,Energy Efficiency,energy,energy,766,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:846,Energy Efficiency,energy,energy,846,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:1075,Energy Efficiency,energy,energy,1075," PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DF",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:1163,Energy Efficiency,energy,energy,1163," PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DF",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:2173,Energy Efficiency,energy,energy,2173,"mation, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; so “CC” is always used for the post-HF case. Examples:. >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:398,Integrability,interoperab,interoperability,398,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:618,Performance,optimiz,optimization,618,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fchk.html:727,Usability,simpl,simply,727,"﻿. Interface to programs through FCHK files — fchk(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to programs through FCHK files — fchk()¶; Code author: Andrew C. Simmonett; Section author: Andrew C. Simmonett; Many post-processing tools can read information from Gaussian’s formatted; checkpoint (FCHK) files.; To allow interoperability with such tools, PSI4 includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and use it to create an FCHK writer:; 1; 2; 3energy, wfn = energy('scf', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). The file will be written to the name passed to the FCHK writer’s write(); method. Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree–Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately:; 1; 2; 3grad, wfn = gradient('mp2', return_wfn=True); fchk_writer = psi4.core.FCHKWriter(wfn); fchk_writer.write('output.fchk'). psi4.fchk(wfn, filename)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:None. Parameters:; filename (string) – destination file name for FCHK file; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods a",MatchSource.WIKI,psi4manual/1.3.2/fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fchk.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:1801,Availability,avail,available,1801," perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; ",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:2928,Availability,avail,available,2928,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:3085,Availability,avail,available,3085,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:6837,Availability,down,down,6837,"553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orienta",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:9194,Availability,avail,available,9194,"in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:9332,Availability,avail,available,9332,"in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:12732,Availability,avail,available,12732,"es. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. «",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:862,Deployability,deploy,deployed,862,"﻿. F/I-SAPT: Functional Group and/or Intramolecular SAPT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. F/I-SAPT: Functional Group and/or Intramolecular SAPT¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, FISAPT; The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hy",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:13905,Deployability,update,updated,13905,"which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:1960,Energy Efficiency,energy,energy,1960,"ensity-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an ",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:2747,Energy Efficiency,energy,energy,2747,"hods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:4323,Energy Efficiency,energy,energy,4323," -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat co",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:6326,Energy Efficiency,charge,charge,6326," 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1>>> fsapt.py. This will generate, among other files, the desired functional-group partition in; fsapt.dat. For our problem, the bottom of this file contains the finished; partition:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:6604,Energy Efficiency,charge,charge,6604,"problem, the bottom of this file contains the finished; partition:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.p",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:10271,Energy Efficiency,energy,energy,10271,"d ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SA",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:10679,Energy Efficiency,charge,charge,10679,"-1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polariz",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:11218,Energy Efficiency,energy,energy,11218,"jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some s",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:778,Performance,perform,perform,778,"﻿. F/I-SAPT: Functional Group and/or Intramolecular SAPT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. F/I-SAPT: Functional Group and/or Intramolecular SAPT¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, FISAPT; The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hy",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:2126,Performance,perform,perform,2126," to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; ",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:3042,Performance,perform,perform,3042,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:4461,Performance,perform,performed,4461,"208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:4549,Performance,perform,performed,4549,"208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:4593,Performance,perform,performed,4593," 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1>>> fsapt.py. This will generate, among other files, the desired functional-group partition in; fsapt.dat. For our problem, the bottom of this file contains the finished; partition:; 1; 2; 3",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:7630,Performance,load,load,7630,"ther. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Analysis¶; For those interested in taking the differences between two F-SAPT partitions; (e.g., to see how a substituent modulates a noncovalent interaction), we have; the fsapt-diff.py script to help with this. This is invoked as:; 1>>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed fsapt.py analysis using the same; functional group names in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragme",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:8270,Performance,perform,performed,8270," make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Analysis¶; For those interested in taking the differences between two F-SAPT partitions; (e.g., to see how a substituent modulates a noncovalent interaction), we have; the fsapt-diff.py script to help with this. This is invoked as:; 1>>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed fsapt.py analysis using the same; functional group names in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot ",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:10904,Performance,optimiz,optimized,10904,"H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol.",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:11159,Performance,perform,performed,11159,"jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some s",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:11286,Performance,perform,performed,11286,"s is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keyword",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:11994,Performance,load,load,11994,"ach other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispers",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt-1.html:6996,Usability,simpl,simple,6996," OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Ana",MatchSource.WIKI,psi4manual/1.3.2/fisapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt-1.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:1801,Availability,avail,available,1801," perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; ",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:2928,Availability,avail,available,2928,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:3085,Availability,avail,available,3085,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:6837,Availability,down,down,6837,"553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orienta",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:9194,Availability,avail,available,9194,"in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:9332,Availability,avail,available,9332,"in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot the density and ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:12732,Availability,avail,available,12732,"es. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. «",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:862,Deployability,deploy,deployed,862,"﻿. F/I-SAPT: Functional Group and/or Intramolecular SAPT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. F/I-SAPT: Functional Group and/or Intramolecular SAPT¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, FISAPT; The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hy",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:13905,Deployability,update,updated,13905,"which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispersion), and the -RI; auxiliary basis sets only for the dispersion term. Ed’s code uses the -RI; basis sets for all SAPT terms, which can be problematic for heavy elements.; As such, Ed’s SAPT0 code will yield slightly different results than FISAPT. The; differences should be very minor for up to and including second-row elements,; after which point one needs to use the DF_BASIS_ELST option in Ed’s code to; provide an accurate result. table of contents. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:1960,Energy Efficiency,energy,energy,1960,"ensity-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an ",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:2747,Energy Efficiency,energy,energy,2747,"hods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:4323,Energy Efficiency,energy,energy,4323," -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat co",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:6326,Energy Efficiency,charge,charge,6326," 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1>>> fsapt.py. This will generate, among other files, the desired functional-group partition in; fsapt.dat. For our problem, the bottom of this file contains the finished; partition:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:6604,Energy Efficiency,charge,charge,6604,"problem, the bottom of this file contains the finished; partition:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10Frag1 Frag2 Elst Exch IndAB IndBA Disp Total; OH OH -8.425 6.216 -0.583 -1.512 -1.249 -5.553; OH PH 1.392 0.716 0.222 -0.348 -0.792 1.189; PH OH -2.742 0.749 -0.147 -0.227 -0.674 -3.040; PH PH 0.680 2.187 0.007 -0.208 -2.400 0.266; OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.p",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:10271,Energy Efficiency,energy,energy,10271,"d ESP fields from; the I-SAPT embedding procedure is available I-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43memory 1 GB. molecule mol {; 0 1; O 0.39987 2.94222 -0.26535; H 0.05893 2.05436 -0.50962; --; 0 1; O 0.48122 0.30277 -0.77763; H 0.26106 -0.50005 -1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SA",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:10679,Energy Efficiency,charge,charge,10679,"-1.28451; --; 0 1; C 2.33048 -1.00269 0.03771; C 1.89725 0.31533 -0.59009; C 2.28232 1.50669 0.29709; C 1.82204 2.84608 -0.29432; C 2.37905 4.02099 0.49639; H 3.41246 -1.03030 0.19825; H 2.05362 -1.84372 -0.60709; H 1.82714 -1.16382 0.99734; H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polariz",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:11218,Energy Efficiency,energy,energy,11218,"jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some s",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:778,Performance,perform,perform,778,"﻿. F/I-SAPT: Functional Group and/or Intramolecular SAPT. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. F/I-SAPT: Functional Group and/or Intramolecular SAPT¶; Code author: Robert M. Parrish; Section author: Robert M. Parrish; Module: Keywords, PSI Variables, FISAPT; The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding “F/I-SAPT.” All F/I-SAPT computations; in PSI4 use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein’s SAPT0 code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hy",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:2126,Performance,perform,perform,2126," to understand the specifics of SAPT0 before beginning; with F/I-SAPT0.; F-SAPT is detailed over two papers: [Parrish:2014:044115] on our much-earlier; “atomic” SAPT (A-SAPT) and [Parrish:2014:4417] on the finished “functional; group” SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]. I-SAPT; is explained in [Parrish:2015:051103]. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in Parrish’s thesis.; A video tutorial series for the use of the FISAPT module is available here.; Specific videos in the series include:. F-SAPT#1.; Describes the use of F-SAPT to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer.; F-SAPT#2.; Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; ",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:3042,Performance,perform,perform,3042,"e order-1 F-SAPT analysis with PyMol and perform a; “difference F-SAPT” analysis; I-SAPT#1.; Describes the use of I-SAPT to analyze the interaction between the two phenol; groups in a 2,4-pentanediol molecule.; I-SAPT#2.; Discusses how to plot the density fields and ESPs of the various moieties of; the I-SAPT embedding scheme with PyMol; F/I-SAPT Options.; Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in psi4/psi4/share/psi4/fsapt. F-SAPT: A Representative Example¶; Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the intermolecular interaction energy components between the; various hydroxyl and phenyl moieties of the phenol dimer. This example is; explicitly included in fsapt1. A video; lecture explaining this example is available F-SAPT#1,; while an additional video describing how to plot the order-1 F-SAPT analysis; with PyMol and perform a “difference F-SAPT”; analysis is available F-SAPT#2:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45memory 1 GB. molecule mol {; 0 1; O -1.3885044 1.9298523 -0.4431206; H -0.5238121 1.9646519 -0.0064609; C -2.0071056 0.7638459 -0.1083509; C -1.4630807 -0.1519120 0.7949930; C -2.1475789 -1.3295094 1.0883677; C -3.3743208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.892",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:4461,Performance,perform,performed,4461,"208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:4549,Performance,perform,performed,4549,"208 -1.6031427 0.4895864; C -3.9143727 -0.6838545 -0.4091028; C -3.2370496 0.4929609 -0.7096126; H -0.5106510 0.0566569 1.2642563; H -1.7151135 -2.0321452 1.7878417; H -3.9024664 -2.5173865 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:4593,Performance,perform,performed,4593," 0.7197947; H -4.8670730 -0.8822939 -0.8811319; H -3.6431662 1.2134345 -1.4057590; --; 0 1; O 1.3531168 1.9382724 0.4723133; H 1.7842846 2.3487495 1.2297110; C 2.0369747 0.7865043 0.1495491; C 1.5904026 0.0696860 -0.9574153; C 2.2417367 -1.1069765 -1.3128110; C 3.3315674 -1.5665603 -0.5748636; C 3.7696838 -0.8396901 0.5286439; C 3.1224836 0.3383498 0.8960491; H 0.7445512 0.4367983 -1.5218583; H 1.8921463 -1.6649726 -2.1701843; H 3.8330227 -2.4811537 -0.8566666; H 4.6137632 -1.1850101 1.1092635; H 3.4598854 0.9030376 1.7569489; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0'). This file runs a DF-HF computation on the full dimer using PSI4’s existing; SCF code. The monomer SCF computations are performed inside the FISAPT module,; following which a complete DF-SAPT0 computation is performed. Additional bits of; analysis are performed to generate the order-2 partition of the SAPT terms to; the level of nuclei and localized occupied orbitals – this generally does not; incur much additional overhead beyond a standard SAPT0 computations. The; nuclear/orbital partition data is written to the folder fsapt/ in the same; directory as the input file (this can be changed by FISAPT_FSAPT_FILEPATH).; One obtains the desired F-SAPT partition by post-processing the data in; fsapt/. Within this dir, the user is expected to provide the ASCII files; fA.dat and fB.dat, which describe the assignment of atoms to chemical; functional groups using 1-based ordering. E.g., for the problem at hand,; fA.dat contains:; 1; 2OH 1 2; PH 3 4 5 6 7 8 9 10 11 12 13. while fB.dat contains:; 1; 2OH 14 15; PH 16 17 18 19 20 21 22 23 24 25 26. At this point, the user should run the fsapt.py post-processing script in; the fsapt directory as:; 1>>> fsapt.py. This will generate, among other files, the desired functional-group partition in; fsapt.dat. For our problem, the bottom of this file contains the finished; partition:; 1; 2; 3",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:7630,Performance,load,load,7630,"ther. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Analysis¶; For those interested in taking the differences between two F-SAPT partitions; (e.g., to see how a substituent modulates a noncovalent interaction), we have; the fsapt-diff.py script to help with this. This is invoked as:; 1>>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed fsapt.py analysis using the same; functional group names in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragme",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:8270,Performance,perform,performed,8270," make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Analysis¶; For those interested in taking the differences between two F-SAPT partitions; (e.g., to see how a substituent modulates a noncovalent interaction), we have; the fsapt-diff.py script to help with this. This is invoked as:; 1>>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed fsapt.py analysis using the same; functional group names in source-fsapt-dir-1 and source-fsapt-dir-2. The; difference F-SAPT partition entries are computed as \(E^{\Delta} = E^{1} -; E^{2}\), and the geometries for order-1 .pdb visualization files are taken; from system 1. I-SAPT: A Representative Example¶. Caution; As of April 2018, you can’t specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which PSI4 doesn’t at; present let be set independently. For situations like this, use the; temporary input pattern in isapt1 . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in isapt1. A video; lecture explaining this example is available; I-SAPT#1,; while an additional video describing how to plot ",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:10904,Performance,optimiz,optimized,10904,"H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol.",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:11159,Performance,perform,performed,11159,"jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some s",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:11286,Performance,perform,performed,11286,"s is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keyword",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:11994,Performance,load,load,11994,"ach other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispers",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fisapt.html:6996,Usability,simpl,simple,6996," OH All -7.033 6.931 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The fsapt.dat file presents the “links-by-charge”; assignment at the top and the “links by 50-50” assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions.; Users should check the files fragA.dat and fragB.dat to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the “Orbital Check” section in these files – a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also strongly discourage the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; – cuts across only simple sigma bonds are encouraged. Order-1 Visualization with PyMol¶; The fsapt.py script above also generates a number of order-1 .pdb files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template .pymol scripts to help with this process. These can be; obtained by running:; 1>>> copy_pymol.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; Elst.pymol), which in turn load in the molecule and order-1 analysis; (contained in the .pdb file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. Difference F-SAPT Ana",MatchSource.WIKI,psi4manual/1.3.2/fisapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fisapt.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6959,Availability,avail,available,6959,"MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} |",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:10673,Availability,avail,available,10673,"sm, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:17068,Availability,avail,available,17068,"s. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:17324,Availability,toler,tolerance,17324," Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do on",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:17614,Availability,avail,available,17614,"lean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedur",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3085,Deployability,configurat,configuration,3085," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3147,Deployability,configurat,configuration,3147," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3323,Deployability,configurat,configuration,3323," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:13062,Deployability,configurat,configuration,13062,"1; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natu",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:13819,Deployability,configurat,configuration,13819,"y. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:17465,Deployability,configurat,configurations,17465,"S¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:19388,Deployability,configurat,configuration,19388,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:20156,Deployability,update,updated,20156,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:947,Energy Efficiency,reduce,reduced,947,"﻿. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, FNOCC. Warning; There is a known bug concerning the i7-5930 series combined; with the Intel 15 compilers and MKL 11.2.3. When PSI4 is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO)¶; The computational cost of the CCSD [Purvis:1982], CCSD(T); [Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct s",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:1443,Energy Efficiency,reduce,reduces,1443,"n PSI4 is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO)¶; The computational cost of the CCSD [Purvis:1982], CCSD(T); [Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through th",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:2147,Energy Efficiency,reduce,reduced,2147,"Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:2567,Energy Efficiency,energy,energy,2567," the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5181,Energy Efficiency,energy,energy,5181,"\(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\\end{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD corre",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5204,Energy Efficiency,energy,energy,5204,"\(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\\end{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD corre",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5489,Energy Efficiency,energy,energy,5489,"nd{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theo",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5533,Energy Efficiency,energy,energy,5533," that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are t",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5574,Energy Efficiency,energy,energy,5574," the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indica",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5611,Energy Efficiency,energy,energy,5611,"f the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contribut",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5658,Energy Efficiency,energy,energy,5658,"CSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order,",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5704,Energy Efficiency,energy,energy,5704," excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected tr",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5747,Energy Efficiency,energy,energy,5747,"y to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5786,Energy Efficiency,energy,energy,5786,"CISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these;",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5831,Energy Efficiency,energy,energy,5831,"ented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywo",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5875,Energy Efficiency,energy,energy,5875,"the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5916,Energy Efficiency,energy,energy,5916,"heory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNO",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:5953,Energy Efficiency,energy,energy,5953,"elated to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6003,Energy Efficiency,energy,energy,6003,"and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair appr",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6052,Energy Efficiency,energy,energy,6052,"btained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be vie",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6098,Energy Efficiency,energy,energy,6098," computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-exten",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6140,Energy Efficiency,energy,energy,6140,"f the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6187,Energy Efficiency,energy,energy,6187,"energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6233,Energy Efficiency,energy,energy,6233,"3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires few",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6276,Energy Efficiency,energy,energy,6276," 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6315,Energy Efficiency,energy,energy,6315,"6; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:6629,Energy Efficiency,energy,energy,6629,"36941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basi",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:7366,Energy Efficiency,power,power,7366,"nds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:8085,Energy Efficiency,energy,energy,8085,"tensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note tha",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:8587,Energy Efficiency,energy,energy,8587,"description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9594,Energy Efficiency,energy,energy,9594,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9665,Energy Efficiency,energy,energy,9665,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9708,Energy Efficiency,energy,energy,9708,":. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9979,Energy Efficiency,energy,energy,9979,"hese shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses t",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:10593,Energy Efficiency,reduce,reduce,10593,"c{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12219,Energy Efficiency,energy,energy,12219,"econd; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average o",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12272,Energy Efficiency,energy,energy,12272,"trolled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12623,Energy Efficiency,energy,energy,12623,"rocedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12894,Energy Efficiency,energy,energy,12894,"accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12911,Energy Efficiency,energy,energy,12911,"TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12930,Energy Efficiency,energy,energy,12930,"TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:15162,Energy Efficiency,charge,charges,15162,"CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC Keywords¶. BASIS¶. Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for defau",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:15760,Energy Efficiency,energy,energy,15760,"V. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC Keywords¶. BASIS¶. Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T).",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:16161,Energy Efficiency,energy,energy,16161," of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc d",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:18225,Energy Efficiency,energy,energy,18225,"is for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CE",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:18296,Energy Efficiency,energy,energy,18296,": No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), Q",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:18367,Energy Efficiency,energy,energy,18367," of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9881,Integrability,depend,depend,9881,"hese shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses t",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:12632,Integrability,wrap,wrapper,12632,"rocedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3085,Modifiability,config,configuration,3085," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3147,Modifiability,config,configuration,3147," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3323,Modifiability,config,configuration,3323," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:10239,Modifiability,coupling,coupling,10239,"(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:13062,Modifiability,config,configuration,13062,"1; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natu",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:13819,Modifiability,config,configuration,13819,"y. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:17465,Modifiability,config,configurations,17465,"S¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:19388,Modifiability,config,configuration,19388,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:11393,Performance,optimiz,optimized,11393,"] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). G",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:10489,Safety,avoid,avoid,10489,"c{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, ",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:3412,Usability,simpl,simplified,3412,"utations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and \(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 +",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:8510,Usability,simpl,simple,8510,"SD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N}",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc-1.html:9624,Usability,simpl,simply,9624,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc-1.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6959,Availability,avail,available,6959,"MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} |",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:10673,Availability,avail,available,10673,"sm, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:17068,Availability,avail,available,17068,"s. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:17324,Availability,toler,tolerance,17324," Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do on",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:17614,Availability,avail,available,17614,"lean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedur",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3085,Deployability,configurat,configuration,3085," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3147,Deployability,configurat,configuration,3147," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3323,Deployability,configurat,configuration,3323," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:13062,Deployability,configurat,configuration,13062,"1; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natu",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:13819,Deployability,configurat,configuration,13819,"y. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:17465,Deployability,configurat,configurations,17465,"S¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:19388,Deployability,configurat,configuration,19388,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:20156,Deployability,update,updated,20156,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:947,Energy Efficiency,reduce,reduced,947,"﻿. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4¶; Code author: A. Eugene DePrince; Section author: A. Eugene DePrince; Module: Keywords, PSI Variables, FNOCC. Warning; There is a known bug concerning the i7-5930 series combined; with the Intel 15 compilers and MKL 11.2.3. When PSI4 is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO)¶; The computational cost of the CCSD [Purvis:1982], CCSD(T); [Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct s",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:1443,Energy Efficiency,reduce,reduces,1443,"n PSI4 is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO)¶; The computational cost of the CCSD [Purvis:1982], CCSD(T); [Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through th",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:2147,Energy Efficiency,reduce,reduced,2147,"Raghavachari:1989], and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]. The most demanding; steps in the CCSD and (T) algorithms scale as \({\cal{O}}(o^2v^4)\); and \({\cal{O}}(o^3v^4)\), where \(o\) and \(v\) represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of \((v; / v_{FNO})^4\), where \(v_{FNO}\) represents the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:2567,Energy Efficiency,energy,energy,2567," the number of virtual; orbitals retained after the FNO truncation.; The general outline for the FNO procedure in PSI4 is:. construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM); diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; project the virtual-virtual block of the Fock matrix onto the truncated space; construct semicanonical orbitals by diagonalizing the virtual-virtual block of the Fock matrix; proceed with the QCISD(T) / CCSD(T) / MP4 computation in the reduced virtual space. A second-order correction based upon the MP2 energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5181,Energy Efficiency,energy,energy,5181,"\(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\\end{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD corre",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5204,Energy Efficiency,energy,energy,5204,"\(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_2^2)|\Psi_0\rangle = 0. \\\end{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD corre",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5489,Energy Efficiency,energy,energy,5489,"nd{split}\]; QCISD is slightly cheaper that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theo",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5533,Energy Efficiency,energy,energy,5533," that CCSD computationally, but it retains the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are t",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5574,Energy Efficiency,energy,energy,5574," the; \({\cal{O}}(o^2v^4)\) complexity of the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indica",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5611,Energy Efficiency,energy,energy,5611,"f the original equations. Just as in; the familiar CCSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contribut",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5658,Energy Efficiency,energy,energy,5658,"CSD(T) method, the effects of connected triple excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order,",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5704,Energy Efficiency,energy,energy,5704," excitations; may be included noniteratively to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected tr",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5747,Energy Efficiency,energy,energy,5747,"y to yield the QCISD(T) method. Both the; QCISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5786,Energy Efficiency,energy,energy,5786,"CISD(T) and CCSD(T) methods are implemented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these;",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5831,Energy Efficiency,energy,energy,5831,"ented for closed-shell references; in the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywo",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5875,Energy Efficiency,energy,energy,5875,"the FNOCC module. Many-body perturbation theory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5916,Energy Efficiency,energy,energy,5916,"heory¶; QCI and CC methods are closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNO",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:5953,Energy Efficiency,energy,energy,5953,"elated to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6003,Energy Efficiency,energy,energy,6003,"and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair appr",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6052,Energy Efficiency,energy,energy,6052,"btained as a free; by-product of a CCSD or QCISD computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be vie",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6098,Energy Efficiency,energy,energy,6098," computation. The following is an; example of the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-exten",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6140,Energy Efficiency,energy,energy,6140,"f the results for a computation run with the call; energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6187,Energy Efficiency,energy,energy,6187,"energy('fno-qcisd') to energy():; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6233,Energy Efficiency,energy,energy,6233,"3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires few",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6276,Energy Efficiency,energy,energy,6276," 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6315,Energy Efficiency,energy,energy,6315,"6; 27; 28; 29; 30QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:6629,Energy Efficiency,energy,energy,6629,"36941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basi",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:7366,Energy Efficiency,power,power,7366,"nds to the second-order FNO; correction mentioned previously. Results for many-body perturbation; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations.; One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table FNOCC Methods. Full MP4 correlation; energies are also available. Coupled electron pair approximation¶; Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:8085,Energy Efficiency,energy,energy,8085,"tensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain \({\cal{O}}(o^2v^4)\) complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note tha",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:8587,Energy Efficiency,energy,energy,8587,"description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9594,Energy Efficiency,energy,energy,9594,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9665,Energy Efficiency,energy,energy,9665,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9708,Energy Efficiency,energy,energy,9708,":. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9979,Energy Efficiency,energy,energy,9979,"hese shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses t",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:10593,Energy Efficiency,reduce,reduce,10593,"c{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12219,Energy Efficiency,energy,energy,12219,"econd; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average o",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12272,Energy Efficiency,energy,energy,12272,"trolled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12623,Energy Efficiency,energy,energy,12623,"rocedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12894,Energy Efficiency,energy,energy,12894,"accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12911,Energy Efficiency,energy,energy,12911,"TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12930,Energy Efficiency,energy,energy,12930,"TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:15162,Energy Efficiency,charge,charges,15162,"CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC Keywords¶. BASIS¶. Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for defau",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:15760,Energy Efficiency,energy,energy,15760,"V. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC Keywords¶. BASIS¶. Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T).",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:16161,Energy Efficiency,energy,energy,16161," of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. R_CONVERGENCE¶. Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. E_CONVERGENCE¶. Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. MAXITER¶. Maximum number of CC iterations. Type: integer; Default: 100. DIIS_MAX_VECS¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc d",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:18225,Energy Efficiency,energy,energy,18225,"is for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CE",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:18296,Energy Efficiency,energy,energy,18296,": No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), Q",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:18367,Energy Efficiency,energy,energy,18367," of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9881,Integrability,depend,depend,9881,"hese shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses t",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:12632,Integrability,wrap,wrapper,12632,"rocedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3085,Modifiability,config,configuration,3085," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3147,Modifiability,config,configuration,3147," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3323,Modifiability,config,configuration,3323," in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; PSI4 can be found in [DePrince:2013:293]. FNO computations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:10239,Modifiability,coupling,coupling,10239,"(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:13062,Modifiability,config,configuration,13062,"1; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; 1energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natu",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:13819,Modifiability,config,configuration,13819,"y. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to implementations of these methods in other modules. name; calls method; type select. qcisd; quadratic configuration interaction singles doubles; CI_TYPE CONV. qcisd(t); qcisd with perturbative triples; CI_TYPE CONV. mp2.5; average of second- and third-order perturbation theories; MP_TYPE CONV. mp3; third-order perturbation theory; MP_TYPE CONV. mp4(sdq); fourth-order perturbation theory, minus triples contribution; MP_TYPE CONV. mp4; full fourth-order perturbation theory; MP_TYPE CONV. lccd; linear ccd; CC_TYPE CONV. cepa(0), lccsd; coupled electron pair approximation, variant 0; CC_TYPE CONV. cepa(1); coupled electron pair approximation, variant 1; CC_TYPE CONV. cepa(3); coupled electron pair approximation, variant 3; CC_TYPE CONV. acpf; averaged coupled-pair functional; CC_TYPE CONV. aqcc; averaged quadratic coupled-cluster; CC_TYPE CONV. cisd; configuration interaction with single and double excitations; CI_TYPE CONV. fno-qcisd; qcisd with frozen natural orbitals; CI_TYPE CONV. fno-qcisd(t); qcisd(t) with frozen natural orbitals; CI_TYPE CONV. fno-ccsd; coupled cluster singles doubles with frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-ccsd(t); ccsd with perturbative triples and frozen natural orbitals; CC_TYPE CONV, DF, CD. fno-mp3; mp3 with frozen natural orbitals; MP_TYPE CONV. fno-mp4(sdq); mp4(sdq) with frozen natural orbitals; MP_TYPE CONV. fno-mp4; mp4 with frozen natural orbitals; MP_TYPE CONV. fno-lccd; linear ccd with frozen natural orbitals; CC_TYPE CONV. fno-cepa(0), fno-lccsd; cepa(0) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(1); cepa(1) with frozen natural orbitals; CC_TYPE CONV. fno-cepa(3); cepa(3) with frozen natural orbitals; CC_TYPE CONV. fno-acpf; acpf with frozen natural orbitals; CC_TYPE CONV. fno-aqcc; aqcc with frozen natural orbitals; CC_TYPE CONV. fno-cisd; cisd with frozen natural orbitals; CI_TYPE CONV. Basic FNOCC ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:17465,Modifiability,config,configurations,17465,"S¶. Desired number of DIIS vectors. Type: integer; Default: 8. NAT_ORBS¶. Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. OCC_TOLERANCE¶. Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. CC_TIMINGS¶. Do time each cc diagram?. Type: boolean; Default: false. DF_BASIS_CC¶. Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. DIPMOM¶. Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. Advanced FNOCC Keywords¶. SCS_MP2¶. Do SCS-MP2?. Type: boolean; Default: false. MP2_SCALE_OS¶. Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. SCS_CCSD¶. Do SCS-CCSD?. Type: boolean; Default: false. CC_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS¶. Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:19388,Modifiability,config,configuration,19388,"?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. DFCC¶. Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). table of contents. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Frozen natural orbitals (FNO); QCISD(T), CCSD(T), MP4, and CEPA; Quadratic configuration interaction and coupled cluster; Many-body perturbation theory; Coupled electron pair approximation; Density-fitted coupled cluster; Gn theory; Supported methods; Basic FNOCC Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; E_CONVERGENCE; MAXITER; DIIS_MAX_VECS; NAT_ORBS; OCC_TOLERANCE; TRIPLES_LOW_MEMORY; CC_TIMINGS; DF_BASIS_CC; CHOLESKY_TOLERANCE; CEPA_NO_SINGLES; DIPMOM. Advanced FNOCC Keywords; SCS_MP2; MP2_SCALE_OS; MP2_SCALE_SS; SCS_CCSD; CC_SCALE_OS; CC_SCALE_SS; RUN_MP2; RUN_MP3; RUN_MP4; RUN_CCSD; RUN_CEPA; COMPUTE_TRIPLES; COMPUTE_MP4_TRIPLES; DFCC; CEPA_LEVEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:11393,Performance,optimiz,optimized,11393,"] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). G",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:10489,Safety,avoid,avoid,10489,"c{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, ",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:3412,Usability,simpl,simplified,3412,"utations; are controlled through the keywords NAT_ORBS and; OCC_TOLERANCE, or by prepending a valid method name with “fno” in; the energy call as; 1energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword ACTIVE_NAT_ORBS. This keyword will override the; keyword OCC_TOLERANCE. QCISD(T), CCSD(T), MP4, and CEPA¶; The FNOCC module in PSI4 supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster¶; The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968] was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]. Consider the set of equations defining CCSD:. (1)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\\end{split}\]; where we have chosen the intermediate normalization,; \(\langle \Psi_0| \Psi \rangle = 1\), and the symbols \(T_1\); and \(T_2\) represent single and double excitation operators. The; QCISD equations can be obtained by omitting all but two terms that; are nonlinear in \(T_1\) and \(T_2\):. (2)¶\[\begin{split}\langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 +",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:8510,Usability,simpl,simple,8510,"SD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217].; What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; PSI4. We begin with the CISD wave function. (3)¶\[| \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,\]; where we have chosen the intermediate normalization, \(\langle \Psi_0; | \Psi \rangle = 1\). The CISD correlation energy is given by. (4)¶\[E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,\]; and the amplitudes can be determined by the solution to the coupled set of; equations:. (5)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle.\end{split}\]; The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, \(E_c\), with generalized shifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N}",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/fnocc.html:9624,Usability,simpl,simply,9624,"hifts for the; doubles and singles equations, \(\Delta_{ij}\) and \(\Delta_i\):. (6)¶\[\begin{split}0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle.\end{split}\]; These shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scal",MatchSource.WIKI,psi4manual/1.3.2/fnocc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/fnocc.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2026,Availability,avail,available,2026,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2087,Availability,avail,available,2087,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2493,Availability,avail,available,2493,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.he",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2601,Availability,avail,availability,2601,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2766,Availability,avail,available,2766,"finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic ",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:4713,Availability,avail,available,4713,"es. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vi",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:7275,Deployability,update,updated,7275,"ation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option NORMAL_MODES_WRITE to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. NORMAL_MODES_WRITE¶. Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. WRITER_FILE_LABEL¶. Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; NORMAL_MODES_WRITE; WRITER_FILE_LABEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:896,Energy Efficiency,energy,energy,896,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:948,Energy Efficiency,energy,energy,948,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1424,Energy Efficiency,energy,energy,1424,"scussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1586,Energy Efficiency,energy,energy,1586," is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences accordin",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1713,Energy Efficiency,energy,energy,1713,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1986,Energy Efficiency,energy,energy,1986,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:5415,Energy Efficiency,reduce,reduced,5415,"i4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option NORMAL_MODES_WRITE to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. NORMAL_MODES_WRITE¶. Do write a file containing the normal modes in Molden format? If so, the filename will end",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:607,Integrability,wrap,wrapper,607,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:532,Performance,perform,perform,532,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1641,Performance,perform,performed,1641," is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences accordin",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1735,Performance,perform,performs,1735,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:2141,Performance,perform,performed,2141,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:3393,Performance,optimiz,optimize,3393,"nly the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:513,Security,access,access,513,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1490,Security,access,accessed,1490,"most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians ",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:1689,Security,access,accesses,1689,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:4355,Security,access,accessed,4355," recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible rep",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq-1.html:4762,Security,access,accessible,4762,"artrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal M",MatchSource.WIKI,psi4manual/1.3.2/freq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq-1.html
https://psicode.org/psi4manual/1.3.2/freq.html:2026,Availability,avail,available,2026,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:2087,Availability,avail,available,2087,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:2493,Availability,avail,available,2493,"n be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.he",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:2601,Availability,avail,availability,2601,"arrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:2766,Availability,avail,available,2766,"finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic ",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:4713,Availability,avail,available,4713,"es. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vi",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:7275,Deployability,update,updated,7275,"ation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option NORMAL_MODES_WRITE to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. NORMAL_MODES_WRITE¶. Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. WRITER_FILE_LABEL¶. Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden Interface Keywords; NORMAL_MODES_WRITE; WRITER_FILE_LABEL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:896,Energy Efficiency,energy,energy,896,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:948,Energy Efficiency,energy,energy,948,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1424,Energy Efficiency,energy,energy,1424,"scussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1586,Energy Efficiency,energy,energy,1586," is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences accordin",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1713,Energy Efficiency,energy,energy,1713,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1986,Energy Efficiency,energy,energy,1986,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:5415,Energy Efficiency,reduce,reduced,5415,"i4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal Modes¶; PSI4 has the ability to export a Molden file that stores information about; the harmonic frequencies and normal modes computed via frequency().; This feature can be enabled by setting the option NORMAL_MODES_WRITE to true.; The filename of the Molden file ends in .molden_normal_modes, and the prefix is; determined by WRITER_FILE_LABEL (if set), or else by the name of the; output file plus the name of the current molecule.; The normal coordinates saved in the Molden file are normalized and are not; mass weighted. Molden Interface Keywords¶. NORMAL_MODES_WRITE¶. Do write a file containing the normal modes in Molden format? If so, the filename will end",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:607,Integrability,wrap,wrapper,607,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:532,Performance,perform,perform,532,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1641,Performance,perform,performed,1641," is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences accordin",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1735,Performance,perform,performs,1735,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:2141,Performance,perform,performed,2141,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:3393,Performance,optimiz,optimize,3393,"nly the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:513,Security,access,access,513,"﻿. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian()¶. Psi4 Native Hessian Methods. For further discussion of vibrational and thermochemical analysis,; see Sec. Vibrational and Thermochemical Analysis.; frequency() is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indica",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1490,Security,access,accessed,1490,"most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, frequency() is a light wrapper over; hessian() that computes the Hessian then adds a; thermochemical analysis. psi4.frequency(name[, molecule, return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians ",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:1689,Security,access,accesses,1689,"return_wfn, func, mode, dertype, irrep])[source]¶; Function to compute harmonic vibrational frequencies. Aliases:frequencies(), freq(). Returns:float – Total electronic energy in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. >>> # [1] Frequency cal",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:4355,Security,access,accessed,4355," recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). psi4.hessian(name[, molecule, return_wfn, func, dertype, irrep])[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible rep",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/freq.html:4762,Security,access,accessible,4762,"artrees/Bohr/Bohr. Returns:(Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; python/vibanalysis. Formatted printing of vibrational; results is available through qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; nd.array(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy;  ; ndarray(ndof) int. TRV; translation/rotation/vibration;  ; ndarray(ndof) str ‘TR’ or ‘V’ or ‘-‘ for partial. gamma; irreducible representation;  ; ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). Visualization of Normal M",MatchSource.WIKI,psi4manual/1.3.2/freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/freq.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:374,Availability,down,downloads,374,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:487,Availability,avail,available,487,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:388,Deployability,configurat,configuration,388,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:629,Deployability,install,installed,629,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:727,Deployability,install,installed,727,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:815,Deployability,install,install,815,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1102,Deployability,install,installation,1102,"I4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1703,Deployability,install,installation,1703,"y been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1853,Deployability,install,installation,1853,"PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2843,Deployability,update,updated,2843,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:940,Integrability,depend,dependent,940,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1285,Integrability,depend,dependent,1285,"h; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link a",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1652,Integrability,depend,dependencies,1652,"stalled alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure ga",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2478,Integrability,depend,dependencies,2478,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:388,Modifiability,config,configuration,388,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1308,Modifiability,config,configure,1308,"2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2g",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1616,Modifiability,variab,variable,1616,"stalled alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure ga",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1787,Modifiability,variab,variable,1787,"ough conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © C",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:1974,Modifiability,variab,variable,1974,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2094,Modifiability,variab,variable,2094,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2338,Modifiability,config,configdir,2338,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2619,Modifiability,config,configure,2619,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:911,Safety,detect,detect,911,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2030,Safety,detect,detecting,2030,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2112,Safety,detect,detecting,2112,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2387,Safety,detect,detectable,2387,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:374,Availability,down,downloads,374,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:487,Availability,avail,available,487,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:388,Deployability,configurat,configuration,388,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:629,Deployability,install,installed,629,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:727,Deployability,install,installed,727,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:815,Deployability,install,install,815,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1102,Deployability,install,installation,1102,"I4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1703,Deployability,install,installation,1703,"y been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1853,Deployability,install,installation,1853,"PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2843,Deployability,update,updated,2843,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:940,Integrability,depend,dependent,940,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1285,Integrability,depend,dependent,1285,"h; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link a",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1652,Integrability,depend,dependencies,1652,"stalled alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure ga",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2478,Integrability,depend,dependencies,2478,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:388,Modifiability,config,configuration,388,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1308,Modifiability,config,configure,1308,"2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2g",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1616,Modifiability,variab,variable,1616,"stalled alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure ga",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1787,Modifiability,variab,variable,1787,"ough conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © C",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:1974,Modifiability,variab,variable,1974,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2094,Modifiability,variab,variable,2094,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2338,Modifiability,config,configdir,2338,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2619,Modifiability,config,configure,2619,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:911,Safety,detect,detect,911,"﻿. Interface to gau2grid by D. G. A. Smith. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2030,Safety,detect,detecting,2030,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2112,Safety,detect,detecting,2112,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gau2grid.html:2387,Safety,detect,detectable,2387,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gau2grid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:283,Availability,avail,available,283,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:990,Availability,down,download,990,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1010,Availability,avail,available,1010,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1258,Availability,error,error,1258,"mples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1626,Availability,avail,available,1626," anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a H",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:396,Deployability,install,installer,396,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:428,Deployability,install,installed,428,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:535,Deployability,install,install,535,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:564,Deployability,install,install,564,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:667,Deployability,install,installed,667,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:765,Deployability,install,install,765,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:804,Deployability,install,installation,804,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:3859,Deployability,update,updated,3859,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1570,Energy Efficiency,energy,energy,1570,"a package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1993,Energy Efficiency,energy,energy,1993,"rce also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2226,Energy Efficiency,energy,energy,2226,"rder). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradien",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2309,Energy Efficiency,energy,energy,2309,"o preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified.",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2636,Energy Efficiency,energy,energy,2636," must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents.",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:3175,Energy Efficiency,energy,energy,3175,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:3240,Energy Efficiency,energy,energy,3240,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1442,Integrability,interface,interface,1442,"a package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2539,Integrability,interface,interface,2539,"e:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a s",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2590,Integrability,rout,route,2590," must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents.",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:3515,Integrability,interface,interface,3515,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1387,Modifiability,variab,variables,1387,"ndows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSS",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:3467,Modifiability,extend,extended,3467,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:2108,Performance,optimiz,optimization,2108," program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c me",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp-1.html:1335,Usability,simpl,simply,1335,"ndows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSS",MatchSource.WIKI,psi4manual/1.3.2/gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html
https://psicode.org/psi4manual/1.3.2/gcp.html:283,Availability,avail,available,283,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:990,Availability,down,download,990,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1010,Availability,avail,available,1010,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1258,Availability,error,error,1258,"mples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1626,Availability,avail,available,1626," anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a H",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:396,Deployability,install,installer,396,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:428,Deployability,install,installed,428,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:535,Deployability,install,install,535,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:564,Deployability,install,install,564,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:667,Deployability,install,installed,667,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:765,Deployability,install,install,765,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:804,Deployability,install,installation,804,"﻿. Interface to gCP by S. Grimme. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to gCP by S. Grimme¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Samples. Installation¶; Binary. gCP is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:3859,Deployability,update,updated,3859,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1570,Energy Efficiency,energy,energy,1570,"a package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1993,Energy Efficiency,energy,energy,1993,"rce also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2226,Energy Efficiency,energy,energy,2226,"rder). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradien",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2309,Energy Efficiency,energy,energy,2309,"o preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified.",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2636,Energy Efficiency,energy,energy,2636," must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents.",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:3175,Energy Efficiency,energy,energy,3175,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:3240,Energy Efficiency,energy,energy,3240,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1442,Integrability,interface,interface,1442,"a package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2539,Integrability,interface,interface,2539,"e:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a s",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2590,Integrability,rout,route,2590," must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents.",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:3515,Integrability,interface,interface,3515,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1387,Modifiability,variab,variables,1387,"ndows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSS",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:3467,Modifiability,extend,extended,3467,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:2108,Performance,optimiz,optimization,2108," program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c me",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gcp.html:1335,Usability,simpl,simply,1335,"ndows, through the Ubuntu shell). If using the Psi4conda installer, gCP has already been installed alongside. If using the PSI4 conda package, the gcp conda package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSS",MatchSource.WIKI,psi4manual/1.3.2/gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:432,Availability,avail,available,432,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1445,Availability,avail,available,1445,"DMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1674,Availability,checkpoint,checkpoint,1674,"eady been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be pa",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:570,Deployability,install,installed,570,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:668,Deployability,install,installed,668,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:752,Deployability,install,install,752,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1068,Deployability,install,installation,1068,"). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5739,Deployability,install,installation,5739,"US¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDM",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5880,Deployability,install,installation,5880,"e radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Inde",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:7044,Deployability,update,updated,7044," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:910,Integrability,depend,dependent,910,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1289,Integrability,depend,dependent,1289,"Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() rout",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:2202,Integrability,rout,routine,2202,"e and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; 1; 2dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multi",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5692,Integrability,depend,dependencies,5692,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6564,Integrability,depend,dependencies,6564," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5252,Modifiability,config,configure,5252," sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_ORIGIN¶. The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_MULTIPOLE_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link agai",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5576,Modifiability,variab,variable,5576,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5656,Modifiability,variab,variable,5656,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5818,Modifiability,variab,variable,5818,"1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gd",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:5989,Modifiability,variab,variable,5989,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6101,Modifiability,variab,variable,6101,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6411,Modifiability,config,configdir,6411," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6823,Modifiability,config,configure,6823," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:885,Safety,detect,detect,885,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6041,Safety,detect,detecting,6041,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6119,Safety,detect,detecting,6119,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:6460,Safety,detect,detectable,6460," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:2831,Security,access,accessed,2831,"; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; 1; 2dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the \(Q^l_m\) components of the multipoles are ordered as; \(Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots\) The second matrix returned has a single row, whose columns; are the total multipoles, translated to GDMA_ORIGIN, and summed. psi4.gdma(wfn)[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (string) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is use",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1492,Usability,simpl,simply,1492,"PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name;",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma-1.html:1715,Usability,simpl,simplest,1715,"ure with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, ",MatchSource.WIKI,psi4manual/1.3.2/gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma-1.html
https://psicode.org/psi4manual/1.3.2/gdma.html:432,Availability,avail,available,432,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1445,Availability,avail,available,1445,"DMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1674,Availability,checkpoint,checkpoint,1674,"eady been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be pa",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:570,Deployability,install,installed,570,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:668,Deployability,install,installed,668,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:752,Deployability,install,install,752,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1068,Deployability,install,installation,1068,"). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simpl",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5739,Deployability,install,installation,5739,"US¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDM",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5880,Deployability,install,installation,5880,"e radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Inde",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:7044,Deployability,update,updated,7044," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:910,Integrability,depend,dependent,910,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1289,Integrability,depend,dependent,1289,"Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() rout",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:2202,Integrability,rout,routine,2202,"e and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; 1; 2dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multi",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5692,Integrability,depend,dependencies,5692,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6564,Integrability,depend,dependencies,6564," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5252,Modifiability,config,configure,5252," sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_ORIGIN¶. The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_MULTIPOLE_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link agai",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5576,Modifiability,variab,variable,5576,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5656,Modifiability,variab,variable,5656,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5818,Modifiability,variab,variable,5818,"1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gd",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:5989,Modifiability,variab,variable,5989,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6101,Modifiability,variab,variable,6101,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6411,Modifiability,config,configdir,6411," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6823,Modifiability,config,configure,6823," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:885,Safety,detect,detect,885,"﻿. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provid",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6041,Safety,detect,detecting,6041,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6119,Safety,detect,detecting,6119,"irs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:6460,Safety,detect,detectable,6460," will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:2831,Security,access,accessed,2831,"; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; 1; 2dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the \(Q^l_m\) components of the multipoles are ordered as; \(Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots\) The second matrix returned has a single row, whose columns; are the total multipoles, translated to GDMA_ORIGIN, and summed. psi4.gdma(wfn)[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (string) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is use",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1492,Usability,simpl,simply,1492,"PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name;",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/gdma.html:1715,Usability,simpl,simplest,1715,"ure with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, ",MatchSource.WIKI,psi4manual/1.3.2/gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gdma.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:10914,Availability,avail,available,10914,"ransform_density() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_restricted() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_unrestricted() psi4.core.IntegralTransform method, [1], [2]. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. Balk psi4.core.PsiReturnType attribute, [1], [2]. banner() in module psi4.driver. BASIC module, [1]. BASIS (DFMP2). (MINTS). basis psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. BASIS (SAPT). (SCF). basis set. ; adding new. auxiliary. available by element. available by family, [1]. default auxiliary. delta correction. extrapolation. multiple within molecule. basis() psi4.core.BasisExtents method, [1], [2]. psi4.core.VBase method, [1], [2]. basis1 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. basis2 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.Nab",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:10936,Availability,avail,available,10936,"core.IntegralTransform method, [1], [2]. backtransform_tpdm_restricted() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_unrestricted() psi4.core.IntegralTransform method, [1], [2]. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. Balk psi4.core.PsiReturnType attribute, [1], [2]. banner() in module psi4.driver. BASIC module, [1]. BASIS (DFMP2). (MINTS). basis psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. BASIS (SAPT). (SCF). basis set. ; adding new. auxiliary. available by element. available by family, [1]. default auxiliary. delta correction. extrapolation. multiple within molecule. basis() psi4.core.BasisExtents method, [1], [2]. psi4.core.VBase method, [1], [2]. basis1 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. basis2 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. ps",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:39880,Availability,avail,available,39880,"HF method, [1]. psi4.core.Wavefunction method, [1], [2]. Da_subset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. damping. DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). damping_update() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Dao() psi4.core.VBase method, [1], [2]. dashcoeff_supplement psi4.driver.EmpiricalDispersion attribute. dashlevel psi4.driver.EmpiricalDispersion attribute. dashlevel_citation psi4.driver.EmpiricalDispersion attribute. dashparams psi4.driver.EmpiricalDispersion attribute. dashparams_citation psi4.driver.EmpiricalDispersion attribute. DASUM() in module psi4.core, [1]. database(). adding new. available. output. setting keywords. database() in module psi4.driver.wrapper_database. DAXPY() in module psi4.core, [1]. db(). . see database(). Db() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.SADGuess method, [1], [2]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. Db_subset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. dcalc() psi4.core.CIVector method, [1], [2]. DCFT. theory. dcft() in module psi4.core, [1]. DCF",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:44527,Availability,avail,available,44527,"method, [1], [2]. psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. detci() in module psi4.core, [1]. DETCI_FREEZE_CORE (DETCI). DF-CCSD(T). DF-MP2. theory. DF_BASIS_CC (FNOCC). (GLOBALS). DF_BASIS_DCFT (DCFT). DF_BASIS_ELST (SAPT). DF_BASIS_EP2 (DFEP2). DF_BASIS_GUESS (SCF). DF_BASIS_MCSCF (DETCI). DF_BASIS_MP2 (DFMP2). DF_BASIS_SAD (SCF). DF_BASIS_SAPT (SAPT). DF_BASIS_SCF (CPHF). (SCF). DF_BUMP_R0 (SCF). DF_BUMP_R1 (SCF). DF_DOMAINS (SCF). DF_FITTING_CONDITION (SCF). DF_INTS_IO (DFMP2). (SCF). DF_INTS_NUM_THREADS (DFMP2). (SCF). DF_METRIC (SCF). DF_SCF_GUESS (SCF). DF_THETA (SCF). DFCC (FNOCC). DFEP2Wavefunction class in psi4.core, [1]. dfh() psi4.core.MemDFJK method, [1], [2]. DFHelper class in psi4.core, [1]. dfmp2() in module psi4.core, [1]. DFMP2_MEM_FACTOR (DFMP2). DFMP2_P2_TOLERANCE (DFMP2). DFMP2_P_TOLERANCE (DFMP2). dfocc() in module psi4.core, [1]. DFSOMCSCF class in psi4.core, [1]. DFT, [1]. available functionals. theory. DFT_ALPHA (SCF). DFT_ALPHA_C (SCF). DFT_BASIS_TOLERANCE (SCF). DFT_BLOCK_MAX_POINTS (SCF). DFT_BLOCK_MAX_RADIUS (SCF). DFT_BLOCK_MIN_POINTS (SCF). DFT_BLOCK_SCHEME (SCF). DFT_BS_RADIUS_ALPHA (SCF). DFT_DISPERSION_PARAMETERS (SCF). DFT_GRAC_ALPHA (SCF). DFT_GRAC_BETA (SCF). DFT_GRAC_C_FUNC (SCF). DFT_GRAC_SHIFT (SCF). DFT_GRAC_X_FUNC (SCF). DFT_GRID_NAME (SCF). DFT_NUCLEAR_SCHEME (SCF). DFT_OMEGA (SCF). DFT_OMEGA_C (SCF). DFT_PRUNING_ALPHA (SCF). DFT_PRUNING_SCHEME (SCF). DFT_RADIAL_POINTS (SCF). DFT_RADIAL_SCHEME (SCF). DFT_SPHERICAL_POINTS (SCF). DFT_SPHERICAL_SCHEME (SCF). DFT_V2_RHO_CUTOFF (SCF). DFT_VV10_B (SCF). DFT_VV10_C (SCF). DFT_VV10_POSTSCF (SCF). DFT_VV10_RADIAL_POINTS (SCF). DFT_VV10_RHO_CUTOFF (SCF). DFT_VV10_SPHERICAL_POINTS (SCF). DFTD3. Dftd3Error. DFTensor class in psi4.core, [1]. DFTFUNCTIONALTOTALENERGY. DFTGrid class in psi4.core, [1]. DFTNL. DFTTOTALENERGY. DFTXCENERGY. DGBMV() in module psi4.core, [1]. DGEEV() in module psi4.core, [1]. DGEMM()",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:79552,Deployability,install,installing,79552,"ore.DFHelper method, [1], [2]. psi4.core.HF method, [1], [2]. psi4.core.IntegralTransform method, [1], [2]. psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. initialize_gtfock_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialize_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialized_diis_manager_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. input_units_to_au() psi4.core.Molecule method, [1], [2]. insert() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. install_instructions psi4.driver.PastureRequiredError attribute. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method, [1], [2]. psi4.core.OrbitalSpace method, [1], [2]. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core, [1]. integrals, [1]. integrals() psi4.core.MintsHelper method, [1], [2]. integrals_erf() psi4.core.MintsHelper method, [1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LI",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:146008,Deployability,update,update,146008,".core.Matrix static method, [1], [2]. true_atomic_number() psi4.core.Molecule method, [1], [2]. tstart() in module psi4.core, [1]. tstop() in module psi4.core, [1]. TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. TwoBodyAOInt class in psi4.core, [1]. twoel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. TwoElectronInt class in psi4.core, [1]. U. U psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. UHF class in psi4.core, [1]. UHF_NOONS (SCF). UKSFunctions class in psi4.core, [1]. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unify() psi4.core.FISAPT method, [1], [2]. unit() psi4.core.SymmetryOperation method, [1], [2]. units. ; molecule. units() psi4.core.Molecule method, [1], [2]. Unnormalized psi4.core.PrimitiveType attribute, [1], [2]. Unrestricted psi4.core.IntegralTransform.TransformationType attribute, [1]. UPDATE (DETCI). update() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. update_geometry() psi4.core.Molecule method, [1], [2]. update_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction met",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:151489,Deployability,update,updated,151489,", [1], [2]. WRITER_FILE_LABEL (GLOBALS). X. x() psi4.core.BlockOPoints method, [1], [2]. X() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. x() psi4.core.Molecule method, [1], [2]. X() psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. x_alpha() psi4.core.SuperFunctional method, [1], [2]. x_beta() psi4.core.SuperFunctional method, [1], [2]. x_functional() psi4.core.SuperFunctional method, [1], [2]. x_functionals() psi4.core.SuperFunctional method, [1], [2]. x_omega() psi4.core.SuperFunctional method, [1], [2]. XC_build() psi4.core.SuperFunctional method, [1], [2]. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xml2dict() in module psi4.driver. xtpl_highest_1() in module psi4.driver.driver_cbs. xyz psi4.core.SalcComponent attribute, [1], [2]. xyz() psi4.core.Molecule method, [1], [2]. Y. y() psi4.core.BlockOPoints method, [1], [2]. psi4.core.Molecule method, [1], [2]. Z. z() psi4.core.BlockOPoints method, [1], [2]. Z() psi4.core.Molecule method, [1], [2]. z() psi4.core.Molecule method, [1], [2]. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() psi4.core.CIVector method, [1], [2]. psi4.core.Dimension method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. zero_ao_basis_set() psi4.core.BasisSet method, [1], [2]. zero_diagonal() psi4.core.Matrix method, [1], [2]. ZERO_INTERNAL_AMPS (PSIMRCC). zero_lower() psi4.core.Matrix method, [1], [2]. zero_redundant() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. zero_upper() psi4.core.Matrix method, [1], [2]. ZETA (CCDENSITY). (CCLAMBDA). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:3205,Energy Efficiency,allocate,allocate,3205,"ule method, [1], [2]. ADD_AUXILIARY_BONDS (OPTKING). add_bool() psi4.core.Options method, [1], [2]. add_c_functional() psi4.core.SuperFunctional method, [1], [2]. add_int() psi4.core.Options method, [1], [2]. add_space() psi4.core.DFHelper method, [1], [2]. add_str() psi4.core.Options method, [1], [2]. add_str_i() psi4.core.Options method, [1], [2]. add_transformation() psi4.core.DFHelper method, [1], [2]. add_x_functional() psi4.core.SuperFunctional method, [1], [2]. addBasis() psi4.core.ExternalPotential method, [1], [2]. addCharge() psi4.core.ExternalPotential method, [1], [2]. addChargeAngstrom() psi4.driver.QMMM method, [1]. addChargeBohr() psi4.driver.QMMM method, [1]. addDiffuse() psi4.driver.QMMM method, [1]. adding new. ; EFP. basis set. database(). method alias. AEL (CCDENSITY). aIndex() psi4.core.MOSpace method, [1], [2]. AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). all() psi4.core.MOSpace method, [1], [2]. allen_focal_point() in module psi4.driver.aliases. allocate() psi4.core.SuperFunctional method, [1], [2]. Alpha psi4.core.IntegralTransform.SpinType attribute, [1]. alpha() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. alpha_corr_to_pitzer() psi4.core.IntegralTransform method, [1], [2]. alpha_orbital_space() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. am psi4.core.GaussianShell attribute, [1], [2]. AMCHAR psi4.core.GaussianShell attribute, [1], [2]. amchar psi4.core.GaussianShell attribute, [1], [2]. ANALYZE (CCENERGY). (CCRESPONSE). ancestor() in module psi4.driver. Angstrom psi4.core.GeometryUnits attribute, [1], [2]. AngularMomentumInt class in psi4.core, [1]. anharmonicity(). ; setting keywords. anharmonicity() in module psi4.driver.diatomic. ansatz() psi4.core.P",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:26560,Energy Efficiency,charge,charge,26560,"). CFOUR_SCF_DAMPING (CFOUR). CFOUR_SCF_EXPORDER (CFOUR). CFOUR_SCF_EXPSTART (CFOUR). CFOUR_SCF_EXTRAPOLATION (CFOUR). CFOUR_SCF_MAXCYC (CFOUR). CFOUR_SD_FIELD (CFOUR). CFOUR_SPHERICAL (CFOUR). CFOUR_SPIN_FLIP (CFOUR). CFOUR_SPIN_ORBIT (CFOUR). CFOUR_SPIN_SCAL (CFOUR). CFOUR_SPINROTATION (CFOUR). CFOUR_SUBGROUP (CFOUR). CFOUR_SYM_CHECK (CFOUR). CFOUR_SYMMETRY (CFOUR). CFOUR_T3_EXTRAPOL (CFOUR). CFOUR_TAMP_SUM (CFOUR). CFOUR_THERMOCHEMISTRY (CFOUR). CFOUR_TRANS_INV (CFOUR). CFOUR_TREAT_PERT (CFOUR). CFOUR_UIJ_THRESHOLD (CFOUR). CFOUR_UNITS (CFOUR). CFOUR_UPDATE_HESSIAN (CFOUR). CFOUR_VIBRATION (CFOUR). CFOUR_VTRAN (CFOUR). CFOUR_XFIELD (CFOUR). CFOUR_XFORM_TOL (CFOUR). CFOUR_YFIELD (CFOUR). CFOUR_ZFIELD (CFOUR). CFOURERRORCODE. chain_dot() psi4.core.Matrix method, [1], [2]. change_file_namespace() psi4.core.IO method, [1], [2]. char_table() psi4.core.PointGroup method, [1], [2]. character() psi4.core.IrreducibleRepresentation method, [1], [2]. CharacterTable class in psi4.core, [1]. charge. ; molecule. charge() psi4.core.Molecule method, [1], [2]. check_iwl_file_from_scf_type() in module psi4.driver. check_phases() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. CheMPS2. CHOLESKY (DFOCC). cholesky_factorize() psi4.core.Matrix method, [1], [2]. CHOLESKY_TOLERANCE (DFOCC). (FNOCC). (SCF). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_FILE_START (DETCI). CI_MAXITER (DETCI). ci_nat_orbs() psi4.core.CIWavefunction method, [1], [2]. CI_NUM_THREADS (DETCI). CI_TYPE (GLOBALS). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. ",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:26580,Energy Efficiency,charge,charge,26580,"FOUR). CFOUR_SCF_EXPORDER (CFOUR). CFOUR_SCF_EXPSTART (CFOUR). CFOUR_SCF_EXTRAPOLATION (CFOUR). CFOUR_SCF_MAXCYC (CFOUR). CFOUR_SD_FIELD (CFOUR). CFOUR_SPHERICAL (CFOUR). CFOUR_SPIN_FLIP (CFOUR). CFOUR_SPIN_ORBIT (CFOUR). CFOUR_SPIN_SCAL (CFOUR). CFOUR_SPINROTATION (CFOUR). CFOUR_SUBGROUP (CFOUR). CFOUR_SYM_CHECK (CFOUR). CFOUR_SYMMETRY (CFOUR). CFOUR_T3_EXTRAPOL (CFOUR). CFOUR_TAMP_SUM (CFOUR). CFOUR_THERMOCHEMISTRY (CFOUR). CFOUR_TRANS_INV (CFOUR). CFOUR_TREAT_PERT (CFOUR). CFOUR_UIJ_THRESHOLD (CFOUR). CFOUR_UNITS (CFOUR). CFOUR_UPDATE_HESSIAN (CFOUR). CFOUR_VIBRATION (CFOUR). CFOUR_VTRAN (CFOUR). CFOUR_XFIELD (CFOUR). CFOUR_XFORM_TOL (CFOUR). CFOUR_YFIELD (CFOUR). CFOUR_ZFIELD (CFOUR). CFOURERRORCODE. chain_dot() psi4.core.Matrix method, [1], [2]. change_file_namespace() psi4.core.IO method, [1], [2]. char_table() psi4.core.PointGroup method, [1], [2]. character() psi4.core.IrreducibleRepresentation method, [1], [2]. CharacterTable class in psi4.core, [1]. charge. ; molecule. charge() psi4.core.Molecule method, [1], [2]. check_iwl_file_from_scf_type() in module psi4.driver. check_phases() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. CheMPS2. CHOLESKY (DFOCC). cholesky_factorize() psi4.core.Matrix method, [1], [2]. CHOLESKY_TOLERANCE (DFOCC). (FNOCC). (SCF). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_FILE_START (DETCI). CI_MAXITER (DETCI). ci_nat_orbs() psi4.core.CIWavefunction method, [1], [2]. CI_NUM_THREADS (DETCI). CI_TYPE (GLOBALS). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLE",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:51396,Energy Efficiency,energy,energy,51396,"le specification. EFP_DISP (EFP). EFP_DISP_DAMPING (EFP). EFP_ELST (EFP). EFP_ELST_DAMPING (EFP). EFP_EXCH (EFP). EFP_IND (EFP). EFP_IND_DAMPING (EFP). EFP_QM_ELST (EFP). EFP_QM_IND (EFP). efzc() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [1",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:51424,Energy Efficiency,energy,energy,51424,"FP_DISP_DAMPING (EFP). EFP_ELST (EFP). EFP_ELST_DAMPING (EFP). EFP_EXCH (EFP). EFP_IND (EFP). EFP_IND_DAMPING (EFP). EFP_QM_ELST (EFP). EFP_QM_IND (EFP). efzc() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [1",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:83180,Energy Efficiency,energy,energy,83180,"nal method, [1], [2]. Isotopes. ISTOP (DETCI). iteration_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. IWLAndDPD psi4.core.IntegralTransform.OutputType attribute, [1]. IWLOnly psi4.core.IntegralTransform.OutputType attribute, [1]. J. J() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. kinetic() psi4.core.FISAPT method, [1], [2]. kinetic_grad() psi4.core.MintsHelper method, [1], [2]. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.dr",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:90061,Energy Efficiency,charge,charge,90061," mo_f12_squared() psi4.core.MintsHelper method, [1], [2]. mo_f12g12() psi4.core.MintsHelper method, [1], [2]. MO_MAXITER (DFOCC). (OCC). mo_oei_deriv1() psi4.core.MintsHelper method, [1], [2]. mo_oei_deriv2() psi4.core.MintsHelper method, [1], [2]. MO_READ (MCSCF). (OCC). MO_RELAX (DCFT). mo_spin_eri() psi4.core.MintsHelper method, [1], [2]. MO_STEP_MAX (DFOCC). (OCC). mo_tei_deriv1() psi4.core.MintsHelper method, [1], [2]. mo_tei_deriv2() psi4.core.MintsHelper method, [1], [2]. mo_transform() psi4.core.MintsHelper method, [1], [2]. MO_WRITE (OCC). MODULE (CPHF). moFa() psi4.core.ROHF method, [1], [2]. moFb() psi4.core.ROHF method, [1], [2]. moFeff() psi4.core.ROHF method, [1], [2]. MOGRAD_DAMPING (OCC). Molden. molden() in module psi4. in module psi4.driver. MOLDEN_WITH_VIRTUAL (GLOBALS). MOLDEN_WRITE (DCFT). (DFOCC). (SCF). MoldenWriter class in psi4.core, [1]. molecular_charge() psi4.core.Molecule method, [1], [2]. MolecularGrid class in psi4.core, [1]. molecule. ; EFP. PubChem. charge. ghost. isotope. multiple fragments. multiple in input file. multiplicity. no_reorient. setting keywords. specification. symmetry. units. Molecule class in psi4.core, [1]. molecule() psi4.core.BasisSet method, [1], [2]. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.FISAPT method, [1], [2]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. molecule_from_arrays in module psi4.driver. molecule_from_schema in module psi4.driver. molecule_from_string in module psi4.driver. molecule_get_attr() in module psi4.driver. molecule_set_attr() in module psi4.driver. MOM. MOM_excited_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. MOM_OCC (SCF). MOM_performed_ psi4.core.CUHF attribute,",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:106758,Energy Efficiency,power,power,106758,"ethod, [1], [2]. pitzer_to_ci_order_twoel() psi4.core.CIWavefunction method, [1], [2]. PitzerOrder psi4.core.IntegralTransform.MOOrdering attribute, [1]. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). play() psi4.core.MintsHelper method, [1], [2]. plugin() in module psi4.core, [1]. plugin_close() in module psi4.core, [1]. plugin_close_all() in module psi4.core, [1]. plugin_load() in module psi4.core, [1]. PMLocalizer class in psi4.core, [1]. point_group() psi4.core.Molecule method, [1], [2]. point_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. PointFunctions class in psi4.core, [1]. PointGroup class in psi4.core, [1]. POINTS (FINDIF). POLE_MAXITER (ADC). pop() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. populateExtern() psi4.driver.QMMM method, [1]. potential_grad() psi4.core.MintsHelper method, [1], [2]. PotentialInt class in psi4.core, [1]. power() psi4.core.Matrix method, [1], [2]. PPL_TYPE (DFOCC). PR (ADC). PRECONDITIONER (DETCI). prepare_options_for_module() in module psi4.core, [1]. prerequisites. presort_so_tei() psi4.core.IntegralTransform method, [1], [2]. PrimitiveType class in psi4.core, [1]. PRINT (CPHF). (EFP). (GLOBALS). (SAPT). print() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. psi4.core.PetiteList method, [1], [2]. print_atom_vector() psi4.core.Matrix method, [1], [2]. PRINT_BASIS (SCF). print_bond_angles() psi4.core.Molecule method, [1], [2]. print_cluster() psi4.core.Molecule method, [1], [2]. print_detail() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. print_detail_out() psi4.core.BasisSet method, [1], [2]. print_distances() psi4.core.Molecule method, [1], [2]. print_dpd_lookup() psi4.core.IntegralTransform method, [1], [2]. print_energies() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.c",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:118749,Energy Efficiency,charge,charge-transfer,118749,".UHF attribute, [1]. SAD_CHOL_TOLERANCE (SCF). SAD_D_CONVERGENCE (SCF). SAD_E_CONVERGENCE (SCF). SAD_FRAC_OCC (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). SAD_SCF_TYPE (SCF). SAD_SPIN_AVERAGE (SCF). SADGuess class in psi4.core, [1]. salc_name() psi4.core.CdSalcList method, [1], [2]. SalcComponent class in psi4.core, [1]. same_a_b_dens() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. same_a_b_orbs() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. sanitize_name() in module psi4.driver. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). sapt() in module psi4.core, [1]. SAPT0_E10 (SAPT). SAPT0_E20DISP (SAPT). SAPT0_E20IND (SAPT). SAPT0TOTALENERGY. SAPT2+(3)(CCD)DMP2TOTALENERGY. SAPT2+(3)(CCD)TOTALENERGY. SAPT2+(3)DMP2TOTALENERGY. SAPT2+(3)TOTALENERGY. SAPT2+(CCD)DMP2TOTALENERGY. SAPT2+(CCD)TOTALENERGY. SAPT2+3(CCD)DMP2TOTALENERGY. SAPT2+3(CCD)TOTALENERGY. SAPT2+3DMP2TOTALENERGY. SAPT2+3TOTALENERGY. SAPT2+DMP2TOTALENERGY. SAPT2+TOTALENERGY. SAPT2TOTALENERGY. SAPT_DFT_DO_DHF (SAPT). SAPT_DFT_FUNCTIONAL (SAPT). SAPT_DFT_GRAC_DETERMINATION (SAPT). SAPT_DFT_GRAC_SHIFT_A (SAPT). SAPT_DFT_GRAC_SHIFT_B (SAPT). SAPT_DFT_MP2_DISP_ALG (SAPT). SAPT_FDDS_DISP_LEG_LAMBDA (SAPT). SAPT_FDDS_DISP_NUM_POINTS (SAPT). SAPT_FDDS_V2_RHO_CUTOFF (SAPT). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_FACTOR (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_QUIET (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTTOTALENERGY. save() psi4.core.Matrix method, [1], [2]. psi4.driver.",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:136249,Energy Efficiency,energy,energy,136249,"rted() psi4.core.Deriv method, [1], [2]. set_tweak() psi4.core.LibXCFunctional method, [1], [2]. set_units() psi4.core.Molecule method, [1], [2]. set_variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.Molecule method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. set_vv10_b() psi4.core.SuperFunctional method, [1], [2]. set_vv10_c() psi4.core.SuperFunctional method, [1], [2]. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method, [1], [2]. set_x_alpha() psi4.core.SuperFunctional method, [1], [2]. set_x_beta() psi4.core.SuperFunctional method, [1], [2]. set_x_omega() psi4.core.SuperFunctional method, [1], [2]. setName() psi4.core.ExternalPotential method, [1], [2]. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. shape psi4.core.Matrix attribute, [1], [2]. psi4.core.Vector attribute, [1], [2]. shared_object() psi4.core.IO method, [1], [2]. psi4.core.IOManager method, [1], [2]. shell() psi4.core.BasisSet method, [1], [2]. shell_extents() psi4.core.BasisExtents method, [1], [2]. shell_to_ao_function() psi4.core.BasisSet method, [1], [2]. shell_to_basis_function() psi4.core.BasisSet method, [1], [2]. shell_to_center() psi4.core.BasisSet method, [1], [2]. ShellInfo class in psi4.core, [1]. shells_iterator() psi4.core.IntegralFactory method, [1], [2]",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:887,Modifiability,plugin,plugin,887,"﻿. Index. Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Index. Symbols; | _; | A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W; | X; | Y; | Z. Symbols. (T)CORRECTIONENERGY. -a, --append. ; psi4 command line option. -h, --help. ; psi4 command line option. -i <filename>, --input <filename>. ; psi4 command line option. -k, --skip-preprocessor. ; psi4 command line option. -l <name>, --psidatadir <name>. ; psi4 command line option. -m, --messy. ; psi4 command line option. -n <threads>, --nthread <threads>. ; psi4 command line option. -o <filename>, --output <filename>. ; psi4 command line option. -p <prefix>, --prefix <prefix>. ; psi4 command line option. -s <name>, --scratch <name>. ; psi4 command line option. -v, --verbose. ; psi4 command line option. -V, --version. ; psi4 command line option. :pair: plugin. ; v2rdm_casscf. _. _get_default_xtpl() in module psi4.driver.driver_cbs. _to_array() in module psi4.driver.p4util.numpy_helper. A. A-(T)CORRECTIONENERGY. A-CCSD(T)CORRELATIONENERGY. A-CCSD(T)TOTALENERGY. a1() psi4.core.Dispersion method, [1], [2]. a2() psi4.core.Dispersion method, [1], [2]. A24 module, [1]. A24alt module, [1]. A_RAS3_MAX (DETCI). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). Absent psi4.core.FragmentType attribute, [1], [2]. absmax() psi4.core.Matrix method, [1], [2]. absolute_to_relative() psi4.driver.Table method, [1]. accumulate_product() psi4.core.Matrix method, [1], [2]. ACENES module, [1]. ACPFCORRELATIONENERGY. ACPFDIPOLEX. ACPFDIPOLEY. ACPFDIPOLEZ. ACPFQUADRUPOLEXX. ACPFQUADRUPOLEXY. ACPFQUADRUPOLEXZ. ACPFQUADRUPOLEYY. ACPFQUADRUPOLEYZ. ACPFQUADRUPOLEZZ. ACPFTOTALENERGY. activate() in module psi4.driver. activate_all_fragments() psi4.core.Molecule method, [1], [2]. ACTIVE (GLOBALS). ACTIVE_NAT_ORBS (FNOCC). ADC. theory. adc() in module psi4.core, [1]. ad",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:51888,Modifiability,variab,variable,51888,"2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]. PYTHONPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]. VMDPATH. EOM_GUESS (CCEOM). EOM_REFERENCE (CCEOM). (CCHBAR). EP2_CONVERGENCE (DFEP2). EP2_MAXITER (DFEP2). EP2_NUM_EA (DFEP2). EP2_NUM_IP (DFEP2). EP2_ORBITALS (DFEP2). EP_EA_POLES (OCC). EP_IP_POLES (OCC). EP_MAXITER (OCC). epsilon_a() psi4.core.CCWavefunction method, [1]. psi4.core.CIWa",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:55101,Modifiability,extend,extend,55101," [1], [2]. erf_complement_eri() psi4.core.IntegralFactory method, [1], [2]. erf_eri() psi4.core.IntegralFactory method, [1], [2]. ErfComplementERI class in psi4.core, [1]. ErfERI class in psi4.core, [1]. ERI class in psi4.core, [1]. eri() psi4.core.IntegralFactory method, [1], [2]. esp_at_nuclei() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ESPPropCalc class in psi4.core, [1]. evals() psi4.core.OrbitalSpace method, [1], [2]. EX_ALLOW (DETCI). EX_LEVEL (DETCI). exch() psi4.core.FISAPT method, [1], [2]. EXCH_SCALE_ALPHA (SAPT). EXCITATION_RANGE (CCEOM). exists() psi4.core.IO method, [1], [2]. exp() psi4.core.GaussianShell method, [1], [2]. EXPLICIT_HAMILTONIAN (CPHF). exponent() psi4.core.FittedSlaterCorrelationFactor method, [1], [2]. extend() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. EXTERN (SCF). EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS). ExternalPotential class in psi4.core, [1]. extract_subsets() psi4.core.Molecule method, [1], [2]. extrapolation schemes. Exvals() psi4.core.OEProp method, [1], [2]. Eyvals() psi4.core.OEProp method, [1], [2]. Ezvals() psi4.core.OEProp method, [1], [2]. F. F12 class in psi4.core, [1]. f12() psi4.core.IntegralFactory method, [1], [2]. f12_double_commutator() psi4.core.IntegralFactory method, [1], [2]. f12_squared() psi4.core.IntegralFactory method, [1], [2]. F12DoubleCommutator class in psi4.core, [1]. F12G12 class in psi4.core, [1]. f12g12() psi4.core.IntegralFactory method, [1], [2]. F12Squared class in psi4.core, [1]. Fa() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UH",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:106043,Modifiability,plugin,plugin,106043,".core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. pcm_helper() in module psi4.driver. PCM_SCF_TYPE (PCM). PCMSolver. PCMSOLVER_PARSED_FNAME (PCM). PEP1. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_DIPOLE (SCF). perturb_grad() psi4.core.MintsHelper method, [1], [2]. PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). petite_list() psi4.core.MintsHelper method, [1], [2]. psi4.core.SOBasisSet method, [1], [2]. petite_list1() psi4.core.MintsHelper method, [1], [2]. PetiteList class in psi4.core, [1]. PHI_POINTS (SCF). physconst. physical constants. pitzer_to_ci_order_onel() psi4.core.CIWavefunction method, [1], [2]. pitzer_to_ci_order_twoel() psi4.core.CIWavefunction method, [1], [2]. PitzerOrder psi4.core.IntegralTransform.MOOrdering attribute, [1]. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). play() psi4.core.MintsHelper method, [1], [2]. plugin() in module psi4.core, [1]. plugin_close() in module psi4.core, [1]. plugin_close_all() in module psi4.core, [1]. plugin_load() in module psi4.core, [1]. PMLocalizer class in psi4.core, [1]. point_group() psi4.core.Molecule method, [1], [2]. point_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. PointFunctions class in psi4.core, [1]. PointGroup class in psi4.core, [1]. POINTS (FINDIF). POLE_MAXITER (ADC). pop() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. populateExtern() psi4.driver.QMMM method, [1]. potential_grad() psi4.core.MintsHelper method, [1], [2]. PotentialInt class in psi4.core, [1]. power() psi4.core.Matrix method, [1], [2]. PPL_TYPE (DFOCC). PR (ADC). PRECONDITIONER (DETCI). prepare_options_for_module() in module psi4.core, [1]. prerequisites. presort_so_tei() psi4.core.IntegralTransform method, [1], [2]. PrimitiveType class in psi4.core, [1]. PRINT (CPHF). (EFP). (GLOBALS)",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:146869,Modifiability,variab,variable,146869,"core.PrimitiveType attribute, [1], [2]. Unrestricted psi4.core.IntegralTransform.TransformationType attribute, [1]. UPDATE (DETCI). update() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. update_geometry() psi4.core.Molecule method, [1], [2]. update_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. variables() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Vb() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VBase class in psi4.core, [1]. vdot() psi4.core.CIVector method, [1], [2]. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). Vector class in psi4.core, [1]. Vector3 class in psi4.core, [1]. vector_dot() psi4.core.Matrix method, [1], [2]. vector_multiply() psi4",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:147174,Modifiability,variab,variables,147174,"_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. variables() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Vb() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VBase class in psi4.core, [1]. vdot() psi4.core.CIVector method, [1], [2]. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). Vector class in psi4.core, [1]. Vector3 class in psi4.core, [1]. vector_dot() psi4.core.Matrix method, [1], [2]. vector_multiply() psi4.core.CIVector method, [1], [2]. VectorMatrix class in psi4.core, [1]. vectors() psi4.core.FISAPT method, [1], [2]. version() in module psi4.core, [1]. vibanal_wfn() in module psi4.driver. vibrational analysis. ; function call. output. vir() psi4.core.MOSpace method, [1], [2]. VirOnly psi4.core.IntegralT",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:35246,Performance,optimiz,optimization,35246,"ralInt method, [1]. psi4.core.QuadrupoleInt method, [1]. psi4.core.ThreeCenterOverlapInt method, [1], [2]. psi4.core.TracelessQuadrupoleInt method, [1]. psi4.core.TwoBodyAOInt method, [1], [2]. psi4.core.TwoElectronInt method, [1], [2]. compute_spin_contamination() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. compute_state_transfer() psi4.core.CIWavefunction method, [1], [2]. COMPUTE_TRIPLES (FNOCC). compute_V() psi4.core.VBase method, [1], [2]. compute_Vx() psi4.core.VBase method, [1], [2]. computePotentialMatrix() psi4.core.ExternalPotential method, [1], [2]. CONDA_PREFIX, [1]. connectivity() psi4.core.Molecule method, [1], [2]. CONSECUTIVE_BACKSTEPS (OPTKING). construct_from_pydict() psi4.core.BasisSet method, [1], [2]. contact. converged psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. convergence criteria. ; geometry optimization. ConvergenceError. copy() psi4.core.CIVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.driver.Table method, [1]. copy_file_from_scratch() in module psi4.driver. copy_file_to_scratch() in module psi4.driver. copy_lower_to_upper() psi4.core.Matrix method, [1], [2]. copy_upper_to_lower() psi4.core.Matrix method, [1], [2]. CORE module, [1]. core_hamiltonian_grad() psi4.core.MintsHelper method, [1], [2]. corl_xtpl_helgaker_2() in module psi4.driver.driver_cbs. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). CorrelationFactor class in psi4.core, [1]. CorrelationTable class in psi4.core, [1]. Cotton-ordering. coulomb() psi4.core.FISAPT method, [1], [2]. count() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. counterpoise correction. COUPLED_INDUCTION (SAPT). COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp. ; setting keywords. CP-CORRECTED2-BODYINTE",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:66242,Performance,optimiz,optimization,66242,"_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). FROZEN_UOCC (GLOBALS). frzcpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. frzvpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. fsymbol() psi4.core.Molecule method, [1], [2]. ftrue_atomic_number() psi4.core.Molecule method, [1], [2]. Full psi4.core.SaveType attribute, [1], [2]. full_geometry() psi4.core.Molecule method, [1], [2]. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() psi4.core.Molecule method, [1], [2]. function call. ; geometry optimization. gradient. hessian. vibrational analysis. function_index psi4.core.GaussianShell attribute, [1], [2]. function_to_center() psi4.core.BasisSet method, [1], [2]. function_to_shell() psi4.core.BasisSet method, [1], [2]. Functional class in psi4.core, [1]. functional() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. functionals. functions_local_to_global() psi4.core.BlockOPoints method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:67688,Performance,optimiz,optimization,67688,", [2]. functionals. functions_local_to_global() psi4.core.BlockOPoints method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basis",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:67802,Performance,optimiz,optimization,67802,"[1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basisset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.D",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:67816,Performance,optimiz,optimization,67816,"[1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basisset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.D",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:80896,Performance,optimiz,optimization,80896,"[1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCFT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core, [1]. invert() psi4.core.Matrix method, [1], [2]. IO class in psi4.core, [1]. IOManager class in psi4.core, [1]. IP_POLES (OCC). IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). IrreducibleRepresentation class in psi4.core, [1]. irrep() psi4.core.CdSalc method, [1], [2]. irrep_index() psi4.core.CdSalc method, [1], [2]. irrep_labels() psi4.core.Molecule method, [1], [2]. is_c_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_c_lrc() psi4.core.SuperFunctional method, [1], [2]. is_c_scs_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_cartesian() psi4.core.GaussianShell method, [1], [2]. is_done() psi4.core.AOShellCombinationsIterator method, [1], [2]. is_gga() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. is_inverted() psi4.core.FittingMetric method, [1], [2]. is_libxc_func() psi4.core.SuperFunctional method, [1], [2]. is_lrc() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. is_meta() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. ps",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:83258,Performance,optimiz,optimize,83258,"ute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. IWLAndDPD psi4.core.IntegralTransform.OutputType attribute, [1]. IWLOnly psi4.core.IntegralTransform.OutputType attribute, [1]. J. J() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. kinetic() psi4.core.FISAPT method, [1], [2]. kinetic_grad() psi4.core.MintsHelper method, [1], [2]. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. Libint. Libxc. LibXCFunctional class in psi4.core, [1]. license. ",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:84440,Performance,load,load,84440,"e, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. Libint. Libxc. LibXCFunctional class in psi4.core, [1]. license. LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). LITERAL_CFOUR (GLOBALS). load() psi4.core.Matrix method, [1], [2]. load_mpqc() psi4.core.Matrix method, [1], [2]. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONVERGENCE (FISAPT). (SCF). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_DO_SINGLES (CCEOM). LOCAL_FILTER_SINGLES (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_GHOST (CCEOM). LOCAL_IBO_CONDITION (FISAPT). LOCAL_IBO_POWER (FISAPT). LOCAL_IBO_STARS (FISAPT). LOCAL_IBO_STARS_COMPLETENESS (FISAPT). LOCAL_IBO_USE_STARS (FISAPT). LOCAL_MAXITER (FISAPT). (SCF). LOCAL_METHOD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_PAIRDEF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_PRECONDITIONER (CCEOM). LOCAL_USE_GHOSTS (FISAPT). LOCAL_WEAKP (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). localize() psi4.core.BoysLocalizer method, [1]. psi4.core.FISAPT method, [1], [2]. psi4.core.Localizer method, [1], [2]. psi4.core.PMLocalizer method, [1]. Localizer class in psi4.core, [1]. LOCK_SING",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:102086,Performance,optimiz,optimize,102086,"psi4.core.LibXCFunctional method, [1]. OMEGA_ERF (MINTS). OMP2. ; setting keywords. theory. OMP2.5. ; setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3. ; setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:102269,Performance,optimiz,optimize,102269," theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:102301,Performance,optimiz,optimize,102301,"ALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:103897,Performance,optimiz,optimization,103897,"order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap() psi4.core.FISAPT method, [1], [2]. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method, [1], [2]. OverlapInt class in psi4.core, [1]. P. p psi4.core.AOShellCombinationsIterator attribute, [1], [2]. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. ParsingError. partial_cholesky_factorize() psi4.core.Matrix method, [1], [2]. partition() psi4.core.FISAPT method, [1], [2]. pasture_required_modules psi4.driver.PastureRequiredError attribute. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.CCWavefunc",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:104708,Performance,queue,queueing,104708,"ttribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap() psi4.core.FISAPT method, [1], [2]. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method, [1], [2]. OverlapInt class in psi4.core, [1]. P. p psi4.core.AOShellCombinationsIterator attribute, [1], [2]. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. ParsingError. partial_cholesky_factorize() psi4.core.Matrix method, [1], [2]. partition() psi4.core.FISAPT method, [1], [2]. pasture_required_modules psi4.driver.PastureRequiredError attribute. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. pcm_helper() in module psi4.driver. PCM_SCF_TYPE (PCM). PCMSolver. PCMSOLVER_PARSED_FNAME (PCM). PEP1. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_DIPOLE (SCF). perturb_grad() psi4.core.MintsHelper method, [1], [2]. PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). petite_list() psi4.core.MintsHelper method, [1], [2]. psi4.core.SOBasisSet method, [1], [2]. petite_list1() psi4.core.MintsHelper method, [1], [2]. PetiteList class in psi4.core, [1]. PHI_POINTS (SCF). physconst. physical constants. pi",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:136327,Performance,optimiz,optimize,136327,"method, [1], [2]. set_units() psi4.core.Molecule method, [1], [2]. set_variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.Molecule method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. set_vv10_b() psi4.core.SuperFunctional method, [1], [2]. set_vv10_c() psi4.core.SuperFunctional method, [1], [2]. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method, [1], [2]. set_x_alpha() psi4.core.SuperFunctional method, [1], [2]. set_x_beta() psi4.core.SuperFunctional method, [1], [2]. set_x_omega() psi4.core.SuperFunctional method, [1], [2]. setName() psi4.core.ExternalPotential method, [1], [2]. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. shape psi4.core.Matrix attribute, [1], [2]. psi4.core.Vector attribute, [1], [2]. shared_object() psi4.core.IO method, [1], [2]. psi4.core.IOManager method, [1], [2]. shell() psi4.core.BasisSet method, [1], [2]. shell_extents() psi4.core.BasisExtents method, [1], [2]. shell_to_ao_function() psi4.core.BasisSet method, [1], [2]. shell_to_basis_function() psi4.core.BasisSet method, [1], [2]. shell_to_center() psi4.core.BasisSet method, [1], [2]. ShellInfo class in psi4.core, [1]. shells_iterator() psi4.core.IntegralFactory method, [1], [2]. shells_local_to_global() psi4.core.BlockOPoints method, [1], [2]. sherrill_go",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:144597,Performance,optimiz,optimization,144597,"() psi4.core.IO method, [1], [2]. tocentry_exists() psi4.core.IO method, [1], [2]. tocprint() psi4.core.IO method, [1], [2]. tocscan() psi4.core.IO method, [1], [2]. tocwrite() psi4.core.IO method, [1], [2]. TPDM (DETCI). tpdm() psi4.core.CIWavefunction method, [1], [2]. TPDM_ABCD_TYPE (OCC). trace() psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. TracelessQuadrupoleInt class in psi4.core, [1]. transform() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transform_ci_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_mcscf_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_oei() psi4.core.IntegralTransform method, [1], [2]. transform_tei() psi4.core.IntegralTransform method, [1], [2]. transform_tei_first_half() psi4.core.IntegralTransform method, [1], [2]. transform_tei_second_half() psi4.core.IntegralTransform method, [1], [2]. transition state. ; geometry optimization. translate() psi4.core.Molecule method, [1], [2]. TRANSLATE_PSI4 (CFOUR). transpose() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transpose_this() psi4.core.Matrix method, [1], [2]. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_IABC_TYPE (DFOCC). TRIPLES_LOW_MEMORY (FNOCC). triplet() in module psi4.core, [1]. psi4.core.Matrix static method, [1], [2]. true_atomic_number() psi4.core.Molecule method, [1], [2]. tstart() in module psi4.core, [1]. tstop() in module psi4.core, [1]. TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. TwoBodyAOInt class in psi4.core, [1]. twoel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. TwoElectronInt class in psi4.core, [1]. U. U psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. UHF class in psi4.core,",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex-1.html:28864,Usability,clear,clear,28864,"EZZ. CIROOTnTOTALENERGY. CIS_AMPLITUDE_CUTOFF (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. citation() psi4.core.Dispersion method, [1], [2]. psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. CITOTALENERGY. CIVector class in psi4.core, [1]. CIWavefunction class in psi4.core, [1]. Ck() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. clean() in module psi4.core, [1]. clean_options() in module psi4.core, [1]. clean_variables() in module psi4.core, [1]. cleanup_ci() psi4.core.CIWavefunction method, [1], [2]. cleanup_dpd() psi4.core.CIWavefunction method, [1], [2]. clear() psi4.core.ExternalPotential method, [1], [2]. psi4.core.OEProp method, [1], [2]. clear_all() psi4.core.DFHelper method, [1], [2]. clear_collocation_cache() psi4.core.VBase method, [1], [2]. clear_external_potentials() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. clear_spaces() psi4.core.DFHelper method, [1], [2]. clone() psi4.core.Matrix method, [1], [2]. psi4.core.Molecule method, [1], [2]. close() psi4.core.IO method, [1], [2]. close_io_files() psi4.core.CIVector method, [1], [2]. close_outfile() in module psi4.core, [1]. coef psi4.core.SalcComponent attribute, [1], [2]. coef() psi4.core.GaussianShell method, [1], [2]. coldim() psi4.core.Matrix method, [1], [2]. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). collocation. collocation_size() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. cols() psi4.core.Matrix method, [1], [2]. com_fixed() psi4.core.Molecule ",MatchSource.WIKI,psi4manual/1.3.2/genindex-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html
https://psicode.org/psi4manual/1.3.2/genindex.html:10914,Availability,avail,available,10914,"ransform_density() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_restricted() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_unrestricted() psi4.core.IntegralTransform method, [1], [2]. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. Balk psi4.core.PsiReturnType attribute, [1], [2]. banner() in module psi4.driver. BASIC module, [1]. BASIS (DFMP2). (MINTS). basis psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. BASIS (SAPT). (SCF). basis set. ; adding new. auxiliary. available by element. available by family, [1]. default auxiliary. delta correction. extrapolation. multiple within molecule. basis() psi4.core.BasisExtents method, [1], [2]. psi4.core.VBase method, [1], [2]. basis1 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. basis2 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.Nab",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:10936,Availability,avail,available,10936,"core.IntegralTransform method, [1], [2]. backtransform_tpdm_restricted() psi4.core.IntegralTransform method, [1], [2]. backtransform_tpdm_unrestricted() psi4.core.IntegralTransform method, [1], [2]. BAKERJCC93 module, [1]. BAKERJCC96 module, [1]. Balk psi4.core.PsiReturnType attribute, [1], [2]. banner() in module psi4.driver. BASIC module, [1]. BASIS (DFMP2). (MINTS). basis psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. BASIS (SAPT). (SCF). basis set. ; adding new. auxiliary. available by element. available by family, [1]. default auxiliary. delta correction. extrapolation. multiple within molecule. basis() psi4.core.BasisExtents method, [1], [2]. psi4.core.VBase method, [1], [2]. basis1 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. basis2 psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. ps",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:39880,Availability,avail,available,39880,"HF method, [1]. psi4.core.Wavefunction method, [1], [2]. Da_subset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. damping. DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). damping_update() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Dao() psi4.core.VBase method, [1], [2]. dashcoeff_supplement psi4.driver.EmpiricalDispersion attribute. dashlevel psi4.driver.EmpiricalDispersion attribute. dashlevel_citation psi4.driver.EmpiricalDispersion attribute. dashparams psi4.driver.EmpiricalDispersion attribute. dashparams_citation psi4.driver.EmpiricalDispersion attribute. DASUM() in module psi4.core, [1]. database(). adding new. available. output. setting keywords. database() in module psi4.driver.wrapper_database. DAXPY() in module psi4.core, [1]. db(). . see database(). Db() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.SADGuess method, [1], [2]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. Db_subset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. dcalc() psi4.core.CIVector method, [1], [2]. DCFT. theory. dcft() in module psi4.core, [1]. DCF",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:44527,Availability,avail,available,44527,"method, [1], [2]. psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. detci() in module psi4.core, [1]. DETCI_FREEZE_CORE (DETCI). DF-CCSD(T). DF-MP2. theory. DF_BASIS_CC (FNOCC). (GLOBALS). DF_BASIS_DCFT (DCFT). DF_BASIS_ELST (SAPT). DF_BASIS_EP2 (DFEP2). DF_BASIS_GUESS (SCF). DF_BASIS_MCSCF (DETCI). DF_BASIS_MP2 (DFMP2). DF_BASIS_SAD (SCF). DF_BASIS_SAPT (SAPT). DF_BASIS_SCF (CPHF). (SCF). DF_BUMP_R0 (SCF). DF_BUMP_R1 (SCF). DF_DOMAINS (SCF). DF_FITTING_CONDITION (SCF). DF_INTS_IO (DFMP2). (SCF). DF_INTS_NUM_THREADS (DFMP2). (SCF). DF_METRIC (SCF). DF_SCF_GUESS (SCF). DF_THETA (SCF). DFCC (FNOCC). DFEP2Wavefunction class in psi4.core, [1]. dfh() psi4.core.MemDFJK method, [1], [2]. DFHelper class in psi4.core, [1]. dfmp2() in module psi4.core, [1]. DFMP2_MEM_FACTOR (DFMP2). DFMP2_P2_TOLERANCE (DFMP2). DFMP2_P_TOLERANCE (DFMP2). dfocc() in module psi4.core, [1]. DFSOMCSCF class in psi4.core, [1]. DFT, [1]. available functionals. theory. DFT_ALPHA (SCF). DFT_ALPHA_C (SCF). DFT_BASIS_TOLERANCE (SCF). DFT_BLOCK_MAX_POINTS (SCF). DFT_BLOCK_MAX_RADIUS (SCF). DFT_BLOCK_MIN_POINTS (SCF). DFT_BLOCK_SCHEME (SCF). DFT_BS_RADIUS_ALPHA (SCF). DFT_DISPERSION_PARAMETERS (SCF). DFT_GRAC_ALPHA (SCF). DFT_GRAC_BETA (SCF). DFT_GRAC_C_FUNC (SCF). DFT_GRAC_SHIFT (SCF). DFT_GRAC_X_FUNC (SCF). DFT_GRID_NAME (SCF). DFT_NUCLEAR_SCHEME (SCF). DFT_OMEGA (SCF). DFT_OMEGA_C (SCF). DFT_PRUNING_ALPHA (SCF). DFT_PRUNING_SCHEME (SCF). DFT_RADIAL_POINTS (SCF). DFT_RADIAL_SCHEME (SCF). DFT_SPHERICAL_POINTS (SCF). DFT_SPHERICAL_SCHEME (SCF). DFT_V2_RHO_CUTOFF (SCF). DFT_VV10_B (SCF). DFT_VV10_C (SCF). DFT_VV10_POSTSCF (SCF). DFT_VV10_RADIAL_POINTS (SCF). DFT_VV10_RHO_CUTOFF (SCF). DFT_VV10_SPHERICAL_POINTS (SCF). DFTD3. Dftd3Error. DFTensor class in psi4.core, [1]. DFTFUNCTIONALTOTALENERGY. DFTGrid class in psi4.core, [1]. DFTNL. DFTTOTALENERGY. DFTXCENERGY. DGBMV() in module psi4.core, [1]. DGEEV() in module psi4.core, [1]. DGEMM()",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:79552,Deployability,install,installing,79552,"ore.DFHelper method, [1], [2]. psi4.core.HF method, [1], [2]. psi4.core.IntegralTransform method, [1], [2]. psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. initialize_gtfock_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialize_jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. initialized_diis_manager_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. input_units_to_au() psi4.core.Molecule method, [1], [2]. insert() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. install_instructions psi4.driver.PastureRequiredError attribute. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method, [1], [2]. psi4.core.OrbitalSpace method, [1], [2]. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core, [1]. integrals, [1]. integrals() psi4.core.MintsHelper method, [1], [2]. integrals_erf() psi4.core.MintsHelper method, [1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LI",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:146008,Deployability,update,update,146008,".core.Matrix static method, [1], [2]. true_atomic_number() psi4.core.Molecule method, [1], [2]. tstart() in module psi4.core, [1]. tstop() in module psi4.core, [1]. TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. TwoBodyAOInt class in psi4.core, [1]. twoel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. TwoElectronInt class in psi4.core, [1]. U. U psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. UHF class in psi4.core, [1]. UHF_NOONS (SCF). UKSFunctions class in psi4.core, [1]. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unify() psi4.core.FISAPT method, [1], [2]. unit() psi4.core.SymmetryOperation method, [1], [2]. units. ; molecule. units() psi4.core.Molecule method, [1], [2]. Unnormalized psi4.core.PrimitiveType attribute, [1], [2]. Unrestricted psi4.core.IntegralTransform.TransformationType attribute, [1]. UPDATE (DETCI). update() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. update_geometry() psi4.core.Molecule method, [1], [2]. update_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction met",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:151489,Deployability,update,updated,151489,", [1], [2]. WRITER_FILE_LABEL (GLOBALS). X. x() psi4.core.BlockOPoints method, [1], [2]. X() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. x() psi4.core.Molecule method, [1], [2]. X() psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. x_alpha() psi4.core.SuperFunctional method, [1], [2]. x_beta() psi4.core.SuperFunctional method, [1], [2]. x_functional() psi4.core.SuperFunctional method, [1], [2]. x_functionals() psi4.core.SuperFunctional method, [1], [2]. x_omega() psi4.core.SuperFunctional method, [1], [2]. XC_build() psi4.core.SuperFunctional method, [1], [2]. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xml2dict() in module psi4.driver. xtpl_highest_1() in module psi4.driver.driver_cbs. xyz psi4.core.SalcComponent attribute, [1], [2]. xyz() psi4.core.Molecule method, [1], [2]. Y. y() psi4.core.BlockOPoints method, [1], [2]. psi4.core.Molecule method, [1], [2]. Z. z() psi4.core.BlockOPoints method, [1], [2]. Z() psi4.core.Molecule method, [1], [2]. z() psi4.core.Molecule method, [1], [2]. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() psi4.core.CIVector method, [1], [2]. psi4.core.Dimension method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. zero_ao_basis_set() psi4.core.BasisSet method, [1], [2]. zero_diagonal() psi4.core.Matrix method, [1], [2]. ZERO_INTERNAL_AMPS (PSIMRCC). zero_lower() psi4.core.Matrix method, [1], [2]. zero_redundant() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. zero_upper() psi4.core.Matrix method, [1], [2]. ZETA (CCDENSITY). (CCLAMBDA). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:3205,Energy Efficiency,allocate,allocate,3205,"ule method, [1], [2]. ADD_AUXILIARY_BONDS (OPTKING). add_bool() psi4.core.Options method, [1], [2]. add_c_functional() psi4.core.SuperFunctional method, [1], [2]. add_int() psi4.core.Options method, [1], [2]. add_space() psi4.core.DFHelper method, [1], [2]. add_str() psi4.core.Options method, [1], [2]. add_str_i() psi4.core.Options method, [1], [2]. add_transformation() psi4.core.DFHelper method, [1], [2]. add_x_functional() psi4.core.SuperFunctional method, [1], [2]. addBasis() psi4.core.ExternalPotential method, [1], [2]. addCharge() psi4.core.ExternalPotential method, [1], [2]. addChargeAngstrom() psi4.driver.QMMM method, [1]. addChargeBohr() psi4.driver.QMMM method, [1]. addDiffuse() psi4.driver.QMMM method, [1]. adding new. ; EFP. basis set. database(). method alias. AEL (CCDENSITY). aIndex() psi4.core.MOSpace method, [1], [2]. AIO_CPHF (SAPT). AIO_DF_INTS (SAPT). ALGORITHM (DCFT). all() psi4.core.MOSpace method, [1], [2]. allen_focal_point() in module psi4.driver.aliases. allocate() psi4.core.SuperFunctional method, [1], [2]. Alpha psi4.core.IntegralTransform.SpinType attribute, [1]. alpha() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. alpha_corr_to_pitzer() psi4.core.IntegralTransform method, [1], [2]. alpha_orbital_space() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. am psi4.core.GaussianShell attribute, [1], [2]. AMCHAR psi4.core.GaussianShell attribute, [1], [2]. amchar psi4.core.GaussianShell attribute, [1], [2]. ANALYZE (CCENERGY). (CCRESPONSE). ancestor() in module psi4.driver. Angstrom psi4.core.GeometryUnits attribute, [1], [2]. AngularMomentumInt class in psi4.core, [1]. anharmonicity(). ; setting keywords. anharmonicity() in module psi4.driver.diatomic. ansatz() psi4.core.P",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:26560,Energy Efficiency,charge,charge,26560,"). CFOUR_SCF_DAMPING (CFOUR). CFOUR_SCF_EXPORDER (CFOUR). CFOUR_SCF_EXPSTART (CFOUR). CFOUR_SCF_EXTRAPOLATION (CFOUR). CFOUR_SCF_MAXCYC (CFOUR). CFOUR_SD_FIELD (CFOUR). CFOUR_SPHERICAL (CFOUR). CFOUR_SPIN_FLIP (CFOUR). CFOUR_SPIN_ORBIT (CFOUR). CFOUR_SPIN_SCAL (CFOUR). CFOUR_SPINROTATION (CFOUR). CFOUR_SUBGROUP (CFOUR). CFOUR_SYM_CHECK (CFOUR). CFOUR_SYMMETRY (CFOUR). CFOUR_T3_EXTRAPOL (CFOUR). CFOUR_TAMP_SUM (CFOUR). CFOUR_THERMOCHEMISTRY (CFOUR). CFOUR_TRANS_INV (CFOUR). CFOUR_TREAT_PERT (CFOUR). CFOUR_UIJ_THRESHOLD (CFOUR). CFOUR_UNITS (CFOUR). CFOUR_UPDATE_HESSIAN (CFOUR). CFOUR_VIBRATION (CFOUR). CFOUR_VTRAN (CFOUR). CFOUR_XFIELD (CFOUR). CFOUR_XFORM_TOL (CFOUR). CFOUR_YFIELD (CFOUR). CFOUR_ZFIELD (CFOUR). CFOURERRORCODE. chain_dot() psi4.core.Matrix method, [1], [2]. change_file_namespace() psi4.core.IO method, [1], [2]. char_table() psi4.core.PointGroup method, [1], [2]. character() psi4.core.IrreducibleRepresentation method, [1], [2]. CharacterTable class in psi4.core, [1]. charge. ; molecule. charge() psi4.core.Molecule method, [1], [2]. check_iwl_file_from_scf_type() in module psi4.driver. check_phases() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. CheMPS2. CHOLESKY (DFOCC). cholesky_factorize() psi4.core.Matrix method, [1], [2]. CHOLESKY_TOLERANCE (DFOCC). (FNOCC). (SCF). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_FILE_START (DETCI). CI_MAXITER (DETCI). ci_nat_orbs() psi4.core.CIWavefunction method, [1], [2]. CI_NUM_THREADS (DETCI). CI_TYPE (GLOBALS). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. ",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:26580,Energy Efficiency,charge,charge,26580,"FOUR). CFOUR_SCF_EXPORDER (CFOUR). CFOUR_SCF_EXPSTART (CFOUR). CFOUR_SCF_EXTRAPOLATION (CFOUR). CFOUR_SCF_MAXCYC (CFOUR). CFOUR_SD_FIELD (CFOUR). CFOUR_SPHERICAL (CFOUR). CFOUR_SPIN_FLIP (CFOUR). CFOUR_SPIN_ORBIT (CFOUR). CFOUR_SPIN_SCAL (CFOUR). CFOUR_SPINROTATION (CFOUR). CFOUR_SUBGROUP (CFOUR). CFOUR_SYM_CHECK (CFOUR). CFOUR_SYMMETRY (CFOUR). CFOUR_T3_EXTRAPOL (CFOUR). CFOUR_TAMP_SUM (CFOUR). CFOUR_THERMOCHEMISTRY (CFOUR). CFOUR_TRANS_INV (CFOUR). CFOUR_TREAT_PERT (CFOUR). CFOUR_UIJ_THRESHOLD (CFOUR). CFOUR_UNITS (CFOUR). CFOUR_UPDATE_HESSIAN (CFOUR). CFOUR_VIBRATION (CFOUR). CFOUR_VTRAN (CFOUR). CFOUR_XFIELD (CFOUR). CFOUR_XFORM_TOL (CFOUR). CFOUR_YFIELD (CFOUR). CFOUR_ZFIELD (CFOUR). CFOURERRORCODE. chain_dot() psi4.core.Matrix method, [1], [2]. change_file_namespace() psi4.core.IO method, [1], [2]. char_table() psi4.core.PointGroup method, [1], [2]. character() psi4.core.IrreducibleRepresentation method, [1], [2]. CharacterTable class in psi4.core, [1]. charge. ; molecule. charge() psi4.core.Molecule method, [1], [2]. check_iwl_file_from_scf_type() in module psi4.driver. check_phases() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. CheMPS2. CHOLESKY (DFOCC). cholesky_factorize() psi4.core.Matrix method, [1], [2]. CHOLESKY_TOLERANCE (DFOCC). (FNOCC). (SCF). CI. arbitrary-order coupled-cluster theory. arbitrary-order perturbation theory. basic-keywords. theory. CI_DIIS (MCSCF). CI_FILE_START (DETCI). CI_MAXITER (DETCI). ci_nat_orbs() psi4.core.CIWavefunction method, [1], [2]. CI_NUM_THREADS (DETCI). CI_TYPE (GLOBALS). CIBLKS_PRINT (DETCI). CICORRELATIONENERGY. CIDIPOLEX. CIDIPOLEY. CIDIPOLEZ. CInCORRELATIONENERGY. CInTOTALENERGY. CIQUADRUPOLEXX. CIQUADRUPOLEXY. CIQUADRUPOLEXZ. CIQUADRUPOLEYY. CIQUADRUPOLEYZ. CIQUADRUPOLEZZ. CIROOTn->ROOTmDIPOLEX. CIROOTn->ROOTmDIPOLEY. CIROOTn->ROOTmDIPOLEZ. CIROOTn->ROOTmQUADRUPOLEXX. CIROOTn->ROOTmQUADRUPOLEXY. CIROOTn->ROOTmQUADRUPOLE",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:51396,Energy Efficiency,energy,energy,51396,"le specification. EFP_DISP (EFP). EFP_DISP_DAMPING (EFP). EFP_ELST (EFP). EFP_ELST_DAMPING (EFP). EFP_EXCH (EFP). EFP_IND (EFP). EFP_IND_DAMPING (EFP). EFP_QM_ELST (EFP). EFP_QM_IND (EFP). efzc() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [1",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:51424,Energy Efficiency,energy,energy,51424,"FP_DISP_DAMPING (EFP). EFP_ELST (EFP). EFP_ELST_DAMPING (EFP). EFP_EXCH (EFP). EFP_IND (EFP). EFP_IND_DAMPING (EFP). EFP_QM_ELST (EFP). EFP_QM_IND (EFP). efzc() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [1",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:83180,Energy Efficiency,energy,energy,83180,"nal method, [1], [2]. Isotopes. ISTOP (DETCI). iteration_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. IWLAndDPD psi4.core.IntegralTransform.OutputType attribute, [1]. IWLOnly psi4.core.IntegralTransform.OutputType attribute, [1]. J. J() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. kinetic() psi4.core.FISAPT method, [1], [2]. kinetic_grad() psi4.core.MintsHelper method, [1], [2]. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.dr",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:90061,Energy Efficiency,charge,charge,90061," mo_f12_squared() psi4.core.MintsHelper method, [1], [2]. mo_f12g12() psi4.core.MintsHelper method, [1], [2]. MO_MAXITER (DFOCC). (OCC). mo_oei_deriv1() psi4.core.MintsHelper method, [1], [2]. mo_oei_deriv2() psi4.core.MintsHelper method, [1], [2]. MO_READ (MCSCF). (OCC). MO_RELAX (DCFT). mo_spin_eri() psi4.core.MintsHelper method, [1], [2]. MO_STEP_MAX (DFOCC). (OCC). mo_tei_deriv1() psi4.core.MintsHelper method, [1], [2]. mo_tei_deriv2() psi4.core.MintsHelper method, [1], [2]. mo_transform() psi4.core.MintsHelper method, [1], [2]. MO_WRITE (OCC). MODULE (CPHF). moFa() psi4.core.ROHF method, [1], [2]. moFb() psi4.core.ROHF method, [1], [2]. moFeff() psi4.core.ROHF method, [1], [2]. MOGRAD_DAMPING (OCC). Molden. molden() in module psi4. in module psi4.driver. MOLDEN_WITH_VIRTUAL (GLOBALS). MOLDEN_WRITE (DCFT). (DFOCC). (SCF). MoldenWriter class in psi4.core, [1]. molecular_charge() psi4.core.Molecule method, [1], [2]. MolecularGrid class in psi4.core, [1]. molecule. ; EFP. PubChem. charge. ghost. isotope. multiple fragments. multiple in input file. multiplicity. no_reorient. setting keywords. specification. symmetry. units. Molecule class in psi4.core, [1]. molecule() psi4.core.BasisSet method, [1], [2]. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.FISAPT method, [1], [2]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. molecule_from_arrays in module psi4.driver. molecule_from_schema in module psi4.driver. molecule_from_string in module psi4.driver. molecule_get_attr() in module psi4.driver. molecule_set_attr() in module psi4.driver. MOM. MOM_excited_ psi4.core.CUHF attribute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. MOM_OCC (SCF). MOM_performed_ psi4.core.CUHF attribute,",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:106758,Energy Efficiency,power,power,106758,"ethod, [1], [2]. pitzer_to_ci_order_twoel() psi4.core.CIWavefunction method, [1], [2]. PitzerOrder psi4.core.IntegralTransform.MOOrdering attribute, [1]. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). play() psi4.core.MintsHelper method, [1], [2]. plugin() in module psi4.core, [1]. plugin_close() in module psi4.core, [1]. plugin_close_all() in module psi4.core, [1]. plugin_load() in module psi4.core, [1]. PMLocalizer class in psi4.core, [1]. point_group() psi4.core.Molecule method, [1], [2]. point_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. PointFunctions class in psi4.core, [1]. PointGroup class in psi4.core, [1]. POINTS (FINDIF). POLE_MAXITER (ADC). pop() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. populateExtern() psi4.driver.QMMM method, [1]. potential_grad() psi4.core.MintsHelper method, [1], [2]. PotentialInt class in psi4.core, [1]. power() psi4.core.Matrix method, [1], [2]. PPL_TYPE (DFOCC). PR (ADC). PRECONDITIONER (DETCI). prepare_options_for_module() in module psi4.core, [1]. prerequisites. presort_so_tei() psi4.core.IntegralTransform method, [1], [2]. PrimitiveType class in psi4.core, [1]. PRINT (CPHF). (EFP). (GLOBALS). (SAPT). print() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. psi4.core.PetiteList method, [1], [2]. print_atom_vector() psi4.core.Matrix method, [1], [2]. PRINT_BASIS (SCF). print_bond_angles() psi4.core.Molecule method, [1], [2]. print_cluster() psi4.core.Molecule method, [1], [2]. print_detail() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. print_detail_out() psi4.core.BasisSet method, [1], [2]. print_distances() psi4.core.Molecule method, [1], [2]. print_dpd_lookup() psi4.core.IntegralTransform method, [1], [2]. print_energies() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.c",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:118749,Energy Efficiency,charge,charge-transfer,118749,".UHF attribute, [1]. SAD_CHOL_TOLERANCE (SCF). SAD_D_CONVERGENCE (SCF). SAD_E_CONVERGENCE (SCF). SAD_FRAC_OCC (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). SAD_SCF_TYPE (SCF). SAD_SPIN_AVERAGE (SCF). SADGuess class in psi4.core, [1]. salc_name() psi4.core.CdSalcList method, [1], [2]. SalcComponent class in psi4.core, [1]. same_a_b_dens() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. same_a_b_orbs() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. sanitize_name() in module psi4.driver. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). sapt() in module psi4.core, [1]. SAPT0_E10 (SAPT). SAPT0_E20DISP (SAPT). SAPT0_E20IND (SAPT). SAPT0TOTALENERGY. SAPT2+(3)(CCD)DMP2TOTALENERGY. SAPT2+(3)(CCD)TOTALENERGY. SAPT2+(3)DMP2TOTALENERGY. SAPT2+(3)TOTALENERGY. SAPT2+(CCD)DMP2TOTALENERGY. SAPT2+(CCD)TOTALENERGY. SAPT2+3(CCD)DMP2TOTALENERGY. SAPT2+3(CCD)TOTALENERGY. SAPT2+3DMP2TOTALENERGY. SAPT2+3TOTALENERGY. SAPT2+DMP2TOTALENERGY. SAPT2+TOTALENERGY. SAPT2TOTALENERGY. SAPT_DFT_DO_DHF (SAPT). SAPT_DFT_FUNCTIONAL (SAPT). SAPT_DFT_GRAC_DETERMINATION (SAPT). SAPT_DFT_GRAC_SHIFT_A (SAPT). SAPT_DFT_GRAC_SHIFT_B (SAPT). SAPT_DFT_MP2_DISP_ALG (SAPT). SAPT_FDDS_DISP_LEG_LAMBDA (SAPT). SAPT_FDDS_DISP_NUM_POINTS (SAPT). SAPT_FDDS_V2_RHO_CUTOFF (SAPT). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_FACTOR (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_QUIET (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTTOTALENERGY. save() psi4.core.Matrix method, [1], [2]. psi4.driver.",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:136249,Energy Efficiency,energy,energy,136249,"rted() psi4.core.Deriv method, [1], [2]. set_tweak() psi4.core.LibXCFunctional method, [1], [2]. set_units() psi4.core.Molecule method, [1], [2]. set_variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.Molecule method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. set_vv10_b() psi4.core.SuperFunctional method, [1], [2]. set_vv10_c() psi4.core.SuperFunctional method, [1], [2]. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method, [1], [2]. set_x_alpha() psi4.core.SuperFunctional method, [1], [2]. set_x_beta() psi4.core.SuperFunctional method, [1], [2]. set_x_omega() psi4.core.SuperFunctional method, [1], [2]. setName() psi4.core.ExternalPotential method, [1], [2]. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. shape psi4.core.Matrix attribute, [1], [2]. psi4.core.Vector attribute, [1], [2]. shared_object() psi4.core.IO method, [1], [2]. psi4.core.IOManager method, [1], [2]. shell() psi4.core.BasisSet method, [1], [2]. shell_extents() psi4.core.BasisExtents method, [1], [2]. shell_to_ao_function() psi4.core.BasisSet method, [1], [2]. shell_to_basis_function() psi4.core.BasisSet method, [1], [2]. shell_to_center() psi4.core.BasisSet method, [1], [2]. ShellInfo class in psi4.core, [1]. shells_iterator() psi4.core.IntegralFactory method, [1], [2]",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:887,Modifiability,plugin,plugin,887,"﻿. Index. Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Index. Symbols; | _; | A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W; | X; | Y; | Z. Symbols. (T)CORRECTIONENERGY. -a, --append. ; psi4 command line option. -h, --help. ; psi4 command line option. -i <filename>, --input <filename>. ; psi4 command line option. -k, --skip-preprocessor. ; psi4 command line option. -l <name>, --psidatadir <name>. ; psi4 command line option. -m, --messy. ; psi4 command line option. -n <threads>, --nthread <threads>. ; psi4 command line option. -o <filename>, --output <filename>. ; psi4 command line option. -p <prefix>, --prefix <prefix>. ; psi4 command line option. -s <name>, --scratch <name>. ; psi4 command line option. -v, --verbose. ; psi4 command line option. -V, --version. ; psi4 command line option. :pair: plugin. ; v2rdm_casscf. _. _get_default_xtpl() in module psi4.driver.driver_cbs. _to_array() in module psi4.driver.p4util.numpy_helper. A. A-(T)CORRECTIONENERGY. A-CCSD(T)CORRELATIONENERGY. A-CCSD(T)TOTALENERGY. a1() psi4.core.Dispersion method, [1], [2]. a2() psi4.core.Dispersion method, [1], [2]. A24 module, [1]. A24alt module, [1]. A_RAS3_MAX (DETCI). AAA(T)CORRECTIONENERGY. AAB(T)CORRECTIONENERGY. Ab initio Polarization Propagator. ABB(T)CORRECTIONENERGY. ABCD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). Absent psi4.core.FragmentType attribute, [1], [2]. absmax() psi4.core.Matrix method, [1], [2]. absolute_to_relative() psi4.driver.Table method, [1]. accumulate_product() psi4.core.Matrix method, [1], [2]. ACENES module, [1]. ACPFCORRELATIONENERGY. ACPFDIPOLEX. ACPFDIPOLEY. ACPFDIPOLEZ. ACPFQUADRUPOLEXX. ACPFQUADRUPOLEXY. ACPFQUADRUPOLEXZ. ACPFQUADRUPOLEYY. ACPFQUADRUPOLEYZ. ACPFQUADRUPOLEZZ. ACPFTOTALENERGY. activate() in module psi4.driver. activate_all_fragments() psi4.core.Molecule method, [1], [2]. ACTIVE (GLOBALS). ACTIVE_NAT_ORBS (FNOCC). ADC. theory. adc() in module psi4.core, [1]. ad",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:51888,Modifiability,variab,variable,51888,"2]. EKT_EA (OCC). EKT_IP (DFOCC). (OCC). electric_field() psi4.core.IntegralFactory method, [1], [2]. psi4.core.MintsHelper method, [1], [2]. ElectricFieldInt class in psi4.core, [1]. electrostatic() psi4.core.IntegralFactory method, [1], [2]. ElectrostaticInt class in psi4.core, [1]. elst() psi4.core.FISAPT method, [1], [2]. EmpiricalDispersion class in psi4.driver. end() psi4.core.Slice method, [1], [2]. EndLoop psi4.core.PsiReturnType attribute, [1], [2]. energies_from_fcidump() in module psi4.driver. energy(). setting keywords. energy() in module psi4. in module psi4.driver. psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ENERGY_LEVEL_SHIFT (DCFT). engine psi4.driver.EmpiricalDispersion attribute. ENSURE_BT_CONVERGENCE (OPTKING). environment variable. ; CONDA_PREFIX, [1]. CRAYPE_LINK_TYPE. CRAY_ADD_RPATH. HOST, [1]. MATH_ROOT. MKL_NUM_THREADS, [1]. MKL_ROOT. MONTAGE. OMP_NESTED, [1], [2]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8], [9]. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34]. PSIDATADIR, [1], [2], [3], [4], [5]. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]. PYTHONPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]. VMDPATH. EOM_GUESS (CCEOM). EOM_REFERENCE (CCEOM). (CCHBAR). EP2_CONVERGENCE (DFEP2). EP2_MAXITER (DFEP2). EP2_NUM_EA (DFEP2). EP2_NUM_IP (DFEP2). EP2_ORBITALS (DFEP2). EP_EA_POLES (OCC). EP_IP_POLES (OCC). EP_MAXITER (OCC). epsilon_a() psi4.core.CCWavefunction method, [1]. psi4.core.CIWa",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:55101,Modifiability,extend,extend,55101," [1], [2]. erf_complement_eri() psi4.core.IntegralFactory method, [1], [2]. erf_eri() psi4.core.IntegralFactory method, [1], [2]. ErfComplementERI class in psi4.core, [1]. ErfERI class in psi4.core, [1]. ERI class in psi4.core, [1]. eri() psi4.core.IntegralFactory method, [1], [2]. esp_at_nuclei() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. ESPPropCalc class in psi4.core, [1]. evals() psi4.core.OrbitalSpace method, [1], [2]. EX_ALLOW (DETCI). EX_LEVEL (DETCI). exch() psi4.core.FISAPT method, [1], [2]. EXCH_SCALE_ALPHA (SAPT). EXCITATION_RANGE (CCEOM). exists() psi4.core.IO method, [1], [2]. exp() psi4.core.GaussianShell method, [1], [2]. EXPLICIT_HAMILTONIAN (CPHF). exponent() psi4.core.FittedSlaterCorrelationFactor method, [1], [2]. extend() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. EXTERN (SCF). EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS). ExternalPotential class in psi4.core, [1]. extract_subsets() psi4.core.Molecule method, [1], [2]. extrapolation schemes. Exvals() psi4.core.OEProp method, [1], [2]. Eyvals() psi4.core.OEProp method, [1], [2]. Ezvals() psi4.core.OEProp method, [1], [2]. F. F12 class in psi4.core, [1]. f12() psi4.core.IntegralFactory method, [1], [2]. f12_double_commutator() psi4.core.IntegralFactory method, [1], [2]. f12_squared() psi4.core.IntegralFactory method, [1], [2]. F12DoubleCommutator class in psi4.core, [1]. F12G12 class in psi4.core, [1]. f12g12() psi4.core.IntegralFactory method, [1], [2]. F12Squared class in psi4.core, [1]. Fa() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UH",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:106043,Modifiability,plugin,plugin,106043,".core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. pcm_helper() in module psi4.driver. PCM_SCF_TYPE (PCM). PCMSolver. PCMSOLVER_PARSED_FNAME (PCM). PEP1. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_DIPOLE (SCF). perturb_grad() psi4.core.MintsHelper method, [1], [2]. PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). petite_list() psi4.core.MintsHelper method, [1], [2]. psi4.core.SOBasisSet method, [1], [2]. petite_list1() psi4.core.MintsHelper method, [1], [2]. PetiteList class in psi4.core, [1]. PHI_POINTS (SCF). physconst. physical constants. pitzer_to_ci_order_onel() psi4.core.CIWavefunction method, [1], [2]. pitzer_to_ci_order_twoel() psi4.core.CIWavefunction method, [1], [2]. PitzerOrder psi4.core.IntegralTransform.MOOrdering attribute, [1]. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). play() psi4.core.MintsHelper method, [1], [2]. plugin() in module psi4.core, [1]. plugin_close() in module psi4.core, [1]. plugin_close_all() in module psi4.core, [1]. plugin_load() in module psi4.core, [1]. PMLocalizer class in psi4.core, [1]. point_group() psi4.core.Molecule method, [1], [2]. point_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. PointFunctions class in psi4.core, [1]. PointGroup class in psi4.core, [1]. POINTS (FINDIF). POLE_MAXITER (ADC). pop() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. populateExtern() psi4.driver.QMMM method, [1]. potential_grad() psi4.core.MintsHelper method, [1], [2]. PotentialInt class in psi4.core, [1]. power() psi4.core.Matrix method, [1], [2]. PPL_TYPE (DFOCC). PR (ADC). PRECONDITIONER (DETCI). prepare_options_for_module() in module psi4.core, [1]. prerequisites. presort_so_tei() psi4.core.IntegralTransform method, [1], [2]. PrimitiveType class in psi4.core, [1]. PRINT (CPHF). (EFP). (GLOBALS)",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:146869,Modifiability,variab,variable,146869,"core.PrimitiveType attribute, [1], [2]. Unrestricted psi4.core.IntegralTransform.TransformationType attribute, [1]. UPDATE (DETCI). update() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. update_geometry() psi4.core.Molecule method, [1], [2]. update_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. variables() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Vb() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VBase class in psi4.core, [1]. vdot() psi4.core.CIVector method, [1], [2]. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). Vector class in psi4.core, [1]. Vector3 class in psi4.core, [1]. vector_dot() psi4.core.Matrix method, [1], [2]. vector_multiply() psi4",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:147174,Modifiability,variab,variables,147174,"_orbitals() psi4.core.IntegralTransform method, [1], [2]. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). V. V_potential() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. Va() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VAL_EX_LEVEL (DETCI). valid_methods psi4.core.OEProp attribute, [1], [2]. validate_options() psi4.core.Options method, [1], [2]. ValidationError. value() psi4.core.SuperFunctional method, [1], [2]. values() psi4.core.SuperFunctional method, [1], [2]. variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. variables() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Vb() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. VBase class in psi4.core, [1]. vdot() psi4.core.CIVector method, [1], [2]. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). Vector class in psi4.core, [1]. Vector3 class in psi4.core, [1]. vector_dot() psi4.core.Matrix method, [1], [2]. vector_multiply() psi4.core.CIVector method, [1], [2]. VectorMatrix class in psi4.core, [1]. vectors() psi4.core.FISAPT method, [1], [2]. version() in module psi4.core, [1]. vibanal_wfn() in module psi4.driver. vibrational analysis. ; function call. output. vir() psi4.core.MOSpace method, [1], [2]. VirOnly psi4.core.IntegralT",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:35246,Performance,optimiz,optimization,35246,"ralInt method, [1]. psi4.core.QuadrupoleInt method, [1]. psi4.core.ThreeCenterOverlapInt method, [1], [2]. psi4.core.TracelessQuadrupoleInt method, [1]. psi4.core.TwoBodyAOInt method, [1], [2]. psi4.core.TwoElectronInt method, [1], [2]. compute_spin_contamination() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. compute_state_transfer() psi4.core.CIWavefunction method, [1], [2]. COMPUTE_TRIPLES (FNOCC). compute_V() psi4.core.VBase method, [1], [2]. compute_Vx() psi4.core.VBase method, [1], [2]. computePotentialMatrix() psi4.core.ExternalPotential method, [1], [2]. CONDA_PREFIX, [1]. connectivity() psi4.core.Molecule method, [1], [2]. CONSECUTIVE_BACKSTEPS (OPTKING). construct_from_pydict() psi4.core.BasisSet method, [1], [2]. contact. converged psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. convergence criteria. ; geometry optimization. ConvergenceError. copy() psi4.core.CIVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.driver.Table method, [1]. copy_file_from_scratch() in module psi4.driver. copy_file_to_scratch() in module psi4.driver. copy_lower_to_upper() psi4.core.Matrix method, [1], [2]. copy_upper_to_lower() psi4.core.Matrix method, [1], [2]. CORE module, [1]. core_hamiltonian_grad() psi4.core.MintsHelper method, [1], [2]. corl_xtpl_helgaker_2() in module psi4.driver.driver_cbs. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). CorrelationFactor class in psi4.core, [1]. CorrelationTable class in psi4.core, [1]. Cotton-ordering. coulomb() psi4.core.FISAPT method, [1], [2]. count() psi4.core.BSVec method, [1], [2]. psi4.core.VectorMatrix method, [1], [2]. counterpoise correction. COUPLED_INDUCTION (SAPT). COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp. ; setting keywords. CP-CORRECTED2-BODYINTE",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:66242,Performance,optimiz,optimization,66242,"_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). FROZEN_UOCC (GLOBALS). frzcpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. frzvpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. fsymbol() psi4.core.Molecule method, [1], [2]. ftrue_atomic_number() psi4.core.Molecule method, [1], [2]. Full psi4.core.SaveType attribute, [1], [2]. full_geometry() psi4.core.Molecule method, [1], [2]. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() psi4.core.Molecule method, [1], [2]. function call. ; geometry optimization. gradient. hessian. vibrational analysis. function_index psi4.core.GaussianShell attribute, [1], [2]. function_to_center() psi4.core.BasisSet method, [1], [2]. function_to_shell() psi4.core.BasisSet method, [1], [2]. Functional class in psi4.core, [1]. functional() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. functionals. functions_local_to_global() psi4.core.BlockOPoints method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:67688,Performance,optimiz,optimization,67688,", [2]. functionals. functions_local_to_global() psi4.core.BlockOPoints method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basis",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:67802,Performance,optimiz,optimization,67802,"[1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basisset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.D",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:67816,Performance,optimiz,optimization,67816,"[1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basisset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.D",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:80896,Performance,optimiz,optimization,80896,"[1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCFT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core, [1]. invert() psi4.core.Matrix method, [1], [2]. IO class in psi4.core, [1]. IOManager class in psi4.core, [1]. IP_POLES (OCC). IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). IrreducibleRepresentation class in psi4.core, [1]. irrep() psi4.core.CdSalc method, [1], [2]. irrep_index() psi4.core.CdSalc method, [1], [2]. irrep_labels() psi4.core.Molecule method, [1], [2]. is_c_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_c_lrc() psi4.core.SuperFunctional method, [1], [2]. is_c_scs_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_cartesian() psi4.core.GaussianShell method, [1], [2]. is_done() psi4.core.AOShellCombinationsIterator method, [1], [2]. is_gga() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. is_inverted() psi4.core.FittingMetric method, [1], [2]. is_libxc_func() psi4.core.SuperFunctional method, [1], [2]. is_lrc() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. is_meta() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. ps",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:83258,Performance,optimiz,optimize,83258,"ute, [1]. psi4.core.HF attribute, [1], [2]. psi4.core.RHF attribute, [1]. psi4.core.ROHF attribute, [1]. psi4.core.UHF attribute, [1]. iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. IWLAndDPD psi4.core.IntegralTransform.OutputType attribute, [1]. IWLOnly psi4.core.IntegralTransform.OutputType attribute, [1]. J. J() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. kinetic() psi4.core.FISAPT method, [1], [2]. kinetic_grad() psi4.core.MintsHelper method, [1], [2]. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. Libint. Libxc. LibXCFunctional class in psi4.core, [1]. license. ",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:84440,Performance,load,load,84440,"e, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_frequencies() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. Libint. Libxc. LibXCFunctional class in psi4.core, [1]. license. LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). LITERAL_CFOUR (GLOBALS). load() psi4.core.Matrix method, [1], [2]. load_mpqc() psi4.core.Matrix method, [1], [2]. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONVERGENCE (FISAPT). (SCF). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_DO_SINGLES (CCEOM). LOCAL_FILTER_SINGLES (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_GHOST (CCEOM). LOCAL_IBO_CONDITION (FISAPT). LOCAL_IBO_POWER (FISAPT). LOCAL_IBO_STARS (FISAPT). LOCAL_IBO_STARS_COMPLETENESS (FISAPT). LOCAL_IBO_USE_STARS (FISAPT). LOCAL_MAXITER (FISAPT). (SCF). LOCAL_METHOD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_PAIRDEF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_PRECONDITIONER (CCEOM). LOCAL_USE_GHOSTS (FISAPT). LOCAL_WEAKP (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). localize() psi4.core.BoysLocalizer method, [1]. psi4.core.FISAPT method, [1], [2]. psi4.core.Localizer method, [1], [2]. psi4.core.PMLocalizer method, [1]. Localizer class in psi4.core, [1]. LOCK_SING",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:102086,Performance,optimiz,optimize,102086,"psi4.core.LibXCFunctional method, [1]. OMEGA_ERF (MINTS). OMP2. ; setting keywords. theory. OMP2.5. ; setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3. ; setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:102269,Performance,optimiz,optimize,102269," theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:102301,Performance,optimiz,optimize,102301,"ALENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:103897,Performance,optimiz,optimization,103897,"order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap() psi4.core.FISAPT method, [1], [2]. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method, [1], [2]. OverlapInt class in psi4.core, [1]. P. p psi4.core.AOShellCombinationsIterator attribute, [1], [2]. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. ParsingError. partial_cholesky_factorize() psi4.core.Matrix method, [1], [2]. partition() psi4.core.FISAPT method, [1], [2]. pasture_required_modules psi4.driver.PastureRequiredError attribute. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.CCWavefunc",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:104708,Performance,queue,queueing,104708,"ttribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap() psi4.core.FISAPT method, [1], [2]. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method, [1], [2]. OverlapInt class in psi4.core, [1]. P. p psi4.core.AOShellCombinationsIterator attribute, [1], [2]. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. ParsingError. partial_cholesky_factorize() psi4.core.Matrix method, [1], [2]. partition() psi4.core.FISAPT method, [1], [2]. pasture_required_modules psi4.driver.PastureRequiredError attribute. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. pcm_helper() in module psi4.driver. PCM_SCF_TYPE (PCM). PCMSolver. PCMSOLVER_PARSED_FNAME (PCM). PEP1. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_DIPOLE (SCF). perturb_grad() psi4.core.MintsHelper method, [1], [2]. PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). petite_list() psi4.core.MintsHelper method, [1], [2]. psi4.core.SOBasisSet method, [1], [2]. petite_list1() psi4.core.MintsHelper method, [1], [2]. PetiteList class in psi4.core, [1]. PHI_POINTS (SCF). physconst. physical constants. pi",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:136327,Performance,optimiz,optimize,136327,"method, [1], [2]. set_units() psi4.core.Molecule method, [1], [2]. set_variable() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.Molecule method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. set_vv10_b() psi4.core.SuperFunctional method, [1], [2]. set_vv10_c() psi4.core.SuperFunctional method, [1], [2]. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method, [1], [2]. set_x_alpha() psi4.core.SuperFunctional method, [1], [2]. set_x_beta() psi4.core.SuperFunctional method, [1], [2]. set_x_omega() psi4.core.SuperFunctional method, [1], [2]. setName() psi4.core.ExternalPotential method, [1], [2]. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. shape psi4.core.Matrix attribute, [1], [2]. psi4.core.Vector attribute, [1], [2]. shared_object() psi4.core.IO method, [1], [2]. psi4.core.IOManager method, [1], [2]. shell() psi4.core.BasisSet method, [1], [2]. shell_extents() psi4.core.BasisExtents method, [1], [2]. shell_to_ao_function() psi4.core.BasisSet method, [1], [2]. shell_to_basis_function() psi4.core.BasisSet method, [1], [2]. shell_to_center() psi4.core.BasisSet method, [1], [2]. ShellInfo class in psi4.core, [1]. shells_iterator() psi4.core.IntegralFactory method, [1], [2]. shells_local_to_global() psi4.core.BlockOPoints method, [1], [2]. sherrill_go",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:144597,Performance,optimiz,optimization,144597,"() psi4.core.IO method, [1], [2]. tocentry_exists() psi4.core.IO method, [1], [2]. tocprint() psi4.core.IO method, [1], [2]. tocscan() psi4.core.IO method, [1], [2]. tocwrite() psi4.core.IO method, [1], [2]. TPDM (DETCI). tpdm() psi4.core.CIWavefunction method, [1], [2]. TPDM_ABCD_TYPE (OCC). trace() psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. TracelessQuadrupoleInt class in psi4.core, [1]. transform() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transform_ci_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_mcscf_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_oei() psi4.core.IntegralTransform method, [1], [2]. transform_tei() psi4.core.IntegralTransform method, [1], [2]. transform_tei_first_half() psi4.core.IntegralTransform method, [1], [2]. transform_tei_second_half() psi4.core.IntegralTransform method, [1], [2]. transition state. ; geometry optimization. translate() psi4.core.Molecule method, [1], [2]. TRANSLATE_PSI4 (CFOUR). transpose() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transpose_this() psi4.core.Matrix method, [1], [2]. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_IABC_TYPE (DFOCC). TRIPLES_LOW_MEMORY (FNOCC). triplet() in module psi4.core, [1]. psi4.core.Matrix static method, [1], [2]. true_atomic_number() psi4.core.Molecule method, [1], [2]. tstart() in module psi4.core, [1]. tstop() in module psi4.core, [1]. TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. TwoBodyAOInt class in psi4.core, [1]. twoel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. TwoElectronInt class in psi4.core, [1]. U. U psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. UHF class in psi4.core,",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/genindex.html:28864,Usability,clear,clear,28864,"EZZ. CIROOTnTOTALENERGY. CIS_AMPLITUDE_CUTOFF (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. citation() psi4.core.Dispersion method, [1], [2]. psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. CITOTALENERGY. CIVector class in psi4.core, [1]. CIWavefunction class in psi4.core, [1]. Ck() psi4.core.DFSOMCSCF method, [1]. psi4.core.DiskSOMCSCF method, [1]. psi4.core.SOMCSCF method, [1], [2]. clean() in module psi4.core, [1]. clean_options() in module psi4.core, [1]. clean_variables() in module psi4.core, [1]. cleanup_ci() psi4.core.CIWavefunction method, [1], [2]. cleanup_dpd() psi4.core.CIWavefunction method, [1], [2]. clear() psi4.core.ExternalPotential method, [1], [2]. psi4.core.OEProp method, [1], [2]. clear_all() psi4.core.DFHelper method, [1], [2]. clear_collocation_cache() psi4.core.VBase method, [1], [2]. clear_external_potentials() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. clear_spaces() psi4.core.DFHelper method, [1], [2]. clone() psi4.core.Matrix method, [1], [2]. psi4.core.Molecule method, [1], [2]. close() psi4.core.IO method, [1], [2]. close_io_files() psi4.core.CIVector method, [1], [2]. close_outfile() in module psi4.core, [1]. coef psi4.core.SalcComponent attribute, [1], [2]. coef() psi4.core.GaussianShell method, [1], [2]. coldim() psi4.core.Matrix method, [1], [2]. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). collocation. collocation_size() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. cols() psi4.core.Matrix method, [1], [2]. com_fixed() psi4.core.Molecule ",MatchSource.WIKI,psi4manual/1.3.2/genindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11916,Availability,avail,available,11916,"nfiguration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:12260,Availability,avail,available,12260,"^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-}",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:12610,Availability,avail,available,12610,"H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8298,Deployability,configurat,configuration,8298,"avelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8532,Deployability,configurat,configuration,8532,UPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; T,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8772,Deployability,configurat,configuration,8772,ximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9134,Deployability,configurat,configuration,9134,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9303,Deployability,configurat,configuration,9303,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9581,Deployability,configurat,configuration,9581,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9779,Deployability,configurat,configuration,9779,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10177,Deployability,configurat,configuration,10177,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10329,Deployability,configurat,configuration,10329,"evel of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The cor",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10585,Deployability,configurat,configuration,10585," configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT RE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10931,Deployability,configurat,configuration,10931,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14278,Deployability,configurat,configuration,14278,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17682,Deployability,configurat,configuration,17682,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17888,Deployability,configurat,configuration,17888,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20864,Deployability,update,updated,20864,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:1235,Energy Efficiency,energy,energy,1235,", etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:1262,Energy Efficiency,energy,energy,1262,", etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:1797,Energy Efficiency,energy,energy,1797, Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correl,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:1824,Energy Efficiency,energy,energy,1824, Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correl,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:2083,Energy Efficiency,energy,energy,2083,ir functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRE,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:2134,Energy Efficiency,energy,energy,2134,ir functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRE,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:2806,Energy Efficiency,energy,energy,2806," the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:2833,Energy Efficiency,energy,energy,2833," the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:3308,Energy Efficiency,energy,energy,3308,"requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE X",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:3335,Energy Efficiency,energy,energy,3335,"requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE X",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:4751,Energy Efficiency,energy,energy,4751," rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic e",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:4778,Energy Efficiency,energy,energy,4778," rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic e",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5123,Energy Efficiency,energy,energy,5123," [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5150,Energy Efficiency,energy,energy,5150," [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5468,Energy Efficiency,energy,energy,5468,"r level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximat",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5495,Energy Efficiency,energy,energy,5495,"r level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximat",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5792,Energy Efficiency,energy,energy,5792," (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:5819,Energy Efficiency,energy,energy,5819," (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:6110,Energy Efficiency,energy,energy,6110,"y component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:6137,Energy Efficiency,energy,energy,6137,"y component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:6447,Energy Efficiency,energy,energy,6447,"ion energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:6474,Energy Efficiency,energy,energy,6474,"ion energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:7994,Energy Efficiency,energy,energy,7994," CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8021,Energy Efficiency,energy,energy,8021," CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9712,Energy Efficiency,energy,energy,9712,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9739,Energy Efficiency,energy,energy,9739,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9951,Energy Efficiency,energy,energy,9951, -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of th,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9978,Energy Efficiency,energy,energy,9978, -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of th,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10110,Energy Efficiency,energy,energy,10110,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10137,Energy Efficiency,energy,energy,10137,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10866,Energy Efficiency,energy,energy,10866,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10893,Energy Efficiency,energy,energy,10893,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11066,Energy Efficiency,energy,energy,11066,"ERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11339,Energy Efficiency,energy,energy,11339,"nteraction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11434,Energy Efficiency,energy,energy,11434,"POLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11619,Energy Efficiency,energy,energy,11619,"el of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:12806,Energy Efficiency,energy,energy,12806,"for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:13142,Energy Efficiency,energy,energy,13142,"e; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:13671,Energy Efficiency,energy,energy,13671,"}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electron",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:13712,Energy Efficiency,energy,energy,13712,"}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electron",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14016,Energy Efficiency,energy,energy,14016,"a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 T",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14216,Energy Efficiency,energy,energy,14216,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14243,Energy Efficiency,energy,energy,14243,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14360,Energy Efficiency,energy,energy,14360,"t{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-han",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14592,Energy Efficiency,energy,energy,14592,"quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy compone",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14688,Energy Efficiency,energy,energy,14688,"ution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATI",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14800,Energy Efficiency,energy,energy,14800,"ion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14827,Energy Efficiency,energy,energy,14827,"ion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14947,Energy Efficiency,energy,energy,14947,"DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14974,Energy Efficiency,energy,energy,14974,"DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15092,Energy Efficiency,energy,energy,15092,"ed.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{N",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15119,Energy Efficiency,energy,energy,15119,"ed.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{N",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15245,Energy Efficiency,energy,energy,15245," full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15272,Energy Efficiency,energy,energy,15272," full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15549,Energy Efficiency,energy,energy,15549,"NERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15576,Energy Efficiency,energy,energy,15576,"NERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15857,Energy Efficiency,energy,energy,15857,"TAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functi",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:15884,Energy Efficiency,energy,energy,15884,"TAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functi",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16042,Energy Efficiency,energy,energy,16042,"GY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16083,Energy Efficiency,energy,energy,16083,"GY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16273,Energy Efficiency,energy,energy,16273,"t [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16324,Energy Efficiency,energy,energy,16324,"t [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16698,Energy Efficiency,energy,energy,16698,"left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration int",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16902,Energy Efficiency,energy,energy,16902,"y [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy compone",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:16997,Energy Efficiency,energy,energy,16997,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17024,Energy Efficiency,energy,energy,17024,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17164,Energy Efficiency,energy,energy,17164,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17191,Energy Efficiency,energy,energy,17191,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17327,Energy Efficiency,energy,energy,17327,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17354,Energy Efficiency,energy,energy,17354,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17462,Energy Efficiency,energy,energy,17462,"der, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶.",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17503,Energy Efficiency,energy,energy,17503,"der, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶.",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17615,Energy Efficiency,energy,energy,17615,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17642,Energy Efficiency,energy,energy,17642,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17821,Energy Efficiency,energy,energy,17821,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17848,Energy Efficiency,energy,energy,17848,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:18182,Energy Efficiency,energy,energy,18182,"; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:18351,Energy Efficiency,energy,energy,18351,"tion energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶;",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:18570,Energy Efficiency,energy,energy,18570," QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculatio",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:18738,Energy Efficiency,energy,energy,18738," TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:19045,Energy Efficiency,energy,energy,19045,"RGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:19445,Energy Efficiency,energy,energy,19445,"PT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dim",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20129,Energy Efficiency,energy,energy,20129,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20170,Energy Efficiency,energy,energy,20170,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20272,Energy Efficiency,energy,energy,20272,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20572,Energy Efficiency,energy,energy,20572,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20599,Energy Efficiency,energy,energy,20599,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:165,Modifiability,variab,variable,165,"﻿. PSI Variables by Alpha. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:207,Modifiability,variab,variable,207,"﻿. PSI Variables by Alpha. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8298,Modifiability,config,configuration,8298,"avelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8532,Modifiability,config,configuration,8532,UPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; T,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:8772,Modifiability,config,configuration,8772,ximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9134,Modifiability,config,configuration,9134,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9303,Modifiability,config,configuration,9303,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9581,Modifiability,config,configuration,9581,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:9779,Modifiability,config,configuration,9779,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10177,Modifiability,config,configuration,10177,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10329,Modifiability,config,configuration,10329,"evel of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The cor",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10585,Modifiability,config,configuration,10585," configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT RE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:10931,Modifiability,config,configuration,10931,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11166,Modifiability,variab,variable,11166,"tion interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference va",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11386,Modifiability,variab,variable,11386,"nteraction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11690,Modifiability,variab,variable,11690,"el of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:14278,Modifiability,config,configuration,14278,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17682,Modifiability,config,configuration,17682,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17888,Modifiability,config,configuration,17888,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:19517,Modifiability,variab,variables,19517,"tion energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total elect",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:19610,Modifiability,variab,variables,19610,"tion energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total elect",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:20375,Modifiability,variab,variable,20375,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:11560,Performance,optimiz,optimizer,11560,"ents of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17062,Performance,optimiz,optimized,17062,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17229,Performance,optimiz,optimized,17229,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html:17392,Performance,optimiz,optimized,17392,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables-1.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11916,Availability,avail,available,11916,"nfiguration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:12260,Availability,avail,available,12260,"^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-}",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:12610,Availability,avail,available,12610,"H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8298,Deployability,configurat,configuration,8298,"avelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8532,Deployability,configurat,configuration,8532,UPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; T,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8772,Deployability,configurat,configuration,8772,ximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9134,Deployability,configurat,configuration,9134,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9303,Deployability,configurat,configuration,9303,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9581,Deployability,configurat,configuration,9581,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9779,Deployability,configurat,configuration,9779,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10177,Deployability,configurat,configuration,10177,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10329,Deployability,configurat,configuration,10329,"evel of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The cor",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10585,Deployability,configurat,configuration,10585," configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT RE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10931,Deployability,configurat,configuration,10931,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14278,Deployability,configurat,configuration,14278,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17682,Deployability,configurat,configuration,17682,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17888,Deployability,configurat,configuration,17888,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20864,Deployability,update,updated,20864,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:1235,Energy Efficiency,energy,energy,1235,", etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:1262,Energy Efficiency,energy,energy,1262,", etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:1797,Energy Efficiency,energy,energy,1797, Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correl,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:1824,Energy Efficiency,energy,energy,1824, Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correl,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:2083,Energy Efficiency,energy,energy,2083,ir functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRE,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:2134,Energy Efficiency,energy,energy,2134,ir functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRE,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:2806,Energy Efficiency,energy,energy,2806," the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:2833,Energy Efficiency,energy,energy,2833," the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TOTAL ENERGY¶. CBS CORRELATION ENERGY¶. CBS REFERENCE ENERGY¶; The total electronic energy [H] and its breakdown into reference total; energy [H] and correlation correction components [H] for the compound; method requested through cbs(). CC ROOT n DIPOLE X¶. CC ROOT n DIPOLE Y¶. CC ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:3308,Energy Efficiency,energy,energy,3308,"requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE X",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:3335,Energy Efficiency,energy,energy,3335,"requested; coupled cluster level of theory and root n (number starts at GS = 0). CC ROOT n QUADRUPOLE XX¶. CC ROOT n QUADRUPOLE XY¶. CC ROOT n QUADRUPOLE XZ¶. CC ROOT n QUADRUPOLE YY¶. CC ROOT n QUADRUPOLE YZ¶. CC ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root n (numbering starts at GS = 0). CC ROOT n TOTAL ENERGY¶. CC ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested coupled cluster level of theory and root; n (numbering starts at GS = 0). CC TOTAL ENERGY¶. CC CORRELATION ENERGY¶. CC T1 DIAGNOSTIC¶. CC D1 DIAGNOSTIC¶. CC NEW D1 DIAGNOSTIC¶. CC D2 DIAGNOSTIC¶; Diagnostic of multireference character. CC2 TOTAL ENERGY¶. CC2 CORRELATION ENERGY¶. CC3 TOTAL ENERGY¶. CC3 CORRELATION ENERGY¶. CC4 TOTAL ENERGY¶. CC4 CORRELATION ENERGY¶. CCnn TOTAL ENERGY¶. CCnn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested approximate coupled-cluster (CC2, CC3, up to CCnn); level of theory. CC DIPOLE X¶. CC DIPOLE Y¶. CC DIPOLE Z¶; The three components of the dipole [Debye] for the requested; coupled cluster level of theory and root. CC2 DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CC2 level; for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE X",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:4751,Energy Efficiency,energy,energy,4751," rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic e",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:4778,Energy Efficiency,energy,energy,4778," rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic e",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5123,Energy Efficiency,energy,energy,5123," [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5150,Energy Efficiency,energy,energy,5150," [deg/(dm (g/cm^3))] calculated at the CC2 level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC QUADRUPOLE XX¶. CC QUADRUPOLE XY¶. CC QUADRUPOLE XZ¶. CC QUADRUPOLE YY¶. CC QUADRUPOLE YZ¶. CC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; coupled cluster level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5468,Energy Efficiency,energy,energy,5468,"r level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximat",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5495,Energy Efficiency,energy,energy,5495,"r level of theory and root. CCSD TOTAL ENERGY¶. CCSD CORRELATION ENERGY¶. CCSDT TOTAL ENERGY¶. CCSDT CORRELATION ENERGY¶. CCSDTQ TOTAL ENERGY¶. CCSDTQ CORRELATION ENERGY¶. CCn TOTAL ENERGY¶. CCn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested full coupled-cluster (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximat",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5792,Energy Efficiency,energy,energy,5792," (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:5819,Energy Efficiency,energy,energy,5819," (CCSD, CCSDT, up to CCn); level of theory. CCSD(T) TOTAL ENERGY¶. CCSD(T) CORRELATION ENERGY¶. A-CCSD(T) TOTAL ENERGY¶. A-CCSD(T) CORRELATION ENERGY¶. CCSDT(Q) TOTAL ENERGY¶. CCSDT(Q) CORRELATION ENERGY¶. CC(n-1)(n) TOTAL ENERGY¶. CC(n-1)(n) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:6110,Energy Efficiency,energy,energy,6110,"y component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:6137,Energy Efficiency,energy,energy,6137,"y component [H]; for the perturbatively corrected coupled-cluster (CCSD(T), a-CCSD(T), CCSDT(Q),; up to CC(n-1)(n) level of theory. CCSDT-1a TOTAL ENERGY¶. CCSDT-1a CORRELATION ENERGY¶. CCSDTQ-1a TOTAL ENERGY¶. CCSDTQ-1a CORRELATION ENERGY¶. CCn-1a TOTAL ENERGY¶. CCn-1a CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:6447,Energy Efficiency,energy,energy,6447,"ion energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:6474,Energy Efficiency,energy,energy,6474,"ion energy component [H]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CCn-1a) level of theory. CCSDT-1b TOTAL ENERGY¶. CCSDT-1b CORRELATION ENERGY¶. CCSDTQ-1b TOTAL ENERGY¶. CCSDTQ-1b CORRELATION ENERGY¶. CCn-1b TOTAL ENERGY¶. CCn-1b CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CCn-1b) level of theory. CCSDT-3 TOTAL ENERGY¶. CCSDT-3 CORRELATION ENERGY¶. CCSDTQ-3 TOTAL ENERGY¶. CCSDTQ-3 CORRELATION ENERGY¶. CCn-3 TOTAL ENERGY¶. CCn-3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CCn-3) level of theory. CCSD(T)_L TOTAL ENERGY¶. CCSD(T)_L CORRELATION ENERGY¶. CCSDT(Q)_L TOTAL ENERGY¶. CCSDT(Q)_L CORRELATION ENERGY¶. CC(n-1)(n)_L TOTAL ENERGY¶. CC(n-1)(n)_L CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(n-1)(n)L level of theory. CCSD DIPOLE POLARIZABILITY @ xNM¶; The dipole polarizability [au] calculated at the CCSD level; for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:7994,Energy Efficiency,energy,energy,7994," CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8021,Energy Efficiency,energy,energy,8021," CCSD level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CCSD level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9712,Energy Efficiency,energy,energy,9712,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9739,Energy Efficiency,energy,energy,9739,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9951,Energy Efficiency,energy,energy,9951, -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of th,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9978,Energy Efficiency,energy,energy,9978, -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of th,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10110,Energy Efficiency,energy,energy,10110,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10137,Energy Efficiency,energy,energy,10137,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10866,Energy Efficiency,energy,energy,10866,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10893,Energy Efficiency,energy,energy,10893,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11066,Energy Efficiency,energy,energy,11066,"ERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11339,Energy Efficiency,energy,energy,11339,"nteraction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11434,Energy Efficiency,energy,energy,11434,"POLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11619,Energy Efficiency,energy,energy,11619,"el of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:12806,Energy Efficiency,energy,energy,12806,"for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:13142,Energy Efficiency,energy,energy,13142,"e; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:13671,Energy Efficiency,energy,energy,13671,"}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electron",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:13712,Energy Efficiency,energy,energy,13712,"}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}\]. DFT FUNCTIONAL TOTAL ENERGY¶; The total electronic energy [H] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. (4) or (1). Quantity; \(E_{\text{FCTL}}\) in Eqs. (4) and (1).; Unless the method includes a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electron",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14016,Energy Efficiency,energy,energy,14016,"a dispersion correction, this quantity is; equal to SCF TOTAL ENERGY. DFT TOTAL ENERGY¶; The total electronic energy [H] for the requested DFT method,; \(E_{\text{DFT}}\) in Eq. (1). \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 T",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14216,Energy Efficiency,energy,energy,14216,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14243,Energy Efficiency,energy,energy,14243,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14360,Energy Efficiency,energy,energy,14360,"t{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-han",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14592,Energy Efficiency,energy,energy,14592,"quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy compone",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14688,Energy Efficiency,energy,energy,14688,"ution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATI",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14800,Energy Efficiency,energy,energy,14800,"ion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14827,Energy Efficiency,energy,energy,14827,"ion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14947,Energy Efficiency,energy,energy,14947,"DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14974,Energy Efficiency,energy,energy,14974,"DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15092,Energy Efficiency,energy,energy,15092,"ed.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{N",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15119,Energy Efficiency,energy,energy,15119,"ed.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{N",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15245,Energy Efficiency,energy,energy,15245," full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15272,Energy Efficiency,energy,energy,15272," full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15549,Energy Efficiency,energy,energy,15549,"NERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15576,Energy Efficiency,energy,energy,15576,"NERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15857,Energy Efficiency,energy,energy,15857,"TAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functi",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:15884,Energy Efficiency,energy,energy,15884,"TAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functi",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16042,Energy Efficiency,energy,energy,16042,"GY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16083,Energy Efficiency,energy,energy,16083,"GY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16273,Energy Efficiency,energy,energy,16273,"t [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16324,Energy Efficiency,energy,energy,16324,"t [H]; for the MP4 singles, doubles, quadruples level of theory. Quantity; MP4(SDQ) CORRELATION ENERGY is; first right-hand term in Eq. (2). MP4 TOTAL ENERGY¶. MP4 CORRELATION ENERGY¶. MP4(SDTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16698,Energy Efficiency,energy,energy,16698,"left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration int",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16902,Energy Efficiency,energy,energy,16902,"y [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy compone",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:16997,Energy Efficiency,energy,energy,16997,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17024,Energy Efficiency,energy,energy,17024,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17164,Energy Efficiency,energy,energy,17164,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17191,Energy Efficiency,energy,energy,17191,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17327,Energy Efficiency,energy,energy,17327,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17354,Energy Efficiency,energy,energy,17354,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17462,Energy Efficiency,energy,energy,17462,"der, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶.",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17503,Energy Efficiency,energy,energy,17503,"der, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶.",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17615,Energy Efficiency,energy,energy,17615,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17642,Energy Efficiency,energy,energy,17642,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17821,Energy Efficiency,energy,energy,17821,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17848,Energy Efficiency,energy,energy,17848,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:18182,Energy Efficiency,energy,energy,18182,"; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:18351,Energy Efficiency,energy,energy,18351,"tion energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶;",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:18570,Energy Efficiency,energy,energy,18570," QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculatio",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:18738,Energy Efficiency,energy,energy,18738," TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:19045,Energy Efficiency,energy,energy,19045,"RGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:19445,Energy Efficiency,energy,energy,19445,"PT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dim",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20129,Energy Efficiency,energy,energy,20129,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20170,Energy Efficiency,energy,energy,20170,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20272,Energy Efficiency,energy,energy,20272,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20572,Energy Efficiency,energy,energy,20572,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20599,Energy Efficiency,energy,energy,20599,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:165,Modifiability,variab,variable,165,"﻿. PSI Variables by Alpha. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:207,Modifiability,variab,variable,207,"﻿. PSI Variables by Alpha. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. PSI Variables by Alpha¶. Note; Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. (T) CORRECTION ENERGY¶; The coupled-cluster perturbative triples correction [H]. A-(T) CORRECTION ENERGY¶; The coupled-cluster asymmetric perturbative triples correction [H]. MP4(T) CORRECTION ENERGY¶; The MP4 triples component [H]. Quantity is second right-hand term in; Eq. (2). AAA (T) CORRECTION ENERGY¶. AAB (T) CORRECTION ENERGY¶. ABB (T) CORRECTION ENERGY¶. BBB (T) CORRECTION ENERGY¶; Spin components of the UHF-based coupled-cluster perturbative triples correction [H]. ACPF DIPOLE X¶. ACPF DIPOLE Y¶. ACPF DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged coupled-pair functional level of theory. ACPF QUADRUPOLE XX¶. ACPF QUADRUPOLE XY¶. ACPF QUADRUPOLE XZ¶. ACPF QUADRUPOLE YY¶. ACPF QUADRUPOLE YZ¶. ACPF QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged coupled-pair functional level of theory. ACPF TOTAL ENERGY¶. ACPF CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged coupled-pair functional level of theory. AQCC DIPOLE X¶. AQCC DIPOLE Y¶. AQCC DIPOLE Z¶; The three components of the dipole [Debye] for the; averaged quadratic coupled-cluster level of theory. AQCC QUADRUPOLE XX¶. AQCC QUADRUPOLE XY¶. AQCC QUADRUPOLE XZ¶. AQCC QUADRUPOLE YY¶. AQCC QUADRUPOLE YZ¶. AQCC QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; averaged quadratic coupled-cluster level of theory. AQCC TOTAL ENERGY¶. AQCC CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the averaged quadratic coupled-cluster level of theory. BRUECKNER CONVERGED¶; Value 1 (0) when the Brueckner orbitals have (have not) converged. CBS TO",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8298,Modifiability,config,configuration,8298,"avelength, (x) rounded to nearest integer. CEPA(0) DIPOLE X¶. CEPA(0) DIPOLE Y¶. CEPA(0) DIPOLE Z¶; The three components of the dipole [Debye] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) QUADRUPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8532,Modifiability,config,configuration,8532,UPOLE XX¶. CEPA(0) QUADRUPOLE XY¶. CEPA(0) QUADRUPOLE XZ¶. CEPA(0) QUADRUPOLE YY¶. CEPA(0) QUADRUPOLE YZ¶. CEPA(0) QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; coupled electron pair approximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; T,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:8772,Modifiability,config,configuration,8772,ximation variant 0 level of theory. CEPA(0) TOTAL ENERGY¶. CEPA(0) CORRELATION ENERGY¶. CEPA(1) TOTAL ENERGY¶. CEPA(1) CORRELATION ENERGY¶. CEPA(2) TOTAL ENERGY¶. CEPA(2) CORRELATION ENERGY¶. CEPA(3) TOTAL ENERGY¶. CEPA(3) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested variant of coupled electron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and cor,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9134,Modifiability,config,configuration,9134,ron pair approximation level of theory. CFOUR ERROR CODE¶; The non-zero return value from a Cfour execution. CI DIPOLE X¶. CI DIPOLE Y¶. CI DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9303,Modifiability,config,configuration,9303,requested; configuration interaction level of theory and root. CI QUADRUPOLE XX¶. CI QUADRUPOLE XY¶. CI QUADRUPOLE XZ¶. CI QUADRUPOLE YY¶. CI QUADRUPOLE YZ¶. CI QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three c,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9581,Modifiability,config,configuration,9581,vel of theory and root. CI ROOT n -> ROOT m DIPOLE X¶. CI ROOT n -> ROOT m DIPOLE Y¶. CI ROOT n -> ROOT m DIPOLE Z¶; The three components of the transition dipole [Debye] between roots n; and m for the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrup,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:9779,Modifiability,config,configuration,9779,the requested configuration interaction level of theory. CI ROOT n -> ROOT m QUADRUPOLE XX¶. CI ROOT n -> ROOT m QUADRUPOLE XY¶. CI ROOT n -> ROOT m QUADRUPOLE XZ¶. CI ROOT n -> ROOT m QUADRUPOLE YY¶. CI ROOT n -> ROOT m QUADRUPOLE YZ¶. CI ROOT n -> ROOT m QUADRUPOLE ZZ¶; The three components of the transition quadrupole [Debye Ang] between; roots n and m for the requested configuration interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ ,MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10177,Modifiability,config,configuration,10177,"n interaction level of; theory. CI ROOT n DIPOLE X¶. CI ROOT n DIPOLE Y¶. CI ROOT n DIPOLE Z¶; The three components of the dipole [Debye] for the requested; configuration interaction level of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise c",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10329,Modifiability,config,configuration,10329,"evel of theory and root n. CI ROOT n QUADRUPOLE XX¶. CI ROOT n QUADRUPOLE XY¶. CI ROOT n QUADRUPOLE XZ¶. CI ROOT n QUADRUPOLE YY¶. CI ROOT n QUADRUPOLE YZ¶. CI ROOT n QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the requested; configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The cor",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10585,Modifiability,config,configuration,10585," configuration interaction level of theory and root n. CI ROOT n TOTAL ENERGY¶. CI ROOT n CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root; n (numbering starts at 0). CI STATE-AVERAGED TOTAL ENERGY¶. CI STATE-AVERAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT RE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:10931,Modifiability,config,configuration,10931,"RAGED CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for state-averaged CI/CASSCF levels of theory. CI TOTAL ENERGY¶. CI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the requested configuration interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no r",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11166,Modifiability,variab,variable,11166,"tion interaction level of theory and root. CISD DIPOLE X¶. CISD DIPOLE Y¶. CISD DIPOLE Z¶; The three components of the dipole [Debye] for the; configuration interaction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference va",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11386,Modifiability,variab,variable,11386,"nteraction singles and doubles level of theory and root. CISD QUADRUPOLE XX¶. CISD QUADRUPOLE XY¶. CISD QUADRUPOLE XZ¶. CISD QUADRUPOLE YY¶. CISD QUADRUPOLE YZ¶. CISD QUADRUPOLE ZZ¶; The six components of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11690,Modifiability,variab,variable,11690,"el of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:14278,Modifiability,config,configuration,14278,"} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}Unless the method is a DFT double-hybrid, this quantity is equal to; SCF TOTAL ENERGY. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; DFT FUNCTIONAL TOTAL ENERGY. DFT XC ENERGY¶; The functional energy contribution [H] to the total SCF energy (DFT only).; Quantity \(E_{xc}\) in Eqs. (4) and (1). DISPERSION CORRECTION ENERGY¶; The dispersion correction [H] appended to an underlying functional; when a DFT-D method is requested. Quantity \(E_{\text{-D}}\); in Eqs. (4) and (1). DOUBLE-HYBRID CORRECTION ENERGY¶; The scaled MP2 correlation energy correction [H] appended to an; underlying functional when a DH-DFT method is requested.; Quantity \(E_{\text{DH}}\) in Eq. (1). FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full configuration interaction level of theory. HF TOTAL ENERGY¶; The total electronic energy [H] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). LCC2 (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CC2 level of theory. LCCSD (+LMP2) TOTAL ENERGY¶; The total electronic energy [H] for the local CCSD level of theory. MP2 TOTAL ENERGY¶. MP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2 level of theory. MP2.5 TOTAL ENERGY¶. MP2.5 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP2.5 level of theory. MP3 TOTAL ENERGY¶. MP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the MP3 level of theory. MP4(SDQ) TOTAL ENERGY¶. MP4(SDQ) CORRELATION ENERGY¶; The total electronic ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17682,Modifiability,config,configuration,17682,"nts 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17888,Modifiability,config,configuration,17888,"st functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction energy [H] for the requested SAPT; level of theory. SAPT0 TOTAL ENERGY¶. SSAPT0 TOTAL ENERGY¶. SAPT2 TOTAL ENERGY¶. SAPT2+ TOTAL ENERGY¶. SAPT2+(3) TOTAL ENERGY¶. SAPT2+3 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:19517,Modifiability,variab,variables,19517,"tion energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total elect",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:19610,Modifiability,variab,variables,19610,"tion energy [H] for the labeled SAPT level; of theory. SAPT2+(CCD) TOTAL ENERGY¶. SAPT2+(3)(CCD) TOTAL ENERGY¶. SAPT2+3(CCD) TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total elect",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:20375,Modifiability,variab,variable,20375,"ERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [H] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye]. SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang]. SCF TOTAL ENERGY¶; The total electronic energy [H] of the SCF stage of the calculation.; The CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. TWO-ELECTRON ENERGY¶; The two-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{2e^-}\) in Eq. (4). UNCP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed without counterpoise correction.; Related variable CP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}\]. ZAPTn TOTAL ENERGY¶. ZAPTn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Z-averaged perturbation theory level.; n is ZAPT perturbation order. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:11560,Performance,optimiz,optimizer,11560,"ents of the quadrupole [Debye Ang] for the; configuration interaction singles and doubles level of theory and root. CISD TOTAL ENERGY¶. CISD CORRELATION ENERGY¶. CISDT TOTAL ENERGY¶. CISDT CORRELATION ENERGY¶. CISDTQ CORRELATION ENERGY¶. CISDTQ TOTAL ENERGY¶. CIn CORRELATION ENERGY¶. CIn TOTAL ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled configuration interaction level of theory and root.; n is CI order for n > 4. CP-CORRECTED 2-BODY INTERACTION ENERGY¶; The interaction energy [H] considering only two-body interactions,; computed with counterpoise correction.; Related variable UNCP-CORRECTED 2-BODY INTERACTION ENERGY. \[E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}\]. CURRENT CORRELATION ENERGY¶; The correlation energy [H] corresponding to the CURRENT ENERGY variable. CURRENT ENERGY¶; The total electronic energy [H] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. CURRENT REFERENCE ENERGY¶; The total electronic energy [H] of the reference stage corresponding to; the CURRENT ENERGY variable. db_name DATABASE MEAN ABSOLUTE DEVIATION¶; The mean absolute deviation [kcal mol-1] of the requested method; name from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }\]. db_name DATABASE MEAN SIGNED DEVIATION¶; The mean deviation [kcal mol-1] of the requested method name; from the stored reference values for the requested reactions in; database db_name. If no reference is available, this will be a large; and nonsensical value. \[\frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}\]. db_name DATABASE ROOT-MEAN-SQUARE SIGNED DEVIATION¶; The rms deviation [kcal mol-1] of the requested method name; from the stored reference values f",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17062,Performance,optimiz,optimized,17062,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17229,Performance,optimiz,optimized,17229,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html:17392,Performance,optimiz,optimized,17392,"etical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [H] for the the; requested SAPT level of theory. The sum of these four components yields; SAPT TOTAL ENERGY. SAPT TOTAL ENERGY¶; The total electronic interaction ",MatchSource.WIKI,psi4manual/1.3.2/glossary_psivariables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/glossary_psivariables.html
https://psicode.org/psi4manual/1.3.2/index.html:4435,Deployability,update,updated,4435,"; Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Python Style; C++ Style; FAQ. Programming with the Core Libraries; LibOptions: globals, locals, has_changed and all that; Linear Algebra in PSI4. Adding Test Cases; Debugging and Profiling; Debugging; Profiling. Updating the PSI4 Users’ and Programmers’ Manual; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons; Git, Versioning. PSI4 API: Linking C++ and Python; psi4.core Module; psi4.driver Package. Indices. Index; Module Index; Search Page. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index.html
https://psicode.org/psi4manual/1.3.2/index.html:2502,Energy Efficiency,energy,energy,2502,"NumPy; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Pytho",MatchSource.WIKI,psi4manual/1.3.2/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index.html
https://psicode.org/psi4manual/1.3.2/index.html:2583,Performance,optimiz,optimize,2583,"NumPy; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Pytho",MatchSource.WIKI,psi4manual/1.3.2/index.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index.html
https://psicode.org/psi4manual/1.3.2/index_tutorials-1.html:860,Deployability,update,updated,860,"﻿. A PSI4 Tutorial. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial¶. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. PsiAPI Tutorial: Using Psi4 as a Python Module; I. Basic Input Structure; II. Running a Basic Hartree-Fock Calculation; III. Geometry Optimization and Vibrational Frequency Analysis; IV. Analysis of Intermolecular Interactions; V. Potential Surface Scans and Counterpoise Correction Made Easy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/index_tutorials-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index_tutorials-1.html
https://psicode.org/psi4manual/1.3.2/index_tutorials.html:860,Deployability,update,updated,860,"﻿. A PSI4 Tutorial. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. A PSI4 Tutorial¶. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. PsiAPI Tutorial: Using Psi4 as a Python Module; I. Basic Input Structure; II. Running a Basic Hartree-Fock Calculation; III. Geometry Optimization and Vibrational Frequency Analysis; IV. Analysis of Intermolecular Interactions; V. Potential Surface Scans and Counterpoise Correction Made Easy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/index_tutorials.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index_tutorials.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:2211,Deployability,update,updated,2211," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:369,Energy Efficiency,energy,energy,369,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:645,Energy Efficiency,energy,energy,645,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:772,Energy Efficiency,energy,energy,772,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:808,Energy Efficiency,energy,energy,808,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:959,Energy Efficiency,energy,energy,959,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:1180,Energy Efficiency,energy,energy,1180,"sition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright ",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:1228,Energy Efficiency,energy,energy,1228,"nd cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 M",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:1351,Energy Efficiency,energy,energy,1351," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:1381,Energy Efficiency,energy,energy,1381," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:316,Modifiability,extend,extended,316,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:556,Performance,optimiz,optimize,556,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:1081,Performance,optimiz,optimize,1081,"SI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .  ",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:259,Security,access,accessed,259,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls-1.html:850,Security,validat,validated,850,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls-1.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:2211,Deployability,update,updated,2211," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:369,Energy Efficiency,energy,energy,369,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:645,Energy Efficiency,energy,energy,645,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:772,Energy Efficiency,energy,energy,772,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:808,Energy Efficiency,energy,energy,808,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:959,Energy Efficiency,energy,energy,959,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:1180,Energy Efficiency,energy,energy,1180,"sition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright ",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:1228,Energy Efficiency,energy,energy,1228,"nd cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 M",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:1351,Energy Efficiency,energy,energy,1351," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:1381,Energy Efficiency,energy,energy,1381," use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:316,Modifiability,extend,extended,316,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:556,Performance,optimiz,optimize,556,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:1081,Performance,optimiz,optimize,1081,"SI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .  ",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:259,Security,access,accessed,259,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/intercalls.html:850,Security,validat,validated,850,"﻿. Function Intercalls. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be us",MatchSource.WIKI,psi4manual/1.3.2/intercalls.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/intercalls.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:2491,Deployability,update,updated,2491,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:719,Modifiability,config,configure,719,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:768,Modifiability,plugin,plugin,768,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1002,Modifiability,config,configure,1002,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1161,Modifiability,config,configure,1161,"hancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Netw",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1264,Modifiability,config,configure,1264,"ecessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Lib",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1410,Modifiability,config,configure,1410," Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1616,Modifiability,config,configure,1616,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1705,Modifiability,config,configure,1705,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:1986,Modifiability,config,configure,1986,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:2083,Modifiability,config,configure,2083,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing-1.html:2310,Modifiability,config,configure,2310,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing-1.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:2491,Deployability,update,updated,2491,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:719,Modifiability,config,configure,719,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:768,Modifiability,plugin,plugin,768,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1002,Modifiability,config,configure,1002,"﻿. Interfaces: Enhancing PSI4 Capabilities. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSo",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1161,Modifiability,config,configure,1161,"hancing PSI4 Capabilities¶; PSI4’s capabilities have been expanded by interfacing with other; software packages. These programs aren’t necessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Netw",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1264,Modifiability,config,configure,1264,"ecessary; for PSI4 to operate and may require additional licences, special; platform capabilities, etc. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Lib",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1410,Modifiability,config,configure,1410," Data Objects with Irreps; Array to Matrix; Matrix to Array. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1616,Modifiability,config,configure,1616,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1705,Modifiability,config,configure,1705,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:1986,Modifiability,config,configure,1986,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:2083,Modifiability,config,configure,2083,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/interfacing.html:2310,Modifiability,config,configure,2310,"our Users; Output; Functionality; Specification Details; Misc. Running. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; Reference; How to configure dkh for building Psi4. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. Interface to gCP by S. Grimme; Installation; Running gCP. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; How to configure gdma for building Psi4. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Interface to Molden — molden(); Options. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; How to configure PCMSolver for building Psi4. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Installation; Sample Input. Plugin v2rdm_casscf by A. E. DePrince; Installation. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/interfacing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/interfacing.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1073,Availability,avail,available,1073,"ndex. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1183,Availability,avail,available,1183,"ety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:2691,Availability,avail,available,2691,"igh-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, J. Chem. Theory Comput., 13(7) 3185–3197 (2017).; (doi: 10.",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:2753,Availability,avail,available,2753,"igh-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, J. Chem. Theory Comput., 13(7) 3185–3197 (2017).; (doi: 10.",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:11348,Availability,avail,available,11348,"-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to P",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:20323,Availability,avail,available,20323,"0/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can p",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:20779,Availability,avail,available,20779,"1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21723,Availability,avail,available,21723," GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP4 [10]; RHF; CONV; —; —; threaded [3];  ; E. MP(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . ZAPT(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . LCCD [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threade",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21902,Availability,avail,available,21902,"d 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP4 [10]; RHF; CONV; —; —; threaded [3];  ; E. MP(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . ZAPT(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . LCCD [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. LCCSD, CEPA(0) [10]; RHF; CONV; —; —; threaded [3];  ; E. CEPA(n), n=0,1,3; RHF; CONV; —; —; threaded [3];  ; E. CCD; RHF; DF/CD; RHF; DF; threaded [3];  ;  . CC2; RHF/UHF/ROHF; ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:24589,Availability,reliab,reliability,24589,"ONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:24976,Availability,error,error,24976,"e performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not ava",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25016,Availability,error,error,25016,"e performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not ava",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25535,Availability,avail,available,25535,"PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25565,Availability,avail,available,25565,"ithout any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25625,Availability,avail,available,25625,"y, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specifi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25655,Availability,avail,available,25655,"No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Sy",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25962,Availability,avail,available,25962,"? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26010,Availability,avail,available,26010,"is error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26097,Availability,avail,available,26097,"Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Ps",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26147,Availability,avail,available,26147," I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Crea",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26197,Availability,avail,available,26197," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26254,Availability,avail,available,26254," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26295,Availability,avail,available,26295," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6924,Deployability,configurat,configuration,6924,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6973,Deployability,configurat,configuration,6973,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21025,Deployability,release,released,21025,"15).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/R",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:27088,Deployability,update,updated,27088," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:300,Energy Efficiency,efficient,efficiently,300,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:711,Energy Efficiency,power,powerful,711,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1031,Energy Efficiency,efficient,efficient,1031,"ndex. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1152,Energy Efficiency,efficient,efficient,1152,"ety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1228,Energy Efficiency,power,powerful,1228,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1250,Energy Efficiency,energy,energy,1250,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1319,Energy Efficiency,adapt,adapted,1319,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:5371,Energy Efficiency,efficient,efficient,5371,"butions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:8834,Energy Efficiency,energy,energy,8834,"00780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 144, 174103 (2016).; (doi: 10.1063/1.4948318). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. “Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 147, 044104 (2017).; (doi: 10.1063/1.4994918). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC)¶; PSI4 features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and PSI4; implementation of these methods is discussed in the following papers.; General Mk-MRCC. “Coupling Term Derivation and General Implementation of; State-Specific Multireference Coupled-Cluster Theories,”; F. A.",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:9179,Energy Efficiency,energy,energy,9179," E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 144, 174103 (2016).; (doi: 10.1063/1.4948318). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. “Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 147, 044104 (2017).; (doi: 10.1063/1.4994918). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC)¶; PSI4 features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and PSI4; implementation of these methods is discussed in the following papers.; General Mk-MRCC. “Coupling Term Derivation and General Implementation of; State-Specific Multireference Coupled-Cluster Theories,”; F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n).",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:10871,Energy Efficiency,efficient,efficient,10871," F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n). “Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:11880,Energy Efficiency,adapt,adapted,11880,"APT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010).; (doi: 10.1063/1.3426316). SAPT2. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). SAPT2+, SAPT2+(3), SAPT2+3. “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; S",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14941,Energy Efficiency,energy,energy,14941,"51077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:15941,Energy Efficiency,energy,energy,15941,"d second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:18192,Energy Efficiency,efficient,efficient,18192,"zed second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poe",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:19025,Energy Efficiency,adapt,adapted,19025,"F-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:19548,Energy Efficiency,energy,energy,19548,"enormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:24247,Energy Efficiency,energy,energy,24247,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:451,Integrability,rout,routine,451,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21247,Integrability,depend,dependencies,21247,"obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UH",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21383,Integrability,depend,dependencies,21383,"ry) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21477,Integrability,contract,contracted,21477," code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:25783,Integrability,rout,routines,25783,"ows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Me",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1319,Modifiability,adapt,adapted,1319,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:5117,Modifiability,extend,extended,5117," 2, 556 (2012).; (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6924,Modifiability,config,configuration,6924,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6973,Modifiability,config,configuration,6973,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:11880,Modifiability,adapt,adapted,11880,"APT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010).; (doi: 10.1063/1.3426316). SAPT2. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). SAPT2+, SAPT2+(3), SAPT2+3. “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; S",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16725,Modifiability,extend,extended,16725,"pposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:19025,Modifiability,adapt,adapted,19025,"F-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1356,Performance,optimiz,optimized,1356,"input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations whi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:2525,Performance,optimiz,optimization,2525,"PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K.",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6431,Performance,optimiz,optimized,6431,"8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:6900,Performance,optimiz,optimized,6900,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:7622,Performance,perform,performance,7622,"tional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:7997,Performance,perform,performance,7997," interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. P",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:10889,Performance,perform,perform,10889," F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n). “Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14545,Performance,optimiz,optimized,14545,"tein, and C. D. Sherrill,; J. Chem. Phys. 139, 174102 (2013).; (doi: 10.1063/1.4826520).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Ap",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14644,Performance,optimiz,optimization,14644,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14673,Performance,optimiz,optimized,14673,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14729,Performance,optimiz,optimized,14729,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:14974,Performance,optimiz,optimized,14974,"51077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:15366,Performance,optimiz,optimized,15366,"hier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:15974,Performance,optimiz,optimized,15974,"d second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16117,Performance,optimiz,optimized,16117,"imized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-opti",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16187,Performance,optimiz,optimized,16187,"tation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; a",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16459,Performance,optimiz,optimized,16459," Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Mult",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16494,Performance,optimiz,optimized,16494,"Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:16764,Performance,optimiz,optimized,16764,"pposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbi",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:17139,Performance,optimiz,optimized,17139,"pled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitti",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:17723,Performance,optimiz,optimized,17723," Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Ex",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:18079,Performance,optimiz,optimized,18079,"zed second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poe",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:21421,Performance,perform,perform,21421," code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:24181,Performance,optimiz,optimization,24181,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:24201,Performance,perform,performed,24201,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:26236,Performance,optimiz,optimized,26236," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:1520,Security,access,access,1520,"le some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices includ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:963,Testability,test,test,963,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:5617,Testability,benchmark,benchmark,5617,"uess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-re",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:434,Usability,simpl,simple,434,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:811,Usability,user-friendly,user-friendly,811,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:5359,Usability,simpl,simple,5359,"butions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction-1.html:11372,Usability,guid,guidance,11372,"t, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and ",MatchSource.WIKI,psi4manual/1.3.2/introduction-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction-1.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1073,Availability,avail,available,1073,"ndex. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1183,Availability,avail,available,1183,"ety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:2691,Availability,avail,available,2691,"igh-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, J. Chem. Theory Comput., 13(7) 3185–3197 (2017).; (doi: 10.",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:2753,Availability,avail,available,2753,"igh-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, J. Chem. Theory Comput., 13(7) 3185–3197 (2017).; (doi: 10.",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:11348,Availability,avail,available,11348,"-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to P",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:20323,Availability,avail,available,20323,"0/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can p",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:20779,Availability,avail,available,20779,"1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21723,Availability,avail,available,21723," GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP4 [10]; RHF; CONV; —; —; threaded [3];  ; E. MP(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . ZAPT(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . LCCD [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threade",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21902,Availability,avail,available,21902,"d 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP4 [10]; RHF; CONV; —; —; threaded [3];  ; E. MP(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . ZAPT(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . LCCD [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. LCCSD, CEPA(0) [10]; RHF; CONV; —; —; threaded [3];  ; E. CEPA(n), n=0,1,3; RHF; CONV; —; —; threaded [3];  ; E. CCD; RHF; DF/CD; RHF; DF; threaded [3];  ;  . CC2; RHF/UHF/ROHF; ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:24589,Availability,reliab,reliability,24589,"ONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:24976,Availability,error,error,24976,"e performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not ava",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25016,Availability,error,error,25016,"e performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not ava",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25535,Availability,avail,available,25535,"PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25565,Availability,avail,available,25565,"ithout any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25625,Availability,avail,available,25625,"y, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specifi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25655,Availability,avail,available,25655,"No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Sy",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25962,Availability,avail,available,25962,"? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26010,Availability,avail,available,26010,"is error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26097,Availability,avail,available,26097,"Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Ps",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26147,Availability,avail,available,26147," I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Crea",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26197,Availability,avail,available,26197," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26254,Availability,avail,available,26254," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26295,Availability,avail,available,26295," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6924,Deployability,configurat,configuration,6924,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6973,Deployability,configurat,configuration,6973,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21025,Deployability,release,released,21025,"15).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/R",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:27088,Deployability,update,updated,27088," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:300,Energy Efficiency,efficient,efficiently,300,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:711,Energy Efficiency,power,powerful,711,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1031,Energy Efficiency,efficient,efficient,1031,"ndex. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1152,Energy Efficiency,efficient,efficient,1152,"ety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1228,Energy Efficiency,power,powerful,1228,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1250,Energy Efficiency,energy,energy,1250,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1319,Energy Efficiency,adapt,adapted,1319,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:5371,Energy Efficiency,efficient,efficient,5371,"butions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:8834,Energy Efficiency,energy,energy,8834,"00780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 144, 174103 (2016).; (doi: 10.1063/1.4948318). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. “Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 147, 044104 (2017).; (doi: 10.1063/1.4994918). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC)¶; PSI4 features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and PSI4; implementation of these methods is discussed in the following papers.; General Mk-MRCC. “Coupling Term Derivation and General Implementation of; State-Specific Multireference Coupled-Cluster Theories,”; F. A.",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:9179,Energy Efficiency,energy,energy,9179," E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 144, 174103 (2016).; (doi: 10.1063/1.4948318). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. “Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. Phys. 147, 044104 (2017).; (doi: 10.1063/1.4994918). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC)¶; PSI4 features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and PSI4; implementation of these methods is discussed in the following papers.; General Mk-MRCC. “Coupling Term Derivation and General Implementation of; State-Specific Multireference Coupled-Cluster Theories,”; F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n).",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:10871,Energy Efficiency,efficient,efficient,10871," F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n). “Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:11880,Energy Efficiency,adapt,adapted,11880,"APT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010).; (doi: 10.1063/1.3426316). SAPT2. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). SAPT2+, SAPT2+(3), SAPT2+3. “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; S",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14941,Energy Efficiency,energy,energy,14941,"51077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:15941,Energy Efficiency,energy,energy,15941,"d second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:18192,Energy Efficiency,efficient,efficient,18192,"zed second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poe",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:19025,Energy Efficiency,adapt,adapted,19025,"F-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:19548,Energy Efficiency,energy,energy,19548,"enormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021/acs.jctc.5b00817). Supported Systems¶. Architectures; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:24247,Energy Efficiency,energy,energy,24247,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:451,Integrability,rout,routine,451,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21247,Integrability,depend,dependencies,21247,"obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UH",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21383,Integrability,depend,dependencies,21383,"ry) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21477,Integrability,contract,contracted,21477," code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:25783,Integrability,rout,routines,25783,"ows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Me",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1319,Modifiability,adapt,adapted,1319,"memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapol",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:5117,Modifiability,extend,extended,5117," 2, 556 (2012).; (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6924,Modifiability,config,configuration,6924,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6973,Modifiability,config,configuration,6973,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:11880,Modifiability,adapt,adapted,11880,"APT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 132,; 184111 (2010).; (doi: 10.1063/1.3426316). SAPT2. “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). SAPT2+, SAPT2+(3), SAPT2+3. “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; S",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16725,Modifiability,extend,extended,16725,"pposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:19025,Modifiability,adapt,adapted,19025,"F-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; Comput. Phys. Commun. 185 (6), 1501-1514 (2014).; (doi: 10.1016/j.cpc.2014.01.019).; “The density matrix renormalization group for ab initio quantum chemistry,”; S. Wouters and D. Van Neck, Eur. Phys. J. D 68 (9), 272 (2014).; (doi: 10.1140/epjd/e2014-50500-1). Scalar Relativistic Corrections¶; General theory for the exact two-component approach (X2C). “Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,”; L. Cheng and J. Gauss, J. Chem. Phys. 135, 084114 (2011).; (doi: 10.1063/1.3624397). Implementation within Psi4. “Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,”; P. Verma, W. D. Derricotte and F. A. Evangelista,; J. Chem. Theory Comput. (2015).; (doi: 10.1021",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1356,Performance,optimiz,optimized,1356,"input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations whi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:2525,Performance,optimiz,optimization,2525,"PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K.",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6431,Performance,optimiz,optimized,6431,"8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:6900,Performance,optimiz,optimized,6900,"1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:7622,Performance,perform,performance,7622,"tional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,” A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; J. Chem. Phys. 141, 074111 (2014).; (doi: 10.1063/1.4892946). Configuration Interaction (CI)¶; PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:7997,Performance,perform,performance,7997," interaction, as described in. “The Configuration Interaction Method: Advances in Highly; Correlated Approaches,” C. D. Sherrill and H. F. Schaefer, in; Adv. Quantum Chem., vol. 34, P.-O. Löwdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: 10.1016/S0065-3276(08)60532-8). Coupled Cluster (CC)¶; A general discussion of coupled cluster theory is given in. “An Introduction to Coupled Cluster Theory for Computational; Chemists,” T. D. Crawford and H. F. Schaefer, Rev. Comp. Chem.; 14, 33-136 (2000).; (doi: 10.1002/9780470125915.ch2). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. “Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 293-299 (2013).; (doi: 10.1021/ct300780u). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. “Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,” A. E. DePrince and C. D. Sherrill,; J. Chem. Theory Comput. 9, 2687-2696 (2013).; (doi: 10.1021/ct400250u). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. “A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,”; U. Bozkaya, J. Chem. Phys. 144, 144108 (2016).; (doi: 10.1063/1.4945706). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. “Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,”; U. Bozkaya and C. D. Sherrill, J. Chem. P",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:10889,Performance,perform,perform,10889," F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; J. Chem. Phys. 127, 024102 (2007).; (doi: 10.1063/1.2743014). Mk-MRCCSD(T). “Perturbative Triples Corrections in State-Specific Multireference; Coupled Cluster Theory,”; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; J. Chem. Phys. 132, 074107 (2010).; (doi: 10.1063/1.3305335). Mk-MRCCSDT(-n). “Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,” F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14545,Performance,optimiz,optimized,14545,"tein, and C. D. Sherrill,; J. Chem. Phys. 139, 174102 (2013).; (doi: 10.1063/1.4826520).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Ap",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14644,Performance,optimiz,optimization,14644,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14673,Performance,optimiz,optimized,14673,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14729,Performance,optimiz,optimized,14729,"henstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:14974,Performance,optimiz,optimized,14974,"51077). F/I-SAPT. “Chemical Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:15366,Performance,optimiz,optimized,15366,"hier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:15974,Performance,optimiz,optimized,15974,"d second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16117,Performance,optimiz,optimized,16117,"imized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-opti",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16187,Performance,optimiz,optimized,16187,"tation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; a",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16459,Performance,optimiz,optimized,16459," Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Mult",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16494,Performance,optimiz,optimized,16494,"Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:16764,Performance,optimiz,optimized,16764,"pposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbi",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:17139,Performance,optimiz,optimized,17139,"pled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitti",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:17723,Performance,optimiz,optimized,17723," Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on Orbital-Optimized Methods,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2041 (2014).; (doi: 10.1021/ct500186j). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Ex",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:18079,Performance,optimiz,optimized,18079,"zed second-order perturbation theory (DF-OMP2). “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c).; “Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,” U. Bozkaya, J. Chem. Theory Comput. 10, 4389 (2014).; (doi: 10.1021/ct500634s). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). “Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,”; U. Bozkaya, J. Chem. Theory Comput. 12, 1179 (2016).; (doi: 10.1021/acs.jctc.5b01128). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). “Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,”; U. Bozkaya, Phys. Chem. Chem. Phys. 18, 11362 (2016).; (doi: 10.1039/c6cp00164e). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Density Matrix Renormalization Group (DMRG)¶. “CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,”; S. Wouters, W. Poe",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:21421,Performance,perform,perform,21421," code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++14 compliance (i.e., GCC version 5.1 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Now that Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions.; PSI4 1.3 supports Python 3.6 and 3.7. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:24181,Performance,optimiz,optimization,24181,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:24201,Performance,perform,performed,24201,"hreaded (pthreads);  ;  . ACPF/AQCC; RHF; CONV; —; —; threaded [3];  ; E. CISD [10]; RHF/ROHF; CONV; —; —; partially threaded;  ; E. QCISD; RHF; CONV; —; —; threaded [3];  ; E. QCISD(T); RHF; CONV; —; —; threaded [3];  ; E. CI(n); RHF/ROHF; CONV; —; —; partially threaded;  ;  . FCI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . Mk-MRPT2; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD; RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . Mk-MRCCSD(T); RHF/ROHF/TCSCF; CONV; —; —; threaded [3];  ;  . RAS-CI; RHF/ROHF; CONV; —; —; partially threaded;  ;  . CASSCF, RASSCF; RHF/ROHF; CONV/DF; —; —; partially threaded;  ;  . SAPT; RHF; CONV; —; —; threaded;  ;  . ADC(2); RHF; CONV; —; —; threaded [3];  ;  . EOM-CC2; RHF; CONV; —; —; threaded [3];  ;  . EOM-CCSD; RHF/UHF/ROHF; CONV; RHF/UHF/ROHF; CONV; threaded [3];  ;  . EOM-CC3; RHF/UHF/ROHF; CONV; —; —; threaded [3];  ;  . DMRG-CI; Y; CONV; —; —;  ;  ;  . DMRG-SCF; Y; CONV; —; —;  ;  ;  . Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:26236,Performance,optimiz,optimized,26236," a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:1520,Security,access,access,1520,"le some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices includ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:963,Testability,test,test,963,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:5617,Testability,benchmark,benchmark,5617,"uess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-re",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:434,Usability,simpl,simple,434,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:811,Usability,user-friendly,user-friendly,811,"﻿. Introduction. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Introduction¶. Overview¶; PSI4 provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. Threading).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease.; PSI4 is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes PSI4 incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in PSI4, with many functionals available. Density fitting is ubiquitous in; PSI4, leading to some of the most efficient MP2 and CCSD(T) code available.; PSI4 also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:5359,Usability,simpl,simple,5359,"butions specific to PSI4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below).; Regardless of the type of the calculation, an initial guess is; necessary. PSI4 features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. “Principles for a direct SCF approach to LCAO-MO ab-initio; calculations”, J. Almlöf, K. Faegri, and K. Korsell,; J. Comput. Chem. 3, 385 (1982).; (doi: 10.1002/jcc.540030314).; “Starting SCF calculations by superposition of atomic; densities”, J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, J. Comput. Chem. 27, 926 (2006).; (doi: 10.1002/jcc.20393). PSI4 also features an extended Hückel guess, which employs; on-the-fly atomic calculations alike the SAD guess. The Hückel guess; has been described in. “An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient”, S. Lehtola, J. Chem. Theory Comput. (2019); (doi: 10.1021/acs.jctc.8b01089). Density Cumulant Functional Theory (DCFT)¶; PSI4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/introduction.html:11372,Usability,guid,guidance,11372,"t, W. D. Allen,; H. F. Schaefer, and J. Gauss, J. Chem. Phys. 128, 124104; (2008).; (doi: 10.1063/1.2834927). Mk-MRPT2. “A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,”; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; Phys. Chem. Chem. Phys. 11, 4728-4741 (2009).; (doi: 10.1039/b822910d). Symmetry-Adapted Perturbation Theory (SAPT)¶; PSI4 features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. “Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,” B. Jeziorski, R. Moszynski,; and K. Szalewicz, Chem. Rev. 94, 1887-1930 (1994).; (doi: 10.1021/cr00031a008). PSI4 benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in PSI4. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. “Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,’’ T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140,; 094106 (2014).; (doi: 10.1063/1.4867135). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT.; DF-SAPT0. “Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,” E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, J.; Chem. Phys. 135, 174017 (2011).; (doi: 10.1063/1.3656681).; “Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of \(\pi - \pi\) Interactions in Linear Acenes,”; E. G. Hohenstein and ",MatchSource.WIKI,psi4manual/1.3.2/introduction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/introduction.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:496,Availability,down,downloads,496,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:618,Availability,avail,available,618,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:2222,Availability,error,error,2222," thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new fragment files, the name of the name of the; file should be lowercase and have extension .efp. The molecule name; within the file, e.g., $NH3 must correspond to the name of the; fragment file. Molecule Specification¶; EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the -- fragment separation scheme; described here. Each EFP fragment has its own; fragment section that includes the label efp, the name of the file; fragname from which EFP parameters are to be read, and the position; specification for the fragment in one of two ways, XYZABC or POINTS. For; XYZABC, the fragment specification is all on one line: efp and; fragname are followed by two sets of three numbers: the coordinates; of the center of mass of the fragment and the three Euler angles that; specify orientation about the center of mass. This format is compact; but not readily generated from molecule viewing so",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7106,Availability,error,error,7106,"FP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7138,Availability,error,error,7138,"forward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containi",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7349,Availability,avail,available,7349,"n the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake v",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:510,Deployability,configurat,configuration,510,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:758,Deployability,install,installed,758,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:856,Deployability,install,installed,856,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:942,Deployability,install,install,942,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:1266,Deployability,install,installation,1266,"rns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7459,Deployability,configurat,configuration,7459,"e last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cm",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7973,Deployability,install,installation,7973,"thod. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; R",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8105,Deployability,install,installation,8105,"FP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:9245,Deployability,update,updated,9245,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5060,Energy Efficiency,energy,energy,5060," mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if units au is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5276,Energy Efficiency,energy,energy,5276,"ons are encoded in the fragment file; and so are not read from input.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt comp",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5845,Energy Efficiency,energy,energy,5845,"ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is onl",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5928,Energy Efficiency,energy,energy,5928,"}. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations a",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:6200,Energy Efficiency,energy,energy,6200,"fp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM;",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:6268,Energy Efficiency,energy,energy,6268,"fp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM;",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7031,Energy Efficiency,energy,energy,7031,"QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_D",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7163,Energy Efficiency,energy,energy,7163,"cule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISA",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7246,Energy Efficiency,energy,energy,7246,"m; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libef",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:372,Integrability,interface,interface,372,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:1106,Integrability,depend,dependent,1106,"ation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variabl",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:1493,Integrability,depend,dependent,1493,"loped; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new fragment files, the name of the name of the; file should be lowercase and have extension .efp. The molecule name; within the file, e.g",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7924,Integrability,depend,dependencies,7924,"efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_l",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8819,Integrability,depend,dependencies,8819,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:510,Modifiability,config,configuration,510,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:2036,Modifiability,variab,variable,2036,"hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new fragment files, the name of the name of the; file should be lowercase and have extension .efp. The molecule name; within the file, e.g., $NH3 must correspond to the name of the; fragment file. Molecule Specification¶; EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the -- fragment separation scheme; described here. Each EFP fragment has its own; fragment section that includes the label efp, the name of the file; fragname from which EFP parameters are to be read, and the position; specification for the fragment in one of two ways, XYZABC or POINTS. For; XYZABC, the fragment specification is all on one line: efp and; fragname are followed by two sets of three numbers: the coordinate",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7184,Modifiability,coupling,coupling,7184,"cule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISA",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7459,Modifiability,config,configuration,7459,"e last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cm",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7481,Modifiability,config,configure,7481,"nd; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7806,Modifiability,variab,variable,7806,"efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_l",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7888,Modifiability,variab,variable,7888,"efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_l",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8041,Modifiability,variab,variable,8041,"ixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8220,Modifiability,variab,variable,8220,"ment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8336,Modifiability,variab,variable,8336,"ment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8662,Modifiability,config,configdir,8662,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:9022,Modifiability,config,configure,9022,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5362,Performance,perform,performed,5362,"nput.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the prece",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:6664,Performance,load,load,6664," to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Depen",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:6853,Performance,perform,perform,6853,"nt is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:6898,Performance,optimiz,optimizations,6898,"nt is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:1079,Safety,detect,detect,1079,"ation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variabl",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8274,Safety,detect,detecting,8274,"ment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8354,Safety,detect,detecting,8354,"ment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:8711,Safety,detect,detectable,8711,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:1919,Security,access,accessible,1919,"through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new fragment files, the name of the name of the; file should be lowercase and have extension .efp. The molecule name; within the file, e.g., $NH3 must correspond to the name of the; fragment file. Molecule Specification¶; EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the -- fragment separation scheme; described here. Each EFP fragment has its own; fragment section that includes the label efp, the name of the file; fragname from which EFP parameters are to be read, and the position; specification for the fragment in one of two ways, XYZABC or POINTS. For; XYZABC, the fragment specification is all",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:7403,Security,access,accessible,7403,"ay arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on i",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp-1.html:5096,Usability,simpl,simply,5096," mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if units au is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the",MatchSource.WIKI,psi4manual/1.3.2/libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html
https://psicode.org/psi4manual/1.3.2/libefp.html:496,Availability,down,downloads,496,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:618,Availability,avail,available,618,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:2222,Availability,error,error,2222," thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new fragment files, the name of the name of the; file should be lowercase and have extension .efp. The molecule name; within the file, e.g., $NH3 must correspond to the name of the; fragment file. Molecule Specification¶; EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the -- fragment separation scheme; described here. Each EFP fragment has its own; fragment section that includes the label efp, the name of the file; fragname from which EFP parameters are to be read, and the position; specification for the fragment in one of two ways, XYZABC or POINTS. For; XYZABC, the fragment specification is all on one line: efp and; fragname are followed by two sets of three numbers: the coordinates; of the center of mass of the fragment and the three Euler angles that; specify orientation about the center of mass. This format is compact; but not readily generated from molecule viewing so",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:7106,Availability,error,error,7106,"FP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:7138,Availability,error,error,7138,"forward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containi",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:7349,Availability,avail,available,7349,"n the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake v",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:510,Deployability,configurat,configuration,510,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:758,Deployability,install,installed,758,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:856,Deployability,install,installed,856,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:942,Deployability,install,install,942,"﻿. Interface to LIBEFP by I. Kaliman. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located t",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:1266,Deployability,install,installation,1266,"rns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variable PSIPATH. Fragments are searched; for first in the current directory, next in the paths of PSIPATH, and; finally in built-in library. If PSI4 is unable to find the; fragment, an error will be reported. Note; When constructing new ",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:7459,Deployability,configurat,configuration,7459,"e last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cm",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:7973,Deployability,install,installation,7973,"thod. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; R",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:8105,Deployability,install,installation,8105,"FP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    . ",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:9245,Deployability,update,updated,9245,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:5060,Energy Efficiency,energy,energy,5060," mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if units au is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:5276,Energy Efficiency,energy,energy,5276,"ons are encoded in the fragment file; and so are not read from input.; Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (symmetry c1; and no_com and no_reorient are implied).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt comp",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:5845,Energy Efficiency,energy,energy,5845,"ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is onl",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:5928,Energy Efficiency,energy,energy,5928,"}. Running EFP¶; EFP can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations a",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:6200,Energy Efficiency,energy,energy,6200,"fp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM;",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
https://psicode.org/psi4manual/1.3.2/libefp.html:6268,Energy Efficiency,energy,energy,6268,"fp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. PSI4 can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; SCF code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. Warning; Although the EFP geometry is specified alongside the QM; geometry in a molecule name {...} block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through activate(name) (where name was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, PSI4 is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM;",MatchSource.WIKI,psi4manual/1.3.2/libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp.html
